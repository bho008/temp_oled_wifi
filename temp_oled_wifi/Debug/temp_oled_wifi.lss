
temp_oled_wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000376  00800100  0000295a  000029ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000295a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e3  00800476  00800476  00002d64  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002dc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000610  00000000  00000000  00002e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c176  00000000  00000000  00003410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020c5  00000000  00000000  0000f586  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e71  00000000  00000000  0001164b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001544  00000000  00000000  000134bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d8f  00000000  00000000  00014a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000790e  00000000  00000000  0001778f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c8  00000000  00000000  0001f09d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__ctors_end>
       4:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__vector_1>
       8:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <__vector_2>
       c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      10:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      14:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      18:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      1c:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__vector_7>
      20:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      24:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      28:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      2c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      30:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      34:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      38:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      3c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      40:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__vector_16>
      44:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      48:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__vector_18>
      4c:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__vector_19>
      50:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      54:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      58:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      5c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      60:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      64:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 5e       	subi	r16, 0xE0	; 224
      6a:	bc e2       	ldi	r27, 0x2C	; 44
      6c:	61 3f       	cpi	r22, 0xF1	; 241
      6e:	dd 83       	std	Y+5, r29	; 0x05
      70:	c2 9c       	mul	r12, r2
      72:	7e 20       	and	r7, r14
      74:	a3 fd       	sbrc	r26, 3
      76:	1f 41       	sbci	r17, 0x1F	; 31
      78:	9d c3       	rjmp	.+1850   	; 0x7b4 <_ZN17DallasTemperature8getTempCEPh+0x1c>
      7a:	21 7f       	andi	r18, 0xF1	; 241
      7c:	fc a2       	std	Y+36, r15	; 0x24
      7e:	40 1e       	adc	r4, r16
      80:	5f 01       	movw	r10, r30
      82:	e3 bd       	out	0x23, r30	; 35
      84:	3e 60       	ori	r19, 0x0E	; 14
      86:	82 dc       	rcall	.-1788   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
      88:	23 7d       	andi	r18, 0xD3	; 211
      8a:	9f c1       	rjmp	.+830    	; 0x3ca <_ZN17DallasTemperature15readPowerSupplyEPh+0x3c>
      8c:	42 1c       	adc	r4, r2
      8e:	fe a0       	ldd	r15, Y+38	; 0x26
      90:	e1 bf       	out	0x31, r30	; 49
      92:	5d 03       	fmul	r21, r21
      94:	80 de       	rcall	.-768    	; 0xfffffd96 <__eeprom_end+0xff7efd96>
      96:	3c 62       	ori	r19, 0x2C	; 44
      98:	be e0       	ldi	r27, 0x0E	; 14
      9a:	02 5c       	subi	r16, 0xC2	; 194
      9c:	df 81       	ldd	r29, Y+7	; 0x07
      9e:	63 3d       	cpi	r22, 0xD3	; 211
      a0:	7c 22       	and	r7, r28
      a2:	c0 9e       	mul	r12, r16
      a4:	1d 43       	sbci	r17, 0x3D	; 61
      a6:	a1 ff       	sbrs	r26, 1
      a8:	46 18       	sub	r4, r6
      aa:	fa a4       	ldd	r15, Y+42	; 0x2a
      ac:	27 79       	andi	r18, 0x97	; 151
      ae:	9b c5       	rjmp	.+2870   	; 0xbe6 <_ZN7OneWire6searchEPh+0x11a>
      b0:	84 da       	rcall	.-2808   	; 0xfffff5ba <__eeprom_end+0xff7ef5ba>
      b2:	38 66       	ori	r19, 0x68	; 104
      b4:	e5 bb       	out	0x15, r30	; 21
      b6:	59 07       	cpc	r21, r25
      b8:	db 85       	ldd	r29, Y+11	; 0x0b
      ba:	67 39       	cpi	r22, 0x97	; 151
      bc:	ba e4       	ldi	r27, 0x4A	; 74
      be:	06 58       	subi	r16, 0x86	; 134
      c0:	19 47       	sbci	r17, 0x79	; 121
      c2:	a5 fb       	bst	r26, 5
      c4:	78 26       	eor	r7, r24
      c6:	c4 9a       	sbi	0x18, 4	; 24
      c8:	65 3b       	cpi	r22, 0xB5	; 181
      ca:	d9 87       	std	Y+9, r29	; 0x09
      cc:	04 5a       	subi	r16, 0xA4	; 164
      ce:	b8 e6       	ldi	r27, 0x68	; 104
      d0:	a7 f9       	bld	r26, 7
      d2:	1b 45       	sbci	r17, 0x5B	; 91
      d4:	c6 98       	cbi	0x18, 6	; 24
      d6:	7a 24       	eor	r7, r10
      d8:	f8 a6       	std	Y+40, r15	; 0x28
      da:	44 1a       	sub	r4, r20
      dc:	99 c7       	rjmp	.+3890   	; 0x1010 <_Z14float_to_uCharf+0x148>
      de:	25 7b       	andi	r18, 0xB5	; 181
      e0:	3a 64       	ori	r19, 0x4A	; 74
      e2:	86 d8       	rcall	.-3828   	; 0xfffff1f0 <__eeprom_end+0xff7ef1f0>
      e4:	5b 05       	cpc	r21, r11
      e6:	e7 b9       	out	0x07, r30	; 7
      e8:	8c d2       	rcall	.+1304   	; 0x602 <_ZN17DallasTemperature19requestTemperaturesEv+0x6>
      ea:	30 6e       	ori	r19, 0xE0	; 224
      ec:	ed b3       	in	r30, 0x1d	; 29
      ee:	51 0f       	add	r21, r17
      f0:	4e 10       	cpse	r4, r14
      f2:	f2 ac       	ldd	r15, Z+58	; 0x3a
      f4:	2f 71       	andi	r18, 0x1F	; 31
      f6:	93 cd       	rjmp	.-1242   	; 0xfffffc1e <__eeprom_end+0xff7efc1e>
      f8:	11 4f       	sbci	r17, 0xF1	; 241
      fa:	ad f3       	brhs	.-22     	; 0xe6 <__trampolines_end+0x7e>
      fc:	70 2e       	mov	r7, r16
      fe:	cc 92       	st	X, r12
     100:	d3 8d       	ldd	r29, Z+27	; 0x1b
     102:	6f 31       	cpi	r22, 0x1F	; 31
     104:	b2 ec       	ldi	r27, 0xC2	; 194
     106:	0e 50       	subi	r16, 0x0E	; 14
     108:	af f1       	brie	.+106    	; 0x174 <digital_pin_to_timer_PGM+0xb>
     10a:	13 4d       	sbci	r17, 0xD3	; 211
     10c:	ce 90       	ld	r12, -X
     10e:	72 2c       	mov	r7, r2
     110:	6d 33       	cpi	r22, 0x3D	; 61
     112:	d1 8f       	std	Z+25, r29	; 0x19
     114:	0c 52       	subi	r16, 0x2C	; 44
     116:	b0 ee       	ldi	r27, 0xE0	; 224
     118:	32 6c       	ori	r19, 0xC2	; 194
     11a:	8e d0       	rcall	.+284    	; 0x238 <_ZN17DallasTemperatureC1EP7OneWire+0x18>
     11c:	53 0d       	add	r21, r3
     11e:	ef b1       	in	r30, 0x0f	; 15
     120:	f0 ae       	std	Z+56, r15	; 0x38
     122:	4c 12       	cpse	r4, r28
     124:	91 cf       	rjmp	.-222    	; 0x48 <__SREG__+0x9>
     126:	2d 73       	andi	r18, 0x3D	; 61
     128:	ca 94       	dec	r12
     12a:	76 28       	or	r7, r6
     12c:	ab f5       	brvc	.+106    	; 0x198 <digital_pin_to_port_PGM+0x7>
     12e:	17 49       	sbci	r17, 0x97	; 151
     130:	08 56       	subi	r16, 0x68	; 104
     132:	b4 ea       	ldi	r27, 0xA4	; 164
     134:	69 37       	cpi	r22, 0x79	; 121
     136:	d5 8b       	std	Z+21, r29	; 0x15
     138:	57 09       	sbc	r21, r7
     13a:	eb b5       	in	r30, 0x2b	; 43
     13c:	36 68       	ori	r19, 0x86	; 134
     13e:	8a d4       	rcall	.+2324   	; 0xa54 <_ZN7OneWire4skipEv+0x2>
     140:	95 cb       	rjmp	.-2262   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
     142:	29 77       	andi	r18, 0x79	; 121
     144:	f4 aa       	std	Z+52, r15	; 0x34
     146:	48 16       	cp	r4, r24
     148:	e9 b7       	in	r30, 0x39	; 57
     14a:	55 0b       	sbc	r21, r21
     14c:	88 d6       	rcall	.+3344   	; 0xe5e <setup+0x4c>
     14e:	34 6a       	ori	r19, 0xA4	; 164
     150:	2b 75       	andi	r18, 0x5B	; 91
     152:	97 c9       	rjmp	.-3282   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     154:	4a 14       	cp	r4, r10
     156:	f6 a8       	ldd	r15, Z+54	; 0x36
     158:	74 2a       	or	r7, r20
     15a:	c8 96       	adiw	r24, 0x38	; 56
     15c:	15 4b       	sbci	r17, 0xB5	; 181
     15e:	a9 f7       	brne	.-22     	; 0x14a <__trampolines_end+0xe2>
     160:	b6 e8       	ldi	r27, 0x86	; 134
     162:	0a 54       	subi	r16, 0x4A	; 74
     164:	d7 89       	ldd	r29, Z+23	; 0x17
     166:	6b 35       	cpi	r22, 0x5B	; 91

00000168 <_ZL21tone_pin_to_timer_PGM>:
     168:	02                                                  .

00000169 <digital_pin_to_timer_PGM>:
     169:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     179:	00 00 00 00                                         ....

0000017d <digital_pin_to_bit_mask_PGM>:
     17d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     18d:	04 08 10 20                                         ... 

00000191 <digital_pin_to_port_PGM>:
     191:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1a1:	03 03 03 03                                         ....

000001a5 <port_to_input_PGM>:
     1a5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001af <port_to_output_PGM>:
     1af:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001b9 <port_to_mode_PGM>:
     1b9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000001c4 <__ctors_start>:
     1c4:	f7 09       	sbc	r31, r7
     1c6:	ab 0b       	sbc	r26, r27
     1c8:	1b 0c       	add	r1, r11

000001ca <__ctors_end>:
     1ca:	11 24       	eor	r1, r1
     1cc:	1f be       	out	0x3f, r1	; 63
     1ce:	cf ef       	ldi	r28, 0xFF	; 255
     1d0:	d8 e0       	ldi	r29, 0x08	; 8
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	cd bf       	out	0x3d, r28	; 61

000001d6 <__do_copy_data>:
     1d6:	14 e0       	ldi	r17, 0x04	; 4
     1d8:	a0 e0       	ldi	r26, 0x00	; 0
     1da:	b1 e0       	ldi	r27, 0x01	; 1
     1dc:	ea e5       	ldi	r30, 0x5A	; 90
     1de:	f9 e2       	ldi	r31, 0x29	; 41
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <__do_copy_data+0x10>
     1e2:	05 90       	lpm	r0, Z+
     1e4:	0d 92       	st	X+, r0
     1e6:	a6 37       	cpi	r26, 0x76	; 118
     1e8:	b1 07       	cpc	r27, r17
     1ea:	d9 f7       	brne	.-10     	; 0x1e2 <__do_copy_data+0xc>

000001ec <__do_clear_bss>:
     1ec:	25 e0       	ldi	r18, 0x05	; 5
     1ee:	a6 e7       	ldi	r26, 0x76	; 118
     1f0:	b4 e0       	ldi	r27, 0x04	; 4
     1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <.do_clear_bss_start>

000001f4 <.do_clear_bss_loop>:
     1f4:	1d 92       	st	X+, r1

000001f6 <.do_clear_bss_start>:
     1f6:	a9 35       	cpi	r26, 0x59	; 89
     1f8:	b2 07       	cpc	r27, r18
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <.do_clear_bss_loop>

000001fc <__do_global_ctors>:
     1fc:	10 e0       	ldi	r17, 0x00	; 0
     1fe:	c5 ee       	ldi	r28, 0xE5	; 229
     200:	d0 e0       	ldi	r29, 0x00	; 0
     202:	04 c0       	rjmp	.+8      	; 0x20c <__do_global_ctors+0x10>
     204:	21 97       	sbiw	r28, 0x01	; 1
     206:	fe 01       	movw	r30, r28
     208:	0e 94 cd 11 	call	0x239a	; 0x239a <__tablejump2__>
     20c:	c2 3e       	cpi	r28, 0xE2	; 226
     20e:	d1 07       	cpc	r29, r17
     210:	c9 f7       	brne	.-14     	; 0x204 <__do_global_ctors+0x8>
     212:	0e 94 27 0c 	call	0x184e	; 0x184e <main>
     216:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <_exit>

0000021a <__bad_interrupt>:
     21a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021e <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
  _AlarmHandler = handler;
}

// The default alarm handler
void DallasTemperature::defaultAlarmHandler(uint8_t* deviceAddress)
{
     21e:	08 95       	ret

00000220 <_ZN17DallasTemperatureC1EP7OneWire>:
extern "C" {
    #include "WConstants.h"
}
#endif

DallasTemperature::DallasTemperature(OneWire* _oneWire)
     220:	fc 01       	movw	r30, r24
  #if REQUIRESALARMS
  : _AlarmHandler(&defaultAlarmHandler)
     222:	8f e0       	ldi	r24, 0x0F	; 15
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	92 8b       	std	Z+18, r25	; 0x12
     228:	81 8b       	std	Z+17, r24	; 0x11
  #endif
{
  _wire = _oneWire;
     22a:	76 83       	std	Z+6, r23	; 0x06
     22c:	65 83       	std	Z+5, r22	; 0x05
  devices = 0;
     22e:	14 82       	std	Z+4, r1	; 0x04
  parasite = false;
     230:	10 82       	st	Z, r1
  bitResolution = 9;
     232:	89 e0       	ldi	r24, 0x09	; 9
     234:	81 83       	std	Z+1, r24	; 0x01
  waitForConversion = true;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	82 83       	std	Z+2, r24	; 0x02
  checkForConversion = true;
     23a:	83 83       	std	Z+3, r24	; 0x03
     23c:	08 95       	ret

0000023e <_ZN17DallasTemperature14getDeviceCountEv>:

// returns the number of devices found on the bus
uint8_t DallasTemperature::getDeviceCount(void)
{
  return devices;
}
     23e:	fc 01       	movw	r30, r24
     240:	84 81       	ldd	r24, Z+4	; 0x04
     242:	08 95       	ret

00000244 <_ZN17DallasTemperature12validAddressEPh>:

// returns true if address is valid
bool DallasTemperature::validAddress(uint8_t* deviceAddress)
{
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	eb 01       	movw	r28, r22
  return (_wire->crc8(deviceAddress, 7) == deviceAddress[7]);
     24a:	67 e0       	ldi	r22, 0x07	; 7
     24c:	ce 01       	movw	r24, r28
     24e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZN7OneWire4crc8EPKhh>
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	2f 81       	ldd	r18, Y+7	; 0x07
     256:	82 13       	cpse	r24, r18
     258:	90 e0       	ldi	r25, 0x00	; 0
}
     25a:	89 2f       	mov	r24, r25
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <_ZN17DallasTemperature10getAddressEPhh>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
{
     262:	ef 92       	push	r14
     264:	ff 92       	push	r15
     266:	0f 93       	push	r16
     268:	1f 93       	push	r17
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	8c 01       	movw	r16, r24
     270:	7b 01       	movw	r14, r22
     272:	d4 2f       	mov	r29, r20
  uint8_t depth = 0;

  _wire->reset_search();
     274:	fc 01       	movw	r30, r24
     276:	85 81       	ldd	r24, Z+5	; 0x05
     278:	96 81       	ldd	r25, Z+6	; 0x06
     27a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN7OneWire12reset_searchEv>

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
{
  uint8_t depth = 0;
     27e:	c0 e0       	ldi	r28, 0x00	; 0
     280:	0b c0       	rjmp	.+22     	; 0x298 <_ZN17DallasTemperature10getAddressEPhh+0x36>

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
     282:	cd 13       	cpse	r28, r29
     284:	06 c0       	rjmp	.+12     	; 0x292 <_ZN17DallasTemperature10getAddressEPhh+0x30>
     286:	b7 01       	movw	r22, r14
     288:	c8 01       	movw	r24, r16
     28a:	0e 94 22 01 	call	0x244	; 0x244 <_ZN17DallasTemperature12validAddressEPh>
     28e:	81 11       	cpse	r24, r1
     290:	0d c0       	rjmp	.+26     	; 0x2ac <_ZN17DallasTemperature10getAddressEPhh+0x4a>
    depth++;
     292:	cf 5f       	subi	r28, 0xFF	; 255
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
     294:	dc 17       	cp	r29, r28
     296:	48 f0       	brcs	.+18     	; 0x2aa <_ZN17DallasTemperature10getAddressEPhh+0x48>
     298:	b7 01       	movw	r22, r14
     29a:	f8 01       	movw	r30, r16
     29c:	85 81       	ldd	r24, Z+5	; 0x05
     29e:	96 81       	ldd	r25, Z+6	; 0x06
     2a0:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN7OneWire6searchEPh>
     2a4:	81 11       	cpse	r24, r1
     2a6:	ed cf       	rjmp	.-38     	; 0x282 <_ZN17DallasTemperature10getAddressEPhh+0x20>
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <_ZN17DallasTemperature10getAddressEPhh+0x4a>
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    depth++;
  }

  return false;
     2aa:	80 e0       	ldi	r24, 0x00	; 0
}
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	1f 91       	pop	r17
     2b2:	0f 91       	pop	r16
     2b4:	ff 90       	pop	r15
     2b6:	ef 90       	pop	r14
     2b8:	08 95       	ret

000002ba <_ZN17DallasTemperature14readScratchPadEPhS0_>:
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
}

// read device's scratch pad
void DallasTemperature::readScratchPad(uint8_t* deviceAddress, uint8_t* scratchPad)
{
     2ba:	ef 92       	push	r14
     2bc:	ff 92       	push	r15
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	ec 01       	movw	r28, r24
     2c8:	7b 01       	movw	r14, r22
     2ca:	8a 01       	movw	r16, r20
  // send the command
  _wire->reset();
     2cc:	8d 81       	ldd	r24, Y+5	; 0x05
     2ce:	9e 81       	ldd	r25, Y+6	; 0x06
     2d0:	0e 94 0c 04 	call	0x818	; 0x818 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
     2d4:	b7 01       	movw	r22, r14
     2d6:	8d 81       	ldd	r24, Y+5	; 0x05
     2d8:	9e 81       	ldd	r25, Y+6	; 0x06
     2da:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN7OneWire6selectEPKh>
  _wire->write(READSCRATCH);
     2de:	40 e0       	ldi	r20, 0x00	; 0
     2e0:	6e eb       	ldi	r22, 0xBE	; 190
     2e2:	8d 81       	ldd	r24, Y+5	; 0x05
     2e4:	9e 81       	ldd	r25, Y+6	; 0x06
     2e6:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7OneWire5writeEhh>

  
  // read the response

  // byte 0: temperature LSB
  scratchPad[TEMP_LSB] = _wire->read();
     2ea:	8d 81       	ldd	r24, Y+5	; 0x05
     2ec:	9e 81       	ldd	r25, Y+6	; 0x06
     2ee:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN7OneWire4readEv>
     2f2:	f8 01       	movw	r30, r16
     2f4:	80 83       	st	Z, r24

  // byte 1: temperature MSB
  scratchPad[TEMP_MSB] = _wire->read();
     2f6:	8d 81       	ldd	r24, Y+5	; 0x05
     2f8:	9e 81       	ldd	r25, Y+6	; 0x06
     2fa:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN7OneWire4readEv>
     2fe:	f8 01       	movw	r30, r16
     300:	81 83       	std	Z+1, r24	; 0x01

  // byte 2: high alarm temp
  scratchPad[HIGH_ALARM_TEMP] = _wire->read();
     302:	8d 81       	ldd	r24, Y+5	; 0x05
     304:	9e 81       	ldd	r25, Y+6	; 0x06
     306:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN7OneWire4readEv>
     30a:	f8 01       	movw	r30, r16
     30c:	82 83       	std	Z+2, r24	; 0x02

  // byte 3: low alarm temp
  scratchPad[LOW_ALARM_TEMP] = _wire->read();
     30e:	8d 81       	ldd	r24, Y+5	; 0x05
     310:	9e 81       	ldd	r25, Y+6	; 0x06
     312:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN7OneWire4readEv>
     316:	f8 01       	movw	r30, r16
     318:	83 83       	std	Z+3, r24	; 0x03

  // byte 4:
  // DS18S20: store for crc
  // DS18B20 & DS1822: configuration register
  scratchPad[CONFIGURATION] = _wire->read();
     31a:	8d 81       	ldd	r24, Y+5	; 0x05
     31c:	9e 81       	ldd	r25, Y+6	; 0x06
     31e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN7OneWire4readEv>
     322:	f8 01       	movw	r30, r16
     324:	84 83       	std	Z+4, r24	; 0x04

  // byte 5:
  // internal use & crc
  scratchPad[INTERNAL_BYTE] = _wire->read();
     326:	8d 81       	ldd	r24, Y+5	; 0x05
     328:	9e 81       	ldd	r25, Y+6	; 0x06
     32a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN7OneWire4readEv>
     32e:	f8 01       	movw	r30, r16
     330:	85 83       	std	Z+5, r24	; 0x05

  // byte 6:
  // DS18S20: COUNT_REMAIN
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_REMAIN] = _wire->read();
     332:	8d 81       	ldd	r24, Y+5	; 0x05
     334:	9e 81       	ldd	r25, Y+6	; 0x06
     336:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN7OneWire4readEv>
     33a:	f8 01       	movw	r30, r16
     33c:	86 83       	std	Z+6, r24	; 0x06

  // byte 7:
  // DS18S20: COUNT_PER_C
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_PER_C] = _wire->read();
     33e:	8d 81       	ldd	r24, Y+5	; 0x05
     340:	9e 81       	ldd	r25, Y+6	; 0x06
     342:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN7OneWire4readEv>
     346:	f8 01       	movw	r30, r16
     348:	87 83       	std	Z+7, r24	; 0x07

  // byte 8:
  // SCTRACHPAD_CRC
  scratchPad[SCRATCHPAD_CRC] = _wire->read();
     34a:	8d 81       	ldd	r24, Y+5	; 0x05
     34c:	9e 81       	ldd	r25, Y+6	; 0x06
     34e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_ZN7OneWire4readEv>
     352:	f8 01       	movw	r30, r16
     354:	80 87       	std	Z+8, r24	; 0x08

  _wire->reset();
     356:	8d 81       	ldd	r24, Y+5	; 0x05
     358:	9e 81       	ldd	r25, Y+6	; 0x06
     35a:	0e 94 0c 04 	call	0x818	; 0x818 <_ZN7OneWire5resetEv>
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	08 95       	ret

0000036c <_ZN17DallasTemperature11isConnectedEPhS0_>:
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DallasTemperature::isConnected(uint8_t* deviceAddress, uint8_t* scratchPad)
{
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	ea 01       	movw	r28, r20
  readScratchPad(deviceAddress, scratchPad);
     372:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_ZN17DallasTemperature14readScratchPadEPhS0_>
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
     376:	68 e0       	ldi	r22, 0x08	; 8
     378:	ce 01       	movw	r24, r28
     37a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZN7OneWire4crc8EPKhh>
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	28 85       	ldd	r18, Y+8	; 0x08
     382:	82 13       	cpse	r24, r18
     384:	90 e0       	ldi	r25, 0x00	; 0
}
     386:	89 2f       	mov	r24, r25
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <_ZN17DallasTemperature15readPowerSupplyEPh>:
  _wire->reset();
}

// reads the device's power requirements
bool DallasTemperature::readPowerSupply(uint8_t* deviceAddress)
{
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	ec 01       	movw	r28, r24
     398:	8b 01       	movw	r16, r22
  bool ret = false;
  _wire->reset();
     39a:	8d 81       	ldd	r24, Y+5	; 0x05
     39c:	9e 81       	ldd	r25, Y+6	; 0x06
     39e:	0e 94 0c 04 	call	0x818	; 0x818 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
     3a2:	b8 01       	movw	r22, r16
     3a4:	8d 81       	ldd	r24, Y+5	; 0x05
     3a6:	9e 81       	ldd	r25, Y+6	; 0x06
     3a8:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN7OneWire6selectEPKh>
  _wire->write(READPOWERSUPPLY);
     3ac:	40 e0       	ldi	r20, 0x00	; 0
     3ae:	64 eb       	ldi	r22, 0xB4	; 180
     3b0:	8d 81       	ldd	r24, Y+5	; 0x05
     3b2:	9e 81       	ldd	r25, Y+6	; 0x06
     3b4:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7OneWire5writeEhh>
  if (_wire->read_bit() == 0) ret = true;
     3b8:	8d 81       	ldd	r24, Y+5	; 0x05
     3ba:	9e 81       	ldd	r25, Y+6	; 0x06
     3bc:	0e 94 88 04 	call	0x910	; 0x910 <_ZN7OneWire8read_bitEv>
     3c0:	18 2f       	mov	r17, r24
  _wire->reset();
     3c2:	8d 81       	ldd	r24, Y+5	; 0x05
     3c4:	9e 81       	ldd	r25, Y+6	; 0x06
     3c6:	0e 94 0c 04 	call	0x818	; 0x818 <_ZN7OneWire5resetEv>
{
  bool ret = false;
  _wire->reset();
  _wire->select(deviceAddress);
  _wire->write(READPOWERSUPPLY);
  if (_wire->read_bit() == 0) ret = true;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	11 11       	cpse	r17, r1
     3ce:	80 e0       	ldi	r24, 0x00	; 0
  _wire->reset();
  return ret;
}
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	08 95       	ret

000003da <_ZN17DallasTemperature13getResolutionEPh>:
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
{
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	29 97       	sbiw	r28, 0x09	; 9
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
     3ee:	fb 01       	movw	r30, r22
     3f0:	20 81       	ld	r18, Z
     3f2:	20 31       	cpi	r18, 0x10	; 16
     3f4:	d9 f0       	breq	.+54     	; 0x42c <_ZN17DallasTemperature13getResolutionEPh+0x52>

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
     3f6:	ae 01       	movw	r20, r28
     3f8:	4f 5f       	subi	r20, 0xFF	; 255
     3fa:	5f 4f       	sbci	r21, 0xFF	; 255
     3fc:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN17DallasTemperature11isConnectedEPhS0_>
     400:	88 23       	and	r24, r24
     402:	b1 f0       	breq	.+44     	; 0x430 <_ZN17DallasTemperature13getResolutionEPh+0x56>
  {
	switch (scratchPad[CONFIGURATION])
     404:	8d 81       	ldd	r24, Y+5	; 0x05
     406:	8f 33       	cpi	r24, 0x3F	; 63
     408:	69 f0       	breq	.+26     	; 0x424 <_ZN17DallasTemperature13getResolutionEPh+0x4a>
     40a:	18 f4       	brcc	.+6      	; 0x412 <_ZN17DallasTemperature13getResolutionEPh+0x38>
     40c:	8f 31       	cpi	r24, 0x1F	; 31
     40e:	61 f0       	breq	.+24     	; 0x428 <_ZN17DallasTemperature13getResolutionEPh+0x4e>
     410:	07 c0       	rjmp	.+14     	; 0x420 <_ZN17DallasTemperature13getResolutionEPh+0x46>
     412:	8f 35       	cpi	r24, 0x5F	; 95
     414:	19 f0       	breq	.+6      	; 0x41c <_ZN17DallasTemperature13getResolutionEPh+0x42>
     416:	8f 37       	cpi	r24, 0x7F	; 127
     418:	69 f0       	breq	.+26     	; 0x434 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
     41a:	02 c0       	rjmp	.+4      	; 0x420 <_ZN17DallasTemperature13getResolutionEPh+0x46>
    {
      case TEMP_12_BIT:
        return 12;
        
      case TEMP_11_BIT:
        return 11;
     41c:	8b e0       	ldi	r24, 0x0B	; 11
     41e:	0b c0       	rjmp	.+22     	; 0x436 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
      case TEMP_9_BIT:
        return 9;
        
	}
  }
  return 0;
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	09 c0       	rjmp	.+18     	; 0x436 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
        
      case TEMP_11_BIT:
        return 11;
        
      case TEMP_10_BIT:
        return 10;
     424:	8a e0       	ldi	r24, 0x0A	; 10
     426:	07 c0       	rjmp	.+14     	; 0x436 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
        
      case TEMP_9_BIT:
        return 9;
     428:	89 e0       	ldi	r24, 0x09	; 9
     42a:	05 c0       	rjmp	.+10     	; 0x436 <_ZN17DallasTemperature13getResolutionEPh+0x5c>

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
{
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
     42c:	89 e0       	ldi	r24, 0x09	; 9
     42e:	03 c0       	rjmp	.+6      	; 0x436 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
      case TEMP_9_BIT:
        return 9;
        
	}
  }
  return 0;
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	01 c0       	rjmp	.+2      	; 0x436 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
  if (isConnected(deviceAddress, scratchPad))
  {
	switch (scratchPad[CONFIGURATION])
    {
      case TEMP_12_BIT:
        return 12;
     434:	8c e0       	ldi	r24, 0x0C	; 12
        return 9;
        
	}
  }
  return 0;
}
     436:	29 96       	adiw	r28, 0x09	; 9
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <_ZN17DallasTemperature5beginEv>:
  checkForConversion = true;
}

// initialise the bus
void DallasTemperature::begin(void)
{
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	61 97       	sbiw	r28, 0x11	; 17
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	de bf       	out	0x3e, r29	; 62
     460:	0f be       	out	0x3f, r0	; 63
     462:	cd bf       	out	0x3d, r28	; 61
     464:	8c 01       	movw	r16, r24
  DeviceAddress deviceAddress;

  _wire->reset_search();
     466:	fc 01       	movw	r30, r24
     468:	85 81       	ldd	r24, Z+5	; 0x05
     46a:	96 81       	ldd	r25, Z+6	; 0x06
     46c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN7OneWire12reset_searchEv>
  devices = 0; // Reset the number of devices when we enumerate wire devices
     470:	f8 01       	movw	r30, r16
     472:	14 82       	std	Z+4, r1	; 0x04

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
     474:	ee 24       	eor	r14, r14
     476:	e3 94       	inc	r14
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
     478:	37 c0       	rjmp	.+110    	; 0x4e8 <_ZN17DallasTemperature5beginEv+0xa0>
  {
    if (validAddress(deviceAddress))
     47a:	be 01       	movw	r22, r28
     47c:	66 5f       	subi	r22, 0xF6	; 246
     47e:	7f 4f       	sbci	r23, 0xFF	; 255
     480:	c8 01       	movw	r24, r16
     482:	0e 94 22 01 	call	0x244	; 0x244 <_ZN17DallasTemperature12validAddressEPh>
     486:	88 23       	and	r24, r24
     488:	79 f1       	breq	.+94     	; 0x4e8 <_ZN17DallasTemperature5beginEv+0xa0>
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
     48a:	f8 01       	movw	r30, r16
     48c:	80 81       	ld	r24, Z
     48e:	81 11       	cpse	r24, r1
     490:	0a c0       	rjmp	.+20     	; 0x4a6 <_ZN17DallasTemperature5beginEv+0x5e>
     492:	be 01       	movw	r22, r28
     494:	66 5f       	subi	r22, 0xF6	; 246
     496:	7f 4f       	sbci	r23, 0xFF	; 255
     498:	c8 01       	movw	r24, r16
     49a:	0e 94 c7 01 	call	0x38e	; 0x38e <_ZN17DallasTemperature15readPowerSupplyEPh>
     49e:	88 23       	and	r24, r24
     4a0:	11 f0       	breq	.+4      	; 0x4a6 <_ZN17DallasTemperature5beginEv+0x5e>
     4a2:	f8 01       	movw	r30, r16
     4a4:	e0 82       	st	Z, r14

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
     4a6:	ae 01       	movw	r20, r28
     4a8:	4f 5f       	subi	r20, 0xFF	; 255
     4aa:	5f 4f       	sbci	r21, 0xFF	; 255
     4ac:	be 01       	movw	r22, r28
     4ae:	66 5f       	subi	r22, 0xF6	; 246
     4b0:	7f 4f       	sbci	r23, 0xFF	; 255
     4b2:	c8 01       	movw	r24, r16
     4b4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_ZN17DallasTemperature14readScratchPadEPhS0_>

	  bitResolution = max(bitResolution, getResolution(deviceAddress));
     4b8:	f8 01       	movw	r30, r16
     4ba:	f1 80       	ldd	r15, Z+1	; 0x01
     4bc:	be 01       	movw	r22, r28
     4be:	66 5f       	subi	r22, 0xF6	; 246
     4c0:	7f 4f       	sbci	r23, 0xFF	; 255
     4c2:	c8 01       	movw	r24, r16
     4c4:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN17DallasTemperature13getResolutionEPh>
     4c8:	8f 15       	cp	r24, r15
     4ca:	18 f4       	brcc	.+6      	; 0x4d2 <_ZN17DallasTemperature5beginEv+0x8a>
     4cc:	f8 01       	movw	r30, r16
     4ce:	81 81       	ldd	r24, Z+1	; 0x01
     4d0:	06 c0       	rjmp	.+12     	; 0x4de <_ZN17DallasTemperature5beginEv+0x96>
     4d2:	be 01       	movw	r22, r28
     4d4:	66 5f       	subi	r22, 0xF6	; 246
     4d6:	7f 4f       	sbci	r23, 0xFF	; 255
     4d8:	c8 01       	movw	r24, r16
     4da:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN17DallasTemperature13getResolutionEPh>
     4de:	f8 01       	movw	r30, r16
     4e0:	81 83       	std	Z+1, r24	; 0x01

      devices++;
     4e2:	84 81       	ldd	r24, Z+4	; 0x04
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	84 83       	std	Z+4, r24	; 0x04
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
     4e8:	be 01       	movw	r22, r28
     4ea:	66 5f       	subi	r22, 0xF6	; 246
     4ec:	7f 4f       	sbci	r23, 0xFF	; 255
     4ee:	f8 01       	movw	r30, r16
     4f0:	85 81       	ldd	r24, Z+5	; 0x05
     4f2:	96 81       	ldd	r25, Z+6	; 0x06
     4f4:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN7OneWire6searchEPh>
     4f8:	81 11       	cpse	r24, r1
     4fa:	bf cf       	rjmp	.-130    	; 0x47a <_ZN17DallasTemperature5beginEv+0x32>
	  bitResolution = max(bitResolution, getResolution(deviceAddress));

      devices++;
    }
  }
}
     4fc:	61 96       	adiw	r28, 0x11	; 17
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	08 95       	ret

00000516 <_ZN17DallasTemperature21isConversionAvailableEPh>:
{
	return checkForConversion;
}

bool DallasTemperature::isConversionAvailable(uint8_t* deviceAddress)
{
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	29 97       	sbiw	r28, 0x09	; 9
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	de bf       	out	0x3e, r29	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	cd bf       	out	0x3d, r28	; 61
	// Check if the clock has been raised indicating the conversion is complete
  	ScratchPad scratchPad;
  	readScratchPad(deviceAddress, scratchPad);
     52a:	ae 01       	movw	r20, r28
     52c:	4f 5f       	subi	r20, 0xFF	; 255
     52e:	5f 4f       	sbci	r21, 0xFF	; 255
     530:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_ZN17DallasTemperature14readScratchPadEPhS0_>
	return scratchPad[0];
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	99 81       	ldd	r25, Y+1	; 0x01
     538:	91 11       	cpse	r25, r1
     53a:	01 c0       	rjmp	.+2      	; 0x53e <_ZN17DallasTemperature21isConversionAvailableEPh+0x28>
     53c:	80 e0       	ldi	r24, 0x00	; 0
}	
     53e:	29 96       	adiw	r28, 0x09	; 9
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
  return true;
}


void DallasTemperature::blockTillConversionComplete(uint8_t* bitResolution, uint8_t* deviceAddress)
{
     550:	cf 92       	push	r12
     552:	df 92       	push	r13
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	ec 01       	movw	r28, r24
     562:	8b 01       	movw	r16, r22
	if(deviceAddress != 0 && checkForConversion && !parasite)
     564:	45 2b       	or	r20, r21
     566:	f1 f0       	breq	.+60     	; 0x5a4 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
     568:	8b 81       	ldd	r24, Y+3	; 0x03
     56a:	88 23       	and	r24, r24
     56c:	d9 f0       	breq	.+54     	; 0x5a4 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
     56e:	88 81       	ld	r24, Y
     570:	81 11       	cpse	r24, r1
     572:	18 c0       	rjmp	.+48     	; 0x5a4 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
	{
	  	// Continue to check if the IC has responded with a temperature
	  	// NB: Could cause issues with multiple devices (one device may respond faster)
	  	unsigned long start = millis();
     574:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <millis>
     578:	6b 01       	movw	r12, r22
     57a:	7c 01       	movw	r14, r24
		while(!isConversionAvailable(0) && ((millis() - start) < 750));	
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	ce 01       	movw	r24, r28
     582:	0e 94 8b 02 	call	0x516	; 0x516 <_ZN17DallasTemperature21isConversionAvailableEPh>
     586:	81 11       	cpse	r24, r1
     588:	0d c0       	rjmp	.+26     	; 0x5a4 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
     58a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <millis>
     58e:	dc 01       	movw	r26, r24
     590:	cb 01       	movw	r24, r22
     592:	8c 19       	sub	r24, r12
     594:	9d 09       	sbc	r25, r13
     596:	ae 09       	sbc	r26, r14
     598:	bf 09       	sbc	r27, r15
     59a:	8e 3e       	cpi	r24, 0xEE	; 238
     59c:	92 40       	sbci	r25, 0x02	; 2
     59e:	a1 05       	cpc	r26, r1
     5a0:	b1 05       	cpc	r27, r1
     5a2:	60 f3       	brcs	.-40     	; 0x57c <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x2c>
	}
	
  	// Wait a fix number of cycles till conversion is complete (based on IC datasheet)
	  switch (*bitResolution)
     5a4:	f8 01       	movw	r30, r16
     5a6:	80 81       	ld	r24, Z
     5a8:	8a 30       	cpi	r24, 0x0A	; 10
     5aa:	59 f0       	breq	.+22     	; 0x5c2 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x72>
     5ac:	8b 30       	cpi	r24, 0x0B	; 11
     5ae:	81 f0       	breq	.+32     	; 0x5d0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x80>
     5b0:	89 30       	cpi	r24, 0x09	; 9
     5b2:	a9 f4       	brne	.+42     	; 0x5de <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8e>
	  {
	    case 9:
	      delay(94);
     5b4:	6e e5       	ldi	r22, 0x5E	; 94
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <delay>
	      break;
     5c0:	14 c0       	rjmp	.+40     	; 0x5ea <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x9a>
	    case 10:
	      delay(188);
     5c2:	6c eb       	ldi	r22, 0xBC	; 188
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <delay>
	      break;
     5ce:	0d c0       	rjmp	.+26     	; 0x5ea <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x9a>
	    case 11:
	      delay(375);
     5d0:	67 e7       	ldi	r22, 0x77	; 119
     5d2:	71 e0       	ldi	r23, 0x01	; 1
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <delay>
	      break;
     5dc:	06 c0       	rjmp	.+12     	; 0x5ea <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x9a>
	    case 12:
	    default:
	      delay(750);
     5de:	6e ee       	ldi	r22, 0xEE	; 238
     5e0:	72 e0       	ldi	r23, 0x02	; 2
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <delay>
	      break;
	  }

}
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	df 90       	pop	r13
     5f8:	cf 90       	pop	r12
     5fa:	08 95       	ret

000005fc <_ZN17DallasTemperature19requestTemperaturesEv>:
}	


// sends command for all devices on the bus to perform a temperature conversion
void DallasTemperature::requestTemperatures()
{
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	ec 01       	movw	r28, r24
  _wire->reset();
     602:	8d 81       	ldd	r24, Y+5	; 0x05
     604:	9e 81       	ldd	r25, Y+6	; 0x06
     606:	0e 94 0c 04 	call	0x818	; 0x818 <_ZN7OneWire5resetEv>
  _wire->skip();
     60a:	8d 81       	ldd	r24, Y+5	; 0x05
     60c:	9e 81       	ldd	r25, Y+6	; 0x06
     60e:	0e 94 29 05 	call	0xa52	; 0xa52 <_ZN7OneWire4skipEv>
  _wire->write(STARTCONVO, parasite);
     612:	48 81       	ld	r20, Y
     614:	64 e4       	ldi	r22, 0x44	; 68
     616:	8d 81       	ldd	r24, Y+5	; 0x05
     618:	9e 81       	ldd	r25, Y+6	; 0x06
     61a:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7OneWire5writeEhh>

  // ASYNC mode?
  if (!waitForConversion) return; 
     61e:	8a 81       	ldd	r24, Y+2	; 0x02
     620:	88 23       	and	r24, r24
     622:	41 f0       	breq	.+16     	; 0x634 <_ZN17DallasTemperature19requestTemperaturesEv+0x38>
  blockTillConversionComplete(&bitResolution, 0);
     624:	be 01       	movw	r22, r28
     626:	6f 5f       	subi	r22, 0xFF	; 255
     628:	7f 4f       	sbci	r23, 0xFF	; 255
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	ce 01       	movw	r24, r28
     630:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>

  return;
}
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
  return toFahrenheit(getTempCByIndex(deviceIndex));
}

// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
{
     63a:	8f 92       	push	r8
     63c:	9f 92       	push	r9
     63e:	af 92       	push	r10
     640:	bf 92       	push	r11
     642:	cf 92       	push	r12
     644:	df 92       	push	r13
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	fb 01       	movw	r30, r22
     652:	ea 01       	movw	r28, r20
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	98 2f       	mov	r25, r24
     65a:	88 27       	eor	r24, r24
     65c:	28 81       	ld	r18, Y
     65e:	bc 01       	movw	r22, r24
     660:	62 2b       	or	r22, r18

  switch (deviceAddress[0])
     662:	80 81       	ld	r24, Z
     664:	82 32       	cpi	r24, 0x22	; 34
     666:	31 f0       	breq	.+12     	; 0x674 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3a>
     668:	88 32       	cpi	r24, 0x28	; 40
     66a:	21 f0       	breq	.+8      	; 0x674 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3a>
     66c:	80 31       	cpi	r24, 0x10	; 16
     66e:	09 f0       	breq	.+2      	; 0x672 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x38>
     670:	7e c0       	rjmp	.+252    	; 0x76e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x134>
     672:	4c c0       	rjmp	.+152    	; 0x70c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xd2>
  {
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
     674:	8c 81       	ldd	r24, Y+4	; 0x04
     676:	8f 33       	cpi	r24, 0x3F	; 63
     678:	29 f1       	breq	.+74     	; 0x6c4 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x8a>
     67a:	18 f4       	brcc	.+6      	; 0x682 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x48>
     67c:	8f 31       	cpi	r24, 0x1F	; 31
     67e:	99 f1       	breq	.+102    	; 0x6e6 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xac>
     680:	76 c0       	rjmp	.+236    	; 0x76e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x134>
     682:	8f 35       	cpi	r24, 0x5F	; 95
     684:	81 f0       	breq	.+32     	; 0x6a6 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x6c>
     686:	8f 37       	cpi	r24, 0x7F	; 127
     688:	09 f0       	breq	.+2      	; 0x68c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x52>
     68a:	71 c0       	rjmp	.+226    	; 0x76e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x134>
      {
        case TEMP_12_BIT:
          return (float)rawTemperature * 0.0625;
     68c:	07 2e       	mov	r0, r23
     68e:	00 0c       	add	r0, r0
     690:	88 0b       	sbc	r24, r24
     692:	99 0b       	sbc	r25, r25
     694:	0e 94 89 10 	call	0x2112	; 0x2112 <__floatsisf>
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	40 e8       	ldi	r20, 0x80	; 128
     69e:	5d e3       	ldi	r21, 0x3D	; 61
     6a0:	0e 94 3e 11 	call	0x227c	; 0x227c <__mulsf3>
     6a4:	65 c0       	rjmp	.+202    	; 0x770 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
          break;
        case TEMP_11_BIT:
          return (float)(rawTemperature >> 1) * 0.125;
     6a6:	75 95       	asr	r23
     6a8:	67 95       	ror	r22
     6aa:	07 2e       	mov	r0, r23
     6ac:	00 0c       	add	r0, r0
     6ae:	88 0b       	sbc	r24, r24
     6b0:	99 0b       	sbc	r25, r25
     6b2:	0e 94 89 10 	call	0x2112	; 0x2112 <__floatsisf>
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	5e e3       	ldi	r21, 0x3E	; 62
     6be:	0e 94 3e 11 	call	0x227c	; 0x227c <__mulsf3>
     6c2:	56 c0       	rjmp	.+172    	; 0x770 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
     6c4:	75 95       	asr	r23
     6c6:	67 95       	ror	r22
     6c8:	75 95       	asr	r23
     6ca:	67 95       	ror	r22
     6cc:	07 2e       	mov	r0, r23
     6ce:	00 0c       	add	r0, r0
     6d0:	88 0b       	sbc	r24, r24
     6d2:	99 0b       	sbc	r25, r25
     6d4:	0e 94 89 10 	call	0x2112	; 0x2112 <__floatsisf>
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	40 e8       	ldi	r20, 0x80	; 128
     6de:	5e e3       	ldi	r21, 0x3E	; 62
     6e0:	0e 94 3e 11 	call	0x227c	; 0x227c <__mulsf3>
     6e4:	45 c0       	rjmp	.+138    	; 0x770 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
     6e6:	75 95       	asr	r23
     6e8:	67 95       	ror	r22
     6ea:	75 95       	asr	r23
     6ec:	67 95       	ror	r22
     6ee:	75 95       	asr	r23
     6f0:	67 95       	ror	r22
     6f2:	07 2e       	mov	r0, r23
     6f4:	00 0c       	add	r0, r0
     6f6:	88 0b       	sbc	r24, r24
     6f8:	99 0b       	sbc	r25, r25
     6fa:	0e 94 89 10 	call	0x2112	; 0x2112 <__floatsisf>
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	5f e3       	ldi	r21, 0x3F	; 63
     706:	0e 94 3e 11 	call	0x227c	; 0x227c <__mulsf3>
     70a:	32 c0       	rjmp	.+100    	; 0x770 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
      TEMPERATURE = TEMP_READ - 0.25 + --------------------------
                                               COUNT_PER_C
      */

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
     70c:	1f 81       	ldd	r17, Y+7	; 0x07
     70e:	75 95       	asr	r23
     710:	67 95       	ror	r22
     712:	07 2e       	mov	r0, r23
     714:	00 0c       	add	r0, r0
     716:	88 0b       	sbc	r24, r24
     718:	99 0b       	sbc	r25, r25
     71a:	0e 94 89 10 	call	0x2112	; 0x2112 <__floatsisf>
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e8       	ldi	r20, 0x80	; 128
     724:	5e e3       	ldi	r21, 0x3E	; 62
     726:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__subsf3>
     72a:	6b 01       	movw	r12, r22
     72c:	7c 01       	movw	r14, r24
     72e:	81 2f       	mov	r24, r17
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	2e 81       	ldd	r18, Y+6	; 0x06
     734:	82 1b       	sub	r24, r18
     736:	91 09       	sbc	r25, r1
     738:	bc 01       	movw	r22, r24
     73a:	99 0f       	add	r25, r25
     73c:	88 0b       	sbc	r24, r24
     73e:	99 0b       	sbc	r25, r25
     740:	0e 94 89 10 	call	0x2112	; 0x2112 <__floatsisf>
     744:	4b 01       	movw	r8, r22
     746:	5c 01       	movw	r10, r24
     748:	61 2f       	mov	r22, r17
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 87 10 	call	0x210e	; 0x210e <__floatunsisf>
     754:	9b 01       	movw	r18, r22
     756:	ac 01       	movw	r20, r24
     758:	c5 01       	movw	r24, r10
     75a:	b4 01       	movw	r22, r8
     75c:	0e 94 15 10 	call	0x202a	; 0x202a <__divsf3>
     760:	9b 01       	movw	r18, r22
     762:	ac 01       	movw	r20, r24
     764:	c7 01       	movw	r24, r14
     766:	b6 01       	movw	r22, r12
     768:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__addsf3>
     76c:	01 c0       	rjmp	.+2      	; 0x770 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
     76e:	04 c0       	rjmp	.+8      	; 0x778 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x13e>
     770:	56 2f       	mov	r21, r22
     772:	47 2f       	mov	r20, r23
     774:	38 2f       	mov	r19, r24
     776:	29 2f       	mov	r18, r25
      break;
  }
}
     778:	65 2f       	mov	r22, r21
     77a:	74 2f       	mov	r23, r20
     77c:	83 2f       	mov	r24, r19
     77e:	92 2f       	mov	r25, r18
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	ff 90       	pop	r15
     788:	ef 90       	pop	r14
     78a:	df 90       	pop	r13
     78c:	cf 90       	pop	r12
     78e:	bf 90       	pop	r11
     790:	af 90       	pop	r10
     792:	9f 90       	pop	r9
     794:	8f 90       	pop	r8
     796:	08 95       	ret

00000798 <_ZN17DallasTemperature8getTempCEPh>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(uint8_t* deviceAddress)
{
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	29 97       	sbiw	r28, 0x09	; 9
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	8c 01       	movw	r16, r24
     7b6:	7b 01       	movw	r14, r22
  // TODO: Multiple devices (up to 64) on the same bus may take 
  //       some time to negotiate a response
  // What happens in case of collision?

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
     7b8:	ae 01       	movw	r20, r28
     7ba:	4f 5f       	subi	r20, 0xFF	; 255
     7bc:	5f 4f       	sbci	r21, 0xFF	; 255
     7be:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN17DallasTemperature11isConnectedEPhS0_>
     7c2:	88 23       	and	r24, r24
     7c4:	41 f0       	breq	.+16     	; 0x7d6 <_ZN17DallasTemperature8getTempCEPh+0x3e>
     7c6:	ae 01       	movw	r20, r28
     7c8:	4f 5f       	subi	r20, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	b7 01       	movw	r22, r14
     7ce:	c8 01       	movw	r24, r16
     7d0:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <_ZN17DallasTemperature8getTempCEPh+0x46>
  return DEVICE_DISCONNECTED;
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	8e ef       	ldi	r24, 0xFE	; 254
     7dc:	92 ec       	ldi	r25, 0xC2	; 194
}
     7de:	29 96       	adiw	r28, 0x09	; 9
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	cd bf       	out	0x3d, r28	; 61
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	08 95       	ret

000007f8 <_ZN17DallasTemperature19isParasitePowerModeEv>:

// returns true if the bus requires parasite power
bool DallasTemperature::isParasitePowerMode(void)
{
  return parasite;
}
     7f8:	fc 01       	movw	r30, r24
     7fa:	80 81       	ld	r24, Z
     7fc:	08 95       	ret

000007fe <_ZN17DallasTemperature12toFahrenheitEf>:
#endif

// Convert float celsius to fahrenheit
float DallasTemperature::toFahrenheit(float celsius)
{
  return (celsius * 1.8) + 32;
     7fe:	26 e6       	ldi	r18, 0x66	; 102
     800:	36 e6       	ldi	r19, 0x66	; 102
     802:	46 ee       	ldi	r20, 0xE6	; 230
     804:	5f e3       	ldi	r21, 0x3F	; 63
     806:	0e 94 3e 11 	call	0x227c	; 0x227c <__mulsf3>
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	52 e4       	ldi	r21, 0x42	; 66
     812:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__addsf3>
}
     816:	08 95       	ret

00000818 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
     818:	ff 92       	push	r15
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
	IO_REG_TYPE mask = bitmask;
     822:	fc 01       	movw	r30, r24
     824:	d0 81       	ld	r29, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
     826:	01 81       	ldd	r16, Z+1	; 0x01
     828:	12 81       	ldd	r17, Z+2	; 0x02
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
     82a:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);
     82c:	f8 01       	movw	r30, r16
     82e:	81 81       	ldd	r24, Z+1	; 0x01
     830:	fd 2e       	mov	r15, r29
     832:	f0 94       	com	r15
     834:	8f 21       	and	r24, r15
     836:	81 83       	std	Z+1, r24	; 0x01
	interrupts();
     838:	78 94       	sei
     83a:	cc e7       	ldi	r28, 0x7C	; 124
     83c:	02 c0       	rjmp	.+4      	; 0x842 <_ZN7OneWire5resetEv+0x2a>
     83e:	c1 50       	subi	r28, 0x01	; 1
	// wait until the wire is high... just in case
	do {
		if (--retries == 0) return 0;
     840:	41 f1       	breq	.+80     	; 0x892 <_ZN7OneWire5resetEv+0x7a>
		delayMicroseconds(2);
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <delayMicroseconds>
	} while ( !DIRECT_READ(reg, mask));
     84a:	f8 01       	movw	r30, r16
     84c:	90 81       	ld	r25, Z
     84e:	9d 23       	and	r25, r29

	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
     850:	b1 f3       	breq	.-20     	; 0x83e <_ZN7OneWire5resetEv+0x26>
		if (--retries == 0) return 0;
		delayMicroseconds(2);
	} while ( !DIRECT_READ(reg, mask));

	noInterrupts();
     852:	f8 94       	cli
	DIRECT_WRITE_LOW(reg, mask);
     854:	82 81       	ldd	r24, Z+2	; 0x02
     856:	8f 21       	and	r24, r15
     858:	82 83       	std	Z+2, r24	; 0x02
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
     85a:	81 81       	ldd	r24, Z+1	; 0x01
     85c:	8d 2b       	or	r24, r29
     85e:	81 83       	std	Z+1, r24	; 0x01
	interrupts();
     860:	78 94       	sei
	delayMicroseconds(480);
     862:	80 ee       	ldi	r24, 0xE0	; 224
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <delayMicroseconds>
	noInterrupts();
     86a:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
     86c:	f8 01       	movw	r30, r16
     86e:	81 81       	ldd	r24, Z+1	; 0x01
     870:	f8 22       	and	r15, r24
     872:	f1 82       	std	Z+1, r15	; 0x01
	delayMicroseconds(70);
     874:	86 e4       	ldi	r24, 0x46	; 70
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <delayMicroseconds>
	r = !DIRECT_READ(reg, mask);
     87c:	f8 01       	movw	r30, r16
     87e:	80 81       	ld	r24, Z
     880:	d8 23       	and	r29, r24
     882:	c1 e0       	ldi	r28, 0x01	; 1
     884:	09 f0       	breq	.+2      	; 0x888 <_ZN7OneWire5resetEv+0x70>
     886:	c0 e0       	ldi	r28, 0x00	; 0
	interrupts();
     888:	78 94       	sei
	delayMicroseconds(410);
     88a:	8a e9       	ldi	r24, 0x9A	; 154
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <delayMicroseconds>
	return r;
}
     892:	8c 2f       	mov	r24, r28
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	08 95       	ret

000008a0 <_ZN7OneWire9write_bitEh>:
//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
{
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
	IO_REG_TYPE mask=bitmask;
     8a6:	fc 01       	movw	r30, r24
     8a8:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
     8aa:	c1 81       	ldd	r28, Z+1	; 0x01
     8ac:	d2 81       	ldd	r29, Z+2	; 0x02

	if (v & 1) {
     8ae:	60 ff       	sbrs	r22, 0
     8b0:	16 c0       	rjmp	.+44     	; 0x8de <_ZN7OneWire9write_bitEh+0x3e>
		noInterrupts();
     8b2:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
     8b4:	8a 81       	ldd	r24, Y+2	; 0x02
     8b6:	91 2f       	mov	r25, r17
     8b8:	90 95       	com	r25
     8ba:	89 23       	and	r24, r25
     8bc:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	81 2b       	or	r24, r17
     8c2:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(10);
     8c4:	8a e0       	ldi	r24, 0x0A	; 10
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
     8cc:	8a 81       	ldd	r24, Y+2	; 0x02
     8ce:	18 2b       	or	r17, r24
     8d0:	1a 83       	std	Y+2, r17	; 0x02
		interrupts();
     8d2:	78 94       	sei
		delayMicroseconds(55);
     8d4:	87 e3       	ldi	r24, 0x37	; 55
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <delayMicroseconds>
     8dc:	15 c0       	rjmp	.+42     	; 0x908 <__stack+0x9>
	} else {
		noInterrupts();
     8de:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	91 2f       	mov	r25, r17
     8e4:	90 95       	com	r25
     8e6:	89 23       	and	r24, r25
     8e8:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	81 2b       	or	r24, r17
     8ee:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(65);
     8f0:	81 e4       	ldi	r24, 0x41	; 65
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
     8f8:	8a 81       	ldd	r24, Y+2	; 0x02
     8fa:	18 2b       	or	r17, r24
     8fc:	1a 83       	std	Y+2, r17	; 0x02
		interrupts();
     8fe:	78 94       	sei
		delayMicroseconds(5);
     900:	85 e0       	ldi	r24, 0x05	; 5
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <delayMicroseconds>
	}
}
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	08 95       	ret

00000910 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
	IO_REG_TYPE mask=bitmask;
     918:	fc 01       	movw	r30, r24
     91a:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
     91c:	c1 81       	ldd	r28, Z+1	; 0x01
     91e:	d2 81       	ldd	r29, Z+2	; 0x02
	uint8_t r;

	noInterrupts();
     920:	f8 94       	cli
	DIRECT_MODE_OUTPUT(reg, mask);
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	81 2b       	or	r24, r17
     926:	89 83       	std	Y+1, r24	; 0x01
	DIRECT_WRITE_LOW(reg, mask);
     928:	8a 81       	ldd	r24, Y+2	; 0x02
     92a:	01 2f       	mov	r16, r17
     92c:	00 95       	com	r16
     92e:	80 23       	and	r24, r16
     930:	8a 83       	std	Y+2, r24	; 0x02
	delayMicroseconds(3);
     932:	83 e0       	ldi	r24, 0x03	; 3
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <delayMicroseconds>
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	08 23       	and	r16, r24
     93e:	09 83       	std	Y+1, r16	; 0x01
	delayMicroseconds(10);
     940:	8a e0       	ldi	r24, 0x0A	; 10
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <delayMicroseconds>
	r = DIRECT_READ(reg, mask);
     948:	c8 81       	ld	r28, Y
	interrupts();
     94a:	78 94       	sei
	delayMicroseconds(53);
     94c:	85 e3       	ldi	r24, 0x35	; 53
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <delayMicroseconds>
	DIRECT_MODE_OUTPUT(reg, mask);
	DIRECT_WRITE_LOW(reg, mask);
	delayMicroseconds(3);
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
	delayMicroseconds(10);
	r = DIRECT_READ(reg, mask);
     954:	1c 23       	and	r17, r28
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	09 f4       	brne	.+2      	; 0x95c <_ZN7OneWire8read_bitEv+0x4c>
     95a:	80 e0       	ldi	r24, 0x00	; 0
	interrupts();
	delayMicroseconds(53);
	return r;
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <_ZN7OneWire5writeEhh>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
     966:	bf 92       	push	r11
     968:	cf 92       	push	r12
     96a:	df 92       	push	r13
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	7c 01       	movw	r14, r24
     97a:	d6 2e       	mov	r13, r22
     97c:	b4 2e       	mov	r11, r20
     97e:	c8 e0       	ldi	r28, 0x08	; 8
     980:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     982:	11 e0       	ldi	r17, 0x01	; 1
	OneWire::write_bit( (bitMask & v)?1:0);
     984:	01 e0       	ldi	r16, 0x01	; 1
     986:	c1 2c       	mov	r12, r1
     988:	60 2f       	mov	r22, r16
     98a:	91 2f       	mov	r25, r17
     98c:	9d 21       	and	r25, r13
     98e:	09 f4       	brne	.+2      	; 0x992 <_ZN7OneWire5writeEhh+0x2c>
     990:	6c 2d       	mov	r22, r12
     992:	c7 01       	movw	r24, r14
     994:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN7OneWire9write_bitEh>
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     998:	11 0f       	add	r17, r17
     99a:	21 97       	sbiw	r28, 0x01	; 1
     99c:	a9 f7       	brne	.-22     	; 0x988 <_ZN7OneWire5writeEhh+0x22>
	OneWire::write_bit( (bitMask & v)?1:0);
    }
    if ( !power) {
     99e:	b1 10       	cpse	r11, r1
     9a0:	15 c0       	rjmp	.+42     	; 0x9cc <_ZN7OneWire5writeEhh+0x66>
	noInterrupts();
     9a2:	f8 94       	cli
	DIRECT_MODE_INPUT(baseReg, bitmask);
     9a4:	d7 01       	movw	r26, r14
     9a6:	11 96       	adiw	r26, 0x01	; 1
     9a8:	ed 91       	ld	r30, X+
     9aa:	fc 91       	ld	r31, X
     9ac:	12 97       	sbiw	r26, 0x02	; 2
     9ae:	91 81       	ldd	r25, Z+1	; 0x01
     9b0:	8c 91       	ld	r24, X
     9b2:	80 95       	com	r24
     9b4:	89 23       	and	r24, r25
     9b6:	81 83       	std	Z+1, r24	; 0x01
	DIRECT_WRITE_LOW(baseReg, bitmask);
     9b8:	11 96       	adiw	r26, 0x01	; 1
     9ba:	ed 91       	ld	r30, X+
     9bc:	fc 91       	ld	r31, X
     9be:	12 97       	sbiw	r26, 0x02	; 2
     9c0:	92 81       	ldd	r25, Z+2	; 0x02
     9c2:	8c 91       	ld	r24, X
     9c4:	80 95       	com	r24
     9c6:	89 23       	and	r24, r25
     9c8:	82 83       	std	Z+2, r24	; 0x02
	interrupts();
     9ca:	78 94       	sei
    }
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	df 90       	pop	r13
     9da:	cf 90       	pop	r12
     9dc:	bf 90       	pop	r11
     9de:	08 95       	ret

000009e0 <_ZN7OneWire4readEv>:
}

//
// Read a byte
//
uint8_t OneWire::read() {
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	7c 01       	movw	r14, r24
     9ee:	c8 e0       	ldi	r28, 0x08	; 8
     9f0:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
    uint8_t r = 0;
     9f2:	00 e0       	ldi	r16, 0x00	; 0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     9f4:	11 e0       	ldi	r17, 0x01	; 1
	if ( OneWire::read_bit()) r |= bitMask;
     9f6:	c7 01       	movw	r24, r14
     9f8:	0e 94 88 04 	call	0x910	; 0x910 <_ZN7OneWire8read_bitEv>
     9fc:	81 11       	cpse	r24, r1
     9fe:	01 2b       	or	r16, r17
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     a00:	11 0f       	add	r17, r17
     a02:	21 97       	sbiw	r28, 0x01	; 1
     a04:	c1 f7       	brne	.-16     	; 0x9f6 <_ZN7OneWire4readEv+0x16>
	if ( OneWire::read_bit()) r |= bitMask;
    }
    return r;
}
     a06:	80 2f       	mov	r24, r16
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	08 95       	ret

00000a16 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	7c 01       	movw	r14, r24
     a24:	8b 01       	movw	r16, r22
    uint8_t i;

    write(0x55);           // Choose ROM
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	65 e5       	ldi	r22, 0x55	; 85
     a2a:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7OneWire5writeEhh>
     a2e:	e8 01       	movw	r28, r16
     a30:	08 5f       	subi	r16, 0xF8	; 248
     a32:	1f 4f       	sbci	r17, 0xFF	; 255

    for (i = 0; i < 8; i++) write(rom[i]);
     a34:	69 91       	ld	r22, Y+
     a36:	40 e0       	ldi	r20, 0x00	; 0
     a38:	c7 01       	movw	r24, r14
     a3a:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7OneWire5writeEhh>
     a3e:	c0 17       	cp	r28, r16
     a40:	d1 07       	cpc	r29, r17
     a42:	c1 f7       	brne	.-16     	; 0xa34 <_ZN7OneWire6selectEPKh+0x1e>
}
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	08 95       	ret

00000a52 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC);           // Skip ROM
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	6c ec       	ldi	r22, 0xCC	; 204
     a56:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7OneWire5writeEhh>
     a5a:	08 95       	ret

00000a5c <_ZN7OneWire12reset_searchEv>:
//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
     a5c:	dc 01       	movw	r26, r24
  // reset the search state
  LastDiscrepancy = 0;
     a5e:	1b 96       	adiw	r26, 0x0b	; 11
     a60:	1c 92       	st	X, r1
     a62:	1b 97       	sbiw	r26, 0x0b	; 11
  LastDeviceFlag = FALSE;
     a64:	1d 96       	adiw	r26, 0x0d	; 13
     a66:	1c 92       	st	X, r1
     a68:	1d 97       	sbiw	r26, 0x0d	; 13
  LastFamilyDiscrepancy = 0;
     a6a:	1c 96       	adiw	r26, 0x0c	; 12
     a6c:	1c 92       	st	X, r1
     a6e:	1c 97       	sbiw	r26, 0x0c	; 12
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
     a70:	1a 96       	adiw	r26, 0x0a	; 10
     a72:	1c 92       	st	X, r1
     a74:	fc 01       	movw	r30, r24
     a76:	3a 96       	adiw	r30, 0x0a	; 10
     a78:	03 96       	adiw	r24, 0x03	; 3
     a7a:	12 92       	st	-Z, r1
    if ( i == 0) break;
     a7c:	e8 17       	cp	r30, r24
     a7e:	f9 07       	cpc	r31, r25
     a80:	e1 f7       	brne	.-8      	; 0xa7a <_ZN7OneWire12reset_searchEv+0x1e>
  }
}
     a82:	08 95       	ret

00000a84 <_ZN7OneWireC1Eh>:
*/

#include "OneWire.h"


OneWire::OneWire(uint8_t pin)
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	ec 01       	movw	r28, r24
     a8c:	16 2f       	mov	r17, r22
{
	pinMode(pin, INPUT);
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	81 2f       	mov	r24, r17
     a92:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <pinMode>
	bitmask = PIN_TO_BITMASK(pin);
     a96:	61 2f       	mov	r22, r17
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	fb 01       	movw	r30, r22
     a9c:	e3 58       	subi	r30, 0x83	; 131
     a9e:	fe 4f       	sbci	r31, 0xFE	; 254
     aa0:	e4 91       	lpm	r30, Z
     aa2:	e8 83       	st	Y, r30
	baseReg = PIN_TO_BASEREG(pin);
     aa4:	fb 01       	movw	r30, r22
     aa6:	ef 56       	subi	r30, 0x6F	; 111
     aa8:	fe 4f       	sbci	r31, 0xFE	; 254
     aaa:	e4 91       	lpm	r30, Z
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	eb 55       	subi	r30, 0x5B	; 91
     ab4:	fe 4f       	sbci	r31, 0xFE	; 254
     ab6:	85 91       	lpm	r24, Z+
     ab8:	94 91       	lpm	r25, Z
     aba:	9a 83       	std	Y+2, r25	; 0x02
     abc:	89 83       	std	Y+1, r24	; 0x01
#if ONEWIRE_SEARCH
	reset_search();
     abe:	ce 01       	movw	r24, r28
     ac0:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN7OneWire12reset_searchEv>
#endif
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	08 95       	ret

00000acc <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
     acc:	9f 92       	push	r9
     ace:	af 92       	push	r10
     ad0:	bf 92       	push	r11
     ad2:	cf 92       	push	r12
     ad4:	df 92       	push	r13
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	ec 01       	movw	r28, r24
     ae4:	c6 2e       	mov	r12, r22
     ae6:	d7 2e       	mov	r13, r23
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
     ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
     aea:	81 11       	cpse	r24, r1
     aec:	61 c0       	rjmp	.+194    	; 0xbb0 <_ZN7OneWire6searchEPh+0xe4>
   {
      // 1-Wire reset
      if (!reset())
     aee:	ce 01       	movw	r24, r28
     af0:	0e 94 0c 04 	call	0x818	; 0x818 <_ZN7OneWire5resetEv>
     af4:	81 11       	cpse	r24, r1
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <_ZN7OneWire6searchEPh+0x34>
      {
         // reset the search
         LastDiscrepancy = 0;
     af8:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
     afa:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
     afc:	1c 86       	std	Y+12, r1	; 0x0c
         return FALSE;
     afe:	72 c0       	rjmp	.+228    	; 0xbe4 <_ZN7OneWire6searchEPh+0x118>
      }

      // issue the search command
      write(0xF0);
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	60 ef       	ldi	r22, 0xF0	; 240
     b04:	ce 01       	movw	r24, r28
     b06:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN7OneWire5writeEhh>

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
   rom_byte_mask = 1;
     b0a:	01 e0       	ldi	r16, 0x01	; 1
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
     b0c:	f1 2c       	mov	r15, r1

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
     b0e:	a1 2c       	mov	r10, r1
   uint8_t id_bit, cmp_id_bit;

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
     b10:	ee 24       	eor	r14, r14
     b12:	e3 94       	inc	r14
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
     b14:	bb 24       	eor	r11, r11
     b16:	b3 94       	inc	r11
     b18:	91 2c       	mov	r9, r1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
     b1a:	ce 01       	movw	r24, r28
     b1c:	0e 94 88 04 	call	0x910	; 0x910 <_ZN7OneWire8read_bitEv>
     b20:	18 2f       	mov	r17, r24
         cmp_id_bit = read_bit();
     b22:	ce 01       	movw	r24, r28
     b24:	0e 94 88 04 	call	0x910	; 0x910 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
     b28:	11 30       	cpi	r17, 0x01	; 1
     b2a:	09 f0       	breq	.+2      	; 0xb2e <_ZN7OneWire6searchEPh+0x62>
     b2c:	4d c0       	rjmp	.+154    	; 0xbc8 <_ZN7OneWire6searchEPh+0xfc>
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	c9 f4       	brne	.+50     	; 0xb64 <_ZN7OneWire6searchEPh+0x98>
     b32:	35 c0       	rjmp	.+106    	; 0xb9e <_ZN7OneWire6searchEPh+0xd2>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
     b34:	8b 85       	ldd	r24, Y+11	; 0x0b
     b36:	e8 16       	cp	r14, r24
     b38:	48 f4       	brcc	.+18     	; 0xb4c <_ZN7OneWire6searchEPh+0x80>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
     b3a:	fe 01       	movw	r30, r28
     b3c:	ef 0d       	add	r30, r15
     b3e:	f1 1d       	adc	r31, r1
     b40:	83 81       	ldd	r24, Z+3	; 0x03
     b42:	80 23       	and	r24, r16
     b44:	1b 2d       	mov	r17, r11
     b46:	29 f4       	brne	.+10     	; 0xb52 <_ZN7OneWire6searchEPh+0x86>
     b48:	19 2d       	mov	r17, r9
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <_ZN7OneWire6searchEPh+0x86>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
     b4c:	1b 2d       	mov	r17, r11
     b4e:	e8 12       	cpse	r14, r24
     b50:	19 2d       	mov	r17, r9

               // if 0 was picked then record its position in LastZero
               if (search_direction == 0)
     b52:	11 11       	cpse	r17, r1
     b54:	05 c0       	rjmp	.+10     	; 0xb60 <_ZN7OneWire6searchEPh+0x94>
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
     b56:	88 e0       	ldi	r24, 0x08	; 8
     b58:	8e 15       	cp	r24, r14
     b5a:	c8 f1       	brcs	.+114    	; 0xbce <_ZN7OneWire6searchEPh+0x102>
                     LastFamilyDiscrepancy = last_zero;
     b5c:	ec 86       	std	Y+12, r14	; 0x0c
     b5e:	37 c0       	rjmp	.+110    	; 0xbce <_ZN7OneWire6searchEPh+0x102>
               }
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
     b60:	11 30       	cpi	r17, 0x01	; 1
     b62:	41 f4       	brne	.+16     	; 0xb74 <_ZN7OneWire6searchEPh+0xa8>
              ROM_NO[rom_byte_number] |= rom_byte_mask;
     b64:	fe 01       	movw	r30, r28
     b66:	ef 0d       	add	r30, r15
     b68:	f1 1d       	adc	r31, r1
     b6a:	83 81       	ldd	r24, Z+3	; 0x03
     b6c:	80 2b       	or	r24, r16
     b6e:	83 83       	std	Z+3, r24	; 0x03
     b70:	1b 2d       	mov	r17, r11
     b72:	08 c0       	rjmp	.+16     	; 0xb84 <_ZN7OneWire6searchEPh+0xb8>
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
     b74:	fe 01       	movw	r30, r28
     b76:	ef 0d       	add	r30, r15
     b78:	f1 1d       	adc	r31, r1
     b7a:	93 81       	ldd	r25, Z+3	; 0x03
     b7c:	80 2f       	mov	r24, r16
     b7e:	80 95       	com	r24
     b80:	89 23       	and	r24, r25
     b82:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
     b84:	61 2f       	mov	r22, r17
     b86:	ce 01       	movw	r24, r28
     b88:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
     b8c:	e3 94       	inc	r14
            rom_byte_mask <<= 1;
     b8e:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
     b90:	11 f4       	brne	.+4      	; 0xb96 <_ZN7OneWire6searchEPh+0xca>
            {
                rom_byte_number++;
     b92:	f3 94       	inc	r15
                rom_byte_mask = 1;
     b94:	0b 2d       	mov	r16, r11

      // issue the search command
      write(0xF0);

      // loop to do the search
      do
     b96:	87 e0       	ldi	r24, 0x07	; 7
     b98:	8f 15       	cp	r24, r15
     b9a:	08 f0       	brcs	.+2      	; 0xb9e <_ZN7OneWire6searchEPh+0xd2>
     b9c:	be cf       	rjmp	.-132    	; 0xb1a <_ZN7OneWire6searchEPh+0x4e>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
     b9e:	80 e4       	ldi	r24, 0x40	; 64
     ba0:	8e 15       	cp	r24, r14
     ba2:	30 f4       	brcc	.+12     	; 0xbb0 <_ZN7OneWire6searchEPh+0xe4>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
     ba4:	ab 86       	std	Y+11, r10	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
     ba6:	a1 10       	cpse	r10, r1
     ba8:	14 c0       	rjmp	.+40     	; 0xbd2 <_ZN7OneWire6searchEPh+0x106>
            LastDeviceFlag = TRUE;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	8d 87       	std	Y+13, r24	; 0x0d
     bae:	11 c0       	rjmp	.+34     	; 0xbd2 <_ZN7OneWire6searchEPh+0x106>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
     bb0:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
     bb2:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
     bb4:	1c 86       	std	Y+12, r1	; 0x0c
      search_result = FALSE;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	15 c0       	rjmp	.+42     	; 0xbe4 <_ZN7OneWire6searchEPh+0x118>
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
     bba:	81 91       	ld	r24, Z+
     bbc:	8d 93       	st	X+, r24
     bbe:	ec 17       	cp	r30, r28
     bc0:	fd 07       	cpc	r31, r29
     bc2:	d9 f7       	brne	.-10     	; 0xbba <_ZN7OneWire6searchEPh+0xee>
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	0e c0       	rjmp	.+28     	; 0xbe4 <_ZN7OneWire6searchEPh+0x118>
         if ((id_bit == 1) && (cmp_id_bit == 1))
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
     bc8:	18 13       	cpse	r17, r24
     bca:	d4 cf       	rjmp	.-88     	; 0xb74 <_ZN7OneWire6searchEPh+0xa8>
     bcc:	b3 cf       	rjmp	.-154    	; 0xb34 <_ZN7OneWire6searchEPh+0x68>
   uint8_t id_bit, cmp_id_bit;

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
     bce:	ae 2c       	mov	r10, r14
     bd0:	d1 cf       	rjmp	.-94     	; 0xb74 <_ZN7OneWire6searchEPh+0xa8>
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	88 23       	and	r24, r24
     bd6:	61 f3       	breq	.-40     	; 0xbb0 <_ZN7OneWire6searchEPh+0xe4>
     bd8:	fe 01       	movw	r30, r28
     bda:	33 96       	adiw	r30, 0x03	; 3
     bdc:	ac 2d       	mov	r26, r12
     bde:	bd 2d       	mov	r27, r13
     be0:	2b 96       	adiw	r28, 0x0b	; 11
     be2:	eb cf       	rjmp	.-42     	; 0xbba <_ZN7OneWire6searchEPh+0xee>
      search_result = FALSE;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   }
   return search_result;
  }
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	bf 90       	pop	r11
     bf6:	af 90       	pop	r10
     bf8:	9f 90       	pop	r9
     bfa:	08 95       	ret

00000bfc <_ZN7OneWire4crc8EPKhh>:
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
     bfc:	2f ef       	ldi	r18, 0xFF	; 255
     bfe:	26 0f       	add	r18, r22
     c00:	66 23       	and	r22, r22
     c02:	69 f0       	breq	.+26     	; 0xc1e <_ZN7OneWire4crc8EPKhh+0x22>
     c04:	a8 2f       	mov	r26, r24
     c06:	b9 2f       	mov	r27, r25
     c08:	80 e0       	ldi	r24, 0x00	; 0
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
     c0a:	9d 91       	ld	r25, X+
     c0c:	e8 2f       	mov	r30, r24
     c0e:	e9 27       	eor	r30, r25
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	e8 59       	subi	r30, 0x98	; 152
     c14:	ff 4f       	sbci	r31, 0xFF	; 255
     c16:	84 91       	lpm	r24, Z
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
     c18:	21 50       	subi	r18, 0x01	; 1
     c1a:	b8 f7       	brcc	.-18     	; 0xc0a <_ZN7OneWire4crc8EPKhh+0xe>
     c1c:	08 95       	ret
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;
     c1e:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
     c20:	08 95       	ret

00000c22 <_Z8i2c_initv>:
	#define I2C_PULLUPS_ENABLE         PORTC |= 1<<4; PORTC |= 1<<5;   // PIN A4&A5 (SDA&SCL)
	#define I2C_PULLUPS_DISABLE        PORTC &= ~(1<<4); PORTC &= ~(1<<5);
	
	void i2c_init(void) {
		#if defined(INTERNAL_I2C_PULLUPS)
		I2C_PULLUPS_ENABLE
     c22:	44 9a       	sbi	0x08, 4	; 8
     c24:	45 9a       	sbi	0x08, 5	; 8
		#else
		I2C_PULLUPS_DISABLE
		#endif
		TWSR = 0;                                    // no prescaler => prescaler = 1
     c26:	10 92 b9 00 	sts	0x00B9, r1
		TWBR = ((F_CPU / I2C_SPEED) - 16) / 2;   // change the I2C clock rate
     c2a:	88 e4       	ldi	r24, 0x48	; 72
     c2c:	80 93 b8 00 	sts	0x00B8, r24
		TWCR = 1<<TWEN;                              // enable twi module, no interrupt
     c30:	84 e0       	ldi	r24, 0x04	; 4
     c32:	80 93 bc 00 	sts	0x00BC, r24
     c36:	08 95       	ret

00000c38 <_Z19waitTransmissionI2Cv>:
		return i2c_read(0);
	}

	void waitTransmissionI2C() {
		uint16_t count = 255;
		while (!(TWCR & (1<<TWINT))) {
     c38:	8f ef       	ldi	r24, 0xFF	; 255
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	ec eb       	ldi	r30, 0xBC	; 188
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	0e c0       	rjmp	.+28     	; 0xc5e <_Z19waitTransmissionI2Cv+0x26>
     c42:	01 97       	sbiw	r24, 0x01	; 1
			count--;
			if (count==0) {              //we are in a blocking state => we don't insist
     c44:	61 f4       	brne	.+24     	; 0xc5e <_Z19waitTransmissionI2Cv+0x26>
				TWCR = 0;                  //and we force a reset on TWINT register
     c46:	10 92 bc 00 	sts	0x00BC, r1
				//neutralizeTime = micros(); //we take a timestamp here to neutralize the value during a short delay
				i2c_errors_count++;
     c4a:	80 91 a0 04 	lds	r24, 0x04A0
     c4e:	90 91 a1 04 	lds	r25, 0x04A1
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	90 93 a1 04 	sts	0x04A1, r25
     c58:	80 93 a0 04 	sts	0x04A0, r24
				break;
     c5c:	08 95       	ret
		return i2c_read(0);
	}

	void waitTransmissionI2C() {
		uint16_t count = 255;
		while (!(TWCR & (1<<TWINT))) {
     c5e:	20 81       	ld	r18, Z
     c60:	22 23       	and	r18, r18
     c62:	7c f7       	brge	.-34     	; 0xc42 <_Z19waitTransmissionI2Cv+0xa>
     c64:	08 95       	ret

00000c66 <_Z13i2c_rep_starth>:
			}
		}
	}


	void i2c_rep_start(uint8_t address) {
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	18 2f       	mov	r17, r24
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) ; // send REPEAT START condition
     c6e:	cc eb       	ldi	r28, 0xBC	; 188
     c70:	d0 e0       	ldi	r29, 0x00	; 0
     c72:	84 ea       	ldi	r24, 0xA4	; 164
     c74:	88 83       	st	Y, r24
		waitTransmissionI2C();                       // wait until transmission completed
     c76:	0e 94 1c 06 	call	0xc38	; 0xc38 <_Z19waitTransmissionI2Cv>
		TWDR = address;                              // send device address
     c7a:	10 93 bb 00 	sts	0x00BB, r17
		TWCR = (1<<TWINT) | (1<<TWEN);
     c7e:	84 e8       	ldi	r24, 0x84	; 132
     c80:	88 83       	st	Y, r24
		waitTransmissionI2C();                       // wail until transmission completed
     c82:	0e 94 1c 06 	call	0xc38	; 0xc38 <_Z19waitTransmissionI2Cv>
	}
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <_Z9i2c_writeh>:
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
		//  while(TWCR & (1<<TWSTO));                // <- can produce a blocking state with some WMP clones
	}

	void i2c_write(uint8_t data ) {
		TWDR = data;                                 // send data to the previously addressed device
     c8e:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1<<TWINT) | (1<<TWEN);
     c92:	84 e8       	ldi	r24, 0x84	; 132
     c94:	80 93 bc 00 	sts	0x00BC, r24
		waitTransmissionI2C();
     c98:	0e 94 1c 06 	call	0xc38	; 0xc38 <_Z19waitTransmissionI2Cv>
     c9c:	08 95       	ret

00000c9e <_Z12i2c_writeReghhh>:
			*from = *to;
			*to = tray;
		}
	}

	void i2c_writeReg(uint8_t add, uint8_t reg, uint8_t val) {
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	d6 2f       	mov	r29, r22
     ca4:	c4 2f       	mov	r28, r20
		i2c_rep_start(add<<1); // I2C write direction
     ca6:	88 0f       	add	r24, r24
     ca8:	0e 94 33 06 	call	0xc66	; 0xc66 <_Z13i2c_rep_starth>
		i2c_write(reg);        // register selection
     cac:	8d 2f       	mov	r24, r29
     cae:	0e 94 47 06 	call	0xc8e	; 0xc8e <_Z9i2c_writeh>
		i2c_write(val);        // value to write in register
     cb2:	8c 2f       	mov	r24, r28
     cb4:	0e 94 47 06 	call	0xc8e	; 0xc8e <_Z9i2c_writeh>
		TWCR = (1<<TWINT) | (1<<TWEN);
		waitTransmissionI2C();                       // wail until transmission completed
	}

	void i2c_stop(void) {
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     cb8:	84 e9       	ldi	r24, 0x94	; 148
     cba:	80 93 bc 00 	sts	0x00BC, r24
	void i2c_writeReg(uint8_t add, uint8_t reg, uint8_t val) {
		i2c_rep_start(add<<1); // I2C write direction
		i2c_write(reg);        // register selection
		i2c_write(val);        // value to write in register
		i2c_stop();
	}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <_Z17i2c_OLED_send_cmdh>:


	void i2c_OLED_send_cmd(uint8_t command) {
		TWBR = ((F_CPU / 400000L) - 16) / 2; // change the I2C clock rate
     cc4:	9c e0       	ldi	r25, 0x0C	; 12
     cc6:	90 93 b8 00 	sts	0x00B8, r25
		i2c_writeReg(OLED_address, 0x80, (uint8_t)command);
     cca:	48 2f       	mov	r20, r24
     ccc:	60 e8       	ldi	r22, 0x80	; 128
     cce:	8c e3       	ldi	r24, 0x3C	; 60
     cd0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_Z12i2c_writeReghhh>
     cd4:	08 95       	ret

00000cd6 <_Z13i2c_OLED_initv>:
	{
		i2c_OLED_init();
	}
	
	void  i2c_OLED_init(void){
		i2c_OLED_send_cmd(0xae);    //display off
     cd6:	8e ea       	ldi	r24, 0xAE	; 174
     cd8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
		i2c_OLED_send_cmd(0x2e);    //deactivate scrolling
     cdc:	8e e2       	ldi	r24, 0x2E	; 46
     cde:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
		i2c_OLED_send_cmd(0xa4);          //SET All pixels OFF
     ce2:	84 ea       	ldi	r24, 0xA4	; 164
     ce4:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
		//  i2c_OLED_send_cmd(0xa5);            //SET ALL pixels ON
		delay(50);
     ce8:	62 e3       	ldi	r22, 0x32	; 50
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <delay>
		i2c_OLED_send_cmd(0x20);            //Set Memory Addressing Mode
     cf4:	80 e2       	ldi	r24, 0x20	; 32
     cf6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
		i2c_OLED_send_cmd(0x02);            //Set Memory Addressing Mode to Page addressing mode(RESET)
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
		//  i2c_OLED_send_cmd(0xa0);      //colum address 0 mapped to SEG0 (POR)*** wires at bottom
		i2c_OLED_send_cmd(0xa1);    //colum address 127 mapped to SEG0 (POR) ** wires at top of board
     d00:	81 ea       	ldi	r24, 0xA1	; 161
     d02:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
		//  i2c_OLED_send_cmd(0xC0);            // Scan from Right to Left (POR)         *** wires at bottom
		i2c_OLED_send_cmd(0xC8);          // Scan from Left to Right               ** wires at top
     d06:	88 ec       	ldi	r24, 0xC8	; 200
     d08:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
		i2c_OLED_send_cmd(0xa6);            // Set WHITE chars on BLACK backround
     d0c:	86 ea       	ldi	r24, 0xA6	; 166
     d0e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>

		//  i2c_OLED_send_cmd(0xa7);            // Set BLACK chars on WHITE backround
		i2c_OLED_send_cmd(0x81);            // 81 Setup CONTRAST CONTROL, following byte is the contrast Value
     d12:	81 e8       	ldi	r24, 0x81	; 129
     d14:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
		i2c_OLED_send_cmd(0xff);            // af contrast value between 1 ( == dull) to 256 ( == bright)
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
		delay(20);
     d1e:	64 e1       	ldi	r22, 0x14	; 20
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <delay>
		i2c_OLED_send_cmd(0xaf);          //display on
     d2a:	8f ea       	ldi	r24, 0xAF	; 175
     d2c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
		delay(20);
     d30:	64 e1       	ldi	r22, 0x14	; 20
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <delay>
     d3c:	08 95       	ret

00000d3e <_Z5setXYhh>:
	}
	
	
	//==========================================================//
	void setXY(unsigned char row,unsigned char col)
	{
     d3e:	cf 93       	push	r28
     d40:	c6 2f       	mov	r28, r22
	}
	
	//==========================================================//
	void sendcommand(unsigned char com)
	{
		i2c_OLED_send_cmd(com);
     d42:	80 55       	subi	r24, 0x50	; 80
     d44:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
	
	//==========================================================//
	void setXY(unsigned char row,unsigned char col)
	{
		sendcommand(0xb0+row);                //set page address
		sendcommand(0x00+(8*col&0x0f));       //set low col address
     d48:	8c 2f       	mov	r24, r28
     d4a:	88 0f       	add	r24, r24
     d4c:	88 0f       	add	r24, r24
     d4e:	88 0f       	add	r24, r24
	}
	
	//==========================================================//
	void sendcommand(unsigned char com)
	{
		i2c_OLED_send_cmd(com);
     d50:	88 70       	andi	r24, 0x08	; 8
     d52:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
	//==========================================================//
	void setXY(unsigned char row,unsigned char col)
	{
		sendcommand(0xb0+row);                //set page address
		sendcommand(0x00+(8*col&0x0f));       //set low col address
		sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
     d56:	8c 2f       	mov	r24, r28
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	96 95       	lsr	r25
     d5c:	87 95       	ror	r24
     d5e:	8f 70       	andi	r24, 0x0F	; 15
	}
	
	//==========================================================//
	void sendcommand(unsigned char com)
	{
		i2c_OLED_send_cmd(com);
     d60:	80 5f       	subi	r24, 0xF0	; 240
     d62:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
	void setXY(unsigned char row,unsigned char col)
	{
		sendcommand(0xb0+row);                //set page address
		sendcommand(0x00+(8*col&0x0f));       //set low col address
		sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
	}
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <_Z18i2c_OLED_send_byteh>:
		TWBR = ((F_CPU / 400000L) - 16) / 2; // change the I2C clock rate
		i2c_writeReg(OLED_address, 0x80, (uint8_t)command);
	}

	void i2c_OLED_send_byte(uint8_t val) {
		TWBR = ((F_CPU / 400000L) - 16) / 2; // change the I2C clock rate
     d6a:	9c e0       	ldi	r25, 0x0C	; 12
     d6c:	90 93 b8 00 	sts	0x00B8, r25
		i2c_writeReg(OLED_address, 0x40, (uint8_t)val);
     d70:	48 2f       	mov	r20, r24
     d72:	60 e4       	ldi	r22, 0x40	; 64
     d74:	8c e3       	ldi	r24, 0x3C	; 60
     d76:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_Z12i2c_writeReghhh>
     d7a:	08 95       	ret

00000d7c <_Z13clear_displayv>:
		sendcommand(0xb0+row);                //set page address
		sendcommand(0x00+(8*col&0x0f));       //set low col address
		sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
	}
	void clear_display(void)
	{
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
		unsigned char i,k;
		for(k=0;k<8;k++)
     d80:	d0 e0       	ldi	r29, 0x00	; 0
		{
			setXY(k,0);
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	8d 2f       	mov	r24, r29
     d86:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_Z5setXYhh>
     d8a:	c0 e0       	ldi	r28, 0x00	; 0
	}
	
	//==========================================================//
	void SendChar(unsigned char data)
	{
		i2c_OLED_send_byte(data);
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_Z18i2c_OLED_send_byteh>
		unsigned char i,k;
		for(k=0;k<8;k++)
		{
			setXY(k,0);
			{
				for(i=0;i<128;i++)     //clear all COL
     d92:	cf 5f       	subi	r28, 0xFF	; 255
     d94:	c0 38       	cpi	r28, 0x80	; 128
     d96:	d1 f7       	brne	.-12     	; 0xd8c <_Z13clear_displayv+0x10>
		sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
	}
	void clear_display(void)
	{
		unsigned char i,k;
		for(k=0;k<8;k++)
     d98:	df 5f       	subi	r29, 0xFF	; 255
     d9a:	d8 30       	cpi	r29, 0x08	; 8
     d9c:	91 f7       	brne	.-28     	; 0xd82 <_Z13clear_displayv+0x6>
					SendChar(0);         //clear all COL
					//delay(10);
				}
			}
		}
	}
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	08 95       	ret

00000da4 <_Z7sendStrPKc>:
		delay(20);
	}
	
	//==========================================================//
	void sendStr(const char *string)
	{
     da4:	ef 92       	push	r14
     da6:	ff 92       	push	r15
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	ec 01       	movw	r28, r24
		unsigned char i=0;
		//setXY(0,0);
		while(*string)
     db2:	88 81       	ld	r24, Y
     db4:	81 11       	cpse	r24, r1
     db6:	21 c0       	rjmp	.+66     	; 0xdfa <_Z7sendStrPKc+0x56>
     db8:	25 c0       	rjmp	.+74     	; 0xe04 <_Z7sendStrPKc+0x60>
		{
			for(i=0;i<8;i++)
			{
				SendChar(myFont[*string-0x20][i]);
     dba:	e8 81       	ld	r30, Y
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	b0 97       	sbiw	r30, 0x20	; 32
     dc0:	ee 0f       	add	r30, r30
     dc2:	ff 1f       	adc	r31, r31
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	e0 0f       	add	r30, r16
     dce:	f1 1f       	adc	r31, r17
     dd0:	e0 50       	subi	r30, 0x00	; 0
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
	}
	
	//==========================================================//
	void SendChar(unsigned char data)
	{
		i2c_OLED_send_byte(data);
     dd4:	80 81       	ld	r24, Z
     dd6:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_Z18i2c_OLED_send_byteh>
			for(i=0;i<8;i++)
			{
				SendChar(myFont[*string-0x20][i]);

				// SendChar(*string);
				delay(10);
     dda:	6a e0       	ldi	r22, 0x0A	; 10
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <delay>
     de6:	0f 5f       	subi	r16, 0xFF	; 255
     de8:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		unsigned char i=0;
		//setXY(0,0);
		while(*string)
		{
			for(i=0;i<8;i++)
     dea:	08 30       	cpi	r16, 0x08	; 8
     dec:	11 05       	cpc	r17, r1
     dee:	29 f7       	brne	.-54     	; 0xdba <_Z7sendStrPKc+0x16>
				SendChar(myFont[*string-0x20][i]);

				// SendChar(*string);
				delay(10);
			}
			*string++;
     df0:	21 96       	adiw	r28, 0x01	; 1
	//==========================================================//
	void sendStr(const char *string)
	{
		unsigned char i=0;
		//setXY(0,0);
		while(*string)
     df2:	88 81       	ld	r24, Y
     df4:	81 11       	cpse	r24, r1
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <_Z7sendStrPKc+0x5a>
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <_Z7sendStrPKc+0x60>
		delay(20);
	}
	
	//==========================================================//
	void sendStr(const char *string)
	{
     dfa:	e1 2c       	mov	r14, r1
     dfc:	f1 2c       	mov	r15, r1
     dfe:	0e 2d       	mov	r16, r14
     e00:	1f 2d       	mov	r17, r15
     e02:	db cf       	rjmp	.-74     	; 0xdba <_Z7sendStrPKc+0x16>
				// SendChar(*string);
				delay(10);
			}
			*string++;
		}
	}
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	08 95       	ret

00000e12 <setup>:

//myI2c oled_screen;

void setup() {
	// put your setup code here, to run once:
	digitalWrite( 8 , LOW );
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	88 e0       	ldi	r24, 0x08	; 8
     e16:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <digitalWrite>
	pinMode( 8  , OUTPUT );
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	88 e0       	ldi	r24, 0x08	; 8
     e1e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <pinMode>
	digitalWrite( 10 , LOW );
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	8a e0       	ldi	r24, 0x0A	; 10
     e26:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <digitalWrite>
	pinMode( 10 , OUTPUT );
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	8a e0       	ldi	r24, 0x0A	; 10
     e2e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     e32:	26 e0       	ldi	r18, 0x06	; 6
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	52 ec       	ldi	r21, 0xC2	; 194
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	82 ea       	ldi	r24, 0xA2	; 162
     e3e:	94 e0       	ldi	r25, 0x04	; 4
     e40:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN14HardwareSerial5beginEmh>
	
	// start serial port
	Serial.begin(115200);
	Serial.println("Dallas Temperature IC Control Library Demo");
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	74 e0       	ldi	r23, 0x04	; 4
     e48:	82 ea       	ldi	r24, 0xA2	; 162
     e4a:	94 e0       	ldi	r25, 0x04	; 4
     e4c:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN5Print7printlnEPKc>

	//  Wire.begin();
	i2c_init();
     e50:	0e 94 11 06 	call	0xc22	; 0xc22 <_Z8i2c_initv>
		TWCR = 1<<TWEN;                              // enable twi module, no interrupt
	}
	
	void init_OLED(void)
	{
		i2c_OLED_init();
     e54:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_Z13i2c_OLED_initv>
	init_OLED();
	delay(10);
     e58:	6a e0       	ldi	r22, 0x0A	; 10
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <delay>
	clear_display();
     e64:	0e 94 be 06 	call	0xd7c	; 0xd7c <_Z13clear_displayv>
	delay(50);
     e68:	62 e3       	ldi	r22, 0x32	; 50
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <delay>
	}
	
	//==========================================================//
	void sendcommand(unsigned char com)
	{
		i2c_OLED_send_cmd(com);
     e74:	80 e2       	ldi	r24, 0x20	; 32
     e76:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
     e80:	86 ea       	ldi	r24, 0xA6	; 166
     e82:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z17i2c_OLED_send_cmdh>
	sendcommand(0x02);            //Set Memory Addressing Mode ab Page addressing mode(RESET)

	sendcommand(0xa6);            //Set Normal Display (default)


	setXY(1,1);
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_Z5setXYhh>
	sendStr(fill_string1);
     e8e:	87 e4       	ldi	r24, 0x47	; 71
     e90:	94 e0       	ldi	r25, 0x04	; 4
     e92:	0e 94 d2 06 	call	0xda4	; 0xda4 <_Z7sendStrPKc>
	setXY(2,1);
     e96:	61 e0       	ldi	r22, 0x01	; 1
     e98:	82 e0       	ldi	r24, 0x02	; 2
     e9a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_Z5setXYhh>
	sendStr(fill_string2);
     e9e:	8f e3       	ldi	r24, 0x3F	; 63
     ea0:	94 e0       	ldi	r25, 0x04	; 4
     ea2:	0e 94 d2 06 	call	0xda4	; 0xda4 <_Z7sendStrPKc>

	setXY(4, 1);
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	84 e0       	ldi	r24, 0x04	; 4
     eaa:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_Z5setXYhh>
	sendStr(fill_string3);
     eae:	89 e3       	ldi	r24, 0x39	; 57
     eb0:	94 e0       	ldi	r25, 0x04	; 4
     eb2:	0e 94 d2 06 	call	0xda4	; 0xda4 <_Z7sendStrPKc>
	setXY(5, 1);
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	85 e0       	ldi	r24, 0x05	; 5
     eba:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_Z5setXYhh>
	sendStr(fill_string4);
     ebe:	83 e3       	ldi	r24, 0x33	; 51
     ec0:	94 e0       	ldi	r25, 0x04	; 4
     ec2:	0e 94 d2 06 	call	0xda4	; 0xda4 <_Z7sendStrPKc>
     ec6:	08 95       	ret

00000ec8 <_Z14float_to_uCharf>:
	delay(1000);
}



unsigned char* float_to_uChar(float inFloat){
     ec8:	4f 92       	push	r4
     eca:	5f 92       	push	r5
     ecc:	6f 92       	push	r6
     ece:	7f 92       	push	r7
     ed0:	8f 92       	push	r8
     ed2:	9f 92       	push	r9
     ed4:	af 92       	push	r10
     ed6:	bf 92       	push	r11
     ed8:	cf 92       	push	r12
     eda:	df 92       	push	r13
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	2a 97       	sbiw	r28, 0x0a	; 10
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	66 2e       	mov	r6, r22
     efa:	77 2e       	mov	r7, r23
     efc:	98 2e       	mov	r9, r24
     efe:	89 2e       	mov	r8, r25
	unsigned char buf[10];
	unsigned char temp = 0;
	float temp_inFloat = inFloat;
	int i = 0;
	if(inFloat / 100 >= 1){
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	48 ec       	ldi	r20, 0xC8	; 200
     f06:	52 e4       	ldi	r21, 0x42	; 66
     f08:	0e 94 15 10 	call	0x202a	; 0x202a <__divsf3>
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e8       	ldi	r20, 0x80	; 128
     f12:	5f e3       	ldi	r21, 0x3F	; 63
     f14:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
     f18:	88 23       	and	r24, r24
     f1a:	ac f1       	brlt	.+106    	; 0xf86 <_Z14float_to_uCharf+0xbe>
		temp = 0;
		while(inFloat > 100){
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	48 ec       	ldi	r20, 0xC8	; 200
     f22:	52 e4       	ldi	r21, 0x42	; 66
     f24:	66 2d       	mov	r22, r6
     f26:	77 2d       	mov	r23, r7
     f28:	89 2d       	mov	r24, r9
     f2a:	98 2d       	mov	r25, r8
     f2c:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
     f30:	18 16       	cp	r1, r24
     f32:	ec f4       	brge	.+58     	; 0xf6e <_Z14float_to_uCharf+0xa6>
     f34:	16 2d       	mov	r17, r6
     f36:	07 2d       	mov	r16, r7
     f38:	f9 2c       	mov	r15, r9
     f3a:	e8 2c       	mov	r14, r8
     f3c:	d1 2c       	mov	r13, r1
			inFloat-= 100;
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	48 ec       	ldi	r20, 0xC8	; 200
     f44:	52 e4       	ldi	r21, 0x42	; 66
     f46:	61 2f       	mov	r22, r17
     f48:	70 2f       	mov	r23, r16
     f4a:	8f 2d       	mov	r24, r15
     f4c:	9e 2d       	mov	r25, r14
     f4e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__subsf3>
     f52:	16 2f       	mov	r17, r22
     f54:	07 2f       	mov	r16, r23
     f56:	f8 2e       	mov	r15, r24
     f58:	e9 2e       	mov	r14, r25
			temp++;
     f5a:	d3 94       	inc	r13
	unsigned char temp = 0;
	float temp_inFloat = inFloat;
	int i = 0;
	if(inFloat / 100 >= 1){
		temp = 0;
		while(inFloat > 100){
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	48 ec       	ldi	r20, 0xC8	; 200
     f62:	52 e4       	ldi	r21, 0x42	; 66
     f64:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
     f68:	18 16       	cp	r1, r24
     f6a:	4c f3       	brlt	.-46     	; 0xf3e <_Z14float_to_uCharf+0x76>
     f6c:	05 c0       	rjmp	.+10     	; 0xf78 <_Z14float_to_uCharf+0xb0>
     f6e:	16 2d       	mov	r17, r6
     f70:	07 2d       	mov	r16, r7
     f72:	f9 2c       	mov	r15, r9
     f74:	e8 2c       	mov	r14, r8
     f76:	d1 2c       	mov	r13, r1
			inFloat-= 100;
			temp++;
		}
		buf[i] = temp + 48;
     f78:	80 e3       	ldi	r24, 0x30	; 48
     f7a:	8d 0d       	add	r24, r13
     f7c:	89 83       	std	Y+1, r24	; 0x01
		i++;
     f7e:	cc 24       	eor	r12, r12
     f80:	c3 94       	inc	r12
     f82:	d1 2c       	mov	r13, r1
     f84:	06 c0       	rjmp	.+12     	; 0xf92 <_Z14float_to_uCharf+0xca>
     f86:	16 2d       	mov	r17, r6
     f88:	07 2d       	mov	r16, r7
     f8a:	f9 2c       	mov	r15, r9
     f8c:	e8 2c       	mov	r14, r8

unsigned char* float_to_uChar(float inFloat){
	unsigned char buf[10];
	unsigned char temp = 0;
	float temp_inFloat = inFloat;
	int i = 0;
     f8e:	c1 2c       	mov	r12, r1
     f90:	d1 2c       	mov	r13, r1
			temp++;
		}
		buf[i] = temp + 48;
		i++;
	}
	if(inFloat / 10 >= 1){
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e2       	ldi	r20, 0x20	; 32
     f98:	51 e4       	ldi	r21, 0x41	; 65
     f9a:	61 2f       	mov	r22, r17
     f9c:	70 2f       	mov	r23, r16
     f9e:	8f 2d       	mov	r24, r15
     fa0:	9e 2d       	mov	r25, r14
     fa2:	0e 94 15 10 	call	0x202a	; 0x202a <__divsf3>
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e8       	ldi	r20, 0x80	; 128
     fac:	5f e3       	ldi	r21, 0x3F	; 63
     fae:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
     fb2:	88 23       	and	r24, r24
     fb4:	84 f1       	brlt	.+96     	; 0x1016 <_Z14float_to_uCharf+0x14e>
		temp = 0;
		while(inFloat >= 10){
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e2       	ldi	r20, 0x20	; 32
     fbc:	51 e4       	ldi	r21, 0x41	; 65
     fbe:	61 2f       	mov	r22, r17
     fc0:	70 2f       	mov	r23, r16
     fc2:	8f 2d       	mov	r24, r15
     fc4:	9e 2d       	mov	r25, r14
     fc6:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
     fca:	88 23       	and	r24, r24
     fcc:	cc f0       	brlt	.+50     	; 0x1000 <_Z14float_to_uCharf+0x138>
     fce:	b1 2c       	mov	r11, r1
			inFloat-= 10;
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 e2       	ldi	r20, 0x20	; 32
     fd6:	51 e4       	ldi	r21, 0x41	; 65
     fd8:	61 2f       	mov	r22, r17
     fda:	70 2f       	mov	r23, r16
     fdc:	8f 2d       	mov	r24, r15
     fde:	9e 2d       	mov	r25, r14
     fe0:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__subsf3>
     fe4:	16 2f       	mov	r17, r22
     fe6:	07 2f       	mov	r16, r23
     fe8:	f8 2e       	mov	r15, r24
     fea:	e9 2e       	mov	r14, r25
			temp++;
     fec:	b3 94       	inc	r11
		buf[i] = temp + 48;
		i++;
	}
	if(inFloat / 10 >= 1){
		temp = 0;
		while(inFloat >= 10){
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e2       	ldi	r20, 0x20	; 32
     ff4:	51 e4       	ldi	r21, 0x41	; 65
     ff6:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
     ffa:	88 23       	and	r24, r24
     ffc:	4c f7       	brge	.-46     	; 0xfd0 <_Z14float_to_uCharf+0x108>
     ffe:	01 c0       	rjmp	.+2      	; 0x1002 <_Z14float_to_uCharf+0x13a>
    1000:	b1 2c       	mov	r11, r1
			inFloat-= 10;
			temp++;
		}
		buf[i] = temp+48;
    1002:	fe 01       	movw	r30, r28
    1004:	ec 0d       	add	r30, r12
    1006:	fd 1d       	adc	r31, r13
    1008:	80 e3       	ldi	r24, 0x30	; 48
    100a:	8b 0d       	add	r24, r11
    100c:	81 83       	std	Z+1, r24	; 0x01
		i++;
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	c8 1a       	sub	r12, r24
    1012:	d8 0a       	sbc	r13, r24
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <_Z14float_to_uCharf+0x15e>
	}
	else{
		buf[i] = 48;
    1016:	fe 01       	movw	r30, r28
    1018:	ec 0d       	add	r30, r12
    101a:	fd 1d       	adc	r31, r13
    101c:	80 e3       	ldi	r24, 0x30	; 48
    101e:	81 83       	std	Z+1, r24	; 0x01
		i++;
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	c8 1a       	sub	r12, r24
    1024:	d8 0a       	sbc	r13, r24
	}
	if(inFloat >= 0){
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	a9 01       	movw	r20, r18
    102c:	61 2f       	mov	r22, r17
    102e:	70 2f       	mov	r23, r16
    1030:	8f 2d       	mov	r24, r15
    1032:	9e 2d       	mov	r25, r14
    1034:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
    1038:	88 23       	and	r24, r24
    103a:	0c f4       	brge	.+2      	; 0x103e <_Z14float_to_uCharf+0x176>
    103c:	af c0       	rjmp	.+350    	; 0x119c <_Z14float_to_uCharf+0x2d4>
		temp = 0;
		while(inFloat >= 1){
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e8       	ldi	r20, 0x80	; 128
    1044:	5f e3       	ldi	r21, 0x3F	; 63
    1046:	61 2f       	mov	r22, r17
    1048:	70 2f       	mov	r23, r16
    104a:	8f 2d       	mov	r24, r15
    104c:	9e 2d       	mov	r25, r14
    104e:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
    1052:	88 23       	and	r24, r24
    1054:	cc f0       	brlt	.+50     	; 0x1088 <_Z14float_to_uCharf+0x1c0>
    1056:	b1 2c       	mov	r11, r1
			inFloat--;
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e8       	ldi	r20, 0x80	; 128
    105e:	5f e3       	ldi	r21, 0x3F	; 63
    1060:	61 2f       	mov	r22, r17
    1062:	70 2f       	mov	r23, r16
    1064:	8f 2d       	mov	r24, r15
    1066:	9e 2d       	mov	r25, r14
    1068:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__subsf3>
    106c:	16 2f       	mov	r17, r22
    106e:	07 2f       	mov	r16, r23
    1070:	f8 2e       	mov	r15, r24
    1072:	e9 2e       	mov	r14, r25
			temp++;
    1074:	b3 94       	inc	r11
		buf[i] = 48;
		i++;
	}
	if(inFloat >= 0){
		temp = 0;
		while(inFloat >= 1){
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e8       	ldi	r20, 0x80	; 128
    107c:	5f e3       	ldi	r21, 0x3F	; 63
    107e:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
    1082:	88 23       	and	r24, r24
    1084:	4c f7       	brge	.-46     	; 0x1058 <_Z14float_to_uCharf+0x190>
    1086:	01 c0       	rjmp	.+2      	; 0x108a <_Z14float_to_uCharf+0x1c2>
    1088:	b1 2c       	mov	r11, r1
			inFloat--;
			temp++;
		}
		buf[i] = temp + 48;
    108a:	e1 e0       	ldi	r30, 0x01	; 1
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	ec 0f       	add	r30, r28
    1090:	fd 1f       	adc	r31, r29
    1092:	ec 0d       	add	r30, r12
    1094:	fd 1d       	adc	r31, r13
    1096:	80 e3       	ldi	r24, 0x30	; 48
    1098:	8b 0d       	add	r24, r11
    109a:	80 83       	st	Z, r24
		i++;
    109c:	56 01       	movw	r10, r12
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	a8 1a       	sub	r10, r24
    10a2:	b8 0a       	sbc	r11, r24
	}
	
	buf[i] = '.';
    10a4:	e1 e0       	ldi	r30, 0x01	; 1
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	ec 0f       	add	r30, r28
    10aa:	fd 1f       	adc	r31, r29
    10ac:	ea 0d       	add	r30, r10
    10ae:	fb 1d       	adc	r31, r11
    10b0:	8e e2       	ldi	r24, 0x2E	; 46
    10b2:	80 83       	st	Z, r24
	i++;
    10b4:	26 01       	movw	r4, r12
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	48 0e       	add	r4, r24
    10ba:	51 1c       	adc	r5, r1
	
	if(inFloat >= 0.1){
    10bc:	2d ec       	ldi	r18, 0xCD	; 205
    10be:	3c ec       	ldi	r19, 0xCC	; 204
    10c0:	4c ec       	ldi	r20, 0xCC	; 204
    10c2:	5d e3       	ldi	r21, 0x3D	; 61
    10c4:	61 2f       	mov	r22, r17
    10c6:	70 2f       	mov	r23, r16
    10c8:	8f 2d       	mov	r24, r15
    10ca:	9e 2d       	mov	r25, r14
    10cc:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
    10d0:	88 23       	and	r24, r24
    10d2:	14 f4       	brge	.+4      	; 0x10d8 <_Z14float_to_uCharf+0x210>
    10d4:	23 c0       	rjmp	.+70     	; 0x111c <_Z14float_to_uCharf+0x254>
    10d6:	56 01       	movw	r10, r12
    10d8:	d1 2c       	mov	r13, r1
		temp = 0;
		while(inFloat >= 0.1){
			inFloat -= 0.1;
    10da:	2d ec       	ldi	r18, 0xCD	; 205
    10dc:	3c ec       	ldi	r19, 0xCC	; 204
    10de:	4c ec       	ldi	r20, 0xCC	; 204
    10e0:	5d e3       	ldi	r21, 0x3D	; 61
    10e2:	61 2f       	mov	r22, r17
    10e4:	70 2f       	mov	r23, r16
    10e6:	8f 2d       	mov	r24, r15
    10e8:	9e 2d       	mov	r25, r14
    10ea:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__subsf3>
    10ee:	16 2f       	mov	r17, r22
    10f0:	07 2f       	mov	r16, r23
    10f2:	f8 2e       	mov	r15, r24
    10f4:	e9 2e       	mov	r14, r25
			temp+= 1;
    10f6:	d3 94       	inc	r13
	buf[i] = '.';
	i++;
	
	if(inFloat >= 0.1){
		temp = 0;
		while(inFloat >= 0.1){
    10f8:	2d ec       	ldi	r18, 0xCD	; 205
    10fa:	3c ec       	ldi	r19, 0xCC	; 204
    10fc:	4c ec       	ldi	r20, 0xCC	; 204
    10fe:	5d e3       	ldi	r21, 0x3D	; 61
    1100:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
    1104:	88 23       	and	r24, r24
    1106:	4c f7       	brge	.-46     	; 0x10da <_Z14float_to_uCharf+0x212>
			inFloat -= 0.1;
			temp+= 1;
		}
		buf[i] = temp + 48;
    1108:	fe 01       	movw	r30, r28
    110a:	e4 0d       	add	r30, r4
    110c:	f5 1d       	adc	r31, r5
    110e:	80 e3       	ldi	r24, 0x30	; 48
    1110:	8d 0d       	add	r24, r13
    1112:	81 83       	std	Z+1, r24	; 0x01
		i++;
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	a8 0e       	add	r10, r24
    1118:	b1 1c       	adc	r11, r1
    111a:	08 c0       	rjmp	.+16     	; 0x112c <_Z14float_to_uCharf+0x264>
	}
	else {
		buf[i] = '0';
    111c:	fe 01       	movw	r30, r28
    111e:	e4 0d       	add	r30, r4
    1120:	f5 1d       	adc	r31, r5
    1122:	80 e3       	ldi	r24, 0x30	; 48
    1124:	81 83       	std	Z+1, r24	; 0x01
		i++;
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	a8 0e       	add	r10, r24
    112a:	b1 1c       	adc	r11, r1
	}
	temp = 0;
	if(inFloat >= 0.01){
    112c:	2a e0       	ldi	r18, 0x0A	; 10
    112e:	37 ed       	ldi	r19, 0xD7	; 215
    1130:	43 e2       	ldi	r20, 0x23	; 35
    1132:	5c e3       	ldi	r21, 0x3C	; 60
    1134:	61 2f       	mov	r22, r17
    1136:	70 2f       	mov	r23, r16
    1138:	8f 2d       	mov	r24, r15
    113a:	9e 2d       	mov	r25, r14
    113c:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
    1140:	88 23       	and	r24, r24
    1142:	f4 f0       	brlt	.+60     	; 0x1180 <_Z14float_to_uCharf+0x2b8>
    1144:	d1 2c       	mov	r13, r1
		while(inFloat >= 0.01){
			inFloat -= 0.01;
    1146:	2a e0       	ldi	r18, 0x0A	; 10
    1148:	37 ed       	ldi	r19, 0xD7	; 215
    114a:	43 e2       	ldi	r20, 0x23	; 35
    114c:	5c e3       	ldi	r21, 0x3C	; 60
    114e:	61 2f       	mov	r22, r17
    1150:	70 2f       	mov	r23, r16
    1152:	8f 2d       	mov	r24, r15
    1154:	9e 2d       	mov	r25, r14
    1156:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__subsf3>
    115a:	16 2f       	mov	r17, r22
    115c:	07 2f       	mov	r16, r23
    115e:	f8 2e       	mov	r15, r24
    1160:	e9 2e       	mov	r14, r25
			temp++;
    1162:	d3 94       	inc	r13
		buf[i] = '0';
		i++;
	}
	temp = 0;
	if(inFloat >= 0.01){
		while(inFloat >= 0.01){
    1164:	2a e0       	ldi	r18, 0x0A	; 10
    1166:	37 ed       	ldi	r19, 0xD7	; 215
    1168:	43 e2       	ldi	r20, 0x23	; 35
    116a:	5c e3       	ldi	r21, 0x3C	; 60
    116c:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
    1170:	88 23       	and	r24, r24
    1172:	4c f7       	brge	.-46     	; 0x1146 <_Z14float_to_uCharf+0x27e>
			inFloat -= 0.01;
			temp++;
		}
		buf[i] = temp+48;
    1174:	fe 01       	movw	r30, r28
    1176:	ea 0d       	add	r30, r10
    1178:	fb 1d       	adc	r31, r11
    117a:	80 e3       	ldi	r24, 0x30	; 48
    117c:	8d 0d       	add	r24, r13
    117e:	81 83       	std	Z+1, r24	; 0x01
		i++;

	}
	if(temp_inFloat < 100.00)
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	48 ec       	ldi	r20, 0xC8	; 200
    1186:	52 e4       	ldi	r21, 0x42	; 66
    1188:	66 2d       	mov	r22, r6
    118a:	77 2d       	mov	r23, r7
    118c:	89 2d       	mov	r24, r9
    118e:	98 2d       	mov	r25, r8
    1190:	0e 94 10 10 	call	0x2020	; 0x2020 <__cmpsf2>
    1194:	88 23       	and	r24, r24
    1196:	d4 f4       	brge	.+52     	; 0x11cc <_Z14float_to_uCharf+0x304>
	buf[5] = 0;
    1198:	1e 82       	std	Y+6, r1	; 0x06
    119a:	18 c0       	rjmp	.+48     	; 0x11cc <_Z14float_to_uCharf+0x304>
		}
		buf[i] = temp + 48;
		i++;
	}
	
	buf[i] = '.';
    119c:	8e e2       	ldi	r24, 0x2E	; 46
    119e:	fe 01       	movw	r30, r28
    11a0:	ec 0d       	add	r30, r12
    11a2:	fd 1d       	adc	r31, r13
    11a4:	81 83       	std	Z+1, r24	; 0x01
	i++;
    11a6:	26 01       	movw	r4, r12
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
    11aa:	48 1a       	sub	r4, r24
    11ac:	58 0a       	sbc	r5, r24
	
	if(inFloat >= 0.1){
    11ae:	2d ec       	ldi	r18, 0xCD	; 205
    11b0:	3c ec       	ldi	r19, 0xCC	; 204
    11b2:	4c ec       	ldi	r20, 0xCC	; 204
    11b4:	5d e3       	ldi	r21, 0x3D	; 61
    11b6:	61 2f       	mov	r22, r17
    11b8:	70 2f       	mov	r23, r16
    11ba:	8f 2d       	mov	r24, r15
    11bc:	9e 2d       	mov	r25, r14
    11be:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
    11c2:	88 23       	and	r24, r24
    11c4:	0c f0       	brlt	.+2      	; 0x11c8 <_Z14float_to_uCharf+0x300>
    11c6:	87 cf       	rjmp	.-242    	; 0x10d6 <_Z14float_to_uCharf+0x20e>
    11c8:	56 01       	movw	r10, r12
    11ca:	a8 cf       	rjmp	.-176    	; 0x111c <_Z14float_to_uCharf+0x254>

	}
	if(temp_inFloat < 100.00)
	buf[5] = 0;

	delay(1);
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <delay>

	return buf;
}
    11d8:	ce 01       	movw	r24, r28
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	2a 96       	adiw	r28, 0x0a	; 10
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	bf 90       	pop	r11
    11fa:	af 90       	pop	r10
    11fc:	9f 90       	pop	r9
    11fe:	8f 90       	pop	r8
    1200:	7f 90       	pop	r7
    1202:	6f 90       	pop	r6
    1204:	5f 90       	pop	r5
    1206:	4f 90       	pop	r4
    1208:	08 95       	ret

0000120a <loop>:
	setXY(5, 1);
	sendStr(fill_string4);
	
}

void loop() {
    120a:	4f 92       	push	r4
    120c:	5f 92       	push	r5
    120e:	6f 92       	push	r6
    1210:	7f 92       	push	r7
    1212:	8f 92       	push	r8
    1214:	9f 92       	push	r9
    1216:	af 92       	push	r10
    1218:	bf 92       	push	r11
    121a:	ef 92       	push	r14
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	62 97       	sbiw	r28, 0x12	; 18
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
	int numberOfDevices; // Number of temperature devices found

	DeviceAddress tempDeviceAddress; // We'll use this variable to store a found device address
	
	// For testing purposes, reset the bus every loop so we can see if any devices appear or fall off
	sensors.begin();
    1236:	86 e7       	ldi	r24, 0x76	; 118
    1238:	94 e0       	ldi	r25, 0x04	; 4
    123a:	0e 94 24 02 	call	0x448	; 0x448 <_ZN17DallasTemperature5beginEv>

	// Grab a count of devices on the wire
	numberOfDevices = sensors.getDeviceCount();
    123e:	86 e7       	ldi	r24, 0x76	; 118
    1240:	94 e0       	ldi	r25, 0x04	; 4
    1242:	0e 94 1f 01 	call	0x23e	; 0x23e <_ZN17DallasTemperature14getDeviceCountEv>
    1246:	e8 2e       	mov	r14, r24
    1248:	f1 2c       	mov	r15, r1

	//Serial.print(" Parasite:");
	if (sensors.isParasitePowerMode()) Serial.print("ON ");
    124a:	86 e7       	ldi	r24, 0x76	; 118
    124c:	94 e0       	ldi	r25, 0x04	; 4
    124e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_ZN17DallasTemperature19isParasitePowerModeEv>
    1252:	88 23       	and	r24, r24
    1254:	39 f0       	breq	.+14     	; 0x1264 <loop+0x5a>
    1256:	6c e2       	ldi	r22, 0x2C	; 44
    1258:	74 e0       	ldi	r23, 0x04	; 4
    125a:	82 ea       	ldi	r24, 0xA2	; 162
    125c:	94 e0       	ldi	r25, 0x04	; 4
    125e:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <_ZN5Print5printEPKc>
    1262:	04 c0       	rjmp	.+8      	; 0x126c <loop+0x62>
	
	//Serial.print("Count:");
	//Serial.print(numberOfDevices, DEC);
	// report parasite power requirements

	sensors.requestTemperatures(); // Send the command to get temperatures
    1264:	86 e7       	ldi	r24, 0x76	; 118
    1266:	94 e0       	ldi	r25, 0x04	; 4
    1268:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_ZN17DallasTemperature19requestTemperaturesEv>
	
	// Loop through each device, print out temperature data
	for(int i=0;i<numberOfDevices; i++)
    126c:	1e 14       	cp	r1, r14
    126e:	1f 04       	cpc	r1, r15
    1270:	0c f0       	brlt	.+2      	; 0x1274 <loop+0x6a>
    1272:	81 c0       	rjmp	.+258    	; 0x1376 <loop+0x16c>
    1274:	00 e0       	ldi	r16, 0x00	; 0
    1276:	10 e0       	ldi	r17, 0x00	; 0
	{
		// Search the wire for address
		if(sensors.getAddress(tempDeviceAddress, i))
    1278:	40 2f       	mov	r20, r16
    127a:	be 01       	movw	r22, r28
    127c:	65 5f       	subi	r22, 0xF5	; 245
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	86 e7       	ldi	r24, 0x76	; 118
    1282:	94 e0       	ldi	r25, 0x04	; 4
    1284:	0e 94 31 01 	call	0x262	; 0x262 <_ZN17DallasTemperature10getAddressEPhh>
    1288:	88 23       	and	r24, r24
    128a:	09 f4       	brne	.+2      	; 0x128e <loop+0x84>
    128c:	6e c0       	rjmp	.+220    	; 0x136a <loop+0x160>
			//Serial.print(" #");
			//Serial.print(i,DEC);
			//Serial.print("=");


			float tempC = sensors.getTempC(tempDeviceAddress);
    128e:	be 01       	movw	r22, r28
    1290:	65 5f       	subi	r22, 0xF5	; 245
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	86 e7       	ldi	r24, 0x76	; 118
    1296:	94 e0       	ldi	r25, 0x04	; 4
    1298:	0e 94 cc 03 	call	0x798	; 0x798 <_ZN17DallasTemperature8getTempCEPh>
			float tempF = DallasTemperature::toFahrenheit(tempC);
    129c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <_ZN17DallasTemperature12toFahrenheitEf>
    12a0:	4b 01       	movw	r8, r22
    12a2:	5c 01       	movw	r10, r24
			//Serial.print(DallasTemperature::toFahrenheit(tempC)); // Converts tempC to Fahrenheit
			setXY(1, 7);
    12a4:	67 e0       	ldi	r22, 0x07	; 7
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_Z5setXYhh>
			unsigned char* tempF_uchar;
			tempF_uchar = float_to_uChar(tempF);
    12ac:	c5 01       	movw	r24, r10
    12ae:	b4 01       	movw	r22, r8
    12b0:	0e 94 64 07 	call	0xec8	; 0xec8 <_Z14float_to_uCharf>
    12b4:	fc 01       	movw	r30, r24
    12b6:	de 01       	movw	r26, r28
    12b8:	11 96       	adiw	r26, 0x01	; 1
    12ba:	9c 01       	movw	r18, r24
    12bc:	29 5f       	subi	r18, 0xF9	; 249
    12be:	3f 4f       	sbci	r19, 0xFF	; 255
			char uchar[10];
			for(unsigned int i = 0; i < 7; i++){
				uchar[i] = (unsigned char)tempF_uchar[i];
    12c0:	91 91       	ld	r25, Z+
				if(uchar[i] > 57)
    12c2:	9a 33       	cpi	r25, 0x3A	; 58
    12c4:	10 f4       	brcc	.+4      	; 0x12ca <loop+0xc0>
			setXY(1, 7);
			unsigned char* tempF_uchar;
			tempF_uchar = float_to_uChar(tempF);
			char uchar[10];
			for(unsigned int i = 0; i < 7; i++){
				uchar[i] = (unsigned char)tempF_uchar[i];
    12c6:	9c 93       	st	X, r25
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <loop+0xc2>
				if(uchar[i] > 57)
				uchar[i] = 0;
    12ca:	1c 92       	st	X, r1
    12cc:	11 96       	adiw	r26, 0x01	; 1
			//Serial.print(DallasTemperature::toFahrenheit(tempC)); // Converts tempC to Fahrenheit
			setXY(1, 7);
			unsigned char* tempF_uchar;
			tempF_uchar = float_to_uChar(tempF);
			char uchar[10];
			for(unsigned int i = 0; i < 7; i++){
    12ce:	e2 17       	cp	r30, r18
    12d0:	f3 07       	cpc	r31, r19
    12d2:	b1 f7       	brne	.-20     	; 0x12c0 <loop+0xb6>
				uchar[i] = (unsigned char)tempF_uchar[i];
				if(uchar[i] > 57)
				uchar[i] = 0;
			}

			sendStr(uchar);
    12d4:	ce 01       	movw	r24, r28
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	0e 94 d2 06 	call	0xda4	; 0xda4 <_Z7sendStrPKc>

			if(low_temp > tempF || low_temp == 0){
    12dc:	40 90 98 04 	lds	r4, 0x0498
    12e0:	50 90 99 04 	lds	r5, 0x0499
    12e4:	60 90 9a 04 	lds	r6, 0x049A
    12e8:	70 90 9b 04 	lds	r7, 0x049B
    12ec:	a3 01       	movw	r20, r6
    12ee:	92 01       	movw	r18, r4
    12f0:	c5 01       	movw	r24, r10
    12f2:	b4 01       	movw	r22, r8
    12f4:	0e 94 10 10 	call	0x2020	; 0x2020 <__cmpsf2>
    12f8:	88 23       	and	r24, r24
    12fa:	4c f0       	brlt	.+18     	; 0x130e <loop+0x104>
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	a9 01       	movw	r20, r18
    1302:	c3 01       	movw	r24, r6
    1304:	b2 01       	movw	r22, r4
    1306:	0e 94 10 10 	call	0x2020	; 0x2020 <__cmpsf2>
    130a:	81 11       	cpse	r24, r1
    130c:	10 c0       	rjmp	.+32     	; 0x132e <loop+0x124>
				low_temp = tempF;
    130e:	80 92 98 04 	sts	0x0498, r8
    1312:	90 92 99 04 	sts	0x0499, r9
    1316:	a0 92 9a 04 	sts	0x049A, r10
    131a:	b0 92 9b 04 	sts	0x049B, r11
				setXY(4, 6);
    131e:	66 e0       	ldi	r22, 0x06	; 6
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_Z5setXYhh>
				sendStr(uchar);
    1326:	ce 01       	movw	r24, r28
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	0e 94 d2 06 	call	0xda4	; 0xda4 <_Z7sendStrPKc>
			}
			if(max_temp < tempF){
    132e:	20 91 9c 04 	lds	r18, 0x049C
    1332:	30 91 9d 04 	lds	r19, 0x049D
    1336:	40 91 9e 04 	lds	r20, 0x049E
    133a:	50 91 9f 04 	lds	r21, 0x049F
    133e:	c5 01       	movw	r24, r10
    1340:	b4 01       	movw	r22, r8
    1342:	0e 94 39 11 	call	0x2272	; 0x2272 <__gesf2>
    1346:	18 16       	cp	r1, r24
    1348:	84 f4       	brge	.+32     	; 0x136a <loop+0x160>
				max_temp = tempF;
    134a:	80 92 9c 04 	sts	0x049C, r8
    134e:	90 92 9d 04 	sts	0x049D, r9
    1352:	a0 92 9e 04 	sts	0x049E, r10
    1356:	b0 92 9f 04 	sts	0x049F, r11
				setXY(5, 6);
    135a:	66 e0       	ldi	r22, 0x06	; 6
    135c:	85 e0       	ldi	r24, 0x05	; 5
    135e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_Z5setXYhh>
				sendStr(uchar);
    1362:	ce 01       	movw	r24, r28
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	0e 94 d2 06 	call	0xda4	; 0xda4 <_Z7sendStrPKc>
	// report parasite power requirements

	sensors.requestTemperatures(); // Send the command to get temperatures
	
	// Loop through each device, print out temperature data
	for(int i=0;i<numberOfDevices; i++)
    136a:	0f 5f       	subi	r16, 0xFF	; 255
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	e0 16       	cp	r14, r16
    1370:	f1 06       	cpc	r15, r17
    1372:	09 f0       	breq	.+2      	; 0x1376 <loop+0x16c>
    1374:	81 cf       	rjmp	.-254    	; 0x1278 <loop+0x6e>
	}
	
	//Serial.println("");
	char buf[10];
	
	sprintf(buf,"%d",counter);
    1376:	80 91 97 04 	lds	r24, 0x0497
    137a:	1f 92       	push	r1
    137c:	8f 93       	push	r24
    137e:	80 e3       	ldi	r24, 0x30	; 48
    1380:	94 e0       	ldi	r25, 0x04	; 4
    1382:	9f 93       	push	r25
    1384:	8f 93       	push	r24
    1386:	8e 01       	movw	r16, r28
    1388:	0f 5f       	subi	r16, 0xFF	; 255
    138a:	1f 4f       	sbci	r17, 0xFF	; 255
    138c:	1f 93       	push	r17
    138e:	0f 93       	push	r16
    1390:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <sprintf>
	setXY(7, 1);
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	87 e0       	ldi	r24, 0x07	; 7
    1398:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_Z5setXYhh>
	sendStr(buf);
    139c:	c8 01       	movw	r24, r16
    139e:	0e 94 d2 06 	call	0xda4	; 0xda4 <_Z7sendStrPKc>
	
	counter++;
    13a2:	80 91 97 04 	lds	r24, 0x0497
    13a6:	8f 5f       	subi	r24, 0xFF	; 255
    13a8:	80 93 97 04 	sts	0x0497, r24
	delay(1000);
    13ac:	68 ee       	ldi	r22, 0xE8	; 232
    13ae:	73 e0       	ldi	r23, 0x03	; 3
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <delay>
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
}
    13c4:	62 96       	adiw	r28, 0x12	; 18
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	bf 90       	pop	r11
    13de:	af 90       	pop	r10
    13e0:	9f 90       	pop	r9
    13e2:	8f 90       	pop	r8
    13e4:	7f 90       	pop	r7
    13e6:	6f 90       	pop	r6
    13e8:	5f 90       	pop	r5
    13ea:	4f 90       	pop	r4
    13ec:	08 95       	ret

000013ee <_GLOBAL__sub_I_myFont>:

// Data wire is plugged into port 2 on the Arduino
#define ONE_WIRE_BUS 9
#define TEMPERATURE_PRECISION 9
// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);
    13ee:	69 e0       	ldi	r22, 0x09	; 9
    13f0:	89 e8       	ldi	r24, 0x89	; 137
    13f2:	94 e0       	ldi	r25, 0x04	; 4
    13f4:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN7OneWireC1Eh>

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);
    13f8:	69 e8       	ldi	r22, 0x89	; 137
    13fa:	74 e0       	ldi	r23, 0x04	; 4
    13fc:	86 e7       	ldi	r24, 0x76	; 118
    13fe:	94 e0       	ldi	r25, 0x04	; 4
    1400:	0e 94 10 01 	call	0x220	; 0x220 <_ZN17DallasTemperatureC1EP7OneWire>
    1404:	08 95       	ret

00001406 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1406:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1408:	91 8d       	ldd	r25, Z+25	; 0x19
    140a:	22 8d       	ldd	r18, Z+26	; 0x1a
    140c:	89 2f       	mov	r24, r25
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	80 5c       	subi	r24, 0xC0	; 192
    1412:	9f 4f       	sbci	r25, 0xFF	; 255
    1414:	82 1b       	sub	r24, r18
    1416:	91 09       	sbc	r25, r1
}
    1418:	8f 73       	andi	r24, 0x3F	; 63
    141a:	99 27       	eor	r25, r25
    141c:	08 95       	ret

0000141e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    141e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1420:	91 8d       	ldd	r25, Z+25	; 0x19
    1422:	82 8d       	ldd	r24, Z+26	; 0x1a
    1424:	98 17       	cp	r25, r24
    1426:	31 f0       	breq	.+12     	; 0x1434 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1428:	82 8d       	ldd	r24, Z+26	; 0x1a
    142a:	e8 0f       	add	r30, r24
    142c:	f1 1d       	adc	r31, r1
    142e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1438:	08 95       	ret

0000143a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    143a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    143c:	91 8d       	ldd	r25, Z+25	; 0x19
    143e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1440:	98 17       	cp	r25, r24
    1442:	61 f0       	breq	.+24     	; 0x145c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1444:	82 8d       	ldd	r24, Z+26	; 0x1a
    1446:	df 01       	movw	r26, r30
    1448:	a8 0f       	add	r26, r24
    144a:	b1 1d       	adc	r27, r1
    144c:	5d 96       	adiw	r26, 0x1d	; 29
    144e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1450:	92 8d       	ldd	r25, Z+26	; 0x1a
    1452:	9f 5f       	subi	r25, 0xFF	; 255
    1454:	9f 73       	andi	r25, 0x3F	; 63
    1456:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1460:	08 95       	ret

00001462 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1462:	81 ea       	ldi	r24, 0xA1	; 161
    1464:	9b e0       	ldi	r25, 0x0B	; 11
    1466:	89 2b       	or	r24, r25
    1468:	49 f0       	breq	.+18     	; 0x147c <_Z14serialEventRunv+0x1a>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	89 2b       	or	r24, r25
    1470:	29 f0       	breq	.+10     	; 0x147c <_Z14serialEventRunv+0x1a>
    1472:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_Z17Serial0_availablev>
    1476:	81 11       	cpse	r24, r1
    1478:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    147c:	08 95       	ret

0000147e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    147e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1480:	84 8d       	ldd	r24, Z+28	; 0x1c
    1482:	df 01       	movw	r26, r30
    1484:	a8 0f       	add	r26, r24
    1486:	b1 1d       	adc	r27, r1
    1488:	a3 5a       	subi	r26, 0xA3	; 163
    148a:	bf 4f       	sbci	r27, 0xFF	; 255
    148c:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    148e:	24 8d       	ldd	r18, Z+28	; 0x1c
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	2f 5f       	subi	r18, 0xFF	; 255
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
    1496:	2f 73       	andi	r18, 0x3F	; 63
    1498:	30 78       	andi	r19, 0x80	; 128
    149a:	33 23       	and	r19, r19
    149c:	34 f4       	brge	.+12     	; 0x14aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    149e:	21 50       	subi	r18, 0x01	; 1
    14a0:	31 09       	sbc	r19, r1
    14a2:	20 6c       	ori	r18, 0xC0	; 192
    14a4:	3f 6f       	ori	r19, 0xFF	; 255
    14a6:	2f 5f       	subi	r18, 0xFF	; 255
    14a8:	3f 4f       	sbci	r19, 0xFF	; 255
    14aa:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    14ac:	a6 89       	ldd	r26, Z+22	; 0x16
    14ae:	b7 89       	ldd	r27, Z+23	; 0x17
    14b0:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    14b2:	a0 89       	ldd	r26, Z+16	; 0x10
    14b4:	b1 89       	ldd	r27, Z+17	; 0x11
    14b6:	8c 91       	ld	r24, X
    14b8:	80 64       	ori	r24, 0x40	; 64
    14ba:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    14bc:	93 8d       	ldd	r25, Z+27	; 0x1b
    14be:	84 8d       	ldd	r24, Z+28	; 0x1c
    14c0:	98 13       	cpse	r25, r24
    14c2:	06 c0       	rjmp	.+12     	; 0x14d0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    14c4:	02 88       	ldd	r0, Z+18	; 0x12
    14c6:	f3 89       	ldd	r31, Z+19	; 0x13
    14c8:	e0 2d       	mov	r30, r0
    14ca:	80 81       	ld	r24, Z
    14cc:	8f 7d       	andi	r24, 0xDF	; 223
    14ce:	80 83       	st	Z, r24
    14d0:	08 95       	ret

000014d2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    14d8:	88 8d       	ldd	r24, Y+24	; 0x18
    14da:	81 11       	cpse	r24, r1
    14dc:	0f c0       	rjmp	.+30     	; 0x14fc <_ZN14HardwareSerial5flushEv+0x2a>
    14de:	18 c0       	rjmp	.+48     	; 0x1510 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	07 fc       	sbrc	r0, 7
    14e4:	0d c0       	rjmp	.+26     	; 0x1500 <_ZN14HardwareSerial5flushEv+0x2e>
    14e6:	90 81       	ld	r25, Z
    14e8:	95 ff       	sbrs	r25, 5
    14ea:	0a c0       	rjmp	.+20     	; 0x1500 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    14ec:	a8 89       	ldd	r26, Y+16	; 0x10
    14ee:	b9 89       	ldd	r27, Y+17	; 0x11
    14f0:	8c 91       	ld	r24, X
    14f2:	85 ff       	sbrs	r24, 5
    14f4:	05 c0       	rjmp	.+10     	; 0x1500 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
    14f6:	ce 01       	movw	r24, r28
    14f8:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    14fc:	ea 89       	ldd	r30, Y+18	; 0x12
    14fe:	fb 89       	ldd	r31, Y+19	; 0x13
    1500:	90 81       	ld	r25, Z
    1502:	95 fd       	sbrc	r25, 5
    1504:	ed cf       	rjmp	.-38     	; 0x14e0 <_ZN14HardwareSerial5flushEv+0xe>
    1506:	a8 89       	ldd	r26, Y+16	; 0x10
    1508:	b9 89       	ldd	r27, Y+17	; 0x11
    150a:	8c 91       	ld	r24, X
    150c:	86 ff       	sbrs	r24, 6
    150e:	e8 cf       	rjmp	.-48     	; 0x14e0 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	fc 01       	movw	r30, r24
  _written = true;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1524:	93 8d       	ldd	r25, Z+27	; 0x1b
    1526:	84 8d       	ldd	r24, Z+28	; 0x1c
    1528:	98 13       	cpse	r25, r24
    152a:	22 c0       	rjmp	.+68     	; 0x1570 <_ZN14HardwareSerial5writeEh+0x5a>
    152c:	a0 89       	ldd	r26, Z+16	; 0x10
    152e:	b1 89       	ldd	r27, Z+17	; 0x11
    1530:	8c 91       	ld	r24, X
    1532:	85 fd       	sbrc	r24, 5
    1534:	2f c0       	rjmp	.+94     	; 0x1594 <_ZN14HardwareSerial5writeEh+0x7e>
    1536:	1c c0       	rjmp	.+56     	; 0x1570 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	07 fc       	sbrc	r0, 7
    153c:	08 c0       	rjmp	.+16     	; 0x154e <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    153e:	e8 89       	ldd	r30, Y+16	; 0x10
    1540:	f9 89       	ldd	r31, Y+17	; 0x11
    1542:	80 81       	ld	r24, Z
    1544:	85 ff       	sbrs	r24, 5
    1546:	03 c0       	rjmp	.+6      	; 0x154e <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
    1548:	ce 01       	movw	r24, r28
    154a:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    154e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1550:	09 17       	cp	r16, r25
    1552:	91 f3       	breq	.-28     	; 0x1538 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1556:	fe 01       	movw	r30, r28
    1558:	e8 0f       	add	r30, r24
    155a:	f1 1d       	adc	r31, r1
    155c:	e3 5a       	subi	r30, 0xA3	; 163
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    1562:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1564:	ea 89       	ldd	r30, Y+18	; 0x12
    1566:	fb 89       	ldd	r31, Y+19	; 0x13
    1568:	80 81       	ld	r24, Z
    156a:	80 62       	ori	r24, 0x20	; 32
    156c:	80 83       	st	Z, r24
  
  return 1;
    156e:	1b c0       	rjmp	.+54     	; 0x15a6 <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1570:	23 8d       	ldd	r18, Z+27	; 0x1b
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	2f 5f       	subi	r18, 0xFF	; 255
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	2f 73       	andi	r18, 0x3F	; 63
    157a:	30 78       	andi	r19, 0x80	; 128
    157c:	33 23       	and	r19, r19
    157e:	34 f4       	brge	.+12     	; 0x158c <_ZN14HardwareSerial5writeEh+0x76>
    1580:	21 50       	subi	r18, 0x01	; 1
    1582:	31 09       	sbc	r19, r1
    1584:	20 6c       	ori	r18, 0xC0	; 192
    1586:	3f 6f       	ori	r19, 0xFF	; 255
    1588:	2f 5f       	subi	r18, 0xFF	; 255
    158a:	3f 4f       	sbci	r19, 0xFF	; 255
    158c:	16 2f       	mov	r17, r22
    158e:	ef 01       	movw	r28, r30
    1590:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1592:	dd cf       	rjmp	.-70     	; 0x154e <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1594:	a6 89       	ldd	r26, Z+22	; 0x16
    1596:	b7 89       	ldd	r27, Z+23	; 0x17
    1598:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    159a:	00 88       	ldd	r0, Z+16	; 0x10
    159c:	f1 89       	ldd	r31, Z+17	; 0x11
    159e:	e0 2d       	mov	r30, r0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 64       	ori	r24, 0x40	; 64
    15a4:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	08 95       	ret

000015b4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    15b4:	bf 92       	push	r11
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	ec 01       	movw	r28, r24
    15c8:	6a 01       	movw	r12, r20
    15ca:	7b 01       	movw	r14, r22
    15cc:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    15ce:	e8 89       	ldd	r30, Y+16	; 0x10
    15d0:	f9 89       	ldd	r31, Y+17	; 0x11
    15d2:	82 e0       	ldi	r24, 0x02	; 2
    15d4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    15d6:	41 15       	cp	r20, r1
    15d8:	51 4e       	sbci	r21, 0xE1	; 225
    15da:	61 05       	cpc	r22, r1
    15dc:	71 05       	cpc	r23, r1
    15de:	b1 f0       	breq	.+44     	; 0x160c <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	79 e0       	ldi	r23, 0x09	; 9
    15e4:	8d e3       	ldi	r24, 0x3D	; 61
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a7 01       	movw	r20, r14
    15ea:	96 01       	movw	r18, r12
    15ec:	0e 94 ab 11 	call	0x2356	; 0x2356 <__udivmodsi4>
    15f0:	89 01       	movw	r16, r18
    15f2:	9a 01       	movw	r18, r20
    15f4:	01 50       	subi	r16, 0x01	; 1
    15f6:	11 09       	sbc	r17, r1
    15f8:	21 09       	sbc	r18, r1
    15fa:	31 09       	sbc	r19, r1
    15fc:	36 95       	lsr	r19
    15fe:	27 95       	ror	r18
    1600:	17 95       	ror	r17
    1602:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1604:	01 15       	cp	r16, r1
    1606:	80 e1       	ldi	r24, 0x10	; 16
    1608:	18 07       	cpc	r17, r24
    160a:	a8 f0       	brcs	.+42     	; 0x1636 <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
    160c:	e8 89       	ldd	r30, Y+16	; 0x10
    160e:	f9 89       	ldd	r31, Y+17	; 0x11
    1610:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1612:	60 e8       	ldi	r22, 0x80	; 128
    1614:	74 e8       	ldi	r23, 0x84	; 132
    1616:	8e e1       	ldi	r24, 0x1E	; 30
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a7 01       	movw	r20, r14
    161c:	96 01       	movw	r18, r12
    161e:	0e 94 ab 11 	call	0x2356	; 0x2356 <__udivmodsi4>
    1622:	da 01       	movw	r26, r20
    1624:	c9 01       	movw	r24, r18
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	a1 09       	sbc	r26, r1
    162a:	b1 09       	sbc	r27, r1
    162c:	b6 95       	lsr	r27
    162e:	a7 95       	ror	r26
    1630:	97 95       	ror	r25
    1632:	87 95       	ror	r24
    1634:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1636:	ec 85       	ldd	r30, Y+12	; 0x0c
    1638:	fd 85       	ldd	r31, Y+13	; 0x0d
    163a:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    163c:	ee 85       	ldd	r30, Y+14	; 0x0e
    163e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1640:	00 83       	st	Z, r16

  _written = false;
    1642:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1644:	ec 89       	ldd	r30, Y+20	; 0x14
    1646:	fd 89       	ldd	r31, Y+21	; 0x15
    1648:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    164a:	ea 89       	ldd	r30, Y+18	; 0x12
    164c:	fb 89       	ldd	r31, Y+19	; 0x13
    164e:	80 81       	ld	r24, Z
    1650:	80 61       	ori	r24, 0x10	; 16
    1652:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1654:	ea 89       	ldd	r30, Y+18	; 0x12
    1656:	fb 89       	ldd	r31, Y+19	; 0x13
    1658:	80 81       	ld	r24, Z
    165a:	88 60       	ori	r24, 0x08	; 8
    165c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    165e:	ea 89       	ldd	r30, Y+18	; 0x12
    1660:	fb 89       	ldd	r31, Y+19	; 0x13
    1662:	80 81       	ld	r24, Z
    1664:	80 68       	ori	r24, 0x80	; 128
    1666:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1668:	ea 89       	ldd	r30, Y+18	; 0x12
    166a:	fb 89       	ldd	r31, Y+19	; 0x13
    166c:	80 81       	ld	r24, Z
    166e:	8f 7d       	andi	r24, 0xDF	; 223
    1670:	80 83       	st	Z, r24
}
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	cf 90       	pop	r12
    1682:	bf 90       	pop	r11
    1684:	08 95       	ret

00001686 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1686:	1f 92       	push	r1
    1688:	0f 92       	push	r0
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	0f 92       	push	r0
    168e:	11 24       	eor	r1, r1
    1690:	2f 93       	push	r18
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	af 93       	push	r26
    1698:	bf 93       	push	r27
    169a:	ef 93       	push	r30
    169c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    169e:	e0 91 b2 04 	lds	r30, 0x04B2
    16a2:	f0 91 b3 04 	lds	r31, 0x04B3
    16a6:	80 81       	ld	r24, Z
    16a8:	82 fd       	sbrc	r24, 2
    16aa:	14 c0       	rjmp	.+40     	; 0x16d4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    16ac:	e2 ea       	ldi	r30, 0xA2	; 162
    16ae:	f4 e0       	ldi	r31, 0x04	; 4
    16b0:	a6 89       	ldd	r26, Z+22	; 0x16
    16b2:	b7 89       	ldd	r27, Z+23	; 0x17
    16b4:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    16b6:	81 8d       	ldd	r24, Z+25	; 0x19
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    16bc:	92 8d       	ldd	r25, Z+26	; 0x1a
    16be:	89 17       	cp	r24, r25
    16c0:	71 f0       	breq	.+28     	; 0x16de <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
    16c2:	df 01       	movw	r26, r30
    16c4:	e1 8d       	ldd	r30, Z+25	; 0x19
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	ee 55       	subi	r30, 0x5E	; 94
    16ca:	fb 4f       	sbci	r31, 0xFB	; 251
    16cc:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    16ce:	59 96       	adiw	r26, 0x19	; 25
    16d0:	8c 93       	st	X, r24
    16d2:	05 c0       	rjmp	.+10     	; 0x16de <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    16d4:	e0 91 b8 04 	lds	r30, 0x04B8
    16d8:	f0 91 b9 04 	lds	r31, 0x04B9
    16dc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    16de:	ff 91       	pop	r31
    16e0:	ef 91       	pop	r30
    16e2:	bf 91       	pop	r27
    16e4:	af 91       	pop	r26
    16e6:	9f 91       	pop	r25
    16e8:	8f 91       	pop	r24
    16ea:	2f 91       	pop	r18
    16ec:	0f 90       	pop	r0
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	0f 90       	pop	r0
    16f2:	1f 90       	pop	r1
    16f4:	18 95       	reti

000016f6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    16f6:	1f 92       	push	r1
    16f8:	0f 92       	push	r0
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	0f 92       	push	r0
    16fe:	11 24       	eor	r1, r1
    1700:	2f 93       	push	r18
    1702:	3f 93       	push	r19
    1704:	4f 93       	push	r20
    1706:	5f 93       	push	r21
    1708:	6f 93       	push	r22
    170a:	7f 93       	push	r23
    170c:	8f 93       	push	r24
    170e:	9f 93       	push	r25
    1710:	af 93       	push	r26
    1712:	bf 93       	push	r27
    1714:	ef 93       	push	r30
    1716:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1718:	82 ea       	ldi	r24, 0xA2	; 162
    171a:	94 e0       	ldi	r25, 0x04	; 4
    171c:	0e 94 3f 0a 	call	0x147e	; 0x147e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1720:	ff 91       	pop	r31
    1722:	ef 91       	pop	r30
    1724:	bf 91       	pop	r27
    1726:	af 91       	pop	r26
    1728:	9f 91       	pop	r25
    172a:	8f 91       	pop	r24
    172c:	7f 91       	pop	r23
    172e:	6f 91       	pop	r22
    1730:	5f 91       	pop	r21
    1732:	4f 91       	pop	r20
    1734:	3f 91       	pop	r19
    1736:	2f 91       	pop	r18
    1738:	0f 90       	pop	r0
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	0f 90       	pop	r0
    173e:	1f 90       	pop	r1
    1740:	18 95       	reti

00001742 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1742:	82 ea       	ldi	r24, 0xA2	; 162
    1744:	94 e0       	ldi	r25, 0x04	; 4
    1746:	0e 94 03 0a 	call	0x1406	; 0x1406 <_ZN14HardwareSerial9availableEv>
    174a:	21 e0       	ldi	r18, 0x01	; 1
    174c:	89 2b       	or	r24, r25
    174e:	09 f4       	brne	.+2      	; 0x1752 <_Z17Serial0_availablev+0x10>
    1750:	20 e0       	ldi	r18, 0x00	; 0
}
    1752:	82 2f       	mov	r24, r18
    1754:	08 95       	ret

00001756 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1756:	e2 ea       	ldi	r30, 0xA2	; 162
    1758:	f4 e0       	ldi	r31, 0x04	; 4
    175a:	13 82       	std	Z+3, r1	; 0x03
    175c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    175e:	88 ee       	ldi	r24, 0xE8	; 232
    1760:	93 e0       	ldi	r25, 0x03	; 3
    1762:	a0 e0       	ldi	r26, 0x00	; 0
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	84 83       	std	Z+4, r24	; 0x04
    1768:	95 83       	std	Z+5, r25	; 0x05
    176a:	a6 83       	std	Z+6, r26	; 0x06
    176c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    176e:	82 e5       	ldi	r24, 0x52	; 82
    1770:	94 e0       	ldi	r25, 0x04	; 4
    1772:	91 83       	std	Z+1, r25	; 0x01
    1774:	80 83       	st	Z, r24
    1776:	85 ec       	ldi	r24, 0xC5	; 197
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	95 87       	std	Z+13, r25	; 0x0d
    177c:	84 87       	std	Z+12, r24	; 0x0c
    177e:	84 ec       	ldi	r24, 0xC4	; 196
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	97 87       	std	Z+15, r25	; 0x0f
    1784:	86 87       	std	Z+14, r24	; 0x0e
    1786:	80 ec       	ldi	r24, 0xC0	; 192
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	91 8b       	std	Z+17, r25	; 0x11
    178c:	80 8b       	std	Z+16, r24	; 0x10
    178e:	81 ec       	ldi	r24, 0xC1	; 193
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	93 8b       	std	Z+19, r25	; 0x13
    1794:	82 8b       	std	Z+18, r24	; 0x12
    1796:	82 ec       	ldi	r24, 0xC2	; 194
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	95 8b       	std	Z+21, r25	; 0x15
    179c:	84 8b       	std	Z+20, r24	; 0x14
    179e:	86 ec       	ldi	r24, 0xC6	; 198
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	97 8b       	std	Z+23, r25	; 0x17
    17a4:	86 8b       	std	Z+22, r24	; 0x16
    17a6:	11 8e       	std	Z+25, r1	; 0x19
    17a8:	12 8e       	std	Z+26, r1	; 0x1a
    17aa:	13 8e       	std	Z+27, r1	; 0x1b
    17ac:	14 8e       	std	Z+28, r1	; 0x1c
    17ae:	08 95       	ret

000017b0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    17b0:	08 95       	ret

000017b2 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    17b2:	8f 92       	push	r8
    17b4:	9f 92       	push	r9
    17b6:	af 92       	push	r10
    17b8:	bf 92       	push	r11
    17ba:	cf 92       	push	r12
    17bc:	df 92       	push	r13
    17be:	ef 92       	push	r14
    17c0:	ff 92       	push	r15
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	5c 01       	movw	r10, r24
    17cc:	7b 01       	movw	r14, r22
    17ce:	4c 01       	movw	r8, r24
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	88 0e       	add	r8, r24
    17d4:	91 1c       	adc	r9, r1
    17d6:	65 01       	movw	r12, r10
    17d8:	e5 e0       	ldi	r30, 0x05	; 5
    17da:	ce 0e       	add	r12, r30
    17dc:	d1 1c       	adc	r13, r1
    size_t n = 0;
    17de:	00 e0       	ldi	r16, 0x00	; 0
    17e0:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    17e2:	f4 01       	movw	r30, r8
    17e4:	61 91       	ld	r22, Z+
    17e6:	4f 01       	movw	r8, r30
    17e8:	4a e0       	ldi	r20, 0x0A	; 10
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	c7 01       	movw	r24, r14
    17ee:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN5Print5printEhi>
    17f2:	ec 01       	movw	r28, r24
        n += p.print('.');
    17f4:	6e e2       	ldi	r22, 0x2E	; 46
    17f6:	c7 01       	movw	r24, r14
    17f8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <_ZN5Print5printEc>
    17fc:	8c 0f       	add	r24, r28
    17fe:	9d 1f       	adc	r25, r29
    1800:	08 0f       	add	r16, r24
    1802:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    1804:	8c 14       	cp	r8, r12
    1806:	9d 04       	cpc	r9, r13
    1808:	61 f7       	brne	.-40     	; 0x17e2 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    180a:	4a e0       	ldi	r20, 0x0A	; 10
    180c:	50 e0       	ldi	r21, 0x00	; 0
    180e:	f5 01       	movw	r30, r10
    1810:	65 81       	ldd	r22, Z+5	; 0x05
    1812:	c7 01       	movw	r24, r14
    1814:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN5Print5printEhi>
    return n;
}
    1818:	80 0f       	add	r24, r16
    181a:	91 1f       	adc	r25, r17
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	df 90       	pop	r13
    182a:	cf 90       	pop	r12
    182c:	bf 90       	pop	r11
    182e:	af 90       	pop	r10
    1830:	9f 90       	pop	r9
    1832:	8f 90       	pop	r8
    1834:	08 95       	ret

00001836 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    1836:	ef e3       	ldi	r30, 0x3F	; 63
    1838:	f5 e0       	ldi	r31, 0x05	; 5
    183a:	82 e6       	ldi	r24, 0x62	; 98
    183c:	94 e0       	ldi	r25, 0x04	; 4
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    1842:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    1844:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    1846:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    1848:	15 82       	std	Z+5, r1	; 0x05
    184a:	08 95       	ret

0000184c <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    184c:	08 95       	ret

0000184e <main>:

int main(void)
{
	init();
    184e:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <init>

	initVariant();
    1852:	0e 94 26 0c 	call	0x184c	; 0x184c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1856:	0e 94 09 07 	call	0xe12	; 0xe12 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    185a:	c1 e3       	ldi	r28, 0x31	; 49
    185c:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    185e:	0e 94 05 09 	call	0x120a	; 0x120a <loop>
		if (serialEventRun) serialEventRun();
    1862:	20 97       	sbiw	r28, 0x00	; 0
    1864:	e1 f3       	breq	.-8      	; 0x185e <main+0x10>
    1866:	0e 94 31 0a 	call	0x1462	; 0x1462 <_Z14serialEventRunv>
    186a:	f9 cf       	rjmp	.-14     	; 0x185e <main+0x10>

0000186c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    186c:	cf 92       	push	r12
    186e:	df 92       	push	r13
    1870:	ef 92       	push	r14
    1872:	ff 92       	push	r15
    1874:	0f 93       	push	r16
    1876:	1f 93       	push	r17
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
    187c:	41 15       	cp	r20, r1
    187e:	51 05       	cpc	r21, r1
    1880:	b1 f0       	breq	.+44     	; 0x18ae <_ZN5Print5writeEPKhj+0x42>
    1882:	8c 01       	movw	r16, r24
    1884:	e6 2e       	mov	r14, r22
    1886:	f7 2e       	mov	r15, r23
    1888:	ea 01       	movw	r28, r20
    188a:	c1 2c       	mov	r12, r1
    188c:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
    188e:	d7 01       	movw	r26, r14
    1890:	6d 91       	ld	r22, X+
    1892:	7d 01       	movw	r14, r26
    1894:	d8 01       	movw	r26, r16
    1896:	ed 91       	ld	r30, X+
    1898:	fc 91       	ld	r31, X
    189a:	01 90       	ld	r0, Z+
    189c:	f0 81       	ld	r31, Z
    189e:	e0 2d       	mov	r30, r0
    18a0:	c8 01       	movw	r24, r16
    18a2:	09 95       	icall
    18a4:	c8 0e       	add	r12, r24
    18a6:	d9 1e       	adc	r13, r25
    18a8:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    18aa:	89 f7       	brne	.-30     	; 0x188e <_ZN5Print5writeEPKhj+0x22>
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    18ae:	c1 2c       	mov	r12, r1
    18b0:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    18b2:	c6 01       	movw	r24, r12
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	df 90       	pop	r13
    18c2:	cf 90       	pop	r12
    18c4:	08 95       	ret

000018c6 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    18c6:	61 15       	cp	r22, r1
    18c8:	71 05       	cpc	r23, r1
    18ca:	81 f0       	breq	.+32     	; 0x18ec <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
    18cc:	fb 01       	movw	r30, r22
    18ce:	01 90       	ld	r0, Z+
    18d0:	00 20       	and	r0, r0
    18d2:	e9 f7       	brne	.-6      	; 0x18ce <_ZN5Print5printEPKc+0x8>
    18d4:	31 97       	sbiw	r30, 0x01	; 1
    18d6:	af 01       	movw	r20, r30
    18d8:	46 1b       	sub	r20, r22
    18da:	57 0b       	sbc	r21, r23
    18dc:	dc 01       	movw	r26, r24
    18de:	ed 91       	ld	r30, X+
    18e0:	fc 91       	ld	r31, X
    18e2:	02 80       	ldd	r0, Z+2	; 0x02
    18e4:	f3 81       	ldd	r31, Z+3	; 0x03
    18e6:	e0 2d       	mov	r30, r0
    18e8:	09 95       	icall
    18ea:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
    18f0:	08 95       	ret

000018f2 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    18f2:	dc 01       	movw	r26, r24
    18f4:	ed 91       	ld	r30, X+
    18f6:	fc 91       	ld	r31, X
    18f8:	01 90       	ld	r0, Z+
    18fa:	f0 81       	ld	r31, Z
    18fc:	e0 2d       	mov	r30, r0
    18fe:	09 95       	icall
}
    1900:	08 95       	ret

00001902 <_ZN5Print7printlnEv>:
      return write((const uint8_t *)str, strlen(str));
    1902:	dc 01       	movw	r26, r24
    1904:	ed 91       	ld	r30, X+
    1906:	fc 91       	ld	r31, X
    1908:	02 80       	ldd	r0, Z+2	; 0x02
    190a:	f3 81       	ldd	r31, Z+3	; 0x03
    190c:	e0 2d       	mov	r30, r0
    190e:	42 e0       	ldi	r20, 0x02	; 2
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	64 e6       	ldi	r22, 0x64	; 100
    1914:	74 e0       	ldi	r23, 0x04	; 4
    1916:	09 95       	icall
}

size_t Print::println(void)
{
  return write("\r\n");
}
    1918:	08 95       	ret

0000191a <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	ec 01       	movw	r28, r24
  size_t n = print(c);
    1924:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <_ZN5Print5printEPKc>
    1928:	8c 01       	movw	r16, r24
  n += println();
    192a:	ce 01       	movw	r24, r28
    192c:	0e 94 81 0c 	call	0x1902	; 0x1902 <_ZN5Print7printlnEv>
  return n;
}
    1930:	80 0f       	add	r24, r16
    1932:	91 1f       	adc	r25, r17
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	08 95       	ret

0000193e <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    193e:	4f 92       	push	r4
    1940:	5f 92       	push	r5
    1942:	6f 92       	push	r6
    1944:	7f 92       	push	r7
    1946:	9f 92       	push	r9
    1948:	af 92       	push	r10
    194a:	bf 92       	push	r11
    194c:	cf 92       	push	r12
    194e:	df 92       	push	r13
    1950:	ef 92       	push	r14
    1952:	ff 92       	push	r15
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	a1 97       	sbiw	r28, 0x21	; 33
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	5c 01       	movw	r10, r24
    196e:	6a 01       	movw	r12, r20
    1970:	7b 01       	movw	r14, r22
    1972:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1974:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	82 17       	cp	r24, r18
    197a:	20 f0       	brcs	.+8      	; 0x1984 <_ZN5Print11printNumberEmh+0x46>
    197c:	0f 2e       	mov	r0, r31
    197e:	fa e0       	ldi	r31, 0x0A	; 10
    1980:	9f 2e       	mov	r9, r31
    1982:	f0 2d       	mov	r31, r0
    1984:	8e 01       	movw	r16, r28
    1986:	0f 5d       	subi	r16, 0xDF	; 223
    1988:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
    198a:	49 2c       	mov	r4, r9
    198c:	51 2c       	mov	r5, r1
    198e:	61 2c       	mov	r6, r1
    1990:	71 2c       	mov	r7, r1
    1992:	c7 01       	movw	r24, r14
    1994:	b6 01       	movw	r22, r12
    1996:	a3 01       	movw	r20, r6
    1998:	92 01       	movw	r18, r4
    199a:	0e 94 ab 11 	call	0x2356	; 0x2356 <__udivmodsi4>
    char c = m - base * n;
    199e:	8c 2d       	mov	r24, r12
    19a0:	92 9e       	mul	r9, r18
    19a2:	80 19       	sub	r24, r0
    19a4:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    19a6:	01 50       	subi	r16, 0x01	; 1
    19a8:	11 09       	sbc	r17, r1
    19aa:	8a 30       	cpi	r24, 0x0A	; 10
    19ac:	10 f4       	brcc	.+4      	; 0x19b2 <_ZN5Print11printNumberEmh+0x74>
    19ae:	80 5d       	subi	r24, 0xD0	; 208
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <_ZN5Print11printNumberEmh+0x76>
    19b2:	89 5c       	subi	r24, 0xC9	; 201
    19b4:	d8 01       	movw	r26, r16
    19b6:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    19b8:	c2 2e       	mov	r12, r18
    19ba:	d3 2e       	mov	r13, r19
    19bc:	e4 2e       	mov	r14, r20
    19be:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    19c0:	c1 14       	cp	r12, r1
    19c2:	d1 04       	cpc	r13, r1
    19c4:	e1 04       	cpc	r14, r1
    19c6:	f1 04       	cpc	r15, r1
    19c8:	21 f7       	brne	.-56     	; 0x1992 <_ZN5Print11printNumberEmh+0x54>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    19ca:	01 15       	cp	r16, r1
    19cc:	11 05       	cpc	r17, r1
    19ce:	91 f0       	breq	.+36     	; 0x19f4 <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
    19d0:	f8 01       	movw	r30, r16
    19d2:	01 90       	ld	r0, Z+
    19d4:	00 20       	and	r0, r0
    19d6:	e9 f7       	brne	.-6      	; 0x19d2 <_ZN5Print11printNumberEmh+0x94>
    19d8:	31 97       	sbiw	r30, 0x01	; 1
    19da:	af 01       	movw	r20, r30
    19dc:	40 1b       	sub	r20, r16
    19de:	51 0b       	sbc	r21, r17
    19e0:	d5 01       	movw	r26, r10
    19e2:	ed 91       	ld	r30, X+
    19e4:	fc 91       	ld	r31, X
    19e6:	02 80       	ldd	r0, Z+2	; 0x02
    19e8:	f3 81       	ldd	r31, Z+3	; 0x03
    19ea:	e0 2d       	mov	r30, r0
    19ec:	b8 01       	movw	r22, r16
    19ee:	c5 01       	movw	r24, r10
    19f0:	09 95       	icall
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    19f8:	a1 96       	adiw	r28, 0x21	; 33
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	df 90       	pop	r13
    1a12:	cf 90       	pop	r12
    1a14:	bf 90       	pop	r11
    1a16:	af 90       	pop	r10
    1a18:	9f 90       	pop	r9
    1a1a:	7f 90       	pop	r7
    1a1c:	6f 90       	pop	r6
    1a1e:	5f 90       	pop	r5
    1a20:	4f 90       	pop	r4
    1a22:	08 95       	ret

00001a24 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    1a24:	21 15       	cp	r18, r1
    1a26:	31 05       	cpc	r19, r1
    1a28:	49 f4       	brne	.+18     	; 0x1a3c <_ZN5Print5printEmi+0x18>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	ed 91       	ld	r30, X+
    1a2e:	fc 91       	ld	r31, X
    1a30:	01 90       	ld	r0, Z+
    1a32:	f0 81       	ld	r31, Z
    1a34:	e0 2d       	mov	r30, r0
    1a36:	64 2f       	mov	r22, r20
    1a38:	09 95       	icall
    1a3a:	08 95       	ret
  else return printNumber(n, base);
    1a3c:	0e 94 9f 0c 	call	0x193e	; 0x193e <_ZN5Print11printNumberEmh>
}
    1a40:	08 95       	ret

00001a42 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1a42:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    1a44:	46 2f       	mov	r20, r22
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_ZN5Print5printEmi>
}
    1a50:	08 95       	ret

00001a52 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	39 f0       	breq	.+14     	; 0x1a64 <_Z12disableTimerh+0x12>
    1a56:	18 f0       	brcs	.+6      	; 0x1a5e <_Z12disableTimerh+0xc>
    1a58:	82 30       	cpi	r24, 0x02	; 2
    1a5a:	51 f0       	breq	.+20     	; 0x1a70 <_Z12disableTimerh+0x1e>
    1a5c:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    1a5e:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    1a62:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    1a64:	ef e6       	ldi	r30, 0x6F	; 111
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	8d 7f       	andi	r24, 0xFD	; 253
    1a6c:	80 83       	st	Z, r24
      break;
    1a6e:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    1a70:	e0 e7       	ldi	r30, 0x70	; 112
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	8d 7f       	andi	r24, 0xFD	; 253
    1a78:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    1a80:	e1 eb       	ldi	r30, 0xB1	; 177
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	88 7f       	andi	r24, 0xF8	; 248
    1a88:	84 60       	ori	r24, 0x04	; 4
    1a8a:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    1a8c:	10 92 b3 00 	sts	0x00B3, r1
    1a90:	08 95       	ret

00001a92 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    1a92:	cf 93       	push	r28
    1a94:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    1a96:	80 91 00 04 	lds	r24, 0x0400
    1a9a:	8c 13       	cpse	r24, r28
    1a9c:	08 c0       	rjmp	.+16     	; 0x1aae <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1a9e:	e8 e6       	ldi	r30, 0x68	; 104
    1aa0:	f1 e0       	ldi	r31, 0x01	; 1
    1aa2:	e4 91       	lpm	r30, Z
    1aa4:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    1aa6:	9f ef       	ldi	r25, 0xFF	; 255
    1aa8:	90 93 00 04 	sts	0x0400, r25
    1aac:	01 c0       	rjmp	.+2      	; 0x1ab0 <_Z6noToneh+0x1e>
    1aae:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    1ab0:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	8c 2f       	mov	r24, r28
    1ab8:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <digitalWrite>
}
    1abc:	cf 91       	pop	r28
    1abe:	08 95       	ret

00001ac0 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    1ac0:	1f 92       	push	r1
    1ac2:	0f 92       	push	r0
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	0f 92       	push	r0
    1ac8:	11 24       	eor	r1, r1
    1aca:	2f 93       	push	r18
    1acc:	3f 93       	push	r19
    1ace:	4f 93       	push	r20
    1ad0:	5f 93       	push	r21
    1ad2:	6f 93       	push	r22
    1ad4:	7f 93       	push	r23
    1ad6:	8f 93       	push	r24
    1ad8:	9f 93       	push	r25
    1ada:	af 93       	push	r26
    1adc:	bf 93       	push	r27
    1ade:	ef 93       	push	r30
    1ae0:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    1ae2:	80 91 48 05 	lds	r24, 0x0548
    1ae6:	90 91 49 05 	lds	r25, 0x0549
    1aea:	a0 91 4a 05 	lds	r26, 0x054A
    1aee:	b0 91 4b 05 	lds	r27, 0x054B
    1af2:	89 2b       	or	r24, r25
    1af4:	8a 2b       	or	r24, r26
    1af6:	8b 2b       	or	r24, r27
    1af8:	51 f1       	breq	.+84     	; 0x1b4e <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    1afa:	80 91 45 05 	lds	r24, 0x0545
    1afe:	e0 91 46 05 	lds	r30, 0x0546
    1b02:	f0 91 47 05 	lds	r31, 0x0547
    1b06:	90 81       	ld	r25, Z
    1b08:	89 27       	eor	r24, r25
    1b0a:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    1b0c:	80 91 48 05 	lds	r24, 0x0548
    1b10:	90 91 49 05 	lds	r25, 0x0549
    1b14:	a0 91 4a 05 	lds	r26, 0x054A
    1b18:	b0 91 4b 05 	lds	r27, 0x054B
    1b1c:	18 16       	cp	r1, r24
    1b1e:	19 06       	cpc	r1, r25
    1b20:	1a 06       	cpc	r1, r26
    1b22:	1b 06       	cpc	r1, r27
    1b24:	c4 f4       	brge	.+48     	; 0x1b56 <__vector_7+0x96>
      timer2_toggle_count--;
    1b26:	80 91 48 05 	lds	r24, 0x0548
    1b2a:	90 91 49 05 	lds	r25, 0x0549
    1b2e:	a0 91 4a 05 	lds	r26, 0x054A
    1b32:	b0 91 4b 05 	lds	r27, 0x054B
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	a1 09       	sbc	r26, r1
    1b3a:	b1 09       	sbc	r27, r1
    1b3c:	80 93 48 05 	sts	0x0548, r24
    1b40:	90 93 49 05 	sts	0x0549, r25
    1b44:	a0 93 4a 05 	sts	0x054A, r26
    1b48:	b0 93 4b 05 	sts	0x054B, r27
    1b4c:	04 c0       	rjmp	.+8      	; 0x1b56 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    1b4e:	80 91 00 04 	lds	r24, 0x0400
    1b52:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    1b56:	ff 91       	pop	r31
    1b58:	ef 91       	pop	r30
    1b5a:	bf 91       	pop	r27
    1b5c:	af 91       	pop	r26
    1b5e:	9f 91       	pop	r25
    1b60:	8f 91       	pop	r24
    1b62:	7f 91       	pop	r23
    1b64:	6f 91       	pop	r22
    1b66:	5f 91       	pop	r21
    1b68:	4f 91       	pop	r20
    1b6a:	3f 91       	pop	r19
    1b6c:	2f 91       	pop	r18
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	0f 90       	pop	r0
    1b74:	1f 90       	pop	r1
    1b76:	18 95       	reti

00001b78 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    1b78:	1f 92       	push	r1
    1b7a:	0f 92       	push	r0
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	0f 92       	push	r0
    1b80:	11 24       	eor	r1, r1
    1b82:	2f 93       	push	r18
    1b84:	3f 93       	push	r19
    1b86:	4f 93       	push	r20
    1b88:	5f 93       	push	r21
    1b8a:	6f 93       	push	r22
    1b8c:	7f 93       	push	r23
    1b8e:	8f 93       	push	r24
    1b90:	9f 93       	push	r25
    1b92:	af 93       	push	r26
    1b94:	bf 93       	push	r27
    1b96:	ef 93       	push	r30
    1b98:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    1b9a:	80 91 4c 05 	lds	r24, 0x054C
    1b9e:	90 91 4d 05 	lds	r25, 0x054D
    1ba2:	89 2b       	or	r24, r25
    1ba4:	29 f0       	breq	.+10     	; 0x1bb0 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    1ba6:	e0 91 4c 05 	lds	r30, 0x054C
    1baa:	f0 91 4d 05 	lds	r31, 0x054D
    1bae:	09 95       	icall
}
    1bb0:	ff 91       	pop	r31
    1bb2:	ef 91       	pop	r30
    1bb4:	bf 91       	pop	r27
    1bb6:	af 91       	pop	r26
    1bb8:	9f 91       	pop	r25
    1bba:	8f 91       	pop	r24
    1bbc:	7f 91       	pop	r23
    1bbe:	6f 91       	pop	r22
    1bc0:	5f 91       	pop	r21
    1bc2:	4f 91       	pop	r20
    1bc4:	3f 91       	pop	r19
    1bc6:	2f 91       	pop	r18
    1bc8:	0f 90       	pop	r0
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	0f 90       	pop	r0
    1bce:	1f 90       	pop	r1
    1bd0:	18 95       	reti

00001bd2 <__vector_2>:

ISR(INT1_vect) {
    1bd2:	1f 92       	push	r1
    1bd4:	0f 92       	push	r0
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	0f 92       	push	r0
    1bda:	11 24       	eor	r1, r1
    1bdc:	2f 93       	push	r18
    1bde:	3f 93       	push	r19
    1be0:	4f 93       	push	r20
    1be2:	5f 93       	push	r21
    1be4:	6f 93       	push	r22
    1be6:	7f 93       	push	r23
    1be8:	8f 93       	push	r24
    1bea:	9f 93       	push	r25
    1bec:	af 93       	push	r26
    1bee:	bf 93       	push	r27
    1bf0:	ef 93       	push	r30
    1bf2:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    1bf4:	80 91 4e 05 	lds	r24, 0x054E
    1bf8:	90 91 4f 05 	lds	r25, 0x054F
    1bfc:	89 2b       	or	r24, r25
    1bfe:	29 f0       	breq	.+10     	; 0x1c0a <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    1c00:	e0 91 4e 05 	lds	r30, 0x054E
    1c04:	f0 91 4f 05 	lds	r31, 0x054F
    1c08:	09 95       	icall
}
    1c0a:	ff 91       	pop	r31
    1c0c:	ef 91       	pop	r30
    1c0e:	bf 91       	pop	r27
    1c10:	af 91       	pop	r26
    1c12:	9f 91       	pop	r25
    1c14:	8f 91       	pop	r24
    1c16:	7f 91       	pop	r23
    1c18:	6f 91       	pop	r22
    1c1a:	5f 91       	pop	r21
    1c1c:	4f 91       	pop	r20
    1c1e:	3f 91       	pop	r19
    1c20:	2f 91       	pop	r18
    1c22:	0f 90       	pop	r0
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	0f 90       	pop	r0
    1c28:	1f 90       	pop	r1
    1c2a:	18 95       	reti

00001c2c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1c2c:	1f 92       	push	r1
    1c2e:	0f 92       	push	r0
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	0f 92       	push	r0
    1c34:	11 24       	eor	r1, r1
    1c36:	2f 93       	push	r18
    1c38:	3f 93       	push	r19
    1c3a:	8f 93       	push	r24
    1c3c:	9f 93       	push	r25
    1c3e:	af 93       	push	r26
    1c40:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1c42:	80 91 51 05 	lds	r24, 0x0551
    1c46:	90 91 52 05 	lds	r25, 0x0552
    1c4a:	a0 91 53 05 	lds	r26, 0x0553
    1c4e:	b0 91 54 05 	lds	r27, 0x0554
	unsigned char f = timer0_fract;
    1c52:	30 91 50 05 	lds	r19, 0x0550

	m += MILLIS_INC;
	f += FRACT_INC;
    1c56:	23 e0       	ldi	r18, 0x03	; 3
    1c58:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1c5a:	2d 37       	cpi	r18, 0x7D	; 125
    1c5c:	20 f4       	brcc	.+8      	; 0x1c66 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1c5e:	01 96       	adiw	r24, 0x01	; 1
    1c60:	a1 1d       	adc	r26, r1
    1c62:	b1 1d       	adc	r27, r1
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1c66:	26 e8       	ldi	r18, 0x86	; 134
    1c68:	23 0f       	add	r18, r19
		m += 1;
    1c6a:	02 96       	adiw	r24, 0x02	; 2
    1c6c:	a1 1d       	adc	r26, r1
    1c6e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1c70:	20 93 50 05 	sts	0x0550, r18
	timer0_millis = m;
    1c74:	80 93 51 05 	sts	0x0551, r24
    1c78:	90 93 52 05 	sts	0x0552, r25
    1c7c:	a0 93 53 05 	sts	0x0553, r26
    1c80:	b0 93 54 05 	sts	0x0554, r27
	timer0_overflow_count++;
    1c84:	80 91 55 05 	lds	r24, 0x0555
    1c88:	90 91 56 05 	lds	r25, 0x0556
    1c8c:	a0 91 57 05 	lds	r26, 0x0557
    1c90:	b0 91 58 05 	lds	r27, 0x0558
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	a1 1d       	adc	r26, r1
    1c98:	b1 1d       	adc	r27, r1
    1c9a:	80 93 55 05 	sts	0x0555, r24
    1c9e:	90 93 56 05 	sts	0x0556, r25
    1ca2:	a0 93 57 05 	sts	0x0557, r26
    1ca6:	b0 93 58 05 	sts	0x0558, r27
}
    1caa:	bf 91       	pop	r27
    1cac:	af 91       	pop	r26
    1cae:	9f 91       	pop	r25
    1cb0:	8f 91       	pop	r24
    1cb2:	3f 91       	pop	r19
    1cb4:	2f 91       	pop	r18
    1cb6:	0f 90       	pop	r0
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	0f 90       	pop	r0
    1cbc:	1f 90       	pop	r1
    1cbe:	18 95       	reti

00001cc0 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1cc0:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1cc2:	f8 94       	cli
	m = timer0_millis;
    1cc4:	60 91 51 05 	lds	r22, 0x0551
    1cc8:	70 91 52 05 	lds	r23, 0x0552
    1ccc:	80 91 53 05 	lds	r24, 0x0553
    1cd0:	90 91 54 05 	lds	r25, 0x0554
	SREG = oldSREG;
    1cd4:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1cd6:	08 95       	ret

00001cd8 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1cd8:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1cda:	f8 94       	cli
	m = timer0_overflow_count;
    1cdc:	80 91 55 05 	lds	r24, 0x0555
    1ce0:	90 91 56 05 	lds	r25, 0x0556
    1ce4:	a0 91 57 05 	lds	r26, 0x0557
    1ce8:	b0 91 58 05 	lds	r27, 0x0558
#if defined(TCNT0)
	t = TCNT0;
    1cec:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1cee:	a8 9b       	sbis	0x15, 0	; 21
    1cf0:	05 c0       	rjmp	.+10     	; 0x1cfc <micros+0x24>
    1cf2:	2f 3f       	cpi	r18, 0xFF	; 255
    1cf4:	19 f0       	breq	.+6      	; 0x1cfc <micros+0x24>
		m++;
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	a1 1d       	adc	r26, r1
    1cfa:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1cfc:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1cfe:	ba 2f       	mov	r27, r26
    1d00:	a9 2f       	mov	r26, r25
    1d02:	98 2f       	mov	r25, r24
    1d04:	88 27       	eor	r24, r24
    1d06:	82 0f       	add	r24, r18
    1d08:	91 1d       	adc	r25, r1
    1d0a:	a1 1d       	adc	r26, r1
    1d0c:	b1 1d       	adc	r27, r1
    1d0e:	bc 01       	movw	r22, r24
    1d10:	cd 01       	movw	r24, r26
    1d12:	66 0f       	add	r22, r22
    1d14:	77 1f       	adc	r23, r23
    1d16:	88 1f       	adc	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	66 0f       	add	r22, r22
    1d1c:	77 1f       	adc	r23, r23
    1d1e:	88 1f       	adc	r24, r24
    1d20:	99 1f       	adc	r25, r25
}
    1d22:	08 95       	ret

00001d24 <delay>:

void delay(unsigned long ms)
{
    1d24:	cf 92       	push	r12
    1d26:	df 92       	push	r13
    1d28:	ef 92       	push	r14
    1d2a:	ff 92       	push	r15
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	6b 01       	movw	r12, r22
    1d32:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    1d34:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <micros>
    1d38:	eb 01       	movw	r28, r22

	while (ms > 0) {
    1d3a:	c1 14       	cp	r12, r1
    1d3c:	d1 04       	cpc	r13, r1
    1d3e:	e1 04       	cpc	r14, r1
    1d40:	f1 04       	cpc	r15, r1
    1d42:	a9 f0       	breq	.+42     	; 0x1d6e <delay+0x4a>
		yield();
    1d44:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    1d48:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <micros>
    1d4c:	6c 1b       	sub	r22, r28
    1d4e:	7d 0b       	sbc	r23, r29
    1d50:	68 3e       	cpi	r22, 0xE8	; 232
    1d52:	73 40       	sbci	r23, 0x03	; 3
    1d54:	38 f0       	brcs	.+14     	; 0x1d64 <delay+0x40>
			ms--;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	c8 1a       	sub	r12, r24
    1d5a:	d1 08       	sbc	r13, r1
    1d5c:	e1 08       	sbc	r14, r1
    1d5e:	f1 08       	sbc	r15, r1
			start += 1000;
    1d60:	c8 51       	subi	r28, 0x18	; 24
    1d62:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1d64:	c1 14       	cp	r12, r1
    1d66:	d1 04       	cpc	r13, r1
    1d68:	e1 04       	cpc	r14, r1
    1d6a:	f1 04       	cpc	r15, r1
    1d6c:	59 f7       	brne	.-42     	; 0x1d44 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	ff 90       	pop	r15
    1d74:	ef 90       	pop	r14
    1d76:	df 90       	pop	r13
    1d78:	cf 90       	pop	r12
    1d7a:	08 95       	ret

00001d7c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1d7c:	82 30       	cpi	r24, 0x02	; 2
    1d7e:	91 05       	cpc	r25, r1
    1d80:	38 f0       	brcs	.+14     	; 0x1d90 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1d8a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <delayMicroseconds+0x10>
    1d90:	08 95       	ret

00001d92 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1d92:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1d94:	84 b5       	in	r24, 0x24	; 36
    1d96:	82 60       	ori	r24, 0x02	; 2
    1d98:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1d9a:	84 b5       	in	r24, 0x24	; 36
    1d9c:	81 60       	ori	r24, 0x01	; 1
    1d9e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1da0:	85 b5       	in	r24, 0x25	; 37
    1da2:	82 60       	ori	r24, 0x02	; 2
    1da4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1da6:	85 b5       	in	r24, 0x25	; 37
    1da8:	81 60       	ori	r24, 0x01	; 1
    1daa:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1dac:	ee e6       	ldi	r30, 0x6E	; 110
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	81 60       	ori	r24, 0x01	; 1
    1db4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1db6:	e1 e8       	ldi	r30, 0x81	; 129
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1dbc:	80 81       	ld	r24, Z
    1dbe:	82 60       	ori	r24, 0x02	; 2
    1dc0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1dc2:	80 81       	ld	r24, Z
    1dc4:	81 60       	ori	r24, 0x01	; 1
    1dc6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1dc8:	e0 e8       	ldi	r30, 0x80	; 128
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	81 60       	ori	r24, 0x01	; 1
    1dd0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1dd2:	e1 eb       	ldi	r30, 0xB1	; 177
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	84 60       	ori	r24, 0x04	; 4
    1dda:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1ddc:	e0 eb       	ldi	r30, 0xB0	; 176
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	81 60       	ori	r24, 0x01	; 1
    1de4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1de6:	ea e7       	ldi	r30, 0x7A	; 122
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	84 60       	ori	r24, 0x04	; 4
    1dee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1df0:	80 81       	ld	r24, Z
    1df2:	82 60       	ori	r24, 0x02	; 2
    1df4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1df6:	80 81       	ld	r24, Z
    1df8:	81 60       	ori	r24, 0x01	; 1
    1dfa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1dfc:	80 81       	ld	r24, Z
    1dfe:	80 68       	ori	r24, 0x80	; 128
    1e00:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1e02:	10 92 c1 00 	sts	0x00C1, r1
    1e06:	08 95       	ret

00001e08 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1e08:	83 30       	cpi	r24, 0x03	; 3
    1e0a:	69 f0       	breq	.+26     	; 0x1e26 <turnOffPWM+0x1e>
    1e0c:	28 f4       	brcc	.+10     	; 0x1e18 <turnOffPWM+0x10>
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	b1 f0       	breq	.+44     	; 0x1e3e <turnOffPWM+0x36>
    1e12:	82 30       	cpi	r24, 0x02	; 2
    1e14:	c1 f0       	breq	.+48     	; 0x1e46 <turnOffPWM+0x3e>
    1e16:	08 95       	ret
    1e18:	87 30       	cpi	r24, 0x07	; 7
    1e1a:	c9 f0       	breq	.+50     	; 0x1e4e <turnOffPWM+0x46>
    1e1c:	88 30       	cpi	r24, 0x08	; 8
    1e1e:	e9 f0       	breq	.+58     	; 0x1e5a <turnOffPWM+0x52>
    1e20:	84 30       	cpi	r24, 0x04	; 4
    1e22:	01 f5       	brne	.+64     	; 0x1e64 <turnOffPWM+0x5c>
    1e24:	06 c0       	rjmp	.+12     	; 0x1e32 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1e26:	e0 e8       	ldi	r30, 0x80	; 128
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	8f 77       	andi	r24, 0x7F	; 127
    1e2e:	80 83       	st	Z, r24
    1e30:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1e32:	e0 e8       	ldi	r30, 0x80	; 128
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	8f 7d       	andi	r24, 0xDF	; 223
    1e3a:	80 83       	st	Z, r24
    1e3c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1e3e:	84 b5       	in	r24, 0x24	; 36
    1e40:	8f 77       	andi	r24, 0x7F	; 127
    1e42:	84 bd       	out	0x24, r24	; 36
    1e44:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1e46:	84 b5       	in	r24, 0x24	; 36
    1e48:	8f 7d       	andi	r24, 0xDF	; 223
    1e4a:	84 bd       	out	0x24, r24	; 36
    1e4c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1e4e:	e0 eb       	ldi	r30, 0xB0	; 176
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	8f 77       	andi	r24, 0x7F	; 127
    1e56:	80 83       	st	Z, r24
    1e58:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1e5a:	e0 eb       	ldi	r30, 0xB0	; 176
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	8f 7d       	andi	r24, 0xDF	; 223
    1e62:	80 83       	st	Z, r24
    1e64:	08 95       	ret

00001e66 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	e3 58       	subi	r30, 0x83	; 131
    1e70:	fe 4f       	sbci	r31, 0xFE	; 254
    1e72:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1e74:	fc 01       	movw	r30, r24
    1e76:	ef 56       	subi	r30, 0x6F	; 111
    1e78:	fe 4f       	sbci	r31, 0xFE	; 254
    1e7a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1e7c:	88 23       	and	r24, r24
    1e7e:	79 f1       	breq	.+94     	; 0x1ede <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	fc 01       	movw	r30, r24
    1e88:	e7 54       	subi	r30, 0x47	; 71
    1e8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e8c:	a5 91       	lpm	r26, Z+
    1e8e:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    1e90:	fc 01       	movw	r30, r24
    1e92:	e1 55       	subi	r30, 0x51	; 81
    1e94:	fe 4f       	sbci	r31, 0xFE	; 254
    1e96:	c5 91       	lpm	r28, Z+
    1e98:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    1e9a:	61 11       	cpse	r22, r1
    1e9c:	0c c0       	rjmp	.+24     	; 0x1eb6 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    1e9e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1ea0:	f8 94       	cli
		*reg &= ~bit;
    1ea2:	8c 91       	ld	r24, X
    1ea4:	e2 2f       	mov	r30, r18
    1ea6:	e0 95       	com	r30
    1ea8:	8e 23       	and	r24, r30
    1eaa:	8c 93       	st	X, r24
		*out &= ~bit;
    1eac:	28 81       	ld	r18, Y
    1eae:	e2 23       	and	r30, r18
    1eb0:	e8 83       	st	Y, r30
		SREG = oldSREG;
    1eb2:	9f bf       	out	0x3f, r25	; 63
    1eb4:	14 c0       	rjmp	.+40     	; 0x1ede <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    1eb6:	62 30       	cpi	r22, 0x02	; 2
    1eb8:	61 f4       	brne	.+24     	; 0x1ed2 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    1eba:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1ebc:	f8 94       	cli
		*reg &= ~bit;
    1ebe:	3c 91       	ld	r19, X
    1ec0:	82 2f       	mov	r24, r18
    1ec2:	80 95       	com	r24
    1ec4:	83 23       	and	r24, r19
    1ec6:	8c 93       	st	X, r24
		*out |= bit;
    1ec8:	e8 81       	ld	r30, Y
    1eca:	e2 2b       	or	r30, r18
    1ecc:	e8 83       	st	Y, r30
		SREG = oldSREG;
    1ece:	9f bf       	out	0x3f, r25	; 63
    1ed0:	06 c0       	rjmp	.+12     	; 0x1ede <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    1ed2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1ed4:	f8 94       	cli
		*reg |= bit;
    1ed6:	ec 91       	ld	r30, X
    1ed8:	e2 2b       	or	r30, r18
    1eda:	ec 93       	st	X, r30
		SREG = oldSREG;
    1edc:	8f bf       	out	0x3f, r24	; 63
	}
}
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	08 95       	ret

00001ee4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1ee4:	1f 93       	push	r17
    1ee6:	cf 93       	push	r28
    1ee8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	f9 01       	movw	r30, r18
    1ef0:	e7 59       	subi	r30, 0x97	; 151
    1ef2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1ef6:	f9 01       	movw	r30, r18
    1ef8:	e3 58       	subi	r30, 0x83	; 131
    1efa:	fe 4f       	sbci	r31, 0xFE	; 254
    1efc:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    1efe:	f9 01       	movw	r30, r18
    1f00:	ef 56       	subi	r30, 0x6F	; 111
    1f02:	fe 4f       	sbci	r31, 0xFE	; 254
    1f04:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1f06:	cc 23       	and	r28, r28
    1f08:	d1 f0       	breq	.+52     	; 0x1f3e <digitalWrite+0x5a>
    1f0a:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1f0c:	81 11       	cpse	r24, r1
    1f0e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <turnOffPWM>

	out = portOutputRegister(port);
    1f12:	ec 2f       	mov	r30, r28
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	ee 0f       	add	r30, r30
    1f18:	ff 1f       	adc	r31, r31
    1f1a:	e1 55       	subi	r30, 0x51	; 81
    1f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1e:	a5 91       	lpm	r26, Z+
    1f20:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1f22:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1f24:	f8 94       	cli

	if (val == LOW) {
    1f26:	d1 11       	cpse	r29, r1
    1f28:	06 c0       	rjmp	.+12     	; 0x1f36 <digitalWrite+0x52>
		*out &= ~bit;
    1f2a:	9c 91       	ld	r25, X
    1f2c:	e1 2f       	mov	r30, r17
    1f2e:	e0 95       	com	r30
    1f30:	e9 23       	and	r30, r25
    1f32:	ec 93       	st	X, r30
    1f34:	03 c0       	rjmp	.+6      	; 0x1f3c <digitalWrite+0x58>
	} else {
		*out |= bit;
    1f36:	ec 91       	ld	r30, X
    1f38:	e1 2b       	or	r30, r17
    1f3a:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    1f3c:	8f bf       	out	0x3f, r24	; 63
}
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	1f 91       	pop	r17
    1f44:	08 95       	ret

00001f46 <__subsf3>:
    1f46:	50 58       	subi	r21, 0x80	; 128

00001f48 <__addsf3>:
    1f48:	bb 27       	eor	r27, r27
    1f4a:	aa 27       	eor	r26, r26
    1f4c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__addsf3x>
    1f50:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__fp_round>
    1f54:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__fp_pscA>
    1f58:	38 f0       	brcs	.+14     	; 0x1f68 <__addsf3+0x20>
    1f5a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__fp_pscB>
    1f5e:	20 f0       	brcs	.+8      	; 0x1f68 <__addsf3+0x20>
    1f60:	39 f4       	brne	.+14     	; 0x1f70 <__addsf3+0x28>
    1f62:	9f 3f       	cpi	r25, 0xFF	; 255
    1f64:	19 f4       	brne	.+6      	; 0x1f6c <__addsf3+0x24>
    1f66:	26 f4       	brtc	.+8      	; 0x1f70 <__addsf3+0x28>
    1f68:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__fp_nan>
    1f6c:	0e f4       	brtc	.+2      	; 0x1f70 <__addsf3+0x28>
    1f6e:	e0 95       	com	r30
    1f70:	e7 fb       	bst	r30, 7
    1f72:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__fp_inf>

00001f76 <__addsf3x>:
    1f76:	e9 2f       	mov	r30, r25
    1f78:	0e 94 10 11 	call	0x2220	; 0x2220 <__fp_split3>
    1f7c:	58 f3       	brcs	.-42     	; 0x1f54 <__addsf3+0xc>
    1f7e:	ba 17       	cp	r27, r26
    1f80:	62 07       	cpc	r22, r18
    1f82:	73 07       	cpc	r23, r19
    1f84:	84 07       	cpc	r24, r20
    1f86:	95 07       	cpc	r25, r21
    1f88:	20 f0       	brcs	.+8      	; 0x1f92 <__addsf3x+0x1c>
    1f8a:	79 f4       	brne	.+30     	; 0x1faa <__addsf3x+0x34>
    1f8c:	a6 f5       	brtc	.+104    	; 0x1ff6 <__addsf3x+0x80>
    1f8e:	0c 94 32 11 	jmp	0x2264	; 0x2264 <__fp_zero>
    1f92:	0e f4       	brtc	.+2      	; 0x1f96 <__addsf3x+0x20>
    1f94:	e0 95       	com	r30
    1f96:	0b 2e       	mov	r0, r27
    1f98:	ba 2f       	mov	r27, r26
    1f9a:	a0 2d       	mov	r26, r0
    1f9c:	0b 01       	movw	r0, r22
    1f9e:	b9 01       	movw	r22, r18
    1fa0:	90 01       	movw	r18, r0
    1fa2:	0c 01       	movw	r0, r24
    1fa4:	ca 01       	movw	r24, r20
    1fa6:	a0 01       	movw	r20, r0
    1fa8:	11 24       	eor	r1, r1
    1faa:	ff 27       	eor	r31, r31
    1fac:	59 1b       	sub	r21, r25
    1fae:	99 f0       	breq	.+38     	; 0x1fd6 <__addsf3x+0x60>
    1fb0:	59 3f       	cpi	r21, 0xF9	; 249
    1fb2:	50 f4       	brcc	.+20     	; 0x1fc8 <__addsf3x+0x52>
    1fb4:	50 3e       	cpi	r21, 0xE0	; 224
    1fb6:	68 f1       	brcs	.+90     	; 0x2012 <__addsf3x+0x9c>
    1fb8:	1a 16       	cp	r1, r26
    1fba:	f0 40       	sbci	r31, 0x00	; 0
    1fbc:	a2 2f       	mov	r26, r18
    1fbe:	23 2f       	mov	r18, r19
    1fc0:	34 2f       	mov	r19, r20
    1fc2:	44 27       	eor	r20, r20
    1fc4:	58 5f       	subi	r21, 0xF8	; 248
    1fc6:	f3 cf       	rjmp	.-26     	; 0x1fae <__addsf3x+0x38>
    1fc8:	46 95       	lsr	r20
    1fca:	37 95       	ror	r19
    1fcc:	27 95       	ror	r18
    1fce:	a7 95       	ror	r26
    1fd0:	f0 40       	sbci	r31, 0x00	; 0
    1fd2:	53 95       	inc	r21
    1fd4:	c9 f7       	brne	.-14     	; 0x1fc8 <__addsf3x+0x52>
    1fd6:	7e f4       	brtc	.+30     	; 0x1ff6 <__addsf3x+0x80>
    1fd8:	1f 16       	cp	r1, r31
    1fda:	ba 0b       	sbc	r27, r26
    1fdc:	62 0b       	sbc	r22, r18
    1fde:	73 0b       	sbc	r23, r19
    1fe0:	84 0b       	sbc	r24, r20
    1fe2:	ba f0       	brmi	.+46     	; 0x2012 <__addsf3x+0x9c>
    1fe4:	91 50       	subi	r25, 0x01	; 1
    1fe6:	a1 f0       	breq	.+40     	; 0x2010 <__addsf3x+0x9a>
    1fe8:	ff 0f       	add	r31, r31
    1fea:	bb 1f       	adc	r27, r27
    1fec:	66 1f       	adc	r22, r22
    1fee:	77 1f       	adc	r23, r23
    1ff0:	88 1f       	adc	r24, r24
    1ff2:	c2 f7       	brpl	.-16     	; 0x1fe4 <__addsf3x+0x6e>
    1ff4:	0e c0       	rjmp	.+28     	; 0x2012 <__addsf3x+0x9c>
    1ff6:	ba 0f       	add	r27, r26
    1ff8:	62 1f       	adc	r22, r18
    1ffa:	73 1f       	adc	r23, r19
    1ffc:	84 1f       	adc	r24, r20
    1ffe:	48 f4       	brcc	.+18     	; 0x2012 <__addsf3x+0x9c>
    2000:	87 95       	ror	r24
    2002:	77 95       	ror	r23
    2004:	67 95       	ror	r22
    2006:	b7 95       	ror	r27
    2008:	f7 95       	ror	r31
    200a:	9e 3f       	cpi	r25, 0xFE	; 254
    200c:	08 f0       	brcs	.+2      	; 0x2010 <__addsf3x+0x9a>
    200e:	b0 cf       	rjmp	.-160    	; 0x1f70 <__addsf3+0x28>
    2010:	93 95       	inc	r25
    2012:	88 0f       	add	r24, r24
    2014:	08 f0       	brcs	.+2      	; 0x2018 <__addsf3x+0xa2>
    2016:	99 27       	eor	r25, r25
    2018:	ee 0f       	add	r30, r30
    201a:	97 95       	ror	r25
    201c:	87 95       	ror	r24
    201e:	08 95       	ret

00002020 <__cmpsf2>:
    2020:	0e 94 c4 10 	call	0x2188	; 0x2188 <__fp_cmp>
    2024:	08 f4       	brcc	.+2      	; 0x2028 <__cmpsf2+0x8>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	08 95       	ret

0000202a <__divsf3>:
    202a:	0e 94 29 10 	call	0x2052	; 0x2052 <__divsf3x>
    202e:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__fp_round>
    2032:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__fp_pscB>
    2036:	58 f0       	brcs	.+22     	; 0x204e <__divsf3+0x24>
    2038:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__fp_pscA>
    203c:	40 f0       	brcs	.+16     	; 0x204e <__divsf3+0x24>
    203e:	29 f4       	brne	.+10     	; 0x204a <__divsf3+0x20>
    2040:	5f 3f       	cpi	r21, 0xFF	; 255
    2042:	29 f0       	breq	.+10     	; 0x204e <__divsf3+0x24>
    2044:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__fp_inf>
    2048:	51 11       	cpse	r21, r1
    204a:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__fp_szero>
    204e:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__fp_nan>

00002052 <__divsf3x>:
    2052:	0e 94 10 11 	call	0x2220	; 0x2220 <__fp_split3>
    2056:	68 f3       	brcs	.-38     	; 0x2032 <__divsf3+0x8>

00002058 <__divsf3_pse>:
    2058:	99 23       	and	r25, r25
    205a:	b1 f3       	breq	.-20     	; 0x2048 <__divsf3+0x1e>
    205c:	55 23       	and	r21, r21
    205e:	91 f3       	breq	.-28     	; 0x2044 <__divsf3+0x1a>
    2060:	95 1b       	sub	r25, r21
    2062:	55 0b       	sbc	r21, r21
    2064:	bb 27       	eor	r27, r27
    2066:	aa 27       	eor	r26, r26
    2068:	62 17       	cp	r22, r18
    206a:	73 07       	cpc	r23, r19
    206c:	84 07       	cpc	r24, r20
    206e:	38 f0       	brcs	.+14     	; 0x207e <__divsf3_pse+0x26>
    2070:	9f 5f       	subi	r25, 0xFF	; 255
    2072:	5f 4f       	sbci	r21, 0xFF	; 255
    2074:	22 0f       	add	r18, r18
    2076:	33 1f       	adc	r19, r19
    2078:	44 1f       	adc	r20, r20
    207a:	aa 1f       	adc	r26, r26
    207c:	a9 f3       	breq	.-22     	; 0x2068 <__divsf3_pse+0x10>
    207e:	35 d0       	rcall	.+106    	; 0x20ea <__divsf3_pse+0x92>
    2080:	0e 2e       	mov	r0, r30
    2082:	3a f0       	brmi	.+14     	; 0x2092 <__divsf3_pse+0x3a>
    2084:	e0 e8       	ldi	r30, 0x80	; 128
    2086:	32 d0       	rcall	.+100    	; 0x20ec <__divsf3_pse+0x94>
    2088:	91 50       	subi	r25, 0x01	; 1
    208a:	50 40       	sbci	r21, 0x00	; 0
    208c:	e6 95       	lsr	r30
    208e:	00 1c       	adc	r0, r0
    2090:	ca f7       	brpl	.-14     	; 0x2084 <__divsf3_pse+0x2c>
    2092:	2b d0       	rcall	.+86     	; 0x20ea <__divsf3_pse+0x92>
    2094:	fe 2f       	mov	r31, r30
    2096:	29 d0       	rcall	.+82     	; 0x20ea <__divsf3_pse+0x92>
    2098:	66 0f       	add	r22, r22
    209a:	77 1f       	adc	r23, r23
    209c:	88 1f       	adc	r24, r24
    209e:	bb 1f       	adc	r27, r27
    20a0:	26 17       	cp	r18, r22
    20a2:	37 07       	cpc	r19, r23
    20a4:	48 07       	cpc	r20, r24
    20a6:	ab 07       	cpc	r26, r27
    20a8:	b0 e8       	ldi	r27, 0x80	; 128
    20aa:	09 f0       	breq	.+2      	; 0x20ae <__divsf3_pse+0x56>
    20ac:	bb 0b       	sbc	r27, r27
    20ae:	80 2d       	mov	r24, r0
    20b0:	bf 01       	movw	r22, r30
    20b2:	ff 27       	eor	r31, r31
    20b4:	93 58       	subi	r25, 0x83	; 131
    20b6:	5f 4f       	sbci	r21, 0xFF	; 255
    20b8:	3a f0       	brmi	.+14     	; 0x20c8 <__divsf3_pse+0x70>
    20ba:	9e 3f       	cpi	r25, 0xFE	; 254
    20bc:	51 05       	cpc	r21, r1
    20be:	78 f0       	brcs	.+30     	; 0x20de <__divsf3_pse+0x86>
    20c0:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__fp_inf>
    20c4:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__fp_szero>
    20c8:	5f 3f       	cpi	r21, 0xFF	; 255
    20ca:	e4 f3       	brlt	.-8      	; 0x20c4 <__divsf3_pse+0x6c>
    20cc:	98 3e       	cpi	r25, 0xE8	; 232
    20ce:	d4 f3       	brlt	.-12     	; 0x20c4 <__divsf3_pse+0x6c>
    20d0:	86 95       	lsr	r24
    20d2:	77 95       	ror	r23
    20d4:	67 95       	ror	r22
    20d6:	b7 95       	ror	r27
    20d8:	f7 95       	ror	r31
    20da:	9f 5f       	subi	r25, 0xFF	; 255
    20dc:	c9 f7       	brne	.-14     	; 0x20d0 <__divsf3_pse+0x78>
    20de:	88 0f       	add	r24, r24
    20e0:	91 1d       	adc	r25, r1
    20e2:	96 95       	lsr	r25
    20e4:	87 95       	ror	r24
    20e6:	97 f9       	bld	r25, 7
    20e8:	08 95       	ret
    20ea:	e1 e0       	ldi	r30, 0x01	; 1
    20ec:	66 0f       	add	r22, r22
    20ee:	77 1f       	adc	r23, r23
    20f0:	88 1f       	adc	r24, r24
    20f2:	bb 1f       	adc	r27, r27
    20f4:	62 17       	cp	r22, r18
    20f6:	73 07       	cpc	r23, r19
    20f8:	84 07       	cpc	r24, r20
    20fa:	ba 07       	cpc	r27, r26
    20fc:	20 f0       	brcs	.+8      	; 0x2106 <__divsf3_pse+0xae>
    20fe:	62 1b       	sub	r22, r18
    2100:	73 0b       	sbc	r23, r19
    2102:	84 0b       	sbc	r24, r20
    2104:	ba 0b       	sbc	r27, r26
    2106:	ee 1f       	adc	r30, r30
    2108:	88 f7       	brcc	.-30     	; 0x20ec <__divsf3_pse+0x94>
    210a:	e0 95       	com	r30
    210c:	08 95       	ret

0000210e <__floatunsisf>:
    210e:	e8 94       	clt
    2110:	09 c0       	rjmp	.+18     	; 0x2124 <__floatsisf+0x12>

00002112 <__floatsisf>:
    2112:	97 fb       	bst	r25, 7
    2114:	3e f4       	brtc	.+14     	; 0x2124 <__floatsisf+0x12>
    2116:	90 95       	com	r25
    2118:	80 95       	com	r24
    211a:	70 95       	com	r23
    211c:	61 95       	neg	r22
    211e:	7f 4f       	sbci	r23, 0xFF	; 255
    2120:	8f 4f       	sbci	r24, 0xFF	; 255
    2122:	9f 4f       	sbci	r25, 0xFF	; 255
    2124:	99 23       	and	r25, r25
    2126:	a9 f0       	breq	.+42     	; 0x2152 <__floatsisf+0x40>
    2128:	f9 2f       	mov	r31, r25
    212a:	96 e9       	ldi	r25, 0x96	; 150
    212c:	bb 27       	eor	r27, r27
    212e:	93 95       	inc	r25
    2130:	f6 95       	lsr	r31
    2132:	87 95       	ror	r24
    2134:	77 95       	ror	r23
    2136:	67 95       	ror	r22
    2138:	b7 95       	ror	r27
    213a:	f1 11       	cpse	r31, r1
    213c:	f8 cf       	rjmp	.-16     	; 0x212e <__floatsisf+0x1c>
    213e:	fa f4       	brpl	.+62     	; 0x217e <__floatsisf+0x6c>
    2140:	bb 0f       	add	r27, r27
    2142:	11 f4       	brne	.+4      	; 0x2148 <__floatsisf+0x36>
    2144:	60 ff       	sbrs	r22, 0
    2146:	1b c0       	rjmp	.+54     	; 0x217e <__floatsisf+0x6c>
    2148:	6f 5f       	subi	r22, 0xFF	; 255
    214a:	7f 4f       	sbci	r23, 0xFF	; 255
    214c:	8f 4f       	sbci	r24, 0xFF	; 255
    214e:	9f 4f       	sbci	r25, 0xFF	; 255
    2150:	16 c0       	rjmp	.+44     	; 0x217e <__floatsisf+0x6c>
    2152:	88 23       	and	r24, r24
    2154:	11 f0       	breq	.+4      	; 0x215a <__floatsisf+0x48>
    2156:	96 e9       	ldi	r25, 0x96	; 150
    2158:	11 c0       	rjmp	.+34     	; 0x217c <__floatsisf+0x6a>
    215a:	77 23       	and	r23, r23
    215c:	21 f0       	breq	.+8      	; 0x2166 <__floatsisf+0x54>
    215e:	9e e8       	ldi	r25, 0x8E	; 142
    2160:	87 2f       	mov	r24, r23
    2162:	76 2f       	mov	r23, r22
    2164:	05 c0       	rjmp	.+10     	; 0x2170 <__floatsisf+0x5e>
    2166:	66 23       	and	r22, r22
    2168:	71 f0       	breq	.+28     	; 0x2186 <__floatsisf+0x74>
    216a:	96 e8       	ldi	r25, 0x86	; 134
    216c:	86 2f       	mov	r24, r22
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	60 e0       	ldi	r22, 0x00	; 0
    2172:	2a f0       	brmi	.+10     	; 0x217e <__floatsisf+0x6c>
    2174:	9a 95       	dec	r25
    2176:	66 0f       	add	r22, r22
    2178:	77 1f       	adc	r23, r23
    217a:	88 1f       	adc	r24, r24
    217c:	da f7       	brpl	.-10     	; 0x2174 <__floatsisf+0x62>
    217e:	88 0f       	add	r24, r24
    2180:	96 95       	lsr	r25
    2182:	87 95       	ror	r24
    2184:	97 f9       	bld	r25, 7
    2186:	08 95       	ret

00002188 <__fp_cmp>:
    2188:	99 0f       	add	r25, r25
    218a:	00 08       	sbc	r0, r0
    218c:	55 0f       	add	r21, r21
    218e:	aa 0b       	sbc	r26, r26
    2190:	e0 e8       	ldi	r30, 0x80	; 128
    2192:	fe ef       	ldi	r31, 0xFE	; 254
    2194:	16 16       	cp	r1, r22
    2196:	17 06       	cpc	r1, r23
    2198:	e8 07       	cpc	r30, r24
    219a:	f9 07       	cpc	r31, r25
    219c:	c0 f0       	brcs	.+48     	; 0x21ce <__fp_cmp+0x46>
    219e:	12 16       	cp	r1, r18
    21a0:	13 06       	cpc	r1, r19
    21a2:	e4 07       	cpc	r30, r20
    21a4:	f5 07       	cpc	r31, r21
    21a6:	98 f0       	brcs	.+38     	; 0x21ce <__fp_cmp+0x46>
    21a8:	62 1b       	sub	r22, r18
    21aa:	73 0b       	sbc	r23, r19
    21ac:	84 0b       	sbc	r24, r20
    21ae:	95 0b       	sbc	r25, r21
    21b0:	39 f4       	brne	.+14     	; 0x21c0 <__fp_cmp+0x38>
    21b2:	0a 26       	eor	r0, r26
    21b4:	61 f0       	breq	.+24     	; 0x21ce <__fp_cmp+0x46>
    21b6:	23 2b       	or	r18, r19
    21b8:	24 2b       	or	r18, r20
    21ba:	25 2b       	or	r18, r21
    21bc:	21 f4       	brne	.+8      	; 0x21c6 <__fp_cmp+0x3e>
    21be:	08 95       	ret
    21c0:	0a 26       	eor	r0, r26
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <__fp_cmp+0x3e>
    21c4:	a1 40       	sbci	r26, 0x01	; 1
    21c6:	a6 95       	lsr	r26
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	81 1d       	adc	r24, r1
    21cc:	81 1d       	adc	r24, r1
    21ce:	08 95       	ret

000021d0 <__fp_inf>:
    21d0:	97 f9       	bld	r25, 7
    21d2:	9f 67       	ori	r25, 0x7F	; 127
    21d4:	80 e8       	ldi	r24, 0x80	; 128
    21d6:	70 e0       	ldi	r23, 0x00	; 0
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	08 95       	ret

000021dc <__fp_nan>:
    21dc:	9f ef       	ldi	r25, 0xFF	; 255
    21de:	80 ec       	ldi	r24, 0xC0	; 192
    21e0:	08 95       	ret

000021e2 <__fp_pscA>:
    21e2:	00 24       	eor	r0, r0
    21e4:	0a 94       	dec	r0
    21e6:	16 16       	cp	r1, r22
    21e8:	17 06       	cpc	r1, r23
    21ea:	18 06       	cpc	r1, r24
    21ec:	09 06       	cpc	r0, r25
    21ee:	08 95       	ret

000021f0 <__fp_pscB>:
    21f0:	00 24       	eor	r0, r0
    21f2:	0a 94       	dec	r0
    21f4:	12 16       	cp	r1, r18
    21f6:	13 06       	cpc	r1, r19
    21f8:	14 06       	cpc	r1, r20
    21fa:	05 06       	cpc	r0, r21
    21fc:	08 95       	ret

000021fe <__fp_round>:
    21fe:	09 2e       	mov	r0, r25
    2200:	03 94       	inc	r0
    2202:	00 0c       	add	r0, r0
    2204:	11 f4       	brne	.+4      	; 0x220a <__fp_round+0xc>
    2206:	88 23       	and	r24, r24
    2208:	52 f0       	brmi	.+20     	; 0x221e <__fp_round+0x20>
    220a:	bb 0f       	add	r27, r27
    220c:	40 f4       	brcc	.+16     	; 0x221e <__fp_round+0x20>
    220e:	bf 2b       	or	r27, r31
    2210:	11 f4       	brne	.+4      	; 0x2216 <__fp_round+0x18>
    2212:	60 ff       	sbrs	r22, 0
    2214:	04 c0       	rjmp	.+8      	; 0x221e <__fp_round+0x20>
    2216:	6f 5f       	subi	r22, 0xFF	; 255
    2218:	7f 4f       	sbci	r23, 0xFF	; 255
    221a:	8f 4f       	sbci	r24, 0xFF	; 255
    221c:	9f 4f       	sbci	r25, 0xFF	; 255
    221e:	08 95       	ret

00002220 <__fp_split3>:
    2220:	57 fd       	sbrc	r21, 7
    2222:	90 58       	subi	r25, 0x80	; 128
    2224:	44 0f       	add	r20, r20
    2226:	55 1f       	adc	r21, r21
    2228:	59 f0       	breq	.+22     	; 0x2240 <__fp_splitA+0x10>
    222a:	5f 3f       	cpi	r21, 0xFF	; 255
    222c:	71 f0       	breq	.+28     	; 0x224a <__fp_splitA+0x1a>
    222e:	47 95       	ror	r20

00002230 <__fp_splitA>:
    2230:	88 0f       	add	r24, r24
    2232:	97 fb       	bst	r25, 7
    2234:	99 1f       	adc	r25, r25
    2236:	61 f0       	breq	.+24     	; 0x2250 <__fp_splitA+0x20>
    2238:	9f 3f       	cpi	r25, 0xFF	; 255
    223a:	79 f0       	breq	.+30     	; 0x225a <__fp_splitA+0x2a>
    223c:	87 95       	ror	r24
    223e:	08 95       	ret
    2240:	12 16       	cp	r1, r18
    2242:	13 06       	cpc	r1, r19
    2244:	14 06       	cpc	r1, r20
    2246:	55 1f       	adc	r21, r21
    2248:	f2 cf       	rjmp	.-28     	; 0x222e <__fp_split3+0xe>
    224a:	46 95       	lsr	r20
    224c:	f1 df       	rcall	.-30     	; 0x2230 <__fp_splitA>
    224e:	08 c0       	rjmp	.+16     	; 0x2260 <__fp_splitA+0x30>
    2250:	16 16       	cp	r1, r22
    2252:	17 06       	cpc	r1, r23
    2254:	18 06       	cpc	r1, r24
    2256:	99 1f       	adc	r25, r25
    2258:	f1 cf       	rjmp	.-30     	; 0x223c <__fp_splitA+0xc>
    225a:	86 95       	lsr	r24
    225c:	71 05       	cpc	r23, r1
    225e:	61 05       	cpc	r22, r1
    2260:	08 94       	sec
    2262:	08 95       	ret

00002264 <__fp_zero>:
    2264:	e8 94       	clt

00002266 <__fp_szero>:
    2266:	bb 27       	eor	r27, r27
    2268:	66 27       	eor	r22, r22
    226a:	77 27       	eor	r23, r23
    226c:	cb 01       	movw	r24, r22
    226e:	97 f9       	bld	r25, 7
    2270:	08 95       	ret

00002272 <__gesf2>:
    2272:	0e 94 c4 10 	call	0x2188	; 0x2188 <__fp_cmp>
    2276:	08 f4       	brcc	.+2      	; 0x227a <__gesf2+0x8>
    2278:	8f ef       	ldi	r24, 0xFF	; 255
    227a:	08 95       	ret

0000227c <__mulsf3>:
    227c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__mulsf3x>
    2280:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__fp_round>
    2284:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__fp_pscA>
    2288:	38 f0       	brcs	.+14     	; 0x2298 <__mulsf3+0x1c>
    228a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__fp_pscB>
    228e:	20 f0       	brcs	.+8      	; 0x2298 <__mulsf3+0x1c>
    2290:	95 23       	and	r25, r21
    2292:	11 f0       	breq	.+4      	; 0x2298 <__mulsf3+0x1c>
    2294:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__fp_inf>
    2298:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__fp_nan>
    229c:	11 24       	eor	r1, r1
    229e:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__fp_szero>

000022a2 <__mulsf3x>:
    22a2:	0e 94 10 11 	call	0x2220	; 0x2220 <__fp_split3>
    22a6:	70 f3       	brcs	.-36     	; 0x2284 <__mulsf3+0x8>

000022a8 <__mulsf3_pse>:
    22a8:	95 9f       	mul	r25, r21
    22aa:	c1 f3       	breq	.-16     	; 0x229c <__mulsf3+0x20>
    22ac:	95 0f       	add	r25, r21
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	55 1f       	adc	r21, r21
    22b2:	62 9f       	mul	r22, r18
    22b4:	f0 01       	movw	r30, r0
    22b6:	72 9f       	mul	r23, r18
    22b8:	bb 27       	eor	r27, r27
    22ba:	f0 0d       	add	r31, r0
    22bc:	b1 1d       	adc	r27, r1
    22be:	63 9f       	mul	r22, r19
    22c0:	aa 27       	eor	r26, r26
    22c2:	f0 0d       	add	r31, r0
    22c4:	b1 1d       	adc	r27, r1
    22c6:	aa 1f       	adc	r26, r26
    22c8:	64 9f       	mul	r22, r20
    22ca:	66 27       	eor	r22, r22
    22cc:	b0 0d       	add	r27, r0
    22ce:	a1 1d       	adc	r26, r1
    22d0:	66 1f       	adc	r22, r22
    22d2:	82 9f       	mul	r24, r18
    22d4:	22 27       	eor	r18, r18
    22d6:	b0 0d       	add	r27, r0
    22d8:	a1 1d       	adc	r26, r1
    22da:	62 1f       	adc	r22, r18
    22dc:	73 9f       	mul	r23, r19
    22de:	b0 0d       	add	r27, r0
    22e0:	a1 1d       	adc	r26, r1
    22e2:	62 1f       	adc	r22, r18
    22e4:	83 9f       	mul	r24, r19
    22e6:	a0 0d       	add	r26, r0
    22e8:	61 1d       	adc	r22, r1
    22ea:	22 1f       	adc	r18, r18
    22ec:	74 9f       	mul	r23, r20
    22ee:	33 27       	eor	r19, r19
    22f0:	a0 0d       	add	r26, r0
    22f2:	61 1d       	adc	r22, r1
    22f4:	23 1f       	adc	r18, r19
    22f6:	84 9f       	mul	r24, r20
    22f8:	60 0d       	add	r22, r0
    22fa:	21 1d       	adc	r18, r1
    22fc:	82 2f       	mov	r24, r18
    22fe:	76 2f       	mov	r23, r22
    2300:	6a 2f       	mov	r22, r26
    2302:	11 24       	eor	r1, r1
    2304:	9f 57       	subi	r25, 0x7F	; 127
    2306:	50 40       	sbci	r21, 0x00	; 0
    2308:	9a f0       	brmi	.+38     	; 0x2330 <__mulsf3_pse+0x88>
    230a:	f1 f0       	breq	.+60     	; 0x2348 <__mulsf3_pse+0xa0>
    230c:	88 23       	and	r24, r24
    230e:	4a f0       	brmi	.+18     	; 0x2322 <__mulsf3_pse+0x7a>
    2310:	ee 0f       	add	r30, r30
    2312:	ff 1f       	adc	r31, r31
    2314:	bb 1f       	adc	r27, r27
    2316:	66 1f       	adc	r22, r22
    2318:	77 1f       	adc	r23, r23
    231a:	88 1f       	adc	r24, r24
    231c:	91 50       	subi	r25, 0x01	; 1
    231e:	50 40       	sbci	r21, 0x00	; 0
    2320:	a9 f7       	brne	.-22     	; 0x230c <__mulsf3_pse+0x64>
    2322:	9e 3f       	cpi	r25, 0xFE	; 254
    2324:	51 05       	cpc	r21, r1
    2326:	80 f0       	brcs	.+32     	; 0x2348 <__mulsf3_pse+0xa0>
    2328:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__fp_inf>
    232c:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__fp_szero>
    2330:	5f 3f       	cpi	r21, 0xFF	; 255
    2332:	e4 f3       	brlt	.-8      	; 0x232c <__mulsf3_pse+0x84>
    2334:	98 3e       	cpi	r25, 0xE8	; 232
    2336:	d4 f3       	brlt	.-12     	; 0x232c <__mulsf3_pse+0x84>
    2338:	86 95       	lsr	r24
    233a:	77 95       	ror	r23
    233c:	67 95       	ror	r22
    233e:	b7 95       	ror	r27
    2340:	f7 95       	ror	r31
    2342:	e7 95       	ror	r30
    2344:	9f 5f       	subi	r25, 0xFF	; 255
    2346:	c1 f7       	brne	.-16     	; 0x2338 <__mulsf3_pse+0x90>
    2348:	fe 2b       	or	r31, r30
    234a:	88 0f       	add	r24, r24
    234c:	91 1d       	adc	r25, r1
    234e:	96 95       	lsr	r25
    2350:	87 95       	ror	r24
    2352:	97 f9       	bld	r25, 7
    2354:	08 95       	ret

00002356 <__udivmodsi4>:
    2356:	a1 e2       	ldi	r26, 0x21	; 33
    2358:	1a 2e       	mov	r1, r26
    235a:	aa 1b       	sub	r26, r26
    235c:	bb 1b       	sub	r27, r27
    235e:	fd 01       	movw	r30, r26
    2360:	0d c0       	rjmp	.+26     	; 0x237c <__udivmodsi4_ep>

00002362 <__udivmodsi4_loop>:
    2362:	aa 1f       	adc	r26, r26
    2364:	bb 1f       	adc	r27, r27
    2366:	ee 1f       	adc	r30, r30
    2368:	ff 1f       	adc	r31, r31
    236a:	a2 17       	cp	r26, r18
    236c:	b3 07       	cpc	r27, r19
    236e:	e4 07       	cpc	r30, r20
    2370:	f5 07       	cpc	r31, r21
    2372:	20 f0       	brcs	.+8      	; 0x237c <__udivmodsi4_ep>
    2374:	a2 1b       	sub	r26, r18
    2376:	b3 0b       	sbc	r27, r19
    2378:	e4 0b       	sbc	r30, r20
    237a:	f5 0b       	sbc	r31, r21

0000237c <__udivmodsi4_ep>:
    237c:	66 1f       	adc	r22, r22
    237e:	77 1f       	adc	r23, r23
    2380:	88 1f       	adc	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	1a 94       	dec	r1
    2386:	69 f7       	brne	.-38     	; 0x2362 <__udivmodsi4_loop>
    2388:	60 95       	com	r22
    238a:	70 95       	com	r23
    238c:	80 95       	com	r24
    238e:	90 95       	com	r25
    2390:	9b 01       	movw	r18, r22
    2392:	ac 01       	movw	r20, r24
    2394:	bd 01       	movw	r22, r26
    2396:	cf 01       	movw	r24, r30
    2398:	08 95       	ret

0000239a <__tablejump2__>:
    239a:	ee 0f       	add	r30, r30
    239c:	ff 1f       	adc	r31, r31
    239e:	05 90       	lpm	r0, Z+
    23a0:	f4 91       	lpm	r31, Z
    23a2:	e0 2d       	mov	r30, r0
    23a4:	09 94       	ijmp

000023a6 <sprintf>:
    23a6:	ae e0       	ldi	r26, 0x0E	; 14
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e9 ed       	ldi	r30, 0xD9	; 217
    23ac:	f1 e1       	ldi	r31, 0x11	; 17
    23ae:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__prologue_saves__+0x1c>
    23b2:	0d 89       	ldd	r16, Y+21	; 0x15
    23b4:	1e 89       	ldd	r17, Y+22	; 0x16
    23b6:	86 e0       	ldi	r24, 0x06	; 6
    23b8:	8c 83       	std	Y+4, r24	; 0x04
    23ba:	1a 83       	std	Y+2, r17	; 0x02
    23bc:	09 83       	std	Y+1, r16	; 0x01
    23be:	8f ef       	ldi	r24, 0xFF	; 255
    23c0:	9f e7       	ldi	r25, 0x7F	; 127
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	ae 01       	movw	r20, r28
    23c8:	47 5e       	subi	r20, 0xE7	; 231
    23ca:	5f 4f       	sbci	r21, 0xFF	; 255
    23cc:	6f 89       	ldd	r22, Y+23	; 0x17
    23ce:	78 8d       	ldd	r23, Y+24	; 0x18
    23d0:	ce 01       	movw	r24, r28
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <vfprintf>
    23d8:	2f 81       	ldd	r18, Y+7	; 0x07
    23da:	38 85       	ldd	r19, Y+8	; 0x08
    23dc:	f8 01       	movw	r30, r16
    23de:	e2 0f       	add	r30, r18
    23e0:	f3 1f       	adc	r31, r19
    23e2:	10 82       	st	Z, r1
    23e4:	2e 96       	adiw	r28, 0x0e	; 14
    23e6:	e4 e0       	ldi	r30, 0x04	; 4
    23e8:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__epilogue_restores__+0x1c>

000023ec <vfprintf>:
    23ec:	ac e0       	ldi	r26, 0x0C	; 12
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	ec ef       	ldi	r30, 0xFC	; 252
    23f2:	f1 e1       	ldi	r31, 0x11	; 17
    23f4:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__prologue_saves__>
    23f8:	7c 01       	movw	r14, r24
    23fa:	6b 01       	movw	r12, r22
    23fc:	8a 01       	movw	r16, r20
    23fe:	fc 01       	movw	r30, r24
    2400:	17 82       	std	Z+7, r1	; 0x07
    2402:	16 82       	std	Z+6, r1	; 0x06
    2404:	83 81       	ldd	r24, Z+3	; 0x03
    2406:	81 ff       	sbrs	r24, 1
    2408:	bd c1       	rjmp	.+890    	; 0x2784 <vfprintf+0x398>
    240a:	ce 01       	movw	r24, r28
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	4c 01       	movw	r8, r24
    2410:	f7 01       	movw	r30, r14
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	f6 01       	movw	r30, r12
    2416:	93 fd       	sbrc	r25, 3
    2418:	85 91       	lpm	r24, Z+
    241a:	93 ff       	sbrs	r25, 3
    241c:	81 91       	ld	r24, Z+
    241e:	6f 01       	movw	r12, r30
    2420:	88 23       	and	r24, r24
    2422:	09 f4       	brne	.+2      	; 0x2426 <vfprintf+0x3a>
    2424:	ab c1       	rjmp	.+854    	; 0x277c <vfprintf+0x390>
    2426:	85 32       	cpi	r24, 0x25	; 37
    2428:	39 f4       	brne	.+14     	; 0x2438 <vfprintf+0x4c>
    242a:	93 fd       	sbrc	r25, 3
    242c:	85 91       	lpm	r24, Z+
    242e:	93 ff       	sbrs	r25, 3
    2430:	81 91       	ld	r24, Z+
    2432:	6f 01       	movw	r12, r30
    2434:	85 32       	cpi	r24, 0x25	; 37
    2436:	29 f4       	brne	.+10     	; 0x2442 <vfprintf+0x56>
    2438:	b7 01       	movw	r22, r14
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0e 94 de 13 	call	0x27bc	; 0x27bc <fputc>
    2440:	e7 cf       	rjmp	.-50     	; 0x2410 <vfprintf+0x24>
    2442:	51 2c       	mov	r5, r1
    2444:	31 2c       	mov	r3, r1
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	20 32       	cpi	r18, 0x20	; 32
    244a:	a0 f4       	brcc	.+40     	; 0x2474 <vfprintf+0x88>
    244c:	8b 32       	cpi	r24, 0x2B	; 43
    244e:	69 f0       	breq	.+26     	; 0x246a <vfprintf+0x7e>
    2450:	30 f4       	brcc	.+12     	; 0x245e <vfprintf+0x72>
    2452:	80 32       	cpi	r24, 0x20	; 32
    2454:	59 f0       	breq	.+22     	; 0x246c <vfprintf+0x80>
    2456:	83 32       	cpi	r24, 0x23	; 35
    2458:	69 f4       	brne	.+26     	; 0x2474 <vfprintf+0x88>
    245a:	20 61       	ori	r18, 0x10	; 16
    245c:	2c c0       	rjmp	.+88     	; 0x24b6 <vfprintf+0xca>
    245e:	8d 32       	cpi	r24, 0x2D	; 45
    2460:	39 f0       	breq	.+14     	; 0x2470 <vfprintf+0x84>
    2462:	80 33       	cpi	r24, 0x30	; 48
    2464:	39 f4       	brne	.+14     	; 0x2474 <vfprintf+0x88>
    2466:	21 60       	ori	r18, 0x01	; 1
    2468:	26 c0       	rjmp	.+76     	; 0x24b6 <vfprintf+0xca>
    246a:	22 60       	ori	r18, 0x02	; 2
    246c:	24 60       	ori	r18, 0x04	; 4
    246e:	23 c0       	rjmp	.+70     	; 0x24b6 <vfprintf+0xca>
    2470:	28 60       	ori	r18, 0x08	; 8
    2472:	21 c0       	rjmp	.+66     	; 0x24b6 <vfprintf+0xca>
    2474:	27 fd       	sbrc	r18, 7
    2476:	27 c0       	rjmp	.+78     	; 0x24c6 <vfprintf+0xda>
    2478:	30 ed       	ldi	r19, 0xD0	; 208
    247a:	38 0f       	add	r19, r24
    247c:	3a 30       	cpi	r19, 0x0A	; 10
    247e:	78 f4       	brcc	.+30     	; 0x249e <vfprintf+0xb2>
    2480:	26 ff       	sbrs	r18, 6
    2482:	06 c0       	rjmp	.+12     	; 0x2490 <vfprintf+0xa4>
    2484:	fa e0       	ldi	r31, 0x0A	; 10
    2486:	5f 9e       	mul	r5, r31
    2488:	30 0d       	add	r19, r0
    248a:	11 24       	eor	r1, r1
    248c:	53 2e       	mov	r5, r19
    248e:	13 c0       	rjmp	.+38     	; 0x24b6 <vfprintf+0xca>
    2490:	8a e0       	ldi	r24, 0x0A	; 10
    2492:	38 9e       	mul	r3, r24
    2494:	30 0d       	add	r19, r0
    2496:	11 24       	eor	r1, r1
    2498:	33 2e       	mov	r3, r19
    249a:	20 62       	ori	r18, 0x20	; 32
    249c:	0c c0       	rjmp	.+24     	; 0x24b6 <vfprintf+0xca>
    249e:	8e 32       	cpi	r24, 0x2E	; 46
    24a0:	21 f4       	brne	.+8      	; 0x24aa <vfprintf+0xbe>
    24a2:	26 fd       	sbrc	r18, 6
    24a4:	6b c1       	rjmp	.+726    	; 0x277c <vfprintf+0x390>
    24a6:	20 64       	ori	r18, 0x40	; 64
    24a8:	06 c0       	rjmp	.+12     	; 0x24b6 <vfprintf+0xca>
    24aa:	8c 36       	cpi	r24, 0x6C	; 108
    24ac:	11 f4       	brne	.+4      	; 0x24b2 <vfprintf+0xc6>
    24ae:	20 68       	ori	r18, 0x80	; 128
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <vfprintf+0xca>
    24b2:	88 36       	cpi	r24, 0x68	; 104
    24b4:	41 f4       	brne	.+16     	; 0x24c6 <vfprintf+0xda>
    24b6:	f6 01       	movw	r30, r12
    24b8:	93 fd       	sbrc	r25, 3
    24ba:	85 91       	lpm	r24, Z+
    24bc:	93 ff       	sbrs	r25, 3
    24be:	81 91       	ld	r24, Z+
    24c0:	6f 01       	movw	r12, r30
    24c2:	81 11       	cpse	r24, r1
    24c4:	c1 cf       	rjmp	.-126    	; 0x2448 <vfprintf+0x5c>
    24c6:	98 2f       	mov	r25, r24
    24c8:	9f 7d       	andi	r25, 0xDF	; 223
    24ca:	95 54       	subi	r25, 0x45	; 69
    24cc:	93 30       	cpi	r25, 0x03	; 3
    24ce:	28 f4       	brcc	.+10     	; 0x24da <vfprintf+0xee>
    24d0:	0c 5f       	subi	r16, 0xFC	; 252
    24d2:	1f 4f       	sbci	r17, 0xFF	; 255
    24d4:	ff e3       	ldi	r31, 0x3F	; 63
    24d6:	f9 83       	std	Y+1, r31	; 0x01
    24d8:	0d c0       	rjmp	.+26     	; 0x24f4 <vfprintf+0x108>
    24da:	83 36       	cpi	r24, 0x63	; 99
    24dc:	31 f0       	breq	.+12     	; 0x24ea <vfprintf+0xfe>
    24de:	83 37       	cpi	r24, 0x73	; 115
    24e0:	71 f0       	breq	.+28     	; 0x24fe <vfprintf+0x112>
    24e2:	83 35       	cpi	r24, 0x53	; 83
    24e4:	09 f0       	breq	.+2      	; 0x24e8 <vfprintf+0xfc>
    24e6:	5b c0       	rjmp	.+182    	; 0x259e <vfprintf+0x1b2>
    24e8:	22 c0       	rjmp	.+68     	; 0x252e <vfprintf+0x142>
    24ea:	f8 01       	movw	r30, r16
    24ec:	80 81       	ld	r24, Z
    24ee:	89 83       	std	Y+1, r24	; 0x01
    24f0:	0e 5f       	subi	r16, 0xFE	; 254
    24f2:	1f 4f       	sbci	r17, 0xFF	; 255
    24f4:	44 24       	eor	r4, r4
    24f6:	43 94       	inc	r4
    24f8:	51 2c       	mov	r5, r1
    24fa:	54 01       	movw	r10, r8
    24fc:	15 c0       	rjmp	.+42     	; 0x2528 <vfprintf+0x13c>
    24fe:	38 01       	movw	r6, r16
    2500:	f2 e0       	ldi	r31, 0x02	; 2
    2502:	6f 0e       	add	r6, r31
    2504:	71 1c       	adc	r7, r1
    2506:	f8 01       	movw	r30, r16
    2508:	a0 80       	ld	r10, Z
    250a:	b1 80       	ldd	r11, Z+1	; 0x01
    250c:	26 ff       	sbrs	r18, 6
    250e:	03 c0       	rjmp	.+6      	; 0x2516 <vfprintf+0x12a>
    2510:	65 2d       	mov	r22, r5
    2512:	70 e0       	ldi	r23, 0x00	; 0
    2514:	02 c0       	rjmp	.+4      	; 0x251a <vfprintf+0x12e>
    2516:	6f ef       	ldi	r22, 0xFF	; 255
    2518:	7f ef       	ldi	r23, 0xFF	; 255
    251a:	c5 01       	movw	r24, r10
    251c:	2c 87       	std	Y+12, r18	; 0x0c
    251e:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <strnlen>
    2522:	2c 01       	movw	r4, r24
    2524:	83 01       	movw	r16, r6
    2526:	2c 85       	ldd	r18, Y+12	; 0x0c
    2528:	2f 77       	andi	r18, 0x7F	; 127
    252a:	22 2e       	mov	r2, r18
    252c:	17 c0       	rjmp	.+46     	; 0x255c <vfprintf+0x170>
    252e:	38 01       	movw	r6, r16
    2530:	f2 e0       	ldi	r31, 0x02	; 2
    2532:	6f 0e       	add	r6, r31
    2534:	71 1c       	adc	r7, r1
    2536:	f8 01       	movw	r30, r16
    2538:	a0 80       	ld	r10, Z
    253a:	b1 80       	ldd	r11, Z+1	; 0x01
    253c:	26 ff       	sbrs	r18, 6
    253e:	03 c0       	rjmp	.+6      	; 0x2546 <vfprintf+0x15a>
    2540:	65 2d       	mov	r22, r5
    2542:	70 e0       	ldi	r23, 0x00	; 0
    2544:	02 c0       	rjmp	.+4      	; 0x254a <vfprintf+0x15e>
    2546:	6f ef       	ldi	r22, 0xFF	; 255
    2548:	7f ef       	ldi	r23, 0xFF	; 255
    254a:	c5 01       	movw	r24, r10
    254c:	2c 87       	std	Y+12, r18	; 0x0c
    254e:	0e 94 c8 13 	call	0x2790	; 0x2790 <strnlen_P>
    2552:	2c 01       	movw	r4, r24
    2554:	2c 85       	ldd	r18, Y+12	; 0x0c
    2556:	20 68       	ori	r18, 0x80	; 128
    2558:	22 2e       	mov	r2, r18
    255a:	83 01       	movw	r16, r6
    255c:	23 fc       	sbrc	r2, 3
    255e:	1b c0       	rjmp	.+54     	; 0x2596 <vfprintf+0x1aa>
    2560:	83 2d       	mov	r24, r3
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	48 16       	cp	r4, r24
    2566:	59 06       	cpc	r5, r25
    2568:	b0 f4       	brcc	.+44     	; 0x2596 <vfprintf+0x1aa>
    256a:	b7 01       	movw	r22, r14
    256c:	80 e2       	ldi	r24, 0x20	; 32
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 de 13 	call	0x27bc	; 0x27bc <fputc>
    2574:	3a 94       	dec	r3
    2576:	f4 cf       	rjmp	.-24     	; 0x2560 <vfprintf+0x174>
    2578:	f5 01       	movw	r30, r10
    257a:	27 fc       	sbrc	r2, 7
    257c:	85 91       	lpm	r24, Z+
    257e:	27 fe       	sbrs	r2, 7
    2580:	81 91       	ld	r24, Z+
    2582:	5f 01       	movw	r10, r30
    2584:	b7 01       	movw	r22, r14
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	0e 94 de 13 	call	0x27bc	; 0x27bc <fputc>
    258c:	31 10       	cpse	r3, r1
    258e:	3a 94       	dec	r3
    2590:	f1 e0       	ldi	r31, 0x01	; 1
    2592:	4f 1a       	sub	r4, r31
    2594:	51 08       	sbc	r5, r1
    2596:	41 14       	cp	r4, r1
    2598:	51 04       	cpc	r5, r1
    259a:	71 f7       	brne	.-36     	; 0x2578 <vfprintf+0x18c>
    259c:	e5 c0       	rjmp	.+458    	; 0x2768 <vfprintf+0x37c>
    259e:	84 36       	cpi	r24, 0x64	; 100
    25a0:	11 f0       	breq	.+4      	; 0x25a6 <vfprintf+0x1ba>
    25a2:	89 36       	cpi	r24, 0x69	; 105
    25a4:	39 f5       	brne	.+78     	; 0x25f4 <vfprintf+0x208>
    25a6:	f8 01       	movw	r30, r16
    25a8:	27 ff       	sbrs	r18, 7
    25aa:	07 c0       	rjmp	.+14     	; 0x25ba <vfprintf+0x1ce>
    25ac:	60 81       	ld	r22, Z
    25ae:	71 81       	ldd	r23, Z+1	; 0x01
    25b0:	82 81       	ldd	r24, Z+2	; 0x02
    25b2:	93 81       	ldd	r25, Z+3	; 0x03
    25b4:	0c 5f       	subi	r16, 0xFC	; 252
    25b6:	1f 4f       	sbci	r17, 0xFF	; 255
    25b8:	08 c0       	rjmp	.+16     	; 0x25ca <vfprintf+0x1de>
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	07 2e       	mov	r0, r23
    25c0:	00 0c       	add	r0, r0
    25c2:	88 0b       	sbc	r24, r24
    25c4:	99 0b       	sbc	r25, r25
    25c6:	0e 5f       	subi	r16, 0xFE	; 254
    25c8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ca:	2f 76       	andi	r18, 0x6F	; 111
    25cc:	72 2e       	mov	r7, r18
    25ce:	97 ff       	sbrs	r25, 7
    25d0:	09 c0       	rjmp	.+18     	; 0x25e4 <vfprintf+0x1f8>
    25d2:	90 95       	com	r25
    25d4:	80 95       	com	r24
    25d6:	70 95       	com	r23
    25d8:	61 95       	neg	r22
    25da:	7f 4f       	sbci	r23, 0xFF	; 255
    25dc:	8f 4f       	sbci	r24, 0xFF	; 255
    25de:	9f 4f       	sbci	r25, 0xFF	; 255
    25e0:	20 68       	ori	r18, 0x80	; 128
    25e2:	72 2e       	mov	r7, r18
    25e4:	2a e0       	ldi	r18, 0x0A	; 10
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	a4 01       	movw	r20, r8
    25ea:	0e 94 16 14 	call	0x282c	; 0x282c <__ultoa_invert>
    25ee:	a8 2e       	mov	r10, r24
    25f0:	a8 18       	sub	r10, r8
    25f2:	44 c0       	rjmp	.+136    	; 0x267c <vfprintf+0x290>
    25f4:	85 37       	cpi	r24, 0x75	; 117
    25f6:	29 f4       	brne	.+10     	; 0x2602 <vfprintf+0x216>
    25f8:	2f 7e       	andi	r18, 0xEF	; 239
    25fa:	b2 2e       	mov	r11, r18
    25fc:	2a e0       	ldi	r18, 0x0A	; 10
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	25 c0       	rjmp	.+74     	; 0x264c <vfprintf+0x260>
    2602:	f2 2f       	mov	r31, r18
    2604:	f9 7f       	andi	r31, 0xF9	; 249
    2606:	bf 2e       	mov	r11, r31
    2608:	8f 36       	cpi	r24, 0x6F	; 111
    260a:	c1 f0       	breq	.+48     	; 0x263c <vfprintf+0x250>
    260c:	18 f4       	brcc	.+6      	; 0x2614 <vfprintf+0x228>
    260e:	88 35       	cpi	r24, 0x58	; 88
    2610:	79 f0       	breq	.+30     	; 0x2630 <vfprintf+0x244>
    2612:	b4 c0       	rjmp	.+360    	; 0x277c <vfprintf+0x390>
    2614:	80 37       	cpi	r24, 0x70	; 112
    2616:	19 f0       	breq	.+6      	; 0x261e <vfprintf+0x232>
    2618:	88 37       	cpi	r24, 0x78	; 120
    261a:	21 f0       	breq	.+8      	; 0x2624 <vfprintf+0x238>
    261c:	af c0       	rjmp	.+350    	; 0x277c <vfprintf+0x390>
    261e:	2f 2f       	mov	r18, r31
    2620:	20 61       	ori	r18, 0x10	; 16
    2622:	b2 2e       	mov	r11, r18
    2624:	b4 fe       	sbrs	r11, 4
    2626:	0d c0       	rjmp	.+26     	; 0x2642 <vfprintf+0x256>
    2628:	8b 2d       	mov	r24, r11
    262a:	84 60       	ori	r24, 0x04	; 4
    262c:	b8 2e       	mov	r11, r24
    262e:	09 c0       	rjmp	.+18     	; 0x2642 <vfprintf+0x256>
    2630:	24 ff       	sbrs	r18, 4
    2632:	0a c0       	rjmp	.+20     	; 0x2648 <vfprintf+0x25c>
    2634:	9f 2f       	mov	r25, r31
    2636:	96 60       	ori	r25, 0x06	; 6
    2638:	b9 2e       	mov	r11, r25
    263a:	06 c0       	rjmp	.+12     	; 0x2648 <vfprintf+0x25c>
    263c:	28 e0       	ldi	r18, 0x08	; 8
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	05 c0       	rjmp	.+10     	; 0x264c <vfprintf+0x260>
    2642:	20 e1       	ldi	r18, 0x10	; 16
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	02 c0       	rjmp	.+4      	; 0x264c <vfprintf+0x260>
    2648:	20 e1       	ldi	r18, 0x10	; 16
    264a:	32 e0       	ldi	r19, 0x02	; 2
    264c:	f8 01       	movw	r30, r16
    264e:	b7 fe       	sbrs	r11, 7
    2650:	07 c0       	rjmp	.+14     	; 0x2660 <vfprintf+0x274>
    2652:	60 81       	ld	r22, Z
    2654:	71 81       	ldd	r23, Z+1	; 0x01
    2656:	82 81       	ldd	r24, Z+2	; 0x02
    2658:	93 81       	ldd	r25, Z+3	; 0x03
    265a:	0c 5f       	subi	r16, 0xFC	; 252
    265c:	1f 4f       	sbci	r17, 0xFF	; 255
    265e:	06 c0       	rjmp	.+12     	; 0x266c <vfprintf+0x280>
    2660:	60 81       	ld	r22, Z
    2662:	71 81       	ldd	r23, Z+1	; 0x01
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	0e 5f       	subi	r16, 0xFE	; 254
    266a:	1f 4f       	sbci	r17, 0xFF	; 255
    266c:	a4 01       	movw	r20, r8
    266e:	0e 94 16 14 	call	0x282c	; 0x282c <__ultoa_invert>
    2672:	a8 2e       	mov	r10, r24
    2674:	a8 18       	sub	r10, r8
    2676:	fb 2d       	mov	r31, r11
    2678:	ff 77       	andi	r31, 0x7F	; 127
    267a:	7f 2e       	mov	r7, r31
    267c:	76 fe       	sbrs	r7, 6
    267e:	0b c0       	rjmp	.+22     	; 0x2696 <vfprintf+0x2aa>
    2680:	37 2d       	mov	r19, r7
    2682:	3e 7f       	andi	r19, 0xFE	; 254
    2684:	a5 14       	cp	r10, r5
    2686:	50 f4       	brcc	.+20     	; 0x269c <vfprintf+0x2b0>
    2688:	74 fe       	sbrs	r7, 4
    268a:	0a c0       	rjmp	.+20     	; 0x26a0 <vfprintf+0x2b4>
    268c:	72 fc       	sbrc	r7, 2
    268e:	08 c0       	rjmp	.+16     	; 0x26a0 <vfprintf+0x2b4>
    2690:	37 2d       	mov	r19, r7
    2692:	3e 7e       	andi	r19, 0xEE	; 238
    2694:	05 c0       	rjmp	.+10     	; 0x26a0 <vfprintf+0x2b4>
    2696:	ba 2c       	mov	r11, r10
    2698:	37 2d       	mov	r19, r7
    269a:	03 c0       	rjmp	.+6      	; 0x26a2 <vfprintf+0x2b6>
    269c:	ba 2c       	mov	r11, r10
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <vfprintf+0x2b6>
    26a0:	b5 2c       	mov	r11, r5
    26a2:	34 ff       	sbrs	r19, 4
    26a4:	0d c0       	rjmp	.+26     	; 0x26c0 <vfprintf+0x2d4>
    26a6:	fe 01       	movw	r30, r28
    26a8:	ea 0d       	add	r30, r10
    26aa:	f1 1d       	adc	r31, r1
    26ac:	80 81       	ld	r24, Z
    26ae:	80 33       	cpi	r24, 0x30	; 48
    26b0:	11 f4       	brne	.+4      	; 0x26b6 <vfprintf+0x2ca>
    26b2:	39 7e       	andi	r19, 0xE9	; 233
    26b4:	09 c0       	rjmp	.+18     	; 0x26c8 <vfprintf+0x2dc>
    26b6:	32 ff       	sbrs	r19, 2
    26b8:	06 c0       	rjmp	.+12     	; 0x26c6 <vfprintf+0x2da>
    26ba:	b3 94       	inc	r11
    26bc:	b3 94       	inc	r11
    26be:	04 c0       	rjmp	.+8      	; 0x26c8 <vfprintf+0x2dc>
    26c0:	83 2f       	mov	r24, r19
    26c2:	86 78       	andi	r24, 0x86	; 134
    26c4:	09 f0       	breq	.+2      	; 0x26c8 <vfprintf+0x2dc>
    26c6:	b3 94       	inc	r11
    26c8:	33 fd       	sbrc	r19, 3
    26ca:	13 c0       	rjmp	.+38     	; 0x26f2 <vfprintf+0x306>
    26cc:	30 ff       	sbrs	r19, 0
    26ce:	06 c0       	rjmp	.+12     	; 0x26dc <vfprintf+0x2f0>
    26d0:	5a 2c       	mov	r5, r10
    26d2:	b3 14       	cp	r11, r3
    26d4:	18 f4       	brcc	.+6      	; 0x26dc <vfprintf+0x2f0>
    26d6:	53 0c       	add	r5, r3
    26d8:	5b 18       	sub	r5, r11
    26da:	b3 2c       	mov	r11, r3
    26dc:	b3 14       	cp	r11, r3
    26de:	68 f4       	brcc	.+26     	; 0x26fa <vfprintf+0x30e>
    26e0:	b7 01       	movw	r22, r14
    26e2:	80 e2       	ldi	r24, 0x20	; 32
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	3c 87       	std	Y+12, r19	; 0x0c
    26e8:	0e 94 de 13 	call	0x27bc	; 0x27bc <fputc>
    26ec:	b3 94       	inc	r11
    26ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    26f0:	f5 cf       	rjmp	.-22     	; 0x26dc <vfprintf+0x2f0>
    26f2:	b3 14       	cp	r11, r3
    26f4:	10 f4       	brcc	.+4      	; 0x26fa <vfprintf+0x30e>
    26f6:	3b 18       	sub	r3, r11
    26f8:	01 c0       	rjmp	.+2      	; 0x26fc <vfprintf+0x310>
    26fa:	31 2c       	mov	r3, r1
    26fc:	34 ff       	sbrs	r19, 4
    26fe:	12 c0       	rjmp	.+36     	; 0x2724 <vfprintf+0x338>
    2700:	b7 01       	movw	r22, r14
    2702:	80 e3       	ldi	r24, 0x30	; 48
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	3c 87       	std	Y+12, r19	; 0x0c
    2708:	0e 94 de 13 	call	0x27bc	; 0x27bc <fputc>
    270c:	3c 85       	ldd	r19, Y+12	; 0x0c
    270e:	32 ff       	sbrs	r19, 2
    2710:	17 c0       	rjmp	.+46     	; 0x2740 <vfprintf+0x354>
    2712:	31 fd       	sbrc	r19, 1
    2714:	03 c0       	rjmp	.+6      	; 0x271c <vfprintf+0x330>
    2716:	88 e7       	ldi	r24, 0x78	; 120
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <vfprintf+0x334>
    271c:	88 e5       	ldi	r24, 0x58	; 88
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	b7 01       	movw	r22, r14
    2722:	0c c0       	rjmp	.+24     	; 0x273c <vfprintf+0x350>
    2724:	83 2f       	mov	r24, r19
    2726:	86 78       	andi	r24, 0x86	; 134
    2728:	59 f0       	breq	.+22     	; 0x2740 <vfprintf+0x354>
    272a:	31 ff       	sbrs	r19, 1
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <vfprintf+0x346>
    272e:	8b e2       	ldi	r24, 0x2B	; 43
    2730:	01 c0       	rjmp	.+2      	; 0x2734 <vfprintf+0x348>
    2732:	80 e2       	ldi	r24, 0x20	; 32
    2734:	37 fd       	sbrc	r19, 7
    2736:	8d e2       	ldi	r24, 0x2D	; 45
    2738:	b7 01       	movw	r22, r14
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 de 13 	call	0x27bc	; 0x27bc <fputc>
    2740:	a5 14       	cp	r10, r5
    2742:	38 f4       	brcc	.+14     	; 0x2752 <vfprintf+0x366>
    2744:	b7 01       	movw	r22, r14
    2746:	80 e3       	ldi	r24, 0x30	; 48
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	0e 94 de 13 	call	0x27bc	; 0x27bc <fputc>
    274e:	5a 94       	dec	r5
    2750:	f7 cf       	rjmp	.-18     	; 0x2740 <vfprintf+0x354>
    2752:	aa 94       	dec	r10
    2754:	f4 01       	movw	r30, r8
    2756:	ea 0d       	add	r30, r10
    2758:	f1 1d       	adc	r31, r1
    275a:	80 81       	ld	r24, Z
    275c:	b7 01       	movw	r22, r14
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	0e 94 de 13 	call	0x27bc	; 0x27bc <fputc>
    2764:	a1 10       	cpse	r10, r1
    2766:	f5 cf       	rjmp	.-22     	; 0x2752 <vfprintf+0x366>
    2768:	33 20       	and	r3, r3
    276a:	09 f4       	brne	.+2      	; 0x276e <vfprintf+0x382>
    276c:	51 ce       	rjmp	.-862    	; 0x2410 <vfprintf+0x24>
    276e:	b7 01       	movw	r22, r14
    2770:	80 e2       	ldi	r24, 0x20	; 32
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	0e 94 de 13 	call	0x27bc	; 0x27bc <fputc>
    2778:	3a 94       	dec	r3
    277a:	f6 cf       	rjmp	.-20     	; 0x2768 <vfprintf+0x37c>
    277c:	f7 01       	movw	r30, r14
    277e:	86 81       	ldd	r24, Z+6	; 0x06
    2780:	97 81       	ldd	r25, Z+7	; 0x07
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <vfprintf+0x39c>
    2784:	8f ef       	ldi	r24, 0xFF	; 255
    2786:	9f ef       	ldi	r25, 0xFF	; 255
    2788:	2c 96       	adiw	r28, 0x0c	; 12
    278a:	e2 e1       	ldi	r30, 0x12	; 18
    278c:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__epilogue_restores__>

00002790 <strnlen_P>:
    2790:	fc 01       	movw	r30, r24
    2792:	05 90       	lpm	r0, Z+
    2794:	61 50       	subi	r22, 0x01	; 1
    2796:	70 40       	sbci	r23, 0x00	; 0
    2798:	01 10       	cpse	r0, r1
    279a:	d8 f7       	brcc	.-10     	; 0x2792 <strnlen_P+0x2>
    279c:	80 95       	com	r24
    279e:	90 95       	com	r25
    27a0:	8e 0f       	add	r24, r30
    27a2:	9f 1f       	adc	r25, r31
    27a4:	08 95       	ret

000027a6 <strnlen>:
    27a6:	fc 01       	movw	r30, r24
    27a8:	61 50       	subi	r22, 0x01	; 1
    27aa:	70 40       	sbci	r23, 0x00	; 0
    27ac:	01 90       	ld	r0, Z+
    27ae:	01 10       	cpse	r0, r1
    27b0:	d8 f7       	brcc	.-10     	; 0x27a8 <strnlen+0x2>
    27b2:	80 95       	com	r24
    27b4:	90 95       	com	r25
    27b6:	8e 0f       	add	r24, r30
    27b8:	9f 1f       	adc	r25, r31
    27ba:	08 95       	ret

000027bc <fputc>:
    27bc:	0f 93       	push	r16
    27be:	1f 93       	push	r17
    27c0:	cf 93       	push	r28
    27c2:	df 93       	push	r29
    27c4:	fb 01       	movw	r30, r22
    27c6:	23 81       	ldd	r18, Z+3	; 0x03
    27c8:	21 fd       	sbrc	r18, 1
    27ca:	03 c0       	rjmp	.+6      	; 0x27d2 <fputc+0x16>
    27cc:	8f ef       	ldi	r24, 0xFF	; 255
    27ce:	9f ef       	ldi	r25, 0xFF	; 255
    27d0:	28 c0       	rjmp	.+80     	; 0x2822 <fputc+0x66>
    27d2:	22 ff       	sbrs	r18, 2
    27d4:	16 c0       	rjmp	.+44     	; 0x2802 <fputc+0x46>
    27d6:	46 81       	ldd	r20, Z+6	; 0x06
    27d8:	57 81       	ldd	r21, Z+7	; 0x07
    27da:	24 81       	ldd	r18, Z+4	; 0x04
    27dc:	35 81       	ldd	r19, Z+5	; 0x05
    27de:	42 17       	cp	r20, r18
    27e0:	53 07       	cpc	r21, r19
    27e2:	44 f4       	brge	.+16     	; 0x27f4 <fputc+0x38>
    27e4:	a0 81       	ld	r26, Z
    27e6:	b1 81       	ldd	r27, Z+1	; 0x01
    27e8:	9d 01       	movw	r18, r26
    27ea:	2f 5f       	subi	r18, 0xFF	; 255
    27ec:	3f 4f       	sbci	r19, 0xFF	; 255
    27ee:	31 83       	std	Z+1, r19	; 0x01
    27f0:	20 83       	st	Z, r18
    27f2:	8c 93       	st	X, r24
    27f4:	26 81       	ldd	r18, Z+6	; 0x06
    27f6:	37 81       	ldd	r19, Z+7	; 0x07
    27f8:	2f 5f       	subi	r18, 0xFF	; 255
    27fa:	3f 4f       	sbci	r19, 0xFF	; 255
    27fc:	37 83       	std	Z+7, r19	; 0x07
    27fe:	26 83       	std	Z+6, r18	; 0x06
    2800:	10 c0       	rjmp	.+32     	; 0x2822 <fputc+0x66>
    2802:	eb 01       	movw	r28, r22
    2804:	09 2f       	mov	r16, r25
    2806:	18 2f       	mov	r17, r24
    2808:	00 84       	ldd	r0, Z+8	; 0x08
    280a:	f1 85       	ldd	r31, Z+9	; 0x09
    280c:	e0 2d       	mov	r30, r0
    280e:	09 95       	icall
    2810:	89 2b       	or	r24, r25
    2812:	e1 f6       	brne	.-72     	; 0x27cc <fputc+0x10>
    2814:	8e 81       	ldd	r24, Y+6	; 0x06
    2816:	9f 81       	ldd	r25, Y+7	; 0x07
    2818:	01 96       	adiw	r24, 0x01	; 1
    281a:	9f 83       	std	Y+7, r25	; 0x07
    281c:	8e 83       	std	Y+6, r24	; 0x06
    281e:	81 2f       	mov	r24, r17
    2820:	90 2f       	mov	r25, r16
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	1f 91       	pop	r17
    2828:	0f 91       	pop	r16
    282a:	08 95       	ret

0000282c <__ultoa_invert>:
    282c:	fa 01       	movw	r30, r20
    282e:	aa 27       	eor	r26, r26
    2830:	28 30       	cpi	r18, 0x08	; 8
    2832:	51 f1       	breq	.+84     	; 0x2888 <__ultoa_invert+0x5c>
    2834:	20 31       	cpi	r18, 0x10	; 16
    2836:	81 f1       	breq	.+96     	; 0x2898 <__ultoa_invert+0x6c>
    2838:	e8 94       	clt
    283a:	6f 93       	push	r22
    283c:	6e 7f       	andi	r22, 0xFE	; 254
    283e:	6e 5f       	subi	r22, 0xFE	; 254
    2840:	7f 4f       	sbci	r23, 0xFF	; 255
    2842:	8f 4f       	sbci	r24, 0xFF	; 255
    2844:	9f 4f       	sbci	r25, 0xFF	; 255
    2846:	af 4f       	sbci	r26, 0xFF	; 255
    2848:	b1 e0       	ldi	r27, 0x01	; 1
    284a:	3e d0       	rcall	.+124    	; 0x28c8 <__ultoa_invert+0x9c>
    284c:	b4 e0       	ldi	r27, 0x04	; 4
    284e:	3c d0       	rcall	.+120    	; 0x28c8 <__ultoa_invert+0x9c>
    2850:	67 0f       	add	r22, r23
    2852:	78 1f       	adc	r23, r24
    2854:	89 1f       	adc	r24, r25
    2856:	9a 1f       	adc	r25, r26
    2858:	a1 1d       	adc	r26, r1
    285a:	68 0f       	add	r22, r24
    285c:	79 1f       	adc	r23, r25
    285e:	8a 1f       	adc	r24, r26
    2860:	91 1d       	adc	r25, r1
    2862:	a1 1d       	adc	r26, r1
    2864:	6a 0f       	add	r22, r26
    2866:	71 1d       	adc	r23, r1
    2868:	81 1d       	adc	r24, r1
    286a:	91 1d       	adc	r25, r1
    286c:	a1 1d       	adc	r26, r1
    286e:	20 d0       	rcall	.+64     	; 0x28b0 <__ultoa_invert+0x84>
    2870:	09 f4       	brne	.+2      	; 0x2874 <__ultoa_invert+0x48>
    2872:	68 94       	set
    2874:	3f 91       	pop	r19
    2876:	2a e0       	ldi	r18, 0x0A	; 10
    2878:	26 9f       	mul	r18, r22
    287a:	11 24       	eor	r1, r1
    287c:	30 19       	sub	r19, r0
    287e:	30 5d       	subi	r19, 0xD0	; 208
    2880:	31 93       	st	Z+, r19
    2882:	de f6       	brtc	.-74     	; 0x283a <__ultoa_invert+0xe>
    2884:	cf 01       	movw	r24, r30
    2886:	08 95       	ret
    2888:	46 2f       	mov	r20, r22
    288a:	47 70       	andi	r20, 0x07	; 7
    288c:	40 5d       	subi	r20, 0xD0	; 208
    288e:	41 93       	st	Z+, r20
    2890:	b3 e0       	ldi	r27, 0x03	; 3
    2892:	0f d0       	rcall	.+30     	; 0x28b2 <__ultoa_invert+0x86>
    2894:	c9 f7       	brne	.-14     	; 0x2888 <__ultoa_invert+0x5c>
    2896:	f6 cf       	rjmp	.-20     	; 0x2884 <__ultoa_invert+0x58>
    2898:	46 2f       	mov	r20, r22
    289a:	4f 70       	andi	r20, 0x0F	; 15
    289c:	40 5d       	subi	r20, 0xD0	; 208
    289e:	4a 33       	cpi	r20, 0x3A	; 58
    28a0:	18 f0       	brcs	.+6      	; 0x28a8 <__ultoa_invert+0x7c>
    28a2:	49 5d       	subi	r20, 0xD9	; 217
    28a4:	31 fd       	sbrc	r19, 1
    28a6:	40 52       	subi	r20, 0x20	; 32
    28a8:	41 93       	st	Z+, r20
    28aa:	02 d0       	rcall	.+4      	; 0x28b0 <__ultoa_invert+0x84>
    28ac:	a9 f7       	brne	.-22     	; 0x2898 <__ultoa_invert+0x6c>
    28ae:	ea cf       	rjmp	.-44     	; 0x2884 <__ultoa_invert+0x58>
    28b0:	b4 e0       	ldi	r27, 0x04	; 4
    28b2:	a6 95       	lsr	r26
    28b4:	97 95       	ror	r25
    28b6:	87 95       	ror	r24
    28b8:	77 95       	ror	r23
    28ba:	67 95       	ror	r22
    28bc:	ba 95       	dec	r27
    28be:	c9 f7       	brne	.-14     	; 0x28b2 <__ultoa_invert+0x86>
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	61 05       	cpc	r22, r1
    28c4:	71 05       	cpc	r23, r1
    28c6:	08 95       	ret
    28c8:	9b 01       	movw	r18, r22
    28ca:	ac 01       	movw	r20, r24
    28cc:	0a 2e       	mov	r0, r26
    28ce:	06 94       	lsr	r0
    28d0:	57 95       	ror	r21
    28d2:	47 95       	ror	r20
    28d4:	37 95       	ror	r19
    28d6:	27 95       	ror	r18
    28d8:	ba 95       	dec	r27
    28da:	c9 f7       	brne	.-14     	; 0x28ce <__ultoa_invert+0xa2>
    28dc:	62 0f       	add	r22, r18
    28de:	73 1f       	adc	r23, r19
    28e0:	84 1f       	adc	r24, r20
    28e2:	95 1f       	adc	r25, r21
    28e4:	a0 1d       	adc	r26, r0
    28e6:	08 95       	ret

000028e8 <__prologue_saves__>:
    28e8:	2f 92       	push	r2
    28ea:	3f 92       	push	r3
    28ec:	4f 92       	push	r4
    28ee:	5f 92       	push	r5
    28f0:	6f 92       	push	r6
    28f2:	7f 92       	push	r7
    28f4:	8f 92       	push	r8
    28f6:	9f 92       	push	r9
    28f8:	af 92       	push	r10
    28fa:	bf 92       	push	r11
    28fc:	cf 92       	push	r12
    28fe:	df 92       	push	r13
    2900:	ef 92       	push	r14
    2902:	ff 92       	push	r15
    2904:	0f 93       	push	r16
    2906:	1f 93       	push	r17
    2908:	cf 93       	push	r28
    290a:	df 93       	push	r29
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	ca 1b       	sub	r28, r26
    2912:	db 0b       	sbc	r29, r27
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	cd bf       	out	0x3d, r28	; 61
    291e:	09 94       	ijmp

00002920 <__epilogue_restores__>:
    2920:	2a 88       	ldd	r2, Y+18	; 0x12
    2922:	39 88       	ldd	r3, Y+17	; 0x11
    2924:	48 88       	ldd	r4, Y+16	; 0x10
    2926:	5f 84       	ldd	r5, Y+15	; 0x0f
    2928:	6e 84       	ldd	r6, Y+14	; 0x0e
    292a:	7d 84       	ldd	r7, Y+13	; 0x0d
    292c:	8c 84       	ldd	r8, Y+12	; 0x0c
    292e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2930:	aa 84       	ldd	r10, Y+10	; 0x0a
    2932:	b9 84       	ldd	r11, Y+9	; 0x09
    2934:	c8 84       	ldd	r12, Y+8	; 0x08
    2936:	df 80       	ldd	r13, Y+7	; 0x07
    2938:	ee 80       	ldd	r14, Y+6	; 0x06
    293a:	fd 80       	ldd	r15, Y+5	; 0x05
    293c:	0c 81       	ldd	r16, Y+4	; 0x04
    293e:	1b 81       	ldd	r17, Y+3	; 0x03
    2940:	aa 81       	ldd	r26, Y+2	; 0x02
    2942:	b9 81       	ldd	r27, Y+1	; 0x01
    2944:	ce 0f       	add	r28, r30
    2946:	d1 1d       	adc	r29, r1
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	ed 01       	movw	r28, r26
    2954:	08 95       	ret

00002956 <_exit>:
    2956:	f8 94       	cli

00002958 <__stop_program>:
    2958:	ff cf       	rjmp	.-2      	; 0x2958 <__stop_program>
