
temp_oled_wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003b2  00800100  00004442  000044d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004442  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000039e  008004b2  008004b2  00004888  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004888  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000048e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009f8  00000000  00000000  00004924  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001dfed  00000000  00000000  0000531c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004397  00000000  00000000  00023309  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003dfa  00000000  00000000  000276a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000027ec  00000000  00000000  0002b49c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005ec5  00000000  00000000  0002dc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00010739  00000000  00000000  00033b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c28  00000000  00000000  00044286  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
       0:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__dtors_end>
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
       4:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__vector_1>
  if (!initialized) {
       8:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__vector_2>
       c:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__vector_3>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
      10:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__vector_3>
    uint8_t bit = digitalPinToBitMask(SS);
      14:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__vector_3>
      18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
    volatile uint8_t *reg = portModeRegister(port);
      1c:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__vector_7>
      20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
      2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      digitalWrite(SS, HIGH);
      30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
      38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
      40:	0c 94 25 1b 	jmp	0x364a	; 0x364a <__vector_16>
      44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
    SPCR |= _BV(SPE);
      48:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__vector_18>
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
      4c:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__vector_19>
      50:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
    pinMode(MOSI, OUTPUT);
      54:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  }
  initialized++; // reference count
      5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

00000068 <__trampolines_end>:
  SREG = sreg;
}
      68:	00 5e       	subi	r16, 0xE0	; 224
      6a:	bc e2       	ldi	r27, 0x2C	; 44
      6c:	61 3f       	cpi	r22, 0xF1	; 241
      6e:	dd 83       	std	Y+5, r29	; 0x05
      70:	c2 9c       	mul	r12, r2
      72:	7e 20       	and	r7, r14
      74:	a3 fd       	sbrc	r26, 3
      76:	1f 41       	sbci	r17, 0x1F	; 31
      78:	9d c3       	rjmp	.+1850   	; 0x7b4 <_ZN6SdFile7seekSetEm+0x86>
      7a:	21 7f       	andi	r18, 0xF1	; 241
      7c:	fc a2       	std	Y+36, r15	; 0x24
      7e:	40 1e       	adc	r4, r16
      80:	5f 01       	movw	r10, r30
      82:	e3 bd       	out	0x23, r30	; 35
      84:	3e 60       	ori	r19, 0x0E	; 14
      86:	82 dc       	rcall	.-1788   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
      88:	23 7d       	andi	r18, 0xD3	; 211
      8a:	9f c1       	rjmp	.+830    	; 0x3ca <_ZN7Sd2Card11cardCommandEhm+0x4e>
      8c:	42 1c       	adc	r4, r2
      8e:	fe a0       	ldd	r15, Y+38	; 0x26
      90:	e1 bf       	out	0x31, r30	; 49
      92:	5d 03       	fmul	r21, r21
      94:	80 de       	rcall	.-768    	; 0xfffffd96 <__eeprom_end+0xff7efd96>
      96:	3c 62       	ori	r19, 0x2C	; 44
      98:	be e0       	ldi	r27, 0x0E	; 14
      9a:	02 5c       	subi	r16, 0xC2	; 194
      9c:	df 81       	ldd	r29, Y+7	; 0x07
      9e:	63 3d       	cpi	r22, 0xD3	; 211
      a0:	7c 22       	and	r7, r28
      a2:	c0 9e       	mul	r12, r16
      a4:	1d 43       	sbci	r17, 0x3D	; 61
      a6:	a1 ff       	sbrs	r26, 1
      a8:	46 18       	sub	r4, r6
      aa:	fa a4       	ldd	r15, Y+42	; 0x2a
      ac:	27 79       	andi	r18, 0x97	; 151
      ae:	9b c5       	rjmp	.+2870   	; 0xbe6 <__stack+0x2e7>
      b0:	84 da       	rcall	.-2808   	; 0xfffff5ba <__eeprom_end+0xff7ef5ba>
      b2:	38 66       	ori	r19, 0x68	; 104
      b4:	e5 bb       	out	0x15, r30	; 21
      b6:	59 07       	cpc	r21, r25
      b8:	db 85       	ldd	r29, Y+11	; 0x0b
      ba:	67 39       	cpi	r22, 0x97	; 151
      bc:	ba e4       	ldi	r27, 0x4A	; 74
      be:	06 58       	subi	r16, 0x86	; 134
      c0:	19 47       	sbci	r17, 0x79	; 121
      c2:	a5 fb       	bst	r26, 5
      c4:	78 26       	eor	r7, r24
      c6:	c4 9a       	sbi	0x18, 4	; 24
      c8:	65 3b       	cpi	r22, 0xB5	; 181
      ca:	d9 87       	std	Y+9, r29	; 0x09
      cc:	04 5a       	subi	r16, 0xA4	; 164
      ce:	b8 e6       	ldi	r27, 0x68	; 104
      d0:	a7 f9       	bld	r26, 7
      d2:	1b 45       	sbci	r17, 0x5B	; 91
      d4:	c6 98       	cbi	0x18, 6	; 24
      d6:	7a 24       	eor	r7, r10
      d8:	f8 a6       	std	Y+40, r15	; 0x28
      da:	44 1a       	sub	r4, r20
      dc:	99 c7       	rjmp	.+3890   	; 0x1010 <_ZN8SdVolume6fatPutEmm+0x84>
      de:	25 7b       	andi	r18, 0xB5	; 181
      e0:	3a 64       	ori	r19, 0x4A	; 74
      e2:	86 d8       	rcall	.-3828   	; 0xfffff1f0 <__eeprom_end+0xff7ef1f0>
      e4:	5b 05       	cpc	r21, r11
      e6:	e7 b9       	out	0x07, r30	; 7
      e8:	8c d2       	rcall	.+1304   	; 0x602 <_ZN7Sd2Card10writeBlockEmPKh+0xe>
      ea:	30 6e       	ori	r19, 0xE0	; 224
      ec:	ed b3       	in	r30, 0x1d	; 29
      ee:	51 0f       	add	r21, r17
      f0:	4e 10       	cpse	r4, r14
      f2:	f2 ac       	ldd	r15, Z+58	; 0x3a
      f4:	2f 71       	andi	r18, 0x1F	; 31
      f6:	93 cd       	rjmp	.-1242   	; 0xfffffc1e <__eeprom_end+0xff7efc1e>
      f8:	11 4f       	sbci	r17, 0xF1	; 241
      fa:	ad f3       	brhs	.-22     	; 0xe6 <__trampolines_end+0x7e>
      fc:	70 2e       	mov	r7, r16
      fe:	cc 92       	st	X, r12
     100:	d3 8d       	ldd	r29, Z+27	; 0x1b
     102:	6f 31       	cpi	r22, 0x1F	; 31
     104:	b2 ec       	ldi	r27, 0xC2	; 194
     106:	0e 50       	subi	r16, 0x0E	; 14
     108:	af f1       	brie	.+106    	; 0x174 <digital_pin_to_timer_PGM+0xb>
     10a:	13 4d       	sbci	r17, 0xD3	; 211
     10c:	ce 90       	ld	r12, -X
     10e:	72 2c       	mov	r7, r2
     110:	6d 33       	cpi	r22, 0x3D	; 61
     112:	d1 8f       	std	Z+25, r29	; 0x19
     114:	0c 52       	subi	r16, 0x2C	; 44
     116:	b0 ee       	ldi	r27, 0xE0	; 224
     118:	32 6c       	ori	r19, 0xC2	; 194
     11a:	8e d0       	rcall	.+284    	; 0x238 <_GLOBAL__sub_I__Z20getNextPathComponentPcPjS_+0x14>
     11c:	53 0d       	add	r21, r3
     11e:	ef b1       	in	r30, 0x0f	; 15
     120:	f0 ae       	std	Z+56, r15	; 0x38
     122:	4c 12       	cpse	r4, r28
     124:	91 cf       	rjmp	.-222    	; 0x48 <__SREG__+0x9>
     126:	2d 73       	andi	r18, 0x3D	; 61
     128:	ca 94       	dec	r12
     12a:	76 28       	or	r7, r6
     12c:	ab f5       	brvc	.+106    	; 0x198 <digital_pin_to_port_PGM+0x7>
     12e:	17 49       	sbci	r17, 0x97	; 151
     130:	08 56       	subi	r16, 0x68	; 104
     132:	b4 ea       	ldi	r27, 0xA4	; 164
     134:	69 37       	cpi	r22, 0x79	; 121
     136:	d5 8b       	std	Z+21, r29	; 0x15
     138:	57 09       	sbc	r21, r7
     13a:	eb b5       	in	r30, 0x2b	; 43
     13c:	36 68       	ori	r19, 0x86	; 134
     13e:	8a d4       	rcall	.+2324   	; 0xa54 <__stack+0x155>
     140:	95 cb       	rjmp	.-2262   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
     142:	29 77       	andi	r18, 0x79	; 121
     144:	f4 aa       	std	Z+52, r15	; 0x34
     146:	48 16       	cp	r4, r24
     148:	e9 b7       	in	r30, 0x39	; 57
     14a:	55 0b       	sbc	r21, r21
     14c:	88 d6       	rcall	.+3344   	; 0xe5e <_ZNK8SdVolume6fatGetEmPm+0x14>
     14e:	34 6a       	ori	r19, 0xA4	; 164
     150:	2b 75       	andi	r18, 0x5B	; 91
     152:	97 c9       	rjmp	.-3282   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     154:	4a 14       	cp	r4, r10
     156:	f6 a8       	ldd	r15, Z+54	; 0x36
     158:	74 2a       	or	r7, r20
     15a:	c8 96       	adiw	r24, 0x38	; 56
     15c:	15 4b       	sbci	r17, 0xB5	; 181
     15e:	a9 f7       	brne	.-22     	; 0x14a <__trampolines_end+0xe2>
     160:	b6 e8       	ldi	r27, 0x86	; 134
     162:	0a 54       	subi	r16, 0x4A	; 74
     164:	d7 89       	ldd	r29, Z+23	; 0x17
     166:	6b 35       	cpi	r22, 0x5B	; 91

00000168 <_ZL21tone_pin_to_timer_PGM>:
     168:	02                                                  .

00000169 <digital_pin_to_timer_PGM>:
     169:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     179:	00 00 00 00                                         ....

0000017d <digital_pin_to_bit_mask_PGM>:
     17d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     18d:	04 08 10 20                                         ... 

00000191 <digital_pin_to_port_PGM>:
     191:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1a1:	03 03 03 03                                         ....

000001a5 <port_to_input_PGM>:
     1a5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001af <port_to_output_PGM>:
     1af:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001b9 <port_to_mode_PGM>:
     1b9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000001c4 <__ctors_start>:
     1c4:	12 01       	movw	r2, r4
     1c6:	4e 03       	fmul	r20, r22
     1c8:	d5 12       	cpse	r13, r21
     1ca:	59 17       	cp	r21, r25
     1cc:	c9 17       	cp	r28, r25

000001ce <__ctors_end>:
     1ce:	e8 12       	cpse	r14, r24

000001d0 <__dtors_end>:
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf ef       	ldi	r28, 0xFF	; 255
     1d6:	d8 e0       	ldi	r29, 0x08	; 8
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
     1dc:	14 e0       	ldi	r17, 0x04	; 4
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b1 e0       	ldi	r27, 0x01	; 1
     1e2:	e2 e4       	ldi	r30, 0x42	; 66
     1e4:	f4 e4       	ldi	r31, 0x44	; 68
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__do_copy_data+0x10>
     1e8:	05 90       	lpm	r0, Z+
     1ea:	0d 92       	st	X+, r0
     1ec:	a2 3b       	cpi	r26, 0xB2	; 178
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__do_copy_data+0xc>

000001f2 <__do_clear_bss>:
     1f2:	28 e0       	ldi	r18, 0x08	; 8
     1f4:	a2 eb       	ldi	r26, 0xB2	; 178
     1f6:	b4 e0       	ldi	r27, 0x04	; 4
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	a0 35       	cpi	r26, 0x50	; 80
     1fe:	b2 07       	cpc	r27, r18
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>

00000202 <__do_global_ctors>:
     202:	10 e0       	ldi	r17, 0x00	; 0
     204:	c7 ee       	ldi	r28, 0xE7	; 231
     206:	d0 e0       	ldi	r29, 0x00	; 0
     208:	04 c0       	rjmp	.+8      	; 0x212 <__do_global_ctors+0x10>
     20a:	21 97       	sbiw	r28, 0x01	; 1
     20c:	fe 01       	movw	r30, r28
     20e:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__tablejump2__>
     212:	c2 3e       	cpi	r28, 0xE2	; 226
     214:	d1 07       	cpc	r29, r17
     216:	c9 f7       	brne	.-14     	; 0x20a <__do_global_ctors+0x8>
     218:	0e 94 d5 17 	call	0x2faa	; 0x2faa <main>
     21c:	0c 94 14 22 	jmp	0x4428	; 0x4428 <__do_global_dtors>

00000220 <__bad_interrupt>:
     220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <_GLOBAL__sub_I__Z20getNextPathComponentPcPjS_>:
    parentdir.close();
  }

  if (mode & (O_APPEND | O_WRITE)) 
    file.seekSet(file.fileSize());
  return File(file, filepath);
     224:	e2 eb       	ldi	r30, 0xB2	; 178
     226:	f4 e0       	ldi	r31, 0x04	; 4
     228:	15 82       	std	Z+5, r1	; 0x05
}
     22a:	16 82       	std	Z+6, r1	; 0x06
     22c:	11 86       	std	Z+9, r1	; 0x09
     22e:	13 86       	std	Z+11, r1	; 0x0b
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	84 87       	std	Z+12, r24	; 0x0c
     23a:	95 87       	std	Z+13, r25	; 0x0d
     23c:	a6 87       	std	Z+14, r26	; 0x0e
     23e:	b7 87       	std	Z+15, r27	; 0x0f
     240:	13 a2       	std	Z+35, r1	; 0x23
     242:	15 a6       	std	Z+45, r1	; 0x2d
     244:	14 a6       	std	Z+44, r1	; 0x2c
     246:	89 e0       	ldi	r24, 0x09	; 9
     248:	94 e0       	ldi	r25, 0x04	; 4
     24a:	93 a7       	std	Z+43, r25	; 0x2b
     24c:	82 a7       	std	Z+42, r24	; 0x2a
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     24e:	17 a6       	std	Z+47, r1	; 0x2f
     250:	08 95       	ret

00000252 <_ZL7spiSendh>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     252:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     254:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
     256:	0d b4       	in	r0, 0x2d	; 45
     258:	07 fe       	sbrs	r0, 7
     25a:	fd cf       	rjmp	.-6      	; 0x256 <_ZL7spiSendh+0x4>
    return SPDR;
     25c:	8e b5       	in	r24, 0x2e	; 46
     25e:	08 95       	ret

00000260 <_ZL6spiRecv>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     264:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
     266:	0d b4       	in	r0, 0x2d	; 45
     268:	07 fe       	sbrs	r0, 7
     26a:	fd cf       	rjmp	.-6      	; 0x266 <_ZL6spiRecv+0x6>
    return SPDR;
     26c:	8e b5       	in	r24, 0x2e	; 46
  spiSend(0XFF);
  return SPDR;
#else
  return SPI.transfer(0xFF);
#endif
}
     26e:	08 95       	ret

00000270 <_ZN7Sd2Card14chipSelectHighEv>:
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
     270:	61 e0       	ldi	r22, 0x01	; 1
     272:	fc 01       	movw	r30, r24
     274:	84 81       	ldd	r24, Z+4	; 0x04
     276:	0e 94 81 1c 	call	0x3902	; 0x3902 <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
     27a:	80 91 fe 04 	lds	r24, 0x04FE
     27e:	88 23       	and	r24, r24
     280:	a1 f0       	breq	.+40     	; 0x2aa <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    chip_select_asserted = 0;
     282:	10 92 fe 04 	sts	0x04FE, r1
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
     286:	80 91 fd 04 	lds	r24, 0x04FD
     28a:	88 23       	and	r24, r24
     28c:	71 f0       	breq	.+28     	; 0x2aa <_ZN7Sd2Card14chipSelectHighEv+0x3a>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
     28e:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
     290:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     292:	80 91 fd 04 	lds	r24, 0x04FD
     296:	81 30       	cpi	r24, 0x01	; 1
     298:	29 f4       	brne	.+10     	; 0x2a4 <_ZN7Sd2Card14chipSelectHighEv+0x34>
        SPI_AVR_EIMSK = interruptSave;
     29a:	80 91 fb 04 	lds	r24, 0x04FB
     29e:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
     2a0:	9f bf       	out	0x3f, r25	; 63
     2a2:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
     2a4:	80 91 fb 04 	lds	r24, 0x04FB
     2a8:	8f bf       	out	0x3f, r24	; 63
     2aa:	08 95       	ret

000002ac <_ZN7Sd2Card13chipSelectLowEv>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
     2ac:	20 91 fe 04 	lds	r18, 0x04FE
     2b0:	21 11       	cpse	r18, r1
     2b2:	20 c0       	rjmp	.+64     	; 0x2f4 <_ZN7Sd2Card13chipSelectLowEv+0x48>
    chip_select_asserted = 1;
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	20 93 fe 04 	sts	0x04FE, r18
     2ba:	ef ef       	ldi	r30, 0xFF	; 255
     2bc:	f4 e0       	ldi	r31, 0x04	; 4
     2be:	30 81       	ld	r19, Z
     2c0:	21 81       	ldd	r18, Z+1	; 0x01

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
     2c2:	40 91 fd 04 	lds	r20, 0x04FD
     2c6:	44 23       	and	r20, r20
     2c8:	99 f0       	breq	.+38     	; 0x2f0 <_ZN7Sd2Card13chipSelectLowEv+0x44>
      uint8_t sreg = SREG;
     2ca:	4f b7       	in	r20, 0x3f	; 63
      noInterrupts();
     2cc:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     2ce:	50 91 fd 04 	lds	r21, 0x04FD
     2d2:	51 30       	cpi	r21, 0x01	; 1
     2d4:	59 f4       	brne	.+22     	; 0x2ec <_ZN7Sd2Card13chipSelectLowEv+0x40>
        interruptSave = SPI_AVR_EIMSK;
     2d6:	5d b3       	in	r21, 0x1d	; 29
     2d8:	50 93 fb 04 	sts	0x04FB, r21
        SPI_AVR_EIMSK &= ~interruptMask;
     2dc:	6d b3       	in	r22, 0x1d	; 29
     2de:	50 91 fc 04 	lds	r21, 0x04FC
     2e2:	50 95       	com	r21
     2e4:	56 23       	and	r21, r22
     2e6:	5d bb       	out	0x1d, r21	; 29
        SREG = sreg;
     2e8:	4f bf       	out	0x3f, r20	; 63
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <_ZN7Sd2Card13chipSelectLowEv+0x44>
      } else
      #endif
      {
        interruptSave = sreg;
     2ec:	40 93 fb 04 	sts	0x04FB, r20
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     2f0:	3c bd       	out	0x2c, r19	; 44
    SPSR = settings.spsr;
     2f2:	2d bd       	out	0x2d, r18	; 45
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	fc 01       	movw	r30, r24
     2f8:	84 81       	ldd	r24, Z+4	; 0x04
     2fa:	0e 94 81 1c 	call	0x3902	; 0x3902 <digitalWrite>
     2fe:	08 95       	ret

00000300 <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
  if (inBlock_) {
     304:	fc 01       	movw	r30, r24
     306:	26 81       	ldd	r18, Z+6	; 0x06
     308:	22 23       	and	r18, r18
     30a:	d1 f0       	breq	.+52     	; 0x340 <_ZN7Sd2Card7readEndEv+0x40>
     30c:	ec 01       	movw	r28, r24
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)))
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
     30e:	87 81       	ldd	r24, Z+7	; 0x07
     310:	90 85       	ldd	r25, Z+8	; 0x08
     312:	9c 01       	movw	r18, r24
     314:	2f 5f       	subi	r18, 0xFF	; 255
     316:	3f 4f       	sbci	r19, 0xFF	; 255
     318:	30 87       	std	Z+8, r19	; 0x08
     31a:	27 83       	std	Z+7, r18	; 0x07
     31c:	82 30       	cpi	r24, 0x02	; 2
     31e:	92 40       	sbci	r25, 0x02	; 2
     320:	58 f4       	brcc	.+22     	; 0x338 <_ZN7Sd2Card7readEndEv+0x38>
     322:	0e 94 30 01 	call	0x260	; 0x260 <_ZL6spiRecv>
     326:	2f 81       	ldd	r18, Y+7	; 0x07
     328:	38 85       	ldd	r19, Y+8	; 0x08
     32a:	c9 01       	movw	r24, r18
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	98 87       	std	Y+8, r25	; 0x08
     330:	8f 83       	std	Y+7, r24	; 0x07
     332:	22 30       	cpi	r18, 0x02	; 2
     334:	32 40       	sbci	r19, 0x02	; 2
     336:	a8 f3       	brcs	.-22     	; 0x322 <_ZN7Sd2Card7readEndEv+0x22>
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
     338:	ce 01       	movw	r24, r28
     33a:	0e 94 38 01 	call	0x270	; 0x270 <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
     33e:	1e 82       	std	Y+6, r1	; 0x06
  }
}
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <_ZN7Sd2Card11waitNotBusyEj>:
#endif // USE_SPI_LIB
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	eb 01       	movw	r28, r22
  uint16_t t0 = millis();
     350:	0e 94 6f 1b 	call	0x36de	; 0x36de <millis>
     354:	8b 01       	movw	r16, r22
  do {
    if (spiRec() == 0XFF) return true;
     356:	0e 94 30 01 	call	0x260	; 0x260 <_ZL6spiRecv>
     35a:	8f 3f       	cpi	r24, 0xFF	; 255
     35c:	49 f0       	breq	.+18     	; 0x370 <_ZN7Sd2Card11waitNotBusyEj+0x2a>
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
     35e:	0e 94 6f 1b 	call	0x36de	; 0x36de <millis>
     362:	60 1b       	sub	r22, r16
     364:	71 0b       	sbc	r23, r17
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
     366:	6c 17       	cp	r22, r28
     368:	7d 07       	cpc	r23, r29
     36a:	a8 f3       	brcs	.-22     	; 0x356 <_ZN7Sd2Card11waitNotBusyEj+0x10>
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	01 c0       	rjmp	.+2      	; 0x372 <_ZN7Sd2Card11waitNotBusyEj+0x2c>
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    if (spiRec() == 0XFF) return true;
     370:	81 e0       	ldi	r24, 0x01	; 1
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	08 95       	ret

0000037c <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
     37c:	bf 92       	push	r11
     37e:	cf 92       	push	r12
     380:	df 92       	push	r13
     382:	ef 92       	push	r14
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	8c 01       	movw	r16, r24
     390:	b6 2e       	mov	r11, r22
     392:	69 01       	movw	r12, r18
     394:	7a 01       	movw	r14, r20
  // end read if in partialBlockRead mode
  readEnd();
     396:	0e 94 80 01 	call	0x300	; 0x300 <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
     39a:	c8 01       	movw	r24, r16
     39c:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
     3a0:	6c e2       	ldi	r22, 0x2C	; 44
     3a2:	71 e0       	ldi	r23, 0x01	; 1
     3a4:	c8 01       	movw	r24, r16
     3a6:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN7Sd2Card11waitNotBusyEj>

  // send command
  spiSend(cmd | 0x40);
     3aa:	8b 2d       	mov	r24, r11
     3ac:	80 64       	ori	r24, 0x40	; 64
     3ae:	0e 94 29 01 	call	0x252	; 0x252 <_ZL7spiSendh>
     3b2:	c8 e1       	ldi	r28, 0x18	; 24
     3b4:	d0 e0       	ldi	r29, 0x00	; 0

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
     3b6:	d7 01       	movw	r26, r14
     3b8:	c6 01       	movw	r24, r12
     3ba:	0c 2e       	mov	r0, r28
     3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <_ZN7Sd2Card11cardCommandEhm+0x4a>
     3be:	b6 95       	lsr	r27
     3c0:	a7 95       	ror	r26
     3c2:	97 95       	ror	r25
     3c4:	87 95       	ror	r24
     3c6:	0a 94       	dec	r0
     3c8:	d2 f7       	brpl	.-12     	; 0x3be <_ZN7Sd2Card11cardCommandEhm+0x42>
     3ca:	0e 94 29 01 	call	0x252	; 0x252 <_ZL7spiSendh>
     3ce:	28 97       	sbiw	r28, 0x08	; 8
     3d0:	c8 3f       	cpi	r28, 0xF8	; 248
     3d2:	8f ef       	ldi	r24, 0xFF	; 255
     3d4:	d8 07       	cpc	r29, r24
     3d6:	79 f7       	brne	.-34     	; 0x3b6 <_ZN7Sd2Card11cardCommandEhm+0x3a>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
     3d8:	bb 20       	and	r11, r11
     3da:	29 f0       	breq	.+10     	; 0x3e6 <_ZN7Sd2Card11cardCommandEhm+0x6a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
     3dc:	e8 e0       	ldi	r30, 0x08	; 8
     3de:	be 12       	cpse	r11, r30
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <_ZN7Sd2Card11cardCommandEhm+0x6e>
     3e2:	87 e8       	ldi	r24, 0x87	; 135
     3e4:	03 c0       	rjmp	.+6      	; 0x3ec <_ZN7Sd2Card11cardCommandEhm+0x70>
  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
     3e6:	85 e9       	ldi	r24, 0x95	; 149
     3e8:	01 c0       	rjmp	.+2      	; 0x3ec <_ZN7Sd2Card11cardCommandEhm+0x70>

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);

  // send CRC
  uint8_t crc = 0XFF;
     3ea:	8f ef       	ldi	r24, 0xFF	; 255
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);
     3ec:	0e 94 29 01 	call	0x252	; 0x252 <_ZL7spiSendh>

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
     3f0:	c0 e0       	ldi	r28, 0x00	; 0
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <_ZN7Sd2Card11cardCommandEhm+0x7a>
     3f4:	cf 5f       	subi	r28, 0xFF	; 255
     3f6:	0e 94 30 01 	call	0x260	; 0x260 <_ZL6spiRecv>
     3fa:	f8 01       	movw	r30, r16
     3fc:	82 87       	std	Z+10, r24	; 0x0a
     3fe:	88 23       	and	r24, r24
     400:	14 f4       	brge	.+4      	; 0x406 <_ZN7Sd2Card11cardCommandEhm+0x8a>
     402:	cf 3f       	cpi	r28, 0xFF	; 255
     404:	b9 f7       	brne	.-18     	; 0x3f4 <_ZN7Sd2Card11cardCommandEhm+0x78>
    ;
  return status_;
}
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	08 95       	ret

0000041a <_ZN7Sd2Card14waitStartBlockEv>:
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	ec 01       	movw	r28, r24
  uint16_t t0 = millis();
     424:	0e 94 6f 1b 	call	0x36de	; 0x36de <millis>
     428:	8b 01       	movw	r16, r22
  while ((status_ = spiRec()) == 0XFF) {
     42a:	0a c0       	rjmp	.+20     	; 0x440 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
     42c:	0e 94 6f 1b 	call	0x36de	; 0x36de <millis>
     430:	60 1b       	sub	r22, r16
     432:	71 0b       	sbc	r23, r17
     434:	6d 32       	cpi	r22, 0x2D	; 45
     436:	71 40       	sbci	r23, 0x01	; 1
     438:	18 f0       	brcs	.+6      	; 0x440 <_ZN7Sd2Card14waitStartBlockEv+0x26>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
     43a:	8f e0       	ldi	r24, 0x0F	; 15
     43c:	8d 83       	std	Y+5, r24	; 0x05
     43e:	09 c0       	rjmp	.+18     	; 0x452 <_ZN7Sd2Card14waitStartBlockEv+0x38>
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
     440:	0e 94 30 01 	call	0x260	; 0x260 <_ZL6spiRecv>
     444:	8a 87       	std	Y+10, r24	; 0x0a
     446:	8f 3f       	cpi	r24, 0xFF	; 255
     448:	89 f3       	breq	.-30     	; 0x42c <_ZN7Sd2Card14waitStartBlockEv+0x12>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
     44a:	8e 3f       	cpi	r24, 0xFE	; 254
     44c:	39 f0       	breq	.+14     	; 0x45c <_ZN7Sd2Card14waitStartBlockEv+0x42>
     44e:	8d e0       	ldi	r24, 0x0D	; 13
     450:	8d 83       	std	Y+5, r24	; 0x05
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
     452:	ce 01       	movw	r24, r28
     454:	0e 94 38 01 	call	0x270	; 0x270 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	01 c0       	rjmp	.+2      	; 0x45e <_ZN7Sd2Card14waitStartBlockEv+0x44>
  }
  if (status_ != DATA_START_BLOCK) {
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  return true;
     45c:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	08 95       	ret

00000468 <_ZN7Sd2Card8readDataEmjjPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	ec 01       	movw	r28, r24
     47a:	69 01       	movw	r12, r18
  uint16_t n;
  if (count == 0) return true;
     47c:	01 15       	cp	r16, r1
     47e:	11 05       	cpc	r17, r1
     480:	09 f4       	brne	.+2      	; 0x484 <_ZN7Sd2Card8readDataEmjjPh+0x1c>
     482:	6c c0       	rjmp	.+216    	; 0x55c <_ZN7Sd2Card8readDataEmjjPh+0xf4>
  if ((count + offset) > 512) {
     484:	c8 01       	movw	r24, r16
     486:	82 0f       	add	r24, r18
     488:	93 1f       	adc	r25, r19
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	92 40       	sbci	r25, 0x02	; 2
     48e:	08 f0       	brcs	.+2      	; 0x492 <_ZN7Sd2Card8readDataEmjjPh+0x2a>
     490:	60 c0       	rjmp	.+192    	; 0x552 <_ZN7Sd2Card8readDataEmjjPh+0xea>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
     492:	8e 81       	ldd	r24, Y+6	; 0x06
     494:	88 23       	and	r24, r24
     496:	71 f0       	breq	.+28     	; 0x4b4 <_ZN7Sd2Card8readDataEmjjPh+0x4c>
     498:	88 81       	ld	r24, Y
     49a:	99 81       	ldd	r25, Y+1	; 0x01
     49c:	aa 81       	ldd	r26, Y+2	; 0x02
     49e:	bb 81       	ldd	r27, Y+3	; 0x03
     4a0:	84 17       	cp	r24, r20
     4a2:	95 07       	cpc	r25, r21
     4a4:	a6 07       	cpc	r26, r22
     4a6:	b7 07       	cpc	r27, r23
     4a8:	29 f4       	brne	.+10     	; 0x4b4 <_ZN7Sd2Card8readDataEmjjPh+0x4c>
     4aa:	8f 81       	ldd	r24, Y+7	; 0x07
     4ac:	98 85       	ldd	r25, Y+8	; 0x08
     4ae:	c8 16       	cp	r12, r24
     4b0:	d9 06       	cpc	r13, r25
     4b2:	20 f5       	brcc	.+72     	; 0x4fc <_ZN7Sd2Card8readDataEmjjPh+0x94>
    block_ = block;
     4b4:	48 83       	st	Y, r20
     4b6:	59 83       	std	Y+1, r21	; 0x01
     4b8:	6a 83       	std	Y+2, r22	; 0x02
     4ba:	7b 83       	std	Y+3, r23	; 0x03
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
     4bc:	8b 85       	ldd	r24, Y+11	; 0x0b
     4be:	83 30       	cpi	r24, 0x03	; 3
     4c0:	49 f0       	breq	.+18     	; 0x4d4 <_ZN7Sd2Card8readDataEmjjPh+0x6c>
     4c2:	03 2e       	mov	r0, r19
     4c4:	39 e0       	ldi	r19, 0x09	; 9
     4c6:	44 0f       	add	r20, r20
     4c8:	55 1f       	adc	r21, r21
     4ca:	66 1f       	adc	r22, r22
     4cc:	77 1f       	adc	r23, r23
     4ce:	3a 95       	dec	r19
     4d0:	d1 f7       	brne	.-12     	; 0x4c6 <_ZN7Sd2Card8readDataEmjjPh+0x5e>
     4d2:	30 2d       	mov	r19, r0
    if (cardCommand(CMD17, block)) {
     4d4:	9a 01       	movw	r18, r20
     4d6:	ab 01       	movw	r20, r22
     4d8:	61 e1       	ldi	r22, 0x11	; 17
     4da:	ce 01       	movw	r24, r28
     4dc:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN7Sd2Card11cardCommandEhm>
     4e0:	88 23       	and	r24, r24
     4e2:	19 f0       	breq	.+6      	; 0x4ea <_ZN7Sd2Card8readDataEmjjPh+0x82>
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	8d 83       	std	Y+5, r24	; 0x05
     4e8:	34 c0       	rjmp	.+104    	; 0x552 <_ZN7Sd2Card8readDataEmjjPh+0xea>
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
     4ea:	ce 01       	movw	r24, r28
     4ec:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZN7Sd2Card14waitStartBlockEv>
     4f0:	88 23       	and	r24, r24
     4f2:	79 f1       	breq	.+94     	; 0x552 <_ZN7Sd2Card8readDataEmjjPh+0xea>
      goto fail;
    }
    offset_ = 0;
     4f4:	18 86       	std	Y+8, r1	; 0x08
     4f6:	1f 82       	std	Y+7, r1	; 0x07
    inBlock_ = 1;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	8e 83       	std	Y+6, r24	; 0x06
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
     4fc:	8f 81       	ldd	r24, Y+7	; 0x07
     4fe:	98 85       	ldd	r25, Y+8	; 0x08
     500:	8c 15       	cp	r24, r12
     502:	9d 05       	cpc	r25, r13
     504:	50 f4       	brcc	.+20     	; 0x51a <_ZN7Sd2Card8readDataEmjjPh+0xb2>
    spiRec();
     506:	0e 94 30 01 	call	0x260	; 0x260 <_ZL6spiRecv>
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
     50a:	8f 81       	ldd	r24, Y+7	; 0x07
     50c:	98 85       	ldd	r25, Y+8	; 0x08
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	98 87       	std	Y+8, r25	; 0x08
     512:	8f 83       	std	Y+7, r24	; 0x07
     514:	8c 15       	cp	r24, r12
     516:	9d 05       	cpc	r25, r13
     518:	b0 f3       	brcs	.-20     	; 0x506 <_ZN7Sd2Card8readDataEmjjPh+0x9e>
     51a:	67 01       	movw	r12, r14
     51c:	e0 0e       	add	r14, r16
     51e:	f1 1e       	adc	r15, r17
    spiRec();
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
     520:	0e 94 30 01 	call	0x260	; 0x260 <_ZL6spiRecv>
     524:	f6 01       	movw	r30, r12
     526:	81 93       	st	Z+, r24
     528:	6f 01       	movw	r12, r30
  // skip data before offset
  for (;offset_ < offset; offset_++) {
    spiRec();
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
     52a:	ee 15       	cp	r30, r14
     52c:	ff 05       	cpc	r31, r15
     52e:	c1 f7       	brne	.-16     	; 0x520 <_ZN7Sd2Card8readDataEmjjPh+0xb8>
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
     530:	8f 81       	ldd	r24, Y+7	; 0x07
     532:	98 85       	ldd	r25, Y+8	; 0x08
     534:	08 0f       	add	r16, r24
     536:	19 1f       	adc	r17, r25
     538:	18 87       	std	Y+8, r17	; 0x08
     53a:	0f 83       	std	Y+7, r16	; 0x07
  if (!partialBlockRead_ || offset_ >= 512) {
     53c:	89 85       	ldd	r24, Y+9	; 0x09
     53e:	88 23       	and	r24, r24
     540:	19 f0       	breq	.+6      	; 0x548 <_ZN7Sd2Card8readDataEmjjPh+0xe0>
     542:	01 15       	cp	r16, r1
     544:	12 40       	sbci	r17, 0x02	; 2
     546:	60 f0       	brcs	.+24     	; 0x560 <_ZN7Sd2Card8readDataEmjjPh+0xf8>
    // read rest of data, checksum and set chip select high
    readEnd();
     548:	ce 01       	movw	r24, r28
     54a:	0e 94 80 01 	call	0x300	; 0x300 <_ZN7Sd2Card7readEndEv>
  }
  return true;
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	08 c0       	rjmp	.+16     	; 0x562 <_ZN7Sd2Card8readDataEmjjPh+0xfa>

 fail:
  chipSelectHigh();
     552:	ce 01       	movw	r24, r28
     554:	0e 94 38 01 	call	0x270	; 0x270 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	03 c0       	rjmp	.+6      	; 0x562 <_ZN7Sd2Card8readDataEmjjPh+0xfa>
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
  uint16_t n;
  if (count == 0) return true;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	01 c0       	rjmp	.+2      	; 0x562 <_ZN7Sd2Card8readDataEmjjPh+0xfa>
  offset_ += count;
  if (!partialBlockRead_ || offset_ >= 512) {
    // read rest of data, checksum and set chip select high
    readEnd();
  }
  return true;
     560:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	08 95       	ret

00000574 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
  return readData(block, 0, 512, dst);
     57c:	79 01       	movw	r14, r18
     57e:	00 e0       	ldi	r16, 0x00	; 0
     580:	12 e0       	ldi	r17, 0x02	; 2
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	0e 94 34 02 	call	0x468	; 0x468 <_ZN7Sd2Card8readDataEmjjPh>
}
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	08 95       	ret

00000594 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
     594:	ef 92       	push	r14
     596:	ff 92       	push	r15
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	7c 01       	movw	r14, r24
     5a2:	86 2f       	mov	r24, r22
     5a4:	8a 01       	movw	r16, r20
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
     5a6:	0e 94 29 01 	call	0x252	; 0x252 <_ZL7spiSendh>
     5aa:	e8 01       	movw	r28, r16
     5ac:	1e 5f       	subi	r17, 0xFE	; 254
  for (uint16_t i = 0; i < 512; i++) {
    spiSend(src[i]);
     5ae:	89 91       	ld	r24, Y+
     5b0:	0e 94 29 01 	call	0x252	; 0x252 <_ZL7spiSendh>
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
     5b4:	c0 17       	cp	r28, r16
     5b6:	d1 07       	cpc	r29, r17
     5b8:	d1 f7       	brne	.-12     	; 0x5ae <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    spiSend(src[i]);
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
     5ba:	8f ef       	ldi	r24, 0xFF	; 255
     5bc:	0e 94 29 01 	call	0x252	; 0x252 <_ZL7spiSendh>
  spiSend(0xff);  // dummy crc
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	0e 94 29 01 	call	0x252	; 0x252 <_ZL7spiSendh>

  status_ = spiRec();
     5c6:	0e 94 30 01 	call	0x260	; 0x260 <_ZL6spiRecv>
     5ca:	f7 01       	movw	r30, r14
     5cc:	82 87       	std	Z+10, r24	; 0x0a
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
     5ce:	98 2f       	mov	r25, r24
     5d0:	9f 71       	andi	r25, 0x1F	; 31
     5d2:	95 30       	cpi	r25, 0x05	; 5
     5d4:	39 f0       	breq	.+14     	; 0x5e4 <_ZN7Sd2Card9writeDataEhPKh+0x50>
     5d6:	81 e1       	ldi	r24, 0x11	; 17
     5d8:	85 83       	std	Z+5, r24	; 0x05
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
     5da:	c7 01       	movw	r24, r14
     5dc:	0e 94 38 01 	call	0x270	; 0x270 <_ZN7Sd2Card14chipSelectHighEv>
    return false;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <_ZN7Sd2Card9writeDataEhPKh+0x52>
  }
  return true;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	08 95       	ret

000005f4 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	ec 01       	movw	r28, r24
     5fe:	89 01       	movw	r16, r18
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
     600:	41 15       	cp	r20, r1
     602:	51 05       	cpc	r21, r1
     604:	61 05       	cpc	r22, r1
     606:	71 05       	cpc	r23, r1
     608:	19 f4       	brne	.+6      	; 0x610 <_ZN7Sd2Card10writeBlockEmPKh+0x1c>
     60a:	82 e1       	ldi	r24, 0x12	; 18
     60c:	8d 83       	std	Y+5, r24	; 0x05
     60e:	3d c0       	rjmp	.+122    	; 0x68a <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
     610:	8b 85       	ldd	r24, Y+11	; 0x0b
     612:	83 30       	cpi	r24, 0x03	; 3
     614:	49 f0       	breq	.+18     	; 0x628 <_ZN7Sd2Card10writeBlockEmPKh+0x34>
     616:	03 2e       	mov	r0, r19
     618:	39 e0       	ldi	r19, 0x09	; 9
     61a:	44 0f       	add	r20, r20
     61c:	55 1f       	adc	r21, r21
     61e:	66 1f       	adc	r22, r22
     620:	77 1f       	adc	r23, r23
     622:	3a 95       	dec	r19
     624:	d1 f7       	brne	.-12     	; 0x61a <_ZN7Sd2Card10writeBlockEmPKh+0x26>
     626:	30 2d       	mov	r19, r0
  if (cardCommand(CMD24, blockNumber)) {
     628:	9a 01       	movw	r18, r20
     62a:	ab 01       	movw	r20, r22
     62c:	68 e1       	ldi	r22, 0x18	; 24
     62e:	ce 01       	movw	r24, r28
     630:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN7Sd2Card11cardCommandEhm>
     634:	88 23       	and	r24, r24
     636:	19 f0       	breq	.+6      	; 0x63e <_ZN7Sd2Card10writeBlockEmPKh+0x4a>
     638:	84 e0       	ldi	r24, 0x04	; 4
     63a:	8d 83       	std	Y+5, r24	; 0x05
     63c:	26 c0       	rjmp	.+76     	; 0x68a <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
     63e:	a8 01       	movw	r20, r16
     640:	6e ef       	ldi	r22, 0xFE	; 254
     642:	ce 01       	movw	r24, r28
     644:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN7Sd2Card9writeDataEhPKh>
     648:	88 23       	and	r24, r24
     64a:	f9 f0       	breq	.+62     	; 0x68a <_ZN7Sd2Card10writeBlockEmPKh+0x96>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
     64c:	68 e5       	ldi	r22, 0x58	; 88
     64e:	72 e0       	ldi	r23, 0x02	; 2
     650:	ce 01       	movw	r24, r28
     652:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN7Sd2Card11waitNotBusyEj>
     656:	81 11       	cpse	r24, r1
     658:	03 c0       	rjmp	.+6      	; 0x660 <_ZN7Sd2Card10writeBlockEmPKh+0x6c>
     65a:	85 e1       	ldi	r24, 0x15	; 21
     65c:	8d 83       	std	Y+5, r24	; 0x05
     65e:	15 c0       	rjmp	.+42     	; 0x68a <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	a9 01       	movw	r20, r18
     666:	6d e0       	ldi	r22, 0x0D	; 13
     668:	ce 01       	movw	r24, r28
     66a:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN7Sd2Card11cardCommandEhm>
     66e:	81 11       	cpse	r24, r1
     670:	04 c0       	rjmp	.+8      	; 0x67a <_ZN7Sd2Card10writeBlockEmPKh+0x86>
     672:	0e 94 30 01 	call	0x260	; 0x260 <_ZL6spiRecv>
     676:	88 23       	and	r24, r24
     678:	19 f0       	breq	.+6      	; 0x680 <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
     67a:	84 e1       	ldi	r24, 0x14	; 20
     67c:	8d 83       	std	Y+5, r24	; 0x05
     67e:	05 c0       	rjmp	.+10     	; 0x68a <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  chipSelectHigh();
     680:	ce 01       	movw	r24, r28
     682:	0e 94 38 01 	call	0x270	; 0x270 <_ZN7Sd2Card14chipSelectHighEv>
  return true;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	04 c0       	rjmp	.+8      	; 0x692 <_ZN7Sd2Card10writeBlockEmPKh+0x9e>

 fail:
  chipSelectHigh();
     68a:	ce 01       	movw	r24, r28
     68c:	0e 94 38 01 	call	0x270	; 0x270 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
     690:	80 e0       	ldi	r24, 0x00	; 0
}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	08 95       	ret

0000069c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
     69c:	ef ef       	ldi	r30, 0xFF	; 255
     69e:	f4 e0       	ldi	r31, 0x04	; 4
     6a0:	80 e5       	ldi	r24, 0x50	; 80
     6a2:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	81 83       	std	Z+1, r24	; 0x01
     6a8:	08 95       	ret

000006aa <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ec 01       	movw	r28, r24
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
     6b0:	9c 01       	movw	r18, r24
     6b2:	2a 5f       	subi	r18, 0xFA	; 250
     6b4:	3f 4f       	sbci	r19, 0xFF	; 255
     6b6:	41 e0       	ldi	r20, 0x01	; 1
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6c2:	0e 94 82 08 	call	0x1104	; 0x1104 <_ZN8SdVolume15allocContiguousEmPm>
     6c6:	88 23       	and	r24, r24
     6c8:	b1 f0       	breq	.+44     	; 0x6f6 <_ZN6SdFile10addClusterEv+0x4c>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
     6ca:	8f 89       	ldd	r24, Y+23	; 0x17
     6cc:	98 8d       	ldd	r25, Y+24	; 0x18
     6ce:	a9 8d       	ldd	r26, Y+25	; 0x19
     6d0:	ba 8d       	ldd	r27, Y+26	; 0x1a
     6d2:	89 2b       	or	r24, r25
     6d4:	8a 2b       	or	r24, r26
     6d6:	8b 2b       	or	r24, r27
     6d8:	69 f4       	brne	.+26     	; 0x6f4 <_ZN6SdFile10addClusterEv+0x4a>
    firstCluster_ = curCluster_;
     6da:	8e 81       	ldd	r24, Y+6	; 0x06
     6dc:	9f 81       	ldd	r25, Y+7	; 0x07
     6de:	a8 85       	ldd	r26, Y+8	; 0x08
     6e0:	b9 85       	ldd	r27, Y+9	; 0x09
     6e2:	8f 8b       	std	Y+23, r24	; 0x17
     6e4:	98 8f       	std	Y+24, r25	; 0x18
     6e6:	a9 8f       	std	Y+25, r26	; 0x19
     6e8:	ba 8f       	std	Y+26, r27	; 0x1a
    flags_ |= F_FILE_DIR_DIRTY;
     6ea:	8c 81       	ldd	r24, Y+4	; 0x04
     6ec:	80 68       	ori	r24, 0x80	; 128
     6ee:	8c 83       	std	Y+4, r24	; 0x04
  }
  return true;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <_ZN6SdFile10addClusterEv+0x4c>
     6f4:	81 e0       	ldi	r24, 0x01	; 1
}
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <_ZN6SdFile13cacheDirEntryEh>:
  return true;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	ec 01       	movw	r28, r24
     702:	46 2f       	mov	r20, r22
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
     704:	6e 85       	ldd	r22, Y+14	; 0x0e
     706:	7f 85       	ldd	r23, Y+15	; 0x0f
     708:	88 89       	ldd	r24, Y+16	; 0x10
     70a:	99 89       	ldd	r25, Y+17	; 0x11
     70c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN8SdVolume13cacheRawBlockEmh>
     710:	88 23       	and	r24, r24
     712:	41 f0       	breq	.+16     	; 0x724 <_ZN6SdFile13cacheDirEntryEh+0x28>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
     714:	8a 89       	ldd	r24, Y+18	; 0x12
     716:	20 e2       	ldi	r18, 0x20	; 32
     718:	82 9f       	mul	r24, r18
     71a:	c0 01       	movw	r24, r0
     71c:	11 24       	eor	r1, r1
     71e:	86 5f       	subi	r24, 0xF6	; 246
     720:	9a 4f       	sbci	r25, 0xFA	; 250
     722:	02 c0       	rjmp	.+4      	; 0x728 <_ZN6SdFile13cacheDirEntryEh+0x2c>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
  return SdVolume::cacheBuffer_.dir + dirIndex_;
}
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
     72e:	8f 92       	push	r8
     730:	9f 92       	push	r9
     732:	af 92       	push	r10
     734:	bf 92       	push	r11
     736:	cf 92       	push	r12
     738:	df 92       	push	r13
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	ec 01       	movw	r28, r24
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
     748:	8d 81       	ldd	r24, Y+5	; 0x05
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
     74a:	88 23       	and	r24, r24
     74c:	09 f4       	brne	.+2      	; 0x750 <_ZN6SdFile7seekSetEm+0x22>
     74e:	7f c0       	rjmp	.+254    	; 0x84e <_ZN6SdFile7seekSetEm+0x120>
     750:	0b 89       	ldd	r16, Y+19	; 0x13
     752:	1c 89       	ldd	r17, Y+20	; 0x14
     754:	2d 89       	ldd	r18, Y+21	; 0x15
     756:	3e 89       	ldd	r19, Y+22	; 0x16
     758:	04 17       	cp	r16, r20
     75a:	15 07       	cpc	r17, r21
     75c:	26 07       	cpc	r18, r22
     75e:	37 07       	cpc	r19, r23
     760:	08 f4       	brcc	.+2      	; 0x764 <_ZN6SdFile7seekSetEm+0x36>
     762:	74 c0       	rjmp	.+232    	; 0x84c <_ZN6SdFile7seekSetEm+0x11e>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
     764:	82 30       	cpi	r24, 0x02	; 2
     766:	31 f4       	brne	.+12     	; 0x774 <_ZN6SdFile7seekSetEm+0x46>
    curPosition_ = pos;
     768:	4a 87       	std	Y+10, r20	; 0x0a
     76a:	5b 87       	std	Y+11, r21	; 0x0b
     76c:	6c 87       	std	Y+12, r22	; 0x0c
     76e:	7d 87       	std	Y+13, r23	; 0x0d
    return true;
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	6d c0       	rjmp	.+218    	; 0x84e <_ZN6SdFile7seekSetEm+0x120>
  }
  if (pos == 0) {
     774:	41 15       	cp	r20, r1
     776:	51 05       	cpc	r21, r1
     778:	61 05       	cpc	r22, r1
     77a:	71 05       	cpc	r23, r1
     77c:	51 f4       	brne	.+20     	; 0x792 <_ZN6SdFile7seekSetEm+0x64>
    // set position to start of file
    curCluster_ = 0;
     77e:	1e 82       	std	Y+6, r1	; 0x06
     780:	1f 82       	std	Y+7, r1	; 0x07
     782:	18 86       	std	Y+8, r1	; 0x08
     784:	19 86       	std	Y+9, r1	; 0x09
    curPosition_ = 0;
     786:	1a 86       	std	Y+10, r1	; 0x0a
     788:	1b 86       	std	Y+11, r1	; 0x0b
     78a:	1c 86       	std	Y+12, r1	; 0x0c
     78c:	1d 86       	std	Y+13, r1	; 0x0d
    return true;
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	5e c0       	rjmp	.+188    	; 0x84e <_ZN6SdFile7seekSetEm+0x120>
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
     792:	8a 84       	ldd	r8, Y+10	; 0x0a
     794:	9b 84       	ldd	r9, Y+11	; 0x0b
     796:	ac 84       	ldd	r10, Y+12	; 0x0c
     798:	bd 84       	ldd	r11, Y+13	; 0x0d
     79a:	eb 8d       	ldd	r30, Y+27	; 0x1b
     79c:	fc 8d       	ldd	r31, Y+28	; 0x1c
     79e:	85 85       	ldd	r24, Z+13	; 0x0d
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	09 96       	adiw	r24, 0x09	; 9
     7a4:	95 01       	movw	r18, r10
     7a6:	84 01       	movw	r16, r8
     7a8:	01 50       	subi	r16, 0x01	; 1
     7aa:	11 09       	sbc	r17, r1
     7ac:	21 09       	sbc	r18, r1
     7ae:	31 09       	sbc	r19, r1
     7b0:	08 2e       	mov	r0, r24
     7b2:	04 c0       	rjmp	.+8      	; 0x7bc <_ZN6SdFile7seekSetEm+0x8e>
     7b4:	36 95       	lsr	r19
     7b6:	27 95       	ror	r18
     7b8:	17 95       	ror	r17
     7ba:	07 95       	ror	r16
     7bc:	0a 94       	dec	r0
     7be:	d2 f7       	brpl	.-12     	; 0x7b4 <_ZN6SdFile7seekSetEm+0x86>
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
     7c0:	6a 01       	movw	r12, r20
     7c2:	7b 01       	movw	r14, r22
     7c4:	e1 e0       	ldi	r30, 0x01	; 1
     7c6:	ce 1a       	sub	r12, r30
     7c8:	d1 08       	sbc	r13, r1
     7ca:	e1 08       	sbc	r14, r1
     7cc:	f1 08       	sbc	r15, r1
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <_ZN6SdFile7seekSetEm+0xaa>
     7d0:	f6 94       	lsr	r15
     7d2:	e7 94       	ror	r14
     7d4:	d7 94       	ror	r13
     7d6:	c7 94       	ror	r12
     7d8:	8a 95       	dec	r24
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <_ZN6SdFile7seekSetEm+0xa2>

  if (nNew < nCur || curPosition_ == 0) {
     7dc:	c0 16       	cp	r12, r16
     7de:	d1 06       	cpc	r13, r17
     7e0:	e2 06       	cpc	r14, r18
     7e2:	f3 06       	cpc	r15, r19
     7e4:	20 f0       	brcs	.+8      	; 0x7ee <_ZN6SdFile7seekSetEm+0xc0>
     7e6:	89 28       	or	r8, r9
     7e8:	8a 28       	or	r8, r10
     7ea:	8b 28       	or	r8, r11
     7ec:	49 f4       	brne	.+18     	; 0x800 <_ZN6SdFile7seekSetEm+0xd2>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
     7ee:	8f 89       	ldd	r24, Y+23	; 0x17
     7f0:	98 8d       	ldd	r25, Y+24	; 0x18
     7f2:	a9 8d       	ldd	r26, Y+25	; 0x19
     7f4:	ba 8d       	ldd	r27, Y+26	; 0x1a
     7f6:	8e 83       	std	Y+6, r24	; 0x06
     7f8:	9f 83       	std	Y+7, r25	; 0x07
     7fa:	a8 87       	std	Y+8, r26	; 0x08
     7fc:	b9 87       	std	Y+9, r27	; 0x09
     7fe:	16 c0       	rjmp	.+44     	; 0x82c <_ZN6SdFile7seekSetEm+0xfe>
  } else {
    // advance from curPosition
    nNew -= nCur;
     800:	c0 1a       	sub	r12, r16
     802:	d1 0a       	sbc	r13, r17
     804:	e2 0a       	sbc	r14, r18
     806:	f3 0a       	sbc	r15, r19
     808:	11 c0       	rjmp	.+34     	; 0x82c <_ZN6SdFile7seekSetEm+0xfe>
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
     80a:	4e 81       	ldd	r20, Y+6	; 0x06
     80c:	5f 81       	ldd	r21, Y+7	; 0x07
     80e:	68 85       	ldd	r22, Y+8	; 0x08
     810:	79 85       	ldd	r23, Y+9	; 0x09
     812:	98 01       	movw	r18, r16
     814:	8b 8d       	ldd	r24, Y+27	; 0x1b
     816:	9c 8d       	ldd	r25, Y+28	; 0x1c
     818:	0e 94 25 07 	call	0xe4a	; 0xe4a <_ZNK8SdVolume6fatGetEmPm>
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	c9 1a       	sub	r12, r25
     820:	d1 08       	sbc	r13, r1
     822:	e1 08       	sbc	r14, r1
     824:	f1 08       	sbc	r15, r1
     826:	81 11       	cpse	r24, r1
     828:	06 c0       	rjmp	.+12     	; 0x836 <_ZN6SdFile7seekSetEm+0x108>
     82a:	11 c0       	rjmp	.+34     	; 0x84e <_ZN6SdFile7seekSetEm+0x120>
     82c:	4a 01       	movw	r8, r20
     82e:	5b 01       	movw	r10, r22
     830:	8e 01       	movw	r16, r28
     832:	0a 5f       	subi	r16, 0xFA	; 250
     834:	1f 4f       	sbci	r17, 0xFF	; 255
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
     836:	c1 14       	cp	r12, r1
     838:	d1 04       	cpc	r13, r1
     83a:	e1 04       	cpc	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	29 f7       	brne	.-54     	; 0x80a <_ZN6SdFile7seekSetEm+0xdc>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
     840:	8a 86       	std	Y+10, r8	; 0x0a
     842:	9b 86       	std	Y+11, r9	; 0x0b
     844:	ac 86       	std	Y+12, r10	; 0x0c
     846:	bd 86       	std	Y+13, r11	; 0x0d
  return true;
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	01 c0       	rjmp	.+2      	; 0x84e <_ZN6SdFile7seekSetEm+0x120>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
     84c:	80 e0       	ldi	r24, 0x00	; 0
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
  return true;
}
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	bf 90       	pop	r11
     860:	af 90       	pop	r10
     862:	9f 90       	pop	r9
     864:	8f 90       	pop	r8
     866:	08 95       	ret

00000868 <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	fc 01       	movw	r30, r24
     872:	85 81       	ldd	r24, Z+5	; 0x05
  // only allow open files and directories
  if (!isOpen()) return false;
     874:	88 23       	and	r24, r24
     876:	d1 f1       	breq	.+116    	; 0x8ec <_ZN6SdFile4syncEv+0x84>
     878:	ef 01       	movw	r28, r30

  if (flags_ & F_FILE_DIR_DIRTY) {
     87a:	84 81       	ldd	r24, Z+4	; 0x04
     87c:	88 23       	and	r24, r24
     87e:	94 f5       	brge	.+100    	; 0x8e4 <_ZN6SdFile4syncEv+0x7c>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	cf 01       	movw	r24, r30
     884:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN6SdFile13cacheDirEntryEh>
     888:	8c 01       	movw	r16, r24
    if (!d) return false;
     88a:	89 2b       	or	r24, r25
     88c:	71 f1       	breq	.+92     	; 0x8ea <_ZN6SdFile4syncEv+0x82>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
     88e:	8d 81       	ldd	r24, Y+5	; 0x05
     890:	82 30       	cpi	r24, 0x02	; 2
     892:	48 f4       	brcc	.+18     	; 0x8a6 <_ZN6SdFile4syncEv+0x3e>
     894:	8b 89       	ldd	r24, Y+19	; 0x13
     896:	9c 89       	ldd	r25, Y+20	; 0x14
     898:	ad 89       	ldd	r26, Y+21	; 0x15
     89a:	be 89       	ldd	r27, Y+22	; 0x16
     89c:	f8 01       	movw	r30, r16
     89e:	84 8f       	std	Z+28, r24	; 0x1c
     8a0:	95 8f       	std	Z+29, r25	; 0x1d
     8a2:	a6 8f       	std	Z+30, r26	; 0x1e
     8a4:	b7 8f       	std	Z+31, r27	; 0x1f

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
     8a6:	8f 89       	ldd	r24, Y+23	; 0x17
     8a8:	98 8d       	ldd	r25, Y+24	; 0x18
     8aa:	f8 01       	movw	r30, r16
     8ac:	93 8f       	std	Z+27, r25	; 0x1b
     8ae:	82 8f       	std	Z+26, r24	; 0x1a
    d->firstClusterHigh = firstCluster_ >> 16;
     8b0:	8f 89       	ldd	r24, Y+23	; 0x17
     8b2:	98 8d       	ldd	r25, Y+24	; 0x18
     8b4:	a9 8d       	ldd	r26, Y+25	; 0x19
     8b6:	ba 8d       	ldd	r27, Y+26	; 0x1a
     8b8:	b5 8b       	std	Z+21, r27	; 0x15
     8ba:	a4 8b       	std	Z+20, r26	; 0x14

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
     8bc:	e0 91 01 05 	lds	r30, 0x0501
     8c0:	f0 91 02 05 	lds	r31, 0x0502
     8c4:	30 97       	sbiw	r30, 0x00	; 0
     8c6:	59 f0       	breq	.+22     	; 0x8de <_ZN6SdFile4syncEv+0x76>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
     8c8:	b8 01       	movw	r22, r16
     8ca:	6a 5e       	subi	r22, 0xEA	; 234
     8cc:	7f 4f       	sbci	r23, 0xFF	; 255
     8ce:	c8 01       	movw	r24, r16
     8d0:	48 96       	adiw	r24, 0x18	; 24
     8d2:	09 95       	icall
      d->lastAccessDate = d->lastWriteDate;
     8d4:	f8 01       	movw	r30, r16
     8d6:	80 8d       	ldd	r24, Z+24	; 0x18
     8d8:	91 8d       	ldd	r25, Z+25	; 0x19
     8da:	93 8b       	std	Z+19, r25	; 0x13
     8dc:	82 8b       	std	Z+18, r24	; 0x12
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
     8de:	8c 81       	ldd	r24, Y+4	; 0x04
     8e0:	8f 77       	andi	r24, 0x7F	; 127
     8e2:	8c 83       	std	Y+4, r24	; 0x04
  }
  return SdVolume::cacheFlush();
     8e4:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN8SdVolume10cacheFlushEv>
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <_ZN6SdFile4syncEv+0x84>
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
     8ea:	80 e0       	ldi	r24, 0x00	; 0
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	08 95       	ret

000008f6 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
     8f6:	2f 92       	push	r2
     8f8:	3f 92       	push	r3
     8fa:	4f 92       	push	r4
     8fc:	5f 92       	push	r5
     8fe:	6f 92       	push	r6
     900:	7f 92       	push	r7
     902:	8f 92       	push	r8
     904:	9f 92       	push	r9
     906:	af 92       	push	r10
     908:	bf 92       	push	r11
     90a:	cf 92       	push	r12
     90c:	df 92       	push	r13
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	00 d0       	rcall	.+0      	; 0x91c <__stack+0x1d>
     91c:	00 d0       	rcall	.+0      	; 0x91e <__stack+0x1f>
     91e:	00 d0       	rcall	.+0      	; 0x920 <__stack+0x21>
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	8c 01       	movw	r16, r24
     926:	1b 01       	movw	r2, r22
     928:	5e 83       	std	Y+6, r21	; 0x06
     92a:	4d 83       	std	Y+5, r20	; 0x05

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
     92c:	dc 01       	movw	r26, r24
     92e:	15 96       	adiw	r26, 0x05	; 5
     930:	8c 91       	ld	r24, X
     932:	15 97       	sbiw	r26, 0x05	; 5
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	09 f0       	breq	.+2      	; 0x93a <__stack+0x3b>
     938:	7d c1       	rjmp	.+762    	; 0xc34 <__stack+0x335>
     93a:	14 96       	adiw	r26, 0x04	; 4
     93c:	8c 91       	ld	r24, X
     93e:	14 97       	sbiw	r26, 0x04	; 4
     940:	81 ff       	sbrs	r24, 1
     942:	78 c1       	rjmp	.+752    	; 0xc34 <__stack+0x335>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
     944:	82 ff       	sbrs	r24, 2
     946:	18 c0       	rjmp	.+48     	; 0x978 <__stack+0x79>
     948:	53 96       	adiw	r26, 0x13	; 19
     94a:	4d 91       	ld	r20, X+
     94c:	5d 91       	ld	r21, X+
     94e:	6d 91       	ld	r22, X+
     950:	7c 91       	ld	r23, X
     952:	56 97       	sbiw	r26, 0x16	; 22
     954:	1a 96       	adiw	r26, 0x0a	; 10
     956:	8d 91       	ld	r24, X+
     958:	9d 91       	ld	r25, X+
     95a:	0d 90       	ld	r0, X+
     95c:	bc 91       	ld	r27, X
     95e:	a0 2d       	mov	r26, r0
     960:	84 17       	cp	r24, r20
     962:	95 07       	cpc	r25, r21
     964:	a6 07       	cpc	r26, r22
     966:	b7 07       	cpc	r27, r23
     968:	09 f4       	brne	.+2      	; 0x96c <__stack+0x6d>
     96a:	74 c1       	rjmp	.+744    	; 0xc54 <__stack+0x355>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
     96c:	c8 01       	movw	r24, r16
     96e:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
     972:	88 23       	and	r24, r24
     974:	09 f4       	brne	.+2      	; 0x978 <__stack+0x79>
     976:	5e c1       	rjmp	.+700    	; 0xc34 <__stack+0x335>
  }

  while (nToWrite > 0) {
     978:	ed 81       	ldd	r30, Y+5	; 0x05
     97a:	fe 81       	ldd	r31, Y+6	; 0x06
     97c:	ef 2b       	or	r30, r31
     97e:	09 f4       	brne	.+2      	; 0x982 <__stack+0x83>
     980:	2d c1       	rjmp	.+602    	; 0xbdc <__stack+0x2dd>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
     982:	cd 80       	ldd	r12, Y+5	; 0x05
     984:	de 80       	ldd	r13, Y+6	; 0x06
     986:	a1 2c       	mov	r10, r1
     988:	68 94       	set
     98a:	bb 24       	eor	r11, r11
     98c:	b1 f8       	bld	r11, 1
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
     98e:	d8 01       	movw	r26, r16
     990:	1a 96       	adiw	r26, 0x0a	; 10
     992:	4d 91       	ld	r20, X+
     994:	5d 91       	ld	r21, X+
     996:	6d 91       	ld	r22, X+
     998:	7c 91       	ld	r23, X
     99a:	1d 97       	sbiw	r26, 0x0d	; 13
     99c:	5b 96       	adiw	r26, 0x1b	; 27
     99e:	ed 91       	ld	r30, X+
     9a0:	fc 91       	ld	r31, X
     9a2:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
     9a4:	2a 01       	movw	r4, r20
     9a6:	3b 01       	movw	r6, r22
     9a8:	03 2e       	mov	r0, r19
     9aa:	39 e0       	ldi	r19, 0x09	; 9
     9ac:	76 94       	lsr	r7
     9ae:	67 94       	ror	r6
     9b0:	57 94       	ror	r5
     9b2:	47 94       	ror	r4
     9b4:	3a 95       	dec	r19
     9b6:	d1 f7       	brne	.-12     	; 0x9ac <__stack+0xad>
     9b8:	30 2d       	mov	r19, r0
     9ba:	94 81       	ldd	r25, Z+4	; 0x04
     9bc:	91 50       	subi	r25, 0x01	; 1
     9be:	94 21       	and	r25, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
     9c0:	4a 01       	movw	r8, r20
     9c2:	b1 e0       	ldi	r27, 0x01	; 1
     9c4:	9b 22       	and	r9, r27
    if (blockOfCluster == 0 && blockOffset == 0) {
     9c6:	91 11       	cpse	r25, r1
     9c8:	56 c0       	rjmp	.+172    	; 0xa76 <__stack+0x177>
     9ca:	81 14       	cp	r8, r1
     9cc:	91 04       	cpc	r9, r1
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <__stack+0xd3>
     9d0:	74 c1       	rjmp	.+744    	; 0xcba <__stack+0x3bb>
      // start of new cluster
      if (curCluster_ == 0) {
     9d2:	d8 01       	movw	r26, r16
     9d4:	16 96       	adiw	r26, 0x06	; 6
     9d6:	4d 91       	ld	r20, X+
     9d8:	5d 91       	ld	r21, X+
     9da:	6d 91       	ld	r22, X+
     9dc:	7c 91       	ld	r23, X
     9de:	19 97       	sbiw	r26, 0x09	; 9
     9e0:	41 15       	cp	r20, r1
     9e2:	51 05       	cpc	r21, r1
     9e4:	61 05       	cpc	r22, r1
     9e6:	71 05       	cpc	r23, r1
     9e8:	b1 f4       	brne	.+44     	; 0xa16 <__stack+0x117>
        if (firstCluster_ == 0) {
     9ea:	57 96       	adiw	r26, 0x17	; 23
     9ec:	8d 91       	ld	r24, X+
     9ee:	9d 91       	ld	r25, X+
     9f0:	0d 90       	ld	r0, X+
     9f2:	bc 91       	ld	r27, X
     9f4:	a0 2d       	mov	r26, r0
     9f6:	00 97       	sbiw	r24, 0x00	; 0
     9f8:	a1 05       	cpc	r26, r1
     9fa:	b1 05       	cpc	r27, r1
     9fc:	31 f4       	brne	.+12     	; 0xa0a <__stack+0x10b>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
     9fe:	c8 01       	movw	r24, r16
     a00:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN6SdFile10addClusterEv>
     a04:	81 11       	cpse	r24, r1
     a06:	2c c1       	rjmp	.+600    	; 0xc60 <__stack+0x361>
     a08:	15 c1       	rjmp	.+554    	; 0xc34 <__stack+0x335>
        } else {
          curCluster_ = firstCluster_;
     a0a:	f8 01       	movw	r30, r16
     a0c:	86 83       	std	Z+6, r24	; 0x06
     a0e:	97 83       	std	Z+7, r25	; 0x07
     a10:	a0 87       	std	Z+8, r26	; 0x08
     a12:	b1 87       	std	Z+9, r27	; 0x09
     a14:	25 c1       	rjmp	.+586    	; 0xc60 <__stack+0x361>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
     a16:	9e 01       	movw	r18, r28
     a18:	2f 5f       	subi	r18, 0xFF	; 255
     a1a:	3f 4f       	sbci	r19, 0xFF	; 255
     a1c:	cf 01       	movw	r24, r30
     a1e:	0e 94 25 07 	call	0xe4a	; 0xe4a <_ZNK8SdVolume6fatGetEmPm>
     a22:	81 11       	cpse	r24, r1
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <__stack+0x12b>
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	72 c1       	rjmp	.+740    	; 0xd0e <__stack+0x40f>
        if (vol_->isEOC(next)) {
     a2a:	49 81       	ldd	r20, Y+1	; 0x01
     a2c:	5a 81       	ldd	r21, Y+2	; 0x02
     a2e:	6b 81       	ldd	r22, Y+3	; 0x03
     a30:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
     a32:	d8 01       	movw	r26, r16
     a34:	5b 96       	adiw	r26, 0x1b	; 27
     a36:	ed 91       	ld	r30, X+
     a38:	fc 91       	ld	r31, X
     a3a:	5c 97       	sbiw	r26, 0x1c	; 28
     a3c:	87 89       	ldd	r24, Z+23	; 0x17
     a3e:	80 31       	cpi	r24, 0x10	; 16
     a40:	29 f0       	breq	.+10     	; 0xa4c <__stack+0x14d>
     a42:	88 ef       	ldi	r24, 0xF8	; 248
     a44:	9f ef       	ldi	r25, 0xFF	; 255
     a46:	af ef       	ldi	r26, 0xFF	; 255
     a48:	bf e0       	ldi	r27, 0x0F	; 15
     a4a:	04 c0       	rjmp	.+8      	; 0xa54 <__stack+0x155>
     a4c:	88 ef       	ldi	r24, 0xF8	; 248
     a4e:	9f ef       	ldi	r25, 0xFF	; 255
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	48 17       	cp	r20, r24
     a56:	59 07       	cpc	r21, r25
     a58:	6a 07       	cpc	r22, r26
     a5a:	7b 07       	cpc	r23, r27
     a5c:	30 f0       	brcs	.+12     	; 0xa6a <__stack+0x16b>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
     a5e:	c8 01       	movw	r24, r16
     a60:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN6SdFile10addClusterEv>
     a64:	81 11       	cpse	r24, r1
     a66:	fc c0       	rjmp	.+504    	; 0xc60 <__stack+0x361>
     a68:	e5 c0       	rjmp	.+458    	; 0xc34 <__stack+0x335>
        } else {
          curCluster_ = next;
     a6a:	f8 01       	movw	r30, r16
     a6c:	46 83       	std	Z+6, r20	; 0x06
     a6e:	57 83       	std	Z+7, r21	; 0x07
     a70:	60 87       	std	Z+8, r22	; 0x08
     a72:	71 87       	std	Z+9, r23	; 0x09
     a74:	f5 c0       	rjmp	.+490    	; 0xc60 <__stack+0x361>
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
     a76:	95 01       	movw	r18, r10
     a78:	28 19       	sub	r18, r8
     a7a:	39 09       	sbc	r19, r9
     a7c:	76 01       	movw	r14, r12
     a7e:	2c 15       	cp	r18, r12
     a80:	3d 05       	cpc	r19, r13
     a82:	08 f4       	brcc	.+2      	; 0xa86 <__stack+0x187>
     a84:	79 01       	movw	r14, r18
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
     a86:	d8 01       	movw	r26, r16
     a88:	16 96       	adiw	r26, 0x06	; 6
     a8a:	4d 90       	ld	r4, X+
     a8c:	5d 90       	ld	r5, X+
     a8e:	6d 90       	ld	r6, X+
     a90:	7c 90       	ld	r7, X
     a92:	19 97       	sbiw	r26, 0x09	; 9
     a94:	b2 e0       	ldi	r27, 0x02	; 2
     a96:	4b 1a       	sub	r4, r27
     a98:	51 08       	sbc	r5, r1
     a9a:	61 08       	sbc	r6, r1
     a9c:	71 08       	sbc	r7, r1
     a9e:	05 84       	ldd	r0, Z+13	; 0x0d
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__stack+0x1ab>
     aa2:	44 0c       	add	r4, r4
     aa4:	55 1c       	adc	r5, r5
     aa6:	66 1c       	adc	r6, r6
     aa8:	77 1c       	adc	r7, r7
     aaa:	0a 94       	dec	r0
     aac:	d2 f7       	brpl	.-12     	; 0xaa2 <__stack+0x1a3>
     aae:	46 85       	ldd	r20, Z+14	; 0x0e
     ab0:	57 85       	ldd	r21, Z+15	; 0x0f
     ab2:	60 89       	ldd	r22, Z+16	; 0x10
     ab4:	71 89       	ldd	r23, Z+17	; 0x11
     ab6:	44 0e       	add	r4, r20
     ab8:	55 1e       	adc	r5, r21
     aba:	66 1e       	adc	r6, r22
     abc:	77 1e       	adc	r7, r23

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
     abe:	49 0e       	add	r4, r25
     ac0:	51 1c       	adc	r5, r1
     ac2:	61 1c       	adc	r6, r1
     ac4:	71 1c       	adc	r7, r1
    if (n == 512) {
     ac6:	e1 14       	cp	r14, r1
     ac8:	e2 e0       	ldi	r30, 0x02	; 2
     aca:	fe 06       	cpc	r15, r30
     acc:	41 f5       	brne	.+80     	; 0xb1e <__stack+0x21f>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
     ace:	80 91 00 01 	lds	r24, 0x0100
     ad2:	90 91 01 01 	lds	r25, 0x0101
     ad6:	a0 91 02 01 	lds	r26, 0x0102
     ada:	b0 91 03 01 	lds	r27, 0x0103
     ade:	84 15       	cp	r24, r4
     ae0:	95 05       	cpc	r25, r5
     ae2:	a6 05       	cpc	r26, r6
     ae4:	b7 05       	cpc	r27, r7
     ae6:	59 f4       	brne	.+22     	; 0xafe <__stack+0x1ff>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	9f ef       	ldi	r25, 0xFF	; 255
     aec:	dc 01       	movw	r26, r24
     aee:	80 93 00 01 	sts	0x0100, r24
     af2:	90 93 01 01 	sts	0x0101, r25
     af6:	a0 93 02 01 	sts	0x0102, r26
     afa:	b0 93 03 01 	sts	0x0103, r27
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
     afe:	91 01       	movw	r18, r2
     b00:	b3 01       	movw	r22, r6
     b02:	a2 01       	movw	r20, r4
     b04:	80 91 08 05 	lds	r24, 0x0508
     b08:	90 91 09 05 	lds	r25, 0x0509
     b0c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
     b10:	88 23       	and	r24, r24
     b12:	09 f4       	brne	.+2      	; 0xb16 <__stack+0x217>
     b14:	8f c0       	rjmp	.+286    	; 0xc34 <__stack+0x335>
      src += 512;
     b16:	9e ef       	ldi	r25, 0xFE	; 254
     b18:	39 1a       	sub	r3, r25
     b1a:	75 01       	movw	r14, r10
     b1c:	4c c0       	rjmp	.+152    	; 0xbb6 <__stack+0x2b7>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
     b1e:	81 14       	cp	r8, r1
     b20:	91 04       	cpc	r9, r1
     b22:	29 f5       	brne	.+74     	; 0xb6e <__stack+0x26f>
     b24:	d8 01       	movw	r26, r16
     b26:	1a 96       	adiw	r26, 0x0a	; 10
     b28:	4d 91       	ld	r20, X+
     b2a:	5d 91       	ld	r21, X+
     b2c:	6d 91       	ld	r22, X+
     b2e:	7c 91       	ld	r23, X
     b30:	1d 97       	sbiw	r26, 0x0d	; 13
     b32:	53 96       	adiw	r26, 0x13	; 19
     b34:	8d 91       	ld	r24, X+
     b36:	9d 91       	ld	r25, X+
     b38:	0d 90       	ld	r0, X+
     b3a:	bc 91       	ld	r27, X
     b3c:	a0 2d       	mov	r26, r0
     b3e:	48 17       	cp	r20, r24
     b40:	59 07       	cpc	r21, r25
     b42:	6a 07       	cpc	r22, r26
     b44:	7b 07       	cpc	r23, r27
     b46:	98 f0       	brcs	.+38     	; 0xb6e <__stack+0x26f>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
     b48:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN8SdVolume10cacheFlushEv>
     b4c:	88 23       	and	r24, r24
     b4e:	09 f4       	brne	.+2      	; 0xb52 <__stack+0x253>
     b50:	71 c0       	rjmp	.+226    	; 0xc34 <__stack+0x335>
        SdVolume::cacheBlockNumber_ = block;
     b52:	40 92 00 01 	sts	0x0100, r4
     b56:	50 92 01 01 	sts	0x0101, r5
     b5a:	60 92 02 01 	sts	0x0102, r6
     b5e:	70 92 03 01 	sts	0x0103, r7
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
     b62:	80 91 07 05 	lds	r24, 0x0507
     b66:	81 60       	ori	r24, 0x01	; 1
     b68:	80 93 07 05 	sts	0x0507, r24
     b6c:	08 c0       	rjmp	.+16     	; 0xb7e <__stack+0x27f>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
     b6e:	41 e0       	ldi	r20, 0x01	; 1
     b70:	c3 01       	movw	r24, r6
     b72:	b2 01       	movw	r22, r4
     b74:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN8SdVolume13cacheRawBlockEmh>
     b78:	88 23       	and	r24, r24
     b7a:	09 f4       	brne	.+2      	; 0xb7e <__stack+0x27f>
     b7c:	5b c0       	rjmp	.+182    	; 0xc34 <__stack+0x335>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
     b7e:	c4 01       	movw	r24, r8
     b80:	86 5f       	subi	r24, 0xF6	; 246
     b82:	9a 4f       	sbci	r25, 0xFA	; 250
      uint8_t* end = dst + n;
     b84:	ac 01       	movw	r20, r24
     b86:	4e 0d       	add	r20, r14
     b88:	5f 1d       	adc	r21, r15
      while (dst != end) *dst++ = *src++;
     b8a:	84 17       	cp	r24, r20
     b8c:	95 07       	cpc	r25, r21
     b8e:	99 f0       	breq	.+38     	; 0xbb6 <__stack+0x2b7>
     b90:	f1 01       	movw	r30, r2
     b92:	dc 01       	movw	r26, r24
     b94:	91 01       	movw	r18, r2
     b96:	2e 0d       	add	r18, r14
     b98:	3f 1d       	adc	r19, r15
     b9a:	61 91       	ld	r22, Z+
     b9c:	6d 93       	st	X+, r22
     b9e:	e2 17       	cp	r30, r18
     ba0:	f3 07       	cpc	r31, r19
     ba2:	d9 f7       	brne	.-10     	; 0xb9a <__stack+0x29b>
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	e8 1b       	sub	r30, r24
     bac:	f9 0b       	sbc	r31, r25
     bae:	4e 0f       	add	r20, r30
     bb0:	5f 1f       	adc	r21, r31
     bb2:	24 0e       	add	r2, r20
     bb4:	35 1e       	adc	r3, r21
    }
    nToWrite -= n;
     bb6:	ce 18       	sub	r12, r14
     bb8:	df 08       	sbc	r13, r15
    curPosition_ += n;
     bba:	f8 01       	movw	r30, r16
     bbc:	82 85       	ldd	r24, Z+10	; 0x0a
     bbe:	93 85       	ldd	r25, Z+11	; 0x0b
     bc0:	a4 85       	ldd	r26, Z+12	; 0x0c
     bc2:	b5 85       	ldd	r27, Z+13	; 0x0d
     bc4:	8e 0d       	add	r24, r14
     bc6:	9f 1d       	adc	r25, r15
     bc8:	a1 1d       	adc	r26, r1
     bca:	b1 1d       	adc	r27, r1
     bcc:	82 87       	std	Z+10, r24	; 0x0a
     bce:	93 87       	std	Z+11, r25	; 0x0b
     bd0:	a4 87       	std	Z+12, r26	; 0x0c
     bd2:	b5 87       	std	Z+13, r27	; 0x0d
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
     bd4:	c1 14       	cp	r12, r1
     bd6:	d1 04       	cpc	r13, r1
     bd8:	09 f0       	breq	.+2      	; 0xbdc <__stack+0x2dd>
     bda:	d9 ce       	rjmp	.-590    	; 0x98e <__stack+0x8f>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
     bdc:	f8 01       	movw	r30, r16
     bde:	82 85       	ldd	r24, Z+10	; 0x0a
     be0:	93 85       	ldd	r25, Z+11	; 0x0b
     be2:	a4 85       	ldd	r26, Z+12	; 0x0c
     be4:	b5 85       	ldd	r27, Z+13	; 0x0d
     be6:	43 89       	ldd	r20, Z+19	; 0x13
     be8:	54 89       	ldd	r21, Z+20	; 0x14
     bea:	65 89       	ldd	r22, Z+21	; 0x15
     bec:	76 89       	ldd	r23, Z+22	; 0x16
     bee:	48 17       	cp	r20, r24
     bf0:	59 07       	cpc	r21, r25
     bf2:	6a 07       	cpc	r22, r26
     bf4:	7b 07       	cpc	r23, r27
     bf6:	40 f4       	brcc	.+16     	; 0xc08 <__stack+0x309>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
     bf8:	83 8b       	std	Z+19, r24	; 0x13
     bfa:	94 8b       	std	Z+20, r25	; 0x14
     bfc:	a5 8b       	std	Z+21, r26	; 0x15
     bfe:	b6 8b       	std	Z+22, r27	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
     c00:	84 81       	ldd	r24, Z+4	; 0x04
     c02:	80 68       	ori	r24, 0x80	; 128
     c04:	84 83       	std	Z+4, r24	; 0x04
     c06:	0d c0       	rjmp	.+26     	; 0xc22 <__stack+0x323>
  } else if (dateTime_ && nbyte) {
     c08:	80 91 01 05 	lds	r24, 0x0501
     c0c:	90 91 02 05 	lds	r25, 0x0502
     c10:	89 2b       	or	r24, r25
     c12:	39 f0       	breq	.+14     	; 0xc22 <__stack+0x323>
     c14:	2d 81       	ldd	r18, Y+5	; 0x05
     c16:	3e 81       	ldd	r19, Y+6	; 0x06
     c18:	23 2b       	or	r18, r19
     c1a:	19 f0       	breq	.+6      	; 0xc22 <__stack+0x323>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
     c1c:	84 81       	ldd	r24, Z+4	; 0x04
     c1e:	80 68       	ori	r24, 0x80	; 128
     c20:	84 83       	std	Z+4, r24	; 0x04
  }

  if (flags_ & O_SYNC) {
     c22:	f8 01       	movw	r30, r16
     c24:	84 81       	ldd	r24, Z+4	; 0x04
     c26:	83 ff       	sbrs	r24, 3
     c28:	0f c0       	rjmp	.+30     	; 0xc48 <__stack+0x349>
    if (!sync()) goto writeErrorReturn;
     c2a:	c8 01       	movw	r24, r16
     c2c:	0e 94 34 04 	call	0x868	; 0x868 <_ZN6SdFile4syncEv>
     c30:	81 11       	cpse	r24, r1
     c32:	0d c0       	rjmp	.+26     	; 0xc4e <__stack+0x34f>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	d8 01       	movw	r26, r16
     c3a:	13 96       	adiw	r26, 0x03	; 3
     c3c:	9c 93       	st	X, r25
     c3e:	8e 93       	st	-X, r24
     c40:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	63 c0       	rjmp	.+198    	; 0xd0e <__stack+0x40f>
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
  }
  return nbyte;
     c48:	8d 81       	ldd	r24, Y+5	; 0x05
     c4a:	9e 81       	ldd	r25, Y+6	; 0x06
     c4c:	60 c0       	rjmp	.+192    	; 0xd0e <__stack+0x40f>
     c4e:	8d 81       	ldd	r24, Y+5	; 0x05
     c50:	9e 81       	ldd	r25, Y+6	; 0x06
     c52:	5d c0       	rjmp	.+186    	; 0xd0e <__stack+0x40f>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
     c54:	ed 81       	ldd	r30, Y+5	; 0x05
     c56:	fe 81       	ldd	r31, Y+6	; 0x06
     c58:	ef 2b       	or	r30, r31
     c5a:	09 f0       	breq	.+2      	; 0xc5e <__stack+0x35f>
     c5c:	92 ce       	rjmp	.-732    	; 0x982 <__stack+0x83>
     c5e:	e1 cf       	rjmp	.-62     	; 0xc22 <__stack+0x323>
     c60:	76 01       	movw	r14, r12
     c62:	f1 e0       	ldi	r31, 0x01	; 1
     c64:	cf 16       	cp	r12, r31
     c66:	f2 e0       	ldi	r31, 0x02	; 2
     c68:	df 06       	cpc	r13, r31
     c6a:	08 f0       	brcs	.+2      	; 0xc6e <__stack+0x36f>
     c6c:	75 01       	movw	r14, r10

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
     c6e:	d8 01       	movw	r26, r16
     c70:	5b 96       	adiw	r26, 0x1b	; 27
     c72:	ed 91       	ld	r30, X+
     c74:	fc 91       	ld	r31, X
     c76:	5c 97       	sbiw	r26, 0x1c	; 28
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
     c78:	16 96       	adiw	r26, 0x06	; 6
     c7a:	4d 90       	ld	r4, X+
     c7c:	5d 90       	ld	r5, X+
     c7e:	6d 90       	ld	r6, X+
     c80:	7c 90       	ld	r7, X
     c82:	19 97       	sbiw	r26, 0x09	; 9
     c84:	b2 e0       	ldi	r27, 0x02	; 2
     c86:	4b 1a       	sub	r4, r27
     c88:	51 08       	sbc	r5, r1
     c8a:	61 08       	sbc	r6, r1
     c8c:	71 08       	sbc	r7, r1
     c8e:	05 84       	ldd	r0, Z+13	; 0x0d
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__stack+0x39b>
     c92:	44 0c       	add	r4, r4
     c94:	55 1c       	adc	r5, r5
     c96:	66 1c       	adc	r6, r6
     c98:	77 1c       	adc	r7, r7
     c9a:	0a 94       	dec	r0
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__stack+0x393>
     c9e:	86 85       	ldd	r24, Z+14	; 0x0e
     ca0:	97 85       	ldd	r25, Z+15	; 0x0f
     ca2:	a0 89       	ldd	r26, Z+16	; 0x10
     ca4:	b1 89       	ldd	r27, Z+17	; 0x11
     ca6:	48 0e       	add	r4, r24
     ca8:	59 1e       	adc	r5, r25
     caa:	6a 1e       	adc	r6, r26
     cac:	7b 1e       	adc	r7, r27
    if (n == 512) {
     cae:	e1 14       	cp	r14, r1
     cb0:	e2 e0       	ldi	r30, 0x02	; 2
     cb2:	fe 06       	cpc	r15, r30
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <__stack+0x3b9>
     cb6:	36 cf       	rjmp	.-404    	; 0xb24 <__stack+0x225>
     cb8:	0a cf       	rjmp	.-492    	; 0xace <__stack+0x1cf>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
     cba:	c5 01       	movw	r24, r10
     cbc:	88 19       	sub	r24, r8
     cbe:	99 09       	sbc	r25, r9
     cc0:	76 01       	movw	r14, r12
     cc2:	8c 15       	cp	r24, r12
     cc4:	9d 05       	cpc	r25, r13
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__stack+0x3cb>
     cc8:	7c 01       	movw	r14, r24
     cca:	d8 01       	movw	r26, r16
     ccc:	16 96       	adiw	r26, 0x06	; 6
     cce:	4d 90       	ld	r4, X+
     cd0:	5d 90       	ld	r5, X+
     cd2:	6d 90       	ld	r6, X+
     cd4:	7c 90       	ld	r7, X
     cd6:	19 97       	sbiw	r26, 0x09	; 9
     cd8:	b2 e0       	ldi	r27, 0x02	; 2
     cda:	4b 1a       	sub	r4, r27
     cdc:	51 08       	sbc	r5, r1
     cde:	61 08       	sbc	r6, r1
     ce0:	71 08       	sbc	r7, r1
     ce2:	05 84       	ldd	r0, Z+13	; 0x0d
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__stack+0x3ef>
     ce6:	44 0c       	add	r4, r4
     ce8:	55 1c       	adc	r5, r5
     cea:	66 1c       	adc	r6, r6
     cec:	77 1c       	adc	r7, r7
     cee:	0a 94       	dec	r0
     cf0:	d2 f7       	brpl	.-12     	; 0xce6 <__stack+0x3e7>
     cf2:	86 85       	ldd	r24, Z+14	; 0x0e
     cf4:	97 85       	ldd	r25, Z+15	; 0x0f
     cf6:	a0 89       	ldd	r26, Z+16	; 0x10
     cf8:	b1 89       	ldd	r27, Z+17	; 0x11
     cfa:	48 0e       	add	r4, r24
     cfc:	59 1e       	adc	r5, r25
     cfe:	6a 1e       	adc	r6, r26
     d00:	7b 1e       	adc	r7, r27
    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
     d02:	e1 14       	cp	r14, r1
     d04:	e2 e0       	ldi	r30, 0x02	; 2
     d06:	fe 06       	cpc	r15, r30
     d08:	09 f0       	breq	.+2      	; 0xd0c <__stack+0x40d>
     d0a:	31 cf       	rjmp	.-414    	; 0xb6e <__stack+0x26f>
     d0c:	e0 ce       	rjmp	.-576    	; 0xace <__stack+0x1cf>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
     d0e:	26 96       	adiw	r28, 0x06	; 6
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	ff 90       	pop	r15
     d24:	ef 90       	pop	r14
     d26:	df 90       	pop	r13
     d28:	cf 90       	pop	r12
     d2a:	bf 90       	pop	r11
     d2c:	af 90       	pop	r10
     d2e:	9f 90       	pop	r9
     d30:	8f 90       	pop	r8
     d32:	7f 90       	pop	r7
     d34:	6f 90       	pop	r6
     d36:	5f 90       	pop	r5
     d38:	4f 90       	pop	r4
     d3a:	3f 90       	pop	r3
     d3c:	2f 90       	pop	r2
     d3e:	08 95       	ret

00000d40 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	1f 92       	push	r1
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
     d4c:	41 e0       	ldi	r20, 0x01	; 1
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	be 01       	movw	r22, r28
     d52:	6f 5f       	subi	r22, 0xFF	; 255
     d54:	7f 4f       	sbci	r23, 0xFF	; 255
     d56:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN6SdFile5writeEPKvj>
}
     d5a:	0f 90       	pop	r0
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
     d62:	80 91 07 05 	lds	r24, 0x0507
     d66:	88 23       	and	r24, r24
     d68:	a9 f1       	breq	.+106    	; 0xdd4 <_ZN8SdVolume10cacheFlushEv+0x72>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
     d6a:	40 91 00 01 	lds	r20, 0x0100
     d6e:	50 91 01 01 	lds	r21, 0x0101
     d72:	60 91 02 01 	lds	r22, 0x0102
     d76:	70 91 03 01 	lds	r23, 0x0103
     d7a:	2a e0       	ldi	r18, 0x0A	; 10
     d7c:	35 e0       	ldi	r19, 0x05	; 5
     d7e:	80 91 08 05 	lds	r24, 0x0508
     d82:	90 91 09 05 	lds	r25, 0x0509
     d86:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN7Sd2Card10writeBlockEmPKh>
     d8a:	88 23       	and	r24, r24
     d8c:	21 f1       	breq	.+72     	; 0xdd6 <_ZN8SdVolume10cacheFlushEv+0x74>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
     d8e:	40 91 03 05 	lds	r20, 0x0503
     d92:	50 91 04 05 	lds	r21, 0x0504
     d96:	60 91 05 05 	lds	r22, 0x0505
     d9a:	70 91 06 05 	lds	r23, 0x0506
     d9e:	41 15       	cp	r20, r1
     da0:	51 05       	cpc	r21, r1
     da2:	61 05       	cpc	r22, r1
     da4:	71 05       	cpc	r23, r1
     da6:	91 f0       	breq	.+36     	; 0xdcc <_ZN8SdVolume10cacheFlushEv+0x6a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
     da8:	2a e0       	ldi	r18, 0x0A	; 10
     daa:	35 e0       	ldi	r19, 0x05	; 5
     dac:	80 91 08 05 	lds	r24, 0x0508
     db0:	90 91 09 05 	lds	r25, 0x0509
     db4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN7Sd2Card10writeBlockEmPKh>
     db8:	88 23       	and	r24, r24
     dba:	69 f0       	breq	.+26     	; 0xdd6 <_ZN8SdVolume10cacheFlushEv+0x74>
        return false;
      }
      cacheMirrorBlock_ = 0;
     dbc:	10 92 03 05 	sts	0x0503, r1
     dc0:	10 92 04 05 	sts	0x0504, r1
     dc4:	10 92 05 05 	sts	0x0505, r1
     dc8:	10 92 06 05 	sts	0x0506, r1
    }
    cacheDirty_ = 0;
     dcc:	10 92 07 05 	sts	0x0507, r1
  }
  return true;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	08 95       	ret
     dd4:	81 e0       	ldi	r24, 0x01	; 1
}
     dd6:	08 95       	ret

00000dd8 <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
     dd8:	cf 92       	push	r12
     dda:	df 92       	push	r13
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	cf 93       	push	r28
     de2:	6b 01       	movw	r12, r22
     de4:	7c 01       	movw	r14, r24
     de6:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
     de8:	80 91 00 01 	lds	r24, 0x0100
     dec:	90 91 01 01 	lds	r25, 0x0101
     df0:	a0 91 02 01 	lds	r26, 0x0102
     df4:	b0 91 03 01 	lds	r27, 0x0103
     df8:	8c 15       	cp	r24, r12
     dfa:	9d 05       	cpc	r25, r13
     dfc:	ae 05       	cpc	r26, r14
     dfe:	bf 05       	cpc	r27, r15
     e00:	c1 f0       	breq	.+48     	; 0xe32 <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    if (!cacheFlush()) return false;
     e02:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN8SdVolume10cacheFlushEv>
     e06:	88 23       	and	r24, r24
     e08:	d1 f0       	breq	.+52     	; 0xe3e <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
     e0a:	2a e0       	ldi	r18, 0x0A	; 10
     e0c:	35 e0       	ldi	r19, 0x05	; 5
     e0e:	b7 01       	movw	r22, r14
     e10:	a6 01       	movw	r20, r12
     e12:	80 91 08 05 	lds	r24, 0x0508
     e16:	90 91 09 05 	lds	r25, 0x0509
     e1a:	0e 94 ba 02 	call	0x574	; 0x574 <_ZN7Sd2Card9readBlockEmPh>
     e1e:	88 23       	and	r24, r24
     e20:	71 f0       	breq	.+28     	; 0xe3e <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    cacheBlockNumber_ = blockNumber;
     e22:	c0 92 00 01 	sts	0x0100, r12
     e26:	d0 92 01 01 	sts	0x0101, r13
     e2a:	e0 92 02 01 	sts	0x0102, r14
     e2e:	f0 92 03 01 	sts	0x0103, r15
  }
  cacheDirty_ |= action;
     e32:	80 91 07 05 	lds	r24, 0x0507
     e36:	c8 2b       	or	r28, r24
     e38:	c0 93 07 05 	sts	0x0507, r28
  return true;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
}
     e3e:	cf 91       	pop	r28
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	df 90       	pop	r13
     e46:	cf 90       	pop	r12
     e48:	08 95       	ret

00000e4a <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
     e4a:	8f 92       	push	r8
     e4c:	9f 92       	push	r9
     e4e:	af 92       	push	r10
     e50:	bf 92       	push	r11
     e52:	cf 92       	push	r12
     e54:	df 92       	push	r13
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	e9 01       	movw	r28, r18
  if (cluster > (clusterCount_ + 1)) return false;
     e64:	fc 01       	movw	r30, r24
     e66:	01 85       	ldd	r16, Z+9	; 0x09
     e68:	12 85       	ldd	r17, Z+10	; 0x0a
     e6a:	23 85       	ldd	r18, Z+11	; 0x0b
     e6c:	34 85       	ldd	r19, Z+12	; 0x0c
     e6e:	0f 5f       	subi	r16, 0xFF	; 255
     e70:	1f 4f       	sbci	r17, 0xFF	; 255
     e72:	2f 4f       	sbci	r18, 0xFF	; 255
     e74:	3f 4f       	sbci	r19, 0xFF	; 255
     e76:	04 17       	cp	r16, r20
     e78:	15 07       	cpc	r17, r21
     e7a:	26 07       	cpc	r18, r22
     e7c:	37 07       	cpc	r19, r23
     e7e:	08 f4       	brcc	.+2      	; 0xe82 <_ZNK8SdVolume6fatGetEmPm+0x38>
     e80:	77 c0       	rjmp	.+238    	; 0xf70 <_ZNK8SdVolume6fatGetEmPm+0x126>
     e82:	8e 01       	movw	r16, r28
     e84:	6a 01       	movw	r12, r20
     e86:	7b 01       	movw	r14, r22
     e88:	ec 01       	movw	r28, r24
  uint32_t lba = fatStartBlock_;
     e8a:	83 89       	ldd	r24, Z+19	; 0x13
     e8c:	94 89       	ldd	r25, Z+20	; 0x14
     e8e:	a5 89       	ldd	r26, Z+21	; 0x15
     e90:	b6 89       	ldd	r27, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     e92:	27 89       	ldd	r18, Z+23	; 0x17
     e94:	20 31       	cpi	r18, 0x10	; 16
     e96:	d1 f4       	brne	.+52     	; 0xecc <_ZNK8SdVolume6fatGetEmPm+0x82>
     e98:	45 2f       	mov	r20, r21
     e9a:	56 2f       	mov	r21, r22
     e9c:	67 2f       	mov	r22, r23
     e9e:	77 27       	eor	r23, r23
     ea0:	4a 01       	movw	r8, r20
     ea2:	5b 01       	movw	r10, r22
     ea4:	88 0e       	add	r8, r24
     ea6:	99 1e       	adc	r9, r25
     ea8:	aa 1e       	adc	r10, r26
     eaa:	bb 1e       	adc	r11, r27
     eac:	c5 01       	movw	r24, r10
     eae:	b4 01       	movw	r22, r8
  if (lba != cacheBlockNumber_) {
     eb0:	80 90 00 01 	lds	r8, 0x0100
     eb4:	90 90 01 01 	lds	r9, 0x0101
     eb8:	a0 90 02 01 	lds	r10, 0x0102
     ebc:	b0 90 03 01 	lds	r11, 0x0103
     ec0:	68 15       	cp	r22, r8
     ec2:	79 05       	cpc	r23, r9
     ec4:	8a 05       	cpc	r24, r10
     ec6:	9b 05       	cpc	r25, r11
     ec8:	f1 f4       	brne	.+60     	; 0xf06 <_ZNK8SdVolume6fatGetEmPm+0xbc>
     eca:	25 c0       	rjmp	.+74     	; 0xf16 <_ZNK8SdVolume6fatGetEmPm+0xcc>
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     ecc:	68 94       	set
     ece:	16 f8       	bld	r1, 6
     ed0:	76 95       	lsr	r23
     ed2:	67 95       	ror	r22
     ed4:	57 95       	ror	r21
     ed6:	47 95       	ror	r20
     ed8:	16 94       	lsr	r1
     eda:	d1 f7       	brne	.-12     	; 0xed0 <_ZNK8SdVolume6fatGetEmPm+0x86>
     edc:	4a 01       	movw	r8, r20
     ede:	5b 01       	movw	r10, r22
     ee0:	88 0e       	add	r8, r24
     ee2:	99 1e       	adc	r9, r25
     ee4:	aa 1e       	adc	r10, r26
     ee6:	bb 1e       	adc	r11, r27
     ee8:	c5 01       	movw	r24, r10
     eea:	b4 01       	movw	r22, r8
  if (lba != cacheBlockNumber_) {
     eec:	80 90 00 01 	lds	r8, 0x0100
     ef0:	90 90 01 01 	lds	r9, 0x0101
     ef4:	a0 90 02 01 	lds	r10, 0x0102
     ef8:	b0 90 03 01 	lds	r11, 0x0103
     efc:	68 15       	cp	r22, r8
     efe:	79 05       	cpc	r23, r9
     f00:	8a 05       	cpc	r24, r10
     f02:	9b 05       	cpc	r25, r11
     f04:	e1 f0       	breq	.+56     	; 0xf3e <_ZNK8SdVolume6fatGetEmPm+0xf4>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN8SdVolume13cacheRawBlockEmh>
     f0c:	88 23       	and	r24, r24
     f0e:	89 f1       	breq	.+98     	; 0xf72 <_ZNK8SdVolume6fatGetEmPm+0x128>
  }
  if (fatType_ == 16) {
     f10:	8f 89       	ldd	r24, Y+23	; 0x17
     f12:	80 31       	cpi	r24, 0x10	; 16
     f14:	a1 f4       	brne	.+40     	; 0xf3e <_ZNK8SdVolume6fatGetEmPm+0xf4>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
     f16:	dd 24       	eor	r13, r13
     f18:	ee 24       	eor	r14, r14
     f1a:	ff 24       	eor	r15, r15
     f1c:	c6 01       	movw	r24, r12
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	fc 01       	movw	r30, r24
     f24:	e6 5f       	subi	r30, 0xF6	; 246
     f26:	fa 4f       	sbci	r31, 0xFA	; 250
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	a0 e0       	ldi	r26, 0x00	; 0
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	f8 01       	movw	r30, r16
     f32:	80 83       	st	Z, r24
     f34:	91 83       	std	Z+1, r25	; 0x01
     f36:	a2 83       	std	Z+2, r26	; 0x02
     f38:	b3 83       	std	Z+3, r27	; 0x03
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	1a c0       	rjmp	.+52     	; 0xf72 <_ZNK8SdVolume6fatGetEmPm+0x128>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
     f3e:	e8 94       	clt
     f40:	c7 f8       	bld	r12, 7
     f42:	dd 24       	eor	r13, r13
     f44:	ee 24       	eor	r14, r14
     f46:	ff 24       	eor	r15, r15
     f48:	c6 01       	movw	r24, r12
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	fc 01       	movw	r30, r24
     f54:	e6 5f       	subi	r30, 0xF6	; 246
     f56:	fa 4f       	sbci	r31, 0xFA	; 250
     f58:	80 81       	ld	r24, Z
     f5a:	91 81       	ldd	r25, Z+1	; 0x01
     f5c:	a2 81       	ldd	r26, Z+2	; 0x02
     f5e:	b3 81       	ldd	r27, Z+3	; 0x03
     f60:	bf 70       	andi	r27, 0x0F	; 15
     f62:	f8 01       	movw	r30, r16
     f64:	80 83       	st	Z, r24
     f66:	91 83       	std	Z+1, r25	; 0x01
     f68:	a2 83       	std	Z+2, r26	; 0x02
     f6a:	b3 83       	std	Z+3, r27	; 0x03
  }
  return true;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <_ZNK8SdVolume6fatGetEmPm+0x128>
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
     f70:	80 e0       	ldi	r24, 0x00	; 0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	ef 90       	pop	r14
     f7e:	df 90       	pop	r13
     f80:	cf 90       	pop	r12
     f82:	bf 90       	pop	r11
     f84:	af 90       	pop	r10
     f86:	9f 90       	pop	r9
     f88:	8f 90       	pop	r8
     f8a:	08 95       	ret

00000f8c <_ZN8SdVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
     f8c:	4f 92       	push	r4
     f8e:	5f 92       	push	r5
     f90:	6f 92       	push	r6
     f92:	7f 92       	push	r7
     f94:	8f 92       	push	r8
     f96:	9f 92       	push	r9
     f98:	af 92       	push	r10
     f9a:	bf 92       	push	r11
     f9c:	cf 92       	push	r12
     f9e:	df 92       	push	r13
     fa0:	ef 92       	push	r14
     fa2:	ff 92       	push	r15
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	ec 01       	movw	r28, r24
     fae:	6a 01       	movw	r12, r20
     fb0:	7b 01       	movw	r14, r22
     fb2:	28 01       	movw	r4, r16
     fb4:	39 01       	movw	r6, r18
  // error if reserved cluster
  if (cluster < 2) return false;
     fb6:	42 30       	cpi	r20, 0x02	; 2
     fb8:	51 05       	cpc	r21, r1
     fba:	61 05       	cpc	r22, r1
     fbc:	71 05       	cpc	r23, r1
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <_ZN8SdVolume6fatPutEmm+0x36>
     fc0:	8b c0       	rjmp	.+278    	; 0x10d8 <_ZN8SdVolume6fatPutEmm+0x14c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
     fc2:	89 85       	ldd	r24, Y+9	; 0x09
     fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc6:	ab 85       	ldd	r26, Y+11	; 0x0b
     fc8:	bc 85       	ldd	r27, Y+12	; 0x0c
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	a1 1d       	adc	r26, r1
     fce:	b1 1d       	adc	r27, r1
     fd0:	84 17       	cp	r24, r20
     fd2:	95 07       	cpc	r25, r21
     fd4:	a6 07       	cpc	r26, r22
     fd6:	b7 07       	cpc	r27, r23
     fd8:	08 f4       	brcc	.+2      	; 0xfdc <_ZN8SdVolume6fatPutEmm+0x50>
     fda:	80 c0       	rjmp	.+256    	; 0x10dc <_ZN8SdVolume6fatPutEmm+0x150>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
     fdc:	8b 89       	ldd	r24, Y+19	; 0x13
     fde:	9c 89       	ldd	r25, Y+20	; 0x14
     fe0:	ad 89       	ldd	r26, Y+21	; 0x15
     fe2:	be 89       	ldd	r27, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     fe4:	2f 89       	ldd	r18, Y+23	; 0x17
     fe6:	20 31       	cpi	r18, 0x10	; 16
     fe8:	c1 f4       	brne	.+48     	; 0x101a <_ZN8SdVolume6fatPutEmm+0x8e>
     fea:	85 2e       	mov	r8, r21
     fec:	96 2e       	mov	r9, r22
     fee:	a7 2e       	mov	r10, r23
     ff0:	bb 24       	eor	r11, r11
     ff2:	88 0e       	add	r8, r24
     ff4:	99 1e       	adc	r9, r25
     ff6:	aa 1e       	adc	r10, r26
     ff8:	bb 1e       	adc	r11, r27

  if (lba != cacheBlockNumber_) {
     ffa:	80 91 00 01 	lds	r24, 0x0100
     ffe:	90 91 01 01 	lds	r25, 0x0101
    1002:	a0 91 02 01 	lds	r26, 0x0102
    1006:	b0 91 03 01 	lds	r27, 0x0103
    100a:	88 16       	cp	r8, r24
    100c:	99 06       	cpc	r9, r25
    100e:	aa 06       	cpc	r10, r26
    1010:	bb 06       	cpc	r11, r27
    1012:	f1 f4       	brne	.+60     	; 0x1050 <_ZN8SdVolume6fatPutEmm+0xc4>
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1014:	4c 01       	movw	r8, r24
    1016:	5d 01       	movw	r10, r26
    1018:	26 c0       	rjmp	.+76     	; 0x1066 <_ZN8SdVolume6fatPutEmm+0xda>
    101a:	4a 01       	movw	r8, r20
    101c:	5b 01       	movw	r10, r22
    101e:	68 94       	set
    1020:	16 f8       	bld	r1, 6
    1022:	b6 94       	lsr	r11
    1024:	a7 94       	ror	r10
    1026:	97 94       	ror	r9
    1028:	87 94       	ror	r8
    102a:	16 94       	lsr	r1
    102c:	d1 f7       	brne	.-12     	; 0x1022 <_ZN8SdVolume6fatPutEmm+0x96>
    102e:	88 0e       	add	r8, r24
    1030:	99 1e       	adc	r9, r25
    1032:	aa 1e       	adc	r10, r26
    1034:	bb 1e       	adc	r11, r27

  if (lba != cacheBlockNumber_) {
    1036:	80 91 00 01 	lds	r24, 0x0100
    103a:	90 91 01 01 	lds	r25, 0x0101
    103e:	a0 91 02 01 	lds	r26, 0x0102
    1042:	b0 91 03 01 	lds	r27, 0x0103
    1046:	88 16       	cp	r8, r24
    1048:	99 06       	cpc	r9, r25
    104a:	aa 06       	cpc	r10, r26
    104c:	bb 06       	cpc	r11, r27
    104e:	b9 f0       	breq	.+46     	; 0x107e <_ZN8SdVolume6fatPutEmm+0xf2>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	c5 01       	movw	r24, r10
    1054:	b4 01       	movw	r22, r8
    1056:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN8SdVolume13cacheRawBlockEmh>
    105a:	88 23       	and	r24, r24
    105c:	09 f4       	brne	.+2      	; 0x1060 <_ZN8SdVolume6fatPutEmm+0xd4>
    105e:	41 c0       	rjmp	.+130    	; 0x10e2 <_ZN8SdVolume6fatPutEmm+0x156>
  }
  // store entry
  if (fatType_ == 16) {
    1060:	8f 89       	ldd	r24, Y+23	; 0x17
    1062:	80 31       	cpi	r24, 0x10	; 16
    1064:	71 f4       	brne	.+28     	; 0x1082 <_ZN8SdVolume6fatPutEmm+0xf6>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    1066:	dd 24       	eor	r13, r13
    1068:	ee 24       	eor	r14, r14
    106a:	ff 24       	eor	r15, r15
    106c:	c6 01       	movw	r24, r12
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	fc 01       	movw	r30, r24
    1074:	e6 5f       	subi	r30, 0xF6	; 246
    1076:	fa 4f       	sbci	r31, 0xFA	; 250
    1078:	51 82       	std	Z+1, r5	; 0x01
    107a:	40 82       	st	Z, r4
    107c:	13 c0       	rjmp	.+38     	; 0x10a4 <_ZN8SdVolume6fatPutEmm+0x118>
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    107e:	4c 01       	movw	r8, r24
    1080:	5d 01       	movw	r10, r26
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    1082:	e8 94       	clt
    1084:	c7 f8       	bld	r12, 7
    1086:	dd 24       	eor	r13, r13
    1088:	ee 24       	eor	r14, r14
    108a:	ff 24       	eor	r15, r15
    108c:	c6 01       	movw	r24, r12
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	fc 01       	movw	r30, r24
    1098:	e6 5f       	subi	r30, 0xF6	; 246
    109a:	fa 4f       	sbci	r31, 0xFA	; 250
    109c:	40 82       	st	Z, r4
    109e:	51 82       	std	Z+1, r5	; 0x01
    10a0:	62 82       	std	Z+2, r6	; 0x02
    10a2:	73 82       	std	Z+3, r7	; 0x03
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    10a4:	80 91 07 05 	lds	r24, 0x0507
    10a8:	81 60       	ori	r24, 0x01	; 1
    10aa:	80 93 07 05 	sts	0x0507, r24
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    10ae:	8a 89       	ldd	r24, Y+18	; 0x12
    10b0:	82 30       	cpi	r24, 0x02	; 2
    10b2:	b0 f0       	brcs	.+44     	; 0x10e0 <_ZN8SdVolume6fatPutEmm+0x154>
    10b4:	8d 81       	ldd	r24, Y+5	; 0x05
    10b6:	9e 81       	ldd	r25, Y+6	; 0x06
    10b8:	af 81       	ldd	r26, Y+7	; 0x07
    10ba:	b8 85       	ldd	r27, Y+8	; 0x08
    10bc:	88 0e       	add	r8, r24
    10be:	99 1e       	adc	r9, r25
    10c0:	aa 1e       	adc	r10, r26
    10c2:	bb 1e       	adc	r11, r27
    10c4:	80 92 03 05 	sts	0x0503, r8
    10c8:	90 92 04 05 	sts	0x0504, r9
    10cc:	a0 92 05 05 	sts	0x0505, r10
    10d0:	b0 92 06 05 	sts	0x0506, r11
  return true;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	05 c0       	rjmp	.+10     	; 0x10e2 <_ZN8SdVolume6fatPutEmm+0x156>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	03 c0       	rjmp	.+6      	; 0x10e2 <_ZN8SdVolume6fatPutEmm+0x156>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <_ZN8SdVolume6fatPutEmm+0x156>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
}
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	ff 90       	pop	r15
    10ec:	ef 90       	pop	r14
    10ee:	df 90       	pop	r13
    10f0:	cf 90       	pop	r12
    10f2:	bf 90       	pop	r11
    10f4:	af 90       	pop	r10
    10f6:	9f 90       	pop	r9
    10f8:	8f 90       	pop	r8
    10fa:	7f 90       	pop	r7
    10fc:	6f 90       	pop	r6
    10fe:	5f 90       	pop	r5
    1100:	4f 90       	pop	r4
    1102:	08 95       	ret

00001104 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    1104:	2f 92       	push	r2
    1106:	3f 92       	push	r3
    1108:	4f 92       	push	r4
    110a:	5f 92       	push	r5
    110c:	6f 92       	push	r6
    110e:	7f 92       	push	r7
    1110:	8f 92       	push	r8
    1112:	9f 92       	push	r9
    1114:	af 92       	push	r10
    1116:	bf 92       	push	r11
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	2f 97       	sbiw	r28, 0x0f	; 15
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	1c 01       	movw	r2, r24
    113a:	f9 01       	movw	r30, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    113c:	80 80       	ld	r8, Z
    113e:	91 80       	ldd	r9, Z+1	; 0x01
    1140:	a2 80       	ldd	r10, Z+2	; 0x02
    1142:	b3 80       	ldd	r11, Z+3	; 0x03
    1144:	81 14       	cp	r8, r1
    1146:	91 04       	cpc	r9, r1
    1148:	a1 04       	cpc	r10, r1
    114a:	b1 04       	cpc	r11, r1
    114c:	39 f0       	breq	.+14     	; 0x115c <_ZN8SdVolume15allocContiguousEmPm+0x58>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    114e:	2f ef       	ldi	r18, 0xFF	; 255
    1150:	82 1a       	sub	r8, r18
    1152:	92 0a       	sbc	r9, r18
    1154:	a2 0a       	sbc	r10, r18
    1156:	b2 0a       	sbc	r11, r18

    // don't save new start location
    setStart = false;
    1158:	1d 86       	std	Y+13, r1	; 0x0d
    115a:	0d c0       	rjmp	.+26     	; 0x1176 <_ZN8SdVolume15allocContiguousEmPm+0x72>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    115c:	dc 01       	movw	r26, r24
    115e:	8d 90       	ld	r8, X+
    1160:	9d 90       	ld	r9, X+
    1162:	ad 90       	ld	r10, X+
    1164:	bc 90       	ld	r11, X

    // save next search start if one cluster
    setStart = 1 == count;
    1166:	b1 e0       	ldi	r27, 0x01	; 1
    1168:	bd 87       	std	Y+13, r27	; 0x0d
    116a:	41 30       	cpi	r20, 0x01	; 1
    116c:	51 05       	cpc	r21, r1
    116e:	61 05       	cpc	r22, r1
    1170:	71 05       	cpc	r23, r1
    1172:	09 f0       	breq	.+2      	; 0x1176 <_ZN8SdVolume15allocContiguousEmPm+0x72>
    1174:	1d 86       	std	Y+13, r1	; 0x0d
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    1176:	d1 01       	movw	r26, r2
    1178:	19 96       	adiw	r26, 0x09	; 9
    117a:	0d 91       	ld	r16, X+
    117c:	1d 91       	ld	r17, X+
    117e:	2d 91       	ld	r18, X+
    1180:	3c 91       	ld	r19, X
    1182:	1c 97       	sbiw	r26, 0x0c	; 12
    1184:	d9 01       	movw	r26, r18
    1186:	c8 01       	movw	r24, r16
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	a1 1d       	adc	r26, r1
    118c:	b1 1d       	adc	r27, r1
    118e:	8d 83       	std	Y+5, r24	; 0x05
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	af 83       	std	Y+7, r26	; 0x07
    1194:	b8 87       	std	Y+8, r27	; 0x08

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    1196:	01 2b       	or	r16, r17
    1198:	02 2b       	or	r16, r18
    119a:	03 2b       	or	r16, r19
    119c:	09 f4       	brne	.+2      	; 0x11a0 <_ZN8SdVolume15allocContiguousEmPm+0x9c>
    119e:	5f c0       	rjmp	.+190    	; 0x125e <_ZN8SdVolume15allocContiguousEmPm+0x15a>
    11a0:	ff 87       	std	Y+15, r31	; 0x0f
    11a2:	ee 87       	std	Y+14, r30	; 0x0e
    11a4:	49 87       	std	Y+9, r20	; 0x09
    11a6:	5a 87       	std	Y+10, r21	; 0x0a
    11a8:	6b 87       	std	Y+11, r22	; 0x0b
    11aa:	7c 87       	std	Y+12, r23	; 0x0c
    11ac:	75 01       	movw	r14, r10
    11ae:	64 01       	movw	r12, r8
    11b0:	41 2c       	mov	r4, r1
    11b2:	51 2c       	mov	r5, r1
    11b4:	32 01       	movw	r6, r4

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    11b6:	12 e0       	ldi	r17, 0x02	; 2
    11b8:	00 e0       	ldi	r16, 0x00	; 0
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    11ba:	2d 81       	ldd	r18, Y+5	; 0x05
    11bc:	3e 81       	ldd	r19, Y+6	; 0x06
    11be:	4f 81       	ldd	r20, Y+7	; 0x07
    11c0:	58 85       	ldd	r21, Y+8	; 0x08
    11c2:	2c 15       	cp	r18, r12
    11c4:	3d 05       	cpc	r19, r13
    11c6:	4e 05       	cpc	r20, r14
    11c8:	5f 05       	cpc	r21, r15
    11ca:	40 f4       	brcc	.+16     	; 0x11dc <_ZN8SdVolume15allocContiguousEmPm+0xd8>
      bgnCluster = endCluster = 2;
    11cc:	c1 2e       	mov	r12, r17
    11ce:	d0 2e       	mov	r13, r16
    11d0:	e1 2c       	mov	r14, r1
    11d2:	f1 2c       	mov	r15, r1
    11d4:	81 2e       	mov	r8, r17
    11d6:	90 2e       	mov	r9, r16
    11d8:	a1 2c       	mov	r10, r1
    11da:	b1 2c       	mov	r11, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    11dc:	9e 01       	movw	r18, r28
    11de:	2f 5f       	subi	r18, 0xFF	; 255
    11e0:	3f 4f       	sbci	r19, 0xFF	; 255
    11e2:	b7 01       	movw	r22, r14
    11e4:	a6 01       	movw	r20, r12
    11e6:	c1 01       	movw	r24, r2
    11e8:	0e 94 25 07 	call	0xe4a	; 0xe4a <_ZNK8SdVolume6fatGetEmPm>
    11ec:	88 23       	and	r24, r24
    11ee:	b9 f1       	breq	.+110    	; 0x125e <_ZN8SdVolume15allocContiguousEmPm+0x15a>

    if (f != 0) {
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	ab 81       	ldd	r26, Y+3	; 0x03
    11f6:	bc 81       	ldd	r27, Y+4	; 0x04
    11f8:	89 2b       	or	r24, r25
    11fa:	8a 2b       	or	r24, r26
    11fc:	8b 2b       	or	r24, r27
    11fe:	41 f0       	breq	.+16     	; 0x1210 <_ZN8SdVolume15allocContiguousEmPm+0x10c>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    1200:	46 01       	movw	r8, r12
    1202:	57 01       	movw	r10, r14
    1204:	3f ef       	ldi	r19, 0xFF	; 255
    1206:	83 1a       	sub	r8, r19
    1208:	93 0a       	sbc	r9, r19
    120a:	a3 0a       	sbc	r10, r19
    120c:	b3 0a       	sbc	r11, r19
    120e:	12 c0       	rjmp	.+36     	; 0x1234 <_ZN8SdVolume15allocContiguousEmPm+0x130>
    1210:	d7 01       	movw	r26, r14
    1212:	c6 01       	movw	r24, r12
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	a1 1d       	adc	r26, r1
    1218:	b1 1d       	adc	r27, r1
    } else if ((endCluster - bgnCluster + 1) == count) {
    121a:	88 19       	sub	r24, r8
    121c:	99 09       	sbc	r25, r9
    121e:	aa 09       	sbc	r26, r10
    1220:	bb 09       	sbc	r27, r11
    1222:	29 85       	ldd	r18, Y+9	; 0x09
    1224:	3a 85       	ldd	r19, Y+10	; 0x0a
    1226:	4b 85       	ldd	r20, Y+11	; 0x0b
    1228:	5c 85       	ldd	r21, Y+12	; 0x0c
    122a:	82 17       	cp	r24, r18
    122c:	93 07       	cpc	r25, r19
    122e:	a4 07       	cpc	r26, r20
    1230:	b5 07       	cpc	r27, r21
    1232:	b9 f0       	breq	.+46     	; 0x1262 <_ZN8SdVolume15allocContiguousEmPm+0x15e>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    1234:	3f ef       	ldi	r19, 0xFF	; 255
    1236:	43 1a       	sub	r4, r19
    1238:	53 0a       	sbc	r5, r19
    123a:	63 0a       	sbc	r6, r19
    123c:	73 0a       	sbc	r7, r19
    123e:	4f ef       	ldi	r20, 0xFF	; 255
    1240:	c4 1a       	sub	r12, r20
    1242:	d4 0a       	sbc	r13, r20
    1244:	e4 0a       	sbc	r14, r20
    1246:	f4 0a       	sbc	r15, r20
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    1248:	f1 01       	movw	r30, r2
    124a:	81 85       	ldd	r24, Z+9	; 0x09
    124c:	92 85       	ldd	r25, Z+10	; 0x0a
    124e:	a3 85       	ldd	r26, Z+11	; 0x0b
    1250:	b4 85       	ldd	r27, Z+12	; 0x0c
    1252:	48 16       	cp	r4, r24
    1254:	59 06       	cpc	r5, r25
    1256:	6a 06       	cpc	r6, r26
    1258:	7b 06       	cpc	r7, r27
    125a:	08 f4       	brcc	.+2      	; 0x125e <_ZN8SdVolume15allocContiguousEmPm+0x15a>
    125c:	ae cf       	rjmp	.-164    	; 0x11ba <_ZN8SdVolume15allocContiguousEmPm+0xb6>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	53 c0       	rjmp	.+166    	; 0x1308 <_ZN8SdVolume15allocContiguousEmPm+0x204>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    1262:	0f ef       	ldi	r16, 0xFF	; 255
    1264:	1f ef       	ldi	r17, 0xFF	; 255
    1266:	2f ef       	ldi	r18, 0xFF	; 255
    1268:	3f e0       	ldi	r19, 0x0F	; 15
    126a:	b7 01       	movw	r22, r14
    126c:	a6 01       	movw	r20, r12
    126e:	c1 01       	movw	r24, r2
    1270:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    1274:	81 11       	cpse	r24, r1
    1276:	12 c0       	rjmp	.+36     	; 0x129c <_ZN8SdVolume15allocContiguousEmPm+0x198>
    1278:	47 c0       	rjmp	.+142    	; 0x1308 <_ZN8SdVolume15allocContiguousEmPm+0x204>
    127a:	97 01       	movw	r18, r14
    127c:	86 01       	movw	r16, r12

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    127e:	68 01       	movw	r12, r16
    1280:	79 01       	movw	r14, r18
    1282:	f1 e0       	ldi	r31, 0x01	; 1
    1284:	cf 1a       	sub	r12, r31
    1286:	d1 08       	sbc	r13, r1
    1288:	e1 08       	sbc	r14, r1
    128a:	f1 08       	sbc	r15, r1
    128c:	b7 01       	movw	r22, r14
    128e:	a6 01       	movw	r20, r12
    1290:	c1 01       	movw	r24, r2
    1292:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN8SdVolume6fatPutEmm>
    1296:	81 11       	cpse	r24, r1
    1298:	07 c0       	rjmp	.+14     	; 0x12a8 <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    129a:	36 c0       	rjmp	.+108    	; 0x1308 <_ZN8SdVolume15allocContiguousEmPm+0x204>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    129c:	8c 14       	cp	r8, r12
    129e:	9d 04       	cpc	r9, r13
    12a0:	ae 04       	cpc	r10, r14
    12a2:	bf 04       	cpc	r11, r15
    12a4:	50 f3       	brcs	.-44     	; 0x127a <_ZN8SdVolume15allocContiguousEmPm+0x176>
    12a6:	07 c0       	rjmp	.+14     	; 0x12b6 <_ZN8SdVolume15allocContiguousEmPm+0x1b2>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
    12a8:	97 01       	movw	r18, r14
    12aa:	86 01       	movw	r16, r12
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    12ac:	8c 14       	cp	r8, r12
    12ae:	9d 04       	cpc	r9, r13
    12b0:	ae 04       	cpc	r10, r14
    12b2:	bf 04       	cpc	r11, r15
    12b4:	20 f3       	brcs	.-56     	; 0x127e <_ZN8SdVolume15allocContiguousEmPm+0x17a>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    12b6:	ae 85       	ldd	r26, Y+14	; 0x0e
    12b8:	bf 85       	ldd	r27, Y+15	; 0x0f
    12ba:	4d 91       	ld	r20, X+
    12bc:	5d 91       	ld	r21, X+
    12be:	6d 91       	ld	r22, X+
    12c0:	7c 91       	ld	r23, X
    12c2:	41 15       	cp	r20, r1
    12c4:	51 05       	cpc	r21, r1
    12c6:	61 05       	cpc	r22, r1
    12c8:	71 05       	cpc	r23, r1
    12ca:	39 f0       	breq	.+14     	; 0x12da <_ZN8SdVolume15allocContiguousEmPm+0x1d6>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    12cc:	95 01       	movw	r18, r10
    12ce:	84 01       	movw	r16, r8
    12d0:	c1 01       	movw	r24, r2
    12d2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN8SdVolume6fatPutEmm>
    12d6:	88 23       	and	r24, r24
    12d8:	b9 f0       	breq	.+46     	; 0x1308 <_ZN8SdVolume15allocContiguousEmPm+0x204>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    12da:	ee 85       	ldd	r30, Y+14	; 0x0e
    12dc:	ff 85       	ldd	r31, Y+15	; 0x0f
    12de:	80 82       	st	Z, r8
    12e0:	91 82       	std	Z+1, r9	; 0x01
    12e2:	a2 82       	std	Z+2, r10	; 0x02
    12e4:	b3 82       	std	Z+3, r11	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    12e6:	fd 85       	ldd	r31, Y+13	; 0x0d
    12e8:	ff 23       	and	r31, r31
    12ea:	69 f0       	breq	.+26     	; 0x1306 <_ZN8SdVolume15allocContiguousEmPm+0x202>
    12ec:	2f ef       	ldi	r18, 0xFF	; 255
    12ee:	82 1a       	sub	r8, r18
    12f0:	92 0a       	sbc	r9, r18
    12f2:	a2 0a       	sbc	r10, r18
    12f4:	b2 0a       	sbc	r11, r18
    12f6:	d1 01       	movw	r26, r2
    12f8:	8d 92       	st	X+, r8
    12fa:	9d 92       	st	X+, r9
    12fc:	ad 92       	st	X+, r10
    12fe:	bc 92       	st	X, r11
    1300:	13 97       	sbiw	r26, 0x03	; 3

  return true;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <_ZN8SdVolume15allocContiguousEmPm+0x204>
    1306:	81 e0       	ldi	r24, 0x01	; 1
}
    1308:	2f 96       	adiw	r28, 0x0f	; 15
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	df 90       	pop	r13
    1322:	cf 90       	pop	r12
    1324:	bf 90       	pop	r11
    1326:	af 90       	pop	r10
    1328:	9f 90       	pop	r9
    132a:	8f 90       	pop	r8
    132c:	7f 90       	pop	r7
    132e:	6f 90       	pop	r6
    1330:	5f 90       	pop	r5
    1332:	4f 90       	pop	r4
    1334:	3f 90       	pop	r3
    1336:	2f 90       	pop	r2
    1338:	08 95       	ret

0000133a <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
  _AlarmHandler = handler;
}

// The default alarm handler
void DallasTemperature::defaultAlarmHandler(uint8_t* deviceAddress)
{
    133a:	08 95       	ret

0000133c <_ZN17DallasTemperatureC1EP7OneWire>:
extern "C" {
    #include "WConstants.h"
}
#endif

DallasTemperature::DallasTemperature(OneWire* _oneWire)
    133c:	fc 01       	movw	r30, r24
  #if REQUIRESALARMS
  : _AlarmHandler(&defaultAlarmHandler)
    133e:	8d e9       	ldi	r24, 0x9D	; 157
    1340:	99 e0       	ldi	r25, 0x09	; 9
    1342:	92 8b       	std	Z+18, r25	; 0x12
    1344:	81 8b       	std	Z+17, r24	; 0x11
  #endif
{
  _wire = _oneWire;
    1346:	76 83       	std	Z+6, r23	; 0x06
    1348:	65 83       	std	Z+5, r22	; 0x05
  devices = 0;
    134a:	14 82       	std	Z+4, r1	; 0x04
  parasite = false;
    134c:	10 82       	st	Z, r1
  bitResolution = 9;
    134e:	89 e0       	ldi	r24, 0x09	; 9
    1350:	81 83       	std	Z+1, r24	; 0x01
  waitForConversion = true;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	82 83       	std	Z+2, r24	; 0x02
  checkForConversion = true;
    1356:	83 83       	std	Z+3, r24	; 0x03
    1358:	08 95       	ret

0000135a <_ZN17DallasTemperature14getDeviceCountEv>:

// returns the number of devices found on the bus
uint8_t DallasTemperature::getDeviceCount(void)
{
  return devices;
}
    135a:	fc 01       	movw	r30, r24
    135c:	84 81       	ldd	r24, Z+4	; 0x04
    135e:	08 95       	ret

00001360 <_ZN17DallasTemperature12validAddressEPh>:

// returns true if address is valid
bool DallasTemperature::validAddress(uint8_t* deviceAddress)
{
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	eb 01       	movw	r28, r22
  return (_wire->crc8(deviceAddress, 7) == deviceAddress[7]);
    1366:	67 e0       	ldi	r22, 0x07	; 7
    1368:	ce 01       	movw	r24, r28
    136a:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN7OneWire4crc8EPKhh>
    136e:	91 e0       	ldi	r25, 0x01	; 1
    1370:	2f 81       	ldd	r18, Y+7	; 0x07
    1372:	82 13       	cpse	r24, r18
    1374:	90 e0       	ldi	r25, 0x00	; 0
}
    1376:	89 2f       	mov	r24, r25
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	08 95       	ret

0000137e <_ZN17DallasTemperature10getAddressEPhh>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
{
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	8c 01       	movw	r16, r24
    138c:	7b 01       	movw	r14, r22
    138e:	d4 2f       	mov	r29, r20
  uint8_t depth = 0;

  _wire->reset_search();
    1390:	fc 01       	movw	r30, r24
    1392:	85 81       	ldd	r24, Z+5	; 0x05
    1394:	96 81       	ldd	r25, Z+6	; 0x06
    1396:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_ZN7OneWire12reset_searchEv>

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
{
  uint8_t depth = 0;
    139a:	c0 e0       	ldi	r28, 0x00	; 0
    139c:	0b c0       	rjmp	.+22     	; 0x13b4 <_ZN17DallasTemperature10getAddressEPhh+0x36>

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    139e:	cd 13       	cpse	r28, r29
    13a0:	06 c0       	rjmp	.+12     	; 0x13ae <_ZN17DallasTemperature10getAddressEPhh+0x30>
    13a2:	b7 01       	movw	r22, r14
    13a4:	c8 01       	movw	r24, r16
    13a6:	0e 94 b0 09 	call	0x1360	; 0x1360 <_ZN17DallasTemperature12validAddressEPh>
    13aa:	81 11       	cpse	r24, r1
    13ac:	0d c0       	rjmp	.+26     	; 0x13c8 <_ZN17DallasTemperature10getAddressEPhh+0x4a>
    depth++;
    13ae:	cf 5f       	subi	r28, 0xFF	; 255
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
    13b0:	dc 17       	cp	r29, r28
    13b2:	48 f0       	brcs	.+18     	; 0x13c6 <_ZN17DallasTemperature10getAddressEPhh+0x48>
    13b4:	b7 01       	movw	r22, r14
    13b6:	f8 01       	movw	r30, r16
    13b8:	85 81       	ldd	r24, Z+5	; 0x05
    13ba:	96 81       	ldd	r25, Z+6	; 0x06
    13bc:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <_ZN7OneWire6searchEPh>
    13c0:	81 11       	cpse	r24, r1
    13c2:	ed cf       	rjmp	.-38     	; 0x139e <_ZN17DallasTemperature10getAddressEPhh+0x20>
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <_ZN17DallasTemperature10getAddressEPhh+0x4a>
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    depth++;
  }

  return false;
    13c6:	80 e0       	ldi	r24, 0x00	; 0
}
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	08 95       	ret

000013d6 <_ZN17DallasTemperature14readScratchPadEPhS0_>:
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
}

// read device's scratch pad
void DallasTemperature::readScratchPad(uint8_t* deviceAddress, uint8_t* scratchPad)
{
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	ec 01       	movw	r28, r24
    13e4:	7b 01       	movw	r14, r22
    13e6:	8a 01       	movw	r16, r20
  // send the command
  _wire->reset();
    13e8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ea:	9e 81       	ldd	r25, Y+6	; 0x06
    13ec:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    13f0:	b7 01       	movw	r22, r14
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <_ZN7OneWire6selectEPKh>
  _wire->write(READSCRATCH);
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	6e eb       	ldi	r22, 0xBE	; 190
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <_ZN7OneWire5writeEhh>

  
  // read the response

  // byte 0: temperature LSB
  scratchPad[TEMP_LSB] = _wire->read();
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN7OneWire4readEv>
    140e:	f8 01       	movw	r30, r16
    1410:	80 83       	st	Z, r24

  // byte 1: temperature MSB
  scratchPad[TEMP_MSB] = _wire->read();
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	9e 81       	ldd	r25, Y+6	; 0x06
    1416:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN7OneWire4readEv>
    141a:	f8 01       	movw	r30, r16
    141c:	81 83       	std	Z+1, r24	; 0x01

  // byte 2: high alarm temp
  scratchPad[HIGH_ALARM_TEMP] = _wire->read();
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN7OneWire4readEv>
    1426:	f8 01       	movw	r30, r16
    1428:	82 83       	std	Z+2, r24	; 0x02

  // byte 3: low alarm temp
  scratchPad[LOW_ALARM_TEMP] = _wire->read();
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN7OneWire4readEv>
    1432:	f8 01       	movw	r30, r16
    1434:	83 83       	std	Z+3, r24	; 0x03

  // byte 4:
  // DS18S20: store for crc
  // DS18B20 & DS1822: configuration register
  scratchPad[CONFIGURATION] = _wire->read();
    1436:	8d 81       	ldd	r24, Y+5	; 0x05
    1438:	9e 81       	ldd	r25, Y+6	; 0x06
    143a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN7OneWire4readEv>
    143e:	f8 01       	movw	r30, r16
    1440:	84 83       	std	Z+4, r24	; 0x04

  // byte 5:
  // internal use & crc
  scratchPad[INTERNAL_BYTE] = _wire->read();
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN7OneWire4readEv>
    144a:	f8 01       	movw	r30, r16
    144c:	85 83       	std	Z+5, r24	; 0x05

  // byte 6:
  // DS18S20: COUNT_REMAIN
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_REMAIN] = _wire->read();
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN7OneWire4readEv>
    1456:	f8 01       	movw	r30, r16
    1458:	86 83       	std	Z+6, r24	; 0x06

  // byte 7:
  // DS18S20: COUNT_PER_C
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_PER_C] = _wire->read();
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
    145c:	9e 81       	ldd	r25, Y+6	; 0x06
    145e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN7OneWire4readEv>
    1462:	f8 01       	movw	r30, r16
    1464:	87 83       	std	Z+7, r24	; 0x07

  // byte 8:
  // SCTRACHPAD_CRC
  scratchPad[SCRATCHPAD_CRC] = _wire->read();
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_ZN7OneWire4readEv>
    146e:	f8 01       	movw	r30, r16
    1470:	80 87       	std	Z+8, r24	; 0x08

  _wire->reset();
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	9e 81       	ldd	r25, Y+6	; 0x06
    1476:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN7OneWire5resetEv>
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	ff 90       	pop	r15
    1484:	ef 90       	pop	r14
    1486:	08 95       	ret

00001488 <_ZN17DallasTemperature11isConnectedEPhS0_>:
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DallasTemperature::isConnected(uint8_t* deviceAddress, uint8_t* scratchPad)
{
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	ea 01       	movw	r28, r20
  readScratchPad(deviceAddress, scratchPad);
    148e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
    1492:	68 e0       	ldi	r22, 0x08	; 8
    1494:	ce 01       	movw	r24, r28
    1496:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN7OneWire4crc8EPKhh>
    149a:	91 e0       	ldi	r25, 0x01	; 1
    149c:	28 85       	ldd	r18, Y+8	; 0x08
    149e:	82 13       	cpse	r24, r18
    14a0:	90 e0       	ldi	r25, 0x00	; 0
}
    14a2:	89 2f       	mov	r24, r25
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	08 95       	ret

000014aa <_ZN17DallasTemperature15readPowerSupplyEPh>:
  _wire->reset();
}

// reads the device's power requirements
bool DallasTemperature::readPowerSupply(uint8_t* deviceAddress)
{
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	ec 01       	movw	r28, r24
    14b4:	8b 01       	movw	r16, r22
  bool ret = false;
  _wire->reset();
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    14be:	b8 01       	movw	r22, r16
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <_ZN7OneWire6selectEPKh>
  _wire->write(READPOWERSUPPLY);
    14c8:	40 e0       	ldi	r20, 0x00	; 0
    14ca:	64 eb       	ldi	r22, 0xB4	; 180
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	9e 81       	ldd	r25, Y+6	; 0x06
    14d0:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <_ZN7OneWire5writeEhh>
  if (_wire->read_bit() == 0) ret = true;
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <_ZN7OneWire8read_bitEv>
    14dc:	18 2f       	mov	r17, r24
  _wire->reset();
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN7OneWire5resetEv>
{
  bool ret = false;
  _wire->reset();
  _wire->select(deviceAddress);
  _wire->write(READPOWERSUPPLY);
  if (_wire->read_bit() == 0) ret = true;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	11 11       	cpse	r17, r1
    14ea:	80 e0       	ldi	r24, 0x00	; 0
  _wire->reset();
  return ret;
}
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <_ZN17DallasTemperature13getResolutionEPh>:
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
{
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	29 97       	sbiw	r28, 0x09	; 9
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
    150a:	fb 01       	movw	r30, r22
    150c:	20 81       	ld	r18, Z
    150e:	20 31       	cpi	r18, 0x10	; 16
    1510:	d9 f0       	breq	.+54     	; 0x1548 <_ZN17DallasTemperature13getResolutionEPh+0x52>

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
    1512:	ae 01       	movw	r20, r28
    1514:	4f 5f       	subi	r20, 0xFF	; 255
    1516:	5f 4f       	sbci	r21, 0xFF	; 255
    1518:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZN17DallasTemperature11isConnectedEPhS0_>
    151c:	88 23       	and	r24, r24
    151e:	b1 f0       	breq	.+44     	; 0x154c <_ZN17DallasTemperature13getResolutionEPh+0x56>
  {
	switch (scratchPad[CONFIGURATION])
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	8f 33       	cpi	r24, 0x3F	; 63
    1524:	69 f0       	breq	.+26     	; 0x1540 <_ZN17DallasTemperature13getResolutionEPh+0x4a>
    1526:	18 f4       	brcc	.+6      	; 0x152e <_ZN17DallasTemperature13getResolutionEPh+0x38>
    1528:	8f 31       	cpi	r24, 0x1F	; 31
    152a:	61 f0       	breq	.+24     	; 0x1544 <_ZN17DallasTemperature13getResolutionEPh+0x4e>
    152c:	07 c0       	rjmp	.+14     	; 0x153c <_ZN17DallasTemperature13getResolutionEPh+0x46>
    152e:	8f 35       	cpi	r24, 0x5F	; 95
    1530:	19 f0       	breq	.+6      	; 0x1538 <_ZN17DallasTemperature13getResolutionEPh+0x42>
    1532:	8f 37       	cpi	r24, 0x7F	; 127
    1534:	69 f0       	breq	.+26     	; 0x1550 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    1536:	02 c0       	rjmp	.+4      	; 0x153c <_ZN17DallasTemperature13getResolutionEPh+0x46>
    {
      case TEMP_12_BIT:
        return 12;
        
      case TEMP_11_BIT:
        return 11;
    1538:	8b e0       	ldi	r24, 0x0B	; 11
    153a:	0b c0       	rjmp	.+22     	; 0x1552 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
      case TEMP_9_BIT:
        return 9;
        
	}
  }
  return 0;
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	09 c0       	rjmp	.+18     	; 0x1552 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
        
      case TEMP_11_BIT:
        return 11;
        
      case TEMP_10_BIT:
        return 10;
    1540:	8a e0       	ldi	r24, 0x0A	; 10
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
        
      case TEMP_9_BIT:
        return 9;
    1544:	89 e0       	ldi	r24, 0x09	; 9
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <_ZN17DallasTemperature13getResolutionEPh+0x5c>

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
{
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
    1548:	89 e0       	ldi	r24, 0x09	; 9
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
      case TEMP_9_BIT:
        return 9;
        
	}
  }
  return 0;
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
  if (isConnected(deviceAddress, scratchPad))
  {
	switch (scratchPad[CONFIGURATION])
    {
      case TEMP_12_BIT:
        return 12;
    1550:	8c e0       	ldi	r24, 0x0C	; 12
        return 9;
        
	}
  }
  return 0;
}
    1552:	29 96       	adiw	r28, 0x09	; 9
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <_ZN17DallasTemperature5beginEv>:
  checkForConversion = true;
}

// initialise the bus
void DallasTemperature::begin(void)
{
    1564:	ef 92       	push	r14
    1566:	ff 92       	push	r15
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	61 97       	sbiw	r28, 0x11	; 17
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	8c 01       	movw	r16, r24
  DeviceAddress deviceAddress;

  _wire->reset_search();
    1582:	fc 01       	movw	r30, r24
    1584:	85 81       	ldd	r24, Z+5	; 0x05
    1586:	96 81       	ldd	r25, Z+6	; 0x06
    1588:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_ZN7OneWire12reset_searchEv>
  devices = 0; // Reset the number of devices when we enumerate wire devices
    158c:	f8 01       	movw	r30, r16
    158e:	14 82       	std	Z+4, r1	; 0x04

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    1590:	ee 24       	eor	r14, r14
    1592:	e3 94       	inc	r14
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
    1594:	37 c0       	rjmp	.+110    	; 0x1604 <_ZN17DallasTemperature5beginEv+0xa0>
  {
    if (validAddress(deviceAddress))
    1596:	be 01       	movw	r22, r28
    1598:	66 5f       	subi	r22, 0xF6	; 246
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    159c:	c8 01       	movw	r24, r16
    159e:	0e 94 b0 09 	call	0x1360	; 0x1360 <_ZN17DallasTemperature12validAddressEPh>
    15a2:	88 23       	and	r24, r24
    15a4:	79 f1       	breq	.+94     	; 0x1604 <_ZN17DallasTemperature5beginEv+0xa0>
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    15a6:	f8 01       	movw	r30, r16
    15a8:	80 81       	ld	r24, Z
    15aa:	81 11       	cpse	r24, r1
    15ac:	0a c0       	rjmp	.+20     	; 0x15c2 <_ZN17DallasTemperature5beginEv+0x5e>
    15ae:	be 01       	movw	r22, r28
    15b0:	66 5f       	subi	r22, 0xF6	; 246
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255
    15b4:	c8 01       	movw	r24, r16
    15b6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_ZN17DallasTemperature15readPowerSupplyEPh>
    15ba:	88 23       	and	r24, r24
    15bc:	11 f0       	breq	.+4      	; 0x15c2 <_ZN17DallasTemperature5beginEv+0x5e>
    15be:	f8 01       	movw	r30, r16
    15c0:	e0 82       	st	Z, r14

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    15c2:	ae 01       	movw	r20, r28
    15c4:	4f 5f       	subi	r20, 0xFF	; 255
    15c6:	5f 4f       	sbci	r21, 0xFF	; 255
    15c8:	be 01       	movw	r22, r28
    15ca:	66 5f       	subi	r22, 0xF6	; 246
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	c8 01       	movw	r24, r16
    15d0:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN17DallasTemperature14readScratchPadEPhS0_>

	  bitResolution = max(bitResolution, getResolution(deviceAddress));
    15d4:	f8 01       	movw	r30, r16
    15d6:	f1 80       	ldd	r15, Z+1	; 0x01
    15d8:	be 01       	movw	r22, r28
    15da:	66 5f       	subi	r22, 0xF6	; 246
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	c8 01       	movw	r24, r16
    15e0:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN17DallasTemperature13getResolutionEPh>
    15e4:	8f 15       	cp	r24, r15
    15e6:	18 f4       	brcc	.+6      	; 0x15ee <_ZN17DallasTemperature5beginEv+0x8a>
    15e8:	f8 01       	movw	r30, r16
    15ea:	81 81       	ldd	r24, Z+1	; 0x01
    15ec:	06 c0       	rjmp	.+12     	; 0x15fa <_ZN17DallasTemperature5beginEv+0x96>
    15ee:	be 01       	movw	r22, r28
    15f0:	66 5f       	subi	r22, 0xF6	; 246
    15f2:	7f 4f       	sbci	r23, 0xFF	; 255
    15f4:	c8 01       	movw	r24, r16
    15f6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN17DallasTemperature13getResolutionEPh>
    15fa:	f8 01       	movw	r30, r16
    15fc:	81 83       	std	Z+1, r24	; 0x01

      devices++;
    15fe:	84 81       	ldd	r24, Z+4	; 0x04
    1600:	8f 5f       	subi	r24, 0xFF	; 255
    1602:	84 83       	std	Z+4, r24	; 0x04
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
    1604:	be 01       	movw	r22, r28
    1606:	66 5f       	subi	r22, 0xF6	; 246
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	f8 01       	movw	r30, r16
    160c:	85 81       	ldd	r24, Z+5	; 0x05
    160e:	96 81       	ldd	r25, Z+6	; 0x06
    1610:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <_ZN7OneWire6searchEPh>
    1614:	81 11       	cpse	r24, r1
    1616:	bf cf       	rjmp	.-130    	; 0x1596 <_ZN17DallasTemperature5beginEv+0x32>
	  bitResolution = max(bitResolution, getResolution(deviceAddress));

      devices++;
    }
  }
}
    1618:	61 96       	adiw	r28, 0x11	; 17
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	ff 90       	pop	r15
    162e:	ef 90       	pop	r14
    1630:	08 95       	ret

00001632 <_ZN17DallasTemperature21isConversionAvailableEPh>:
{
	return checkForConversion;
}

bool DallasTemperature::isConversionAvailable(uint8_t* deviceAddress)
{
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	29 97       	sbiw	r28, 0x09	; 9
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
	// Check if the clock has been raised indicating the conversion is complete
  	ScratchPad scratchPad;
  	readScratchPad(deviceAddress, scratchPad);
    1646:	ae 01       	movw	r20, r28
    1648:	4f 5f       	subi	r20, 0xFF	; 255
    164a:	5f 4f       	sbci	r21, 0xFF	; 255
    164c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN17DallasTemperature14readScratchPadEPhS0_>
	return scratchPad[0];
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	99 81       	ldd	r25, Y+1	; 0x01
    1654:	91 11       	cpse	r25, r1
    1656:	01 c0       	rjmp	.+2      	; 0x165a <_ZN17DallasTemperature21isConversionAvailableEPh+0x28>
    1658:	80 e0       	ldi	r24, 0x00	; 0
}	
    165a:	29 96       	adiw	r28, 0x09	; 9
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	08 95       	ret

0000166c <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
  return true;
}


void DallasTemperature::blockTillConversionComplete(uint8_t* bitResolution, uint8_t* deviceAddress)
{
    166c:	cf 92       	push	r12
    166e:	df 92       	push	r13
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	ec 01       	movw	r28, r24
    167e:	8b 01       	movw	r16, r22
	if(deviceAddress != 0 && checkForConversion && !parasite)
    1680:	45 2b       	or	r20, r21
    1682:	f1 f0       	breq	.+60     	; 0x16c0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	88 23       	and	r24, r24
    1688:	d9 f0       	breq	.+54     	; 0x16c0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
    168a:	88 81       	ld	r24, Y
    168c:	81 11       	cpse	r24, r1
    168e:	18 c0       	rjmp	.+48     	; 0x16c0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
	{
	  	// Continue to check if the IC has responded with a temperature
	  	// NB: Could cause issues with multiple devices (one device may respond faster)
	  	unsigned long start = millis();
    1690:	0e 94 6f 1b 	call	0x36de	; 0x36de <millis>
    1694:	6b 01       	movw	r12, r22
    1696:	7c 01       	movw	r14, r24
		while(!isConversionAvailable(0) && ((millis() - start) < 750));	
    1698:	60 e0       	ldi	r22, 0x00	; 0
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	ce 01       	movw	r24, r28
    169e:	0e 94 19 0b 	call	0x1632	; 0x1632 <_ZN17DallasTemperature21isConversionAvailableEPh>
    16a2:	81 11       	cpse	r24, r1
    16a4:	0d c0       	rjmp	.+26     	; 0x16c0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
    16a6:	0e 94 6f 1b 	call	0x36de	; 0x36de <millis>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	8c 19       	sub	r24, r12
    16b0:	9d 09       	sbc	r25, r13
    16b2:	ae 09       	sbc	r26, r14
    16b4:	bf 09       	sbc	r27, r15
    16b6:	8e 3e       	cpi	r24, 0xEE	; 238
    16b8:	92 40       	sbci	r25, 0x02	; 2
    16ba:	a1 05       	cpc	r26, r1
    16bc:	b1 05       	cpc	r27, r1
    16be:	60 f3       	brcs	.-40     	; 0x1698 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x2c>
	}
	
  	// Wait a fix number of cycles till conversion is complete (based on IC datasheet)
	  switch (*bitResolution)
    16c0:	f8 01       	movw	r30, r16
    16c2:	80 81       	ld	r24, Z
    16c4:	8a 30       	cpi	r24, 0x0A	; 10
    16c6:	59 f0       	breq	.+22     	; 0x16de <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x72>
    16c8:	8b 30       	cpi	r24, 0x0B	; 11
    16ca:	81 f0       	breq	.+32     	; 0x16ec <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x80>
    16cc:	89 30       	cpi	r24, 0x09	; 9
    16ce:	a9 f4       	brne	.+42     	; 0x16fa <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8e>
	  {
	    case 9:
	      delay(94);
    16d0:	6e e5       	ldi	r22, 0x5E	; 94
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>
	      break;
    16dc:	14 c0       	rjmp	.+40     	; 0x1706 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x9a>
	    case 10:
	      delay(188);
    16de:	6c eb       	ldi	r22, 0xBC	; 188
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>
	      break;
    16ea:	0d c0       	rjmp	.+26     	; 0x1706 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x9a>
	    case 11:
	      delay(375);
    16ec:	67 e7       	ldi	r22, 0x77	; 119
    16ee:	71 e0       	ldi	r23, 0x01	; 1
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>
	      break;
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x9a>
	    case 12:
	    default:
	      delay(750);
    16fa:	6e ee       	ldi	r22, 0xEE	; 238
    16fc:	72 e0       	ldi	r23, 0x02	; 2
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>
	      break;
	  }

}
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	08 95       	ret

00001718 <_ZN17DallasTemperature19requestTemperaturesEv>:
}	


// sends command for all devices on the bus to perform a temperature conversion
void DallasTemperature::requestTemperatures()
{
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	ec 01       	movw	r28, r24
  _wire->reset();
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN7OneWire5resetEv>
  _wire->skip();
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
    1728:	9e 81       	ldd	r25, Y+6	; 0x06
    172a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN7OneWire4skipEv>
  _wire->write(STARTCONVO, parasite);
    172e:	48 81       	ld	r20, Y
    1730:	64 e4       	ldi	r22, 0x44	; 68
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <_ZN7OneWire5writeEhh>

  // ASYNC mode?
  if (!waitForConversion) return; 
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	88 23       	and	r24, r24
    173e:	41 f0       	breq	.+16     	; 0x1750 <_ZN17DallasTemperature19requestTemperaturesEv+0x38>
  blockTillConversionComplete(&bitResolution, 0);
    1740:	be 01       	movw	r22, r28
    1742:	6f 5f       	subi	r22, 0xFF	; 255
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	ce 01       	movw	r24, r28
    174c:	0e 94 36 0b 	call	0x166c	; 0x166c <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>

  return;
}
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

00001756 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
  return toFahrenheit(getTempCByIndex(deviceIndex));
}

// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
{
    1756:	8f 92       	push	r8
    1758:	9f 92       	push	r9
    175a:	af 92       	push	r10
    175c:	bf 92       	push	r11
    175e:	cf 92       	push	r12
    1760:	df 92       	push	r13
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	fb 01       	movw	r30, r22
    176e:	ea 01       	movw	r28, r20
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	98 2f       	mov	r25, r24
    1776:	88 27       	eor	r24, r24
    1778:	28 81       	ld	r18, Y
    177a:	bc 01       	movw	r22, r24
    177c:	62 2b       	or	r22, r18

  switch (deviceAddress[0])
    177e:	80 81       	ld	r24, Z
    1780:	82 32       	cpi	r24, 0x22	; 34
    1782:	31 f0       	breq	.+12     	; 0x1790 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3a>
    1784:	88 32       	cpi	r24, 0x28	; 40
    1786:	21 f0       	breq	.+8      	; 0x1790 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3a>
    1788:	80 31       	cpi	r24, 0x10	; 16
    178a:	09 f0       	breq	.+2      	; 0x178e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x38>
    178c:	7e c0       	rjmp	.+252    	; 0x188a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x134>
    178e:	4c c0       	rjmp	.+152    	; 0x1828 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xd2>
  {
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	8f 33       	cpi	r24, 0x3F	; 63
    1794:	29 f1       	breq	.+74     	; 0x17e0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x8a>
    1796:	18 f4       	brcc	.+6      	; 0x179e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x48>
    1798:	8f 31       	cpi	r24, 0x1F	; 31
    179a:	99 f1       	breq	.+102    	; 0x1802 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xac>
    179c:	76 c0       	rjmp	.+236    	; 0x188a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x134>
    179e:	8f 35       	cpi	r24, 0x5F	; 95
    17a0:	81 f0       	breq	.+32     	; 0x17c2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x6c>
    17a2:	8f 37       	cpi	r24, 0x7F	; 127
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x52>
    17a6:	71 c0       	rjmp	.+226    	; 0x188a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x134>
      {
        case TEMP_12_BIT:
          return (float)rawTemperature * 0.0625;
    17a8:	07 2e       	mov	r0, r23
    17aa:	00 0c       	add	r0, r0
    17ac:	88 0b       	sbc	r24, r24
    17ae:	99 0b       	sbc	r25, r25
    17b0:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__floatsisf>
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5d e3       	ldi	r21, 0x3D	; 61
    17bc:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__mulsf3>
    17c0:	65 c0       	rjmp	.+202    	; 0x188c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
          break;
        case TEMP_11_BIT:
          return (float)(rawTemperature >> 1) * 0.125;
    17c2:	75 95       	asr	r23
    17c4:	67 95       	ror	r22
    17c6:	07 2e       	mov	r0, r23
    17c8:	00 0c       	add	r0, r0
    17ca:	88 0b       	sbc	r24, r24
    17cc:	99 0b       	sbc	r25, r25
    17ce:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__floatsisf>
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	5e e3       	ldi	r21, 0x3E	; 62
    17da:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__mulsf3>
    17de:	56 c0       	rjmp	.+172    	; 0x188c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
    17e0:	75 95       	asr	r23
    17e2:	67 95       	ror	r22
    17e4:	75 95       	asr	r23
    17e6:	67 95       	ror	r22
    17e8:	07 2e       	mov	r0, r23
    17ea:	00 0c       	add	r0, r0
    17ec:	88 0b       	sbc	r24, r24
    17ee:	99 0b       	sbc	r25, r25
    17f0:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__floatsisf>
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e8       	ldi	r20, 0x80	; 128
    17fa:	5e e3       	ldi	r21, 0x3E	; 62
    17fc:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__mulsf3>
    1800:	45 c0       	rjmp	.+138    	; 0x188c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
    1802:	75 95       	asr	r23
    1804:	67 95       	ror	r22
    1806:	75 95       	asr	r23
    1808:	67 95       	ror	r22
    180a:	75 95       	asr	r23
    180c:	67 95       	ror	r22
    180e:	07 2e       	mov	r0, r23
    1810:	00 0c       	add	r0, r0
    1812:	88 0b       	sbc	r24, r24
    1814:	99 0b       	sbc	r25, r25
    1816:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__floatsisf>
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	5f e3       	ldi	r21, 0x3F	; 63
    1822:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__mulsf3>
    1826:	32 c0       	rjmp	.+100    	; 0x188c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
      TEMPERATURE = TEMP_READ - 0.25 + --------------------------
                                               COUNT_PER_C
      */

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
    1828:	1f 81       	ldd	r17, Y+7	; 0x07
    182a:	75 95       	asr	r23
    182c:	67 95       	ror	r22
    182e:	07 2e       	mov	r0, r23
    1830:	00 0c       	add	r0, r0
    1832:	88 0b       	sbc	r24, r24
    1834:	99 0b       	sbc	r25, r25
    1836:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__floatsisf>
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5e e3       	ldi	r21, 0x3E	; 62
    1842:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__subsf3>
    1846:	6b 01       	movw	r12, r22
    1848:	7c 01       	movw	r14, r24
    184a:	81 2f       	mov	r24, r17
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	2e 81       	ldd	r18, Y+6	; 0x06
    1850:	82 1b       	sub	r24, r18
    1852:	91 09       	sbc	r25, r1
    1854:	bc 01       	movw	r22, r24
    1856:	99 0f       	add	r25, r25
    1858:	88 0b       	sbc	r24, r24
    185a:	99 0b       	sbc	r25, r25
    185c:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__floatsisf>
    1860:	4b 01       	movw	r8, r22
    1862:	5c 01       	movw	r10, r24
    1864:	61 2f       	mov	r22, r17
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__floatunsisf>
    1870:	9b 01       	movw	r18, r22
    1872:	ac 01       	movw	r20, r24
    1874:	c5 01       	movw	r24, r10
    1876:	b4 01       	movw	r22, r8
    1878:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__divsf3>
    187c:	9b 01       	movw	r18, r22
    187e:	ac 01       	movw	r20, r24
    1880:	c7 01       	movw	r24, r14
    1882:	b6 01       	movw	r22, r12
    1884:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__addsf3>
    1888:	01 c0       	rjmp	.+2      	; 0x188c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
    188a:	04 c0       	rjmp	.+8      	; 0x1894 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x13e>
    188c:	56 2f       	mov	r21, r22
    188e:	47 2f       	mov	r20, r23
    1890:	38 2f       	mov	r19, r24
    1892:	29 2f       	mov	r18, r25
      break;
  }
}
    1894:	65 2f       	mov	r22, r21
    1896:	74 2f       	mov	r23, r20
    1898:	83 2f       	mov	r24, r19
    189a:	92 2f       	mov	r25, r18
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	df 90       	pop	r13
    18a8:	cf 90       	pop	r12
    18aa:	bf 90       	pop	r11
    18ac:	af 90       	pop	r10
    18ae:	9f 90       	pop	r9
    18b0:	8f 90       	pop	r8
    18b2:	08 95       	ret

000018b4 <_ZN17DallasTemperature8getTempCEPh>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(uint8_t* deviceAddress)
{
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	29 97       	sbiw	r28, 0x09	; 9
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	8c 01       	movw	r16, r24
    18d2:	7b 01       	movw	r14, r22
  // TODO: Multiple devices (up to 64) on the same bus may take 
  //       some time to negotiate a response
  // What happens in case of collision?

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
    18d4:	ae 01       	movw	r20, r28
    18d6:	4f 5f       	subi	r20, 0xFF	; 255
    18d8:	5f 4f       	sbci	r21, 0xFF	; 255
    18da:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZN17DallasTemperature11isConnectedEPhS0_>
    18de:	88 23       	and	r24, r24
    18e0:	41 f0       	breq	.+16     	; 0x18f2 <_ZN17DallasTemperature8getTempCEPh+0x3e>
    18e2:	ae 01       	movw	r20, r28
    18e4:	4f 5f       	subi	r20, 0xFF	; 255
    18e6:	5f 4f       	sbci	r21, 0xFF	; 255
    18e8:	b7 01       	movw	r22, r14
    18ea:	c8 01       	movw	r24, r16
    18ec:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <_ZN17DallasTemperature8getTempCEPh+0x46>
  return DEVICE_DISCONNECTED;
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	8e ef       	ldi	r24, 0xFE	; 254
    18f8:	92 ec       	ldi	r25, 0xC2	; 194
}
    18fa:	29 96       	adiw	r28, 0x09	; 9
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	ff 90       	pop	r15
    1910:	ef 90       	pop	r14
    1912:	08 95       	ret

00001914 <_ZN17DallasTemperature19isParasitePowerModeEv>:

// returns true if the bus requires parasite power
bool DallasTemperature::isParasitePowerMode(void)
{
  return parasite;
}
    1914:	fc 01       	movw	r30, r24
    1916:	80 81       	ld	r24, Z
    1918:	08 95       	ret

0000191a <_ZN17DallasTemperature12toFahrenheitEf>:
#endif

// Convert float celsius to fahrenheit
float DallasTemperature::toFahrenheit(float celsius)
{
  return (celsius * 1.8) + 32;
    191a:	26 e6       	ldi	r18, 0x66	; 102
    191c:	36 e6       	ldi	r19, 0x66	; 102
    191e:	46 ee       	ldi	r20, 0xE6	; 230
    1920:	5f e3       	ldi	r21, 0x3F	; 63
    1922:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__mulsf3>
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	52 e4       	ldi	r21, 0x42	; 66
    192e:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__addsf3>
}
    1932:	08 95       	ret

00001934 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
    1934:	ff 92       	push	r15
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
	IO_REG_TYPE mask = bitmask;
    193e:	fc 01       	movw	r30, r24
    1940:	d0 81       	ld	r29, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    1942:	01 81       	ldd	r16, Z+1	; 0x01
    1944:	12 81       	ldd	r17, Z+2	; 0x02
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
    1946:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);
    1948:	f8 01       	movw	r30, r16
    194a:	81 81       	ldd	r24, Z+1	; 0x01
    194c:	fd 2e       	mov	r15, r29
    194e:	f0 94       	com	r15
    1950:	8f 21       	and	r24, r15
    1952:	81 83       	std	Z+1, r24	; 0x01
	interrupts();
    1954:	78 94       	sei
    1956:	cc e7       	ldi	r28, 0x7C	; 124
    1958:	02 c0       	rjmp	.+4      	; 0x195e <_ZN7OneWire5resetEv+0x2a>
    195a:	c1 50       	subi	r28, 0x01	; 1
	// wait until the wire is high... just in case
	do {
		if (--retries == 0) return 0;
    195c:	41 f1       	breq	.+80     	; 0x19ae <_ZN7OneWire5resetEv+0x7a>
		delayMicroseconds(2);
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 cd 1b 	call	0x379a	; 0x379a <delayMicroseconds>
	} while ( !DIRECT_READ(reg, mask));
    1966:	f8 01       	movw	r30, r16
    1968:	90 81       	ld	r25, Z
    196a:	9d 23       	and	r25, r29

	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
    196c:	b1 f3       	breq	.-20     	; 0x195a <_ZN7OneWire5resetEv+0x26>
		if (--retries == 0) return 0;
		delayMicroseconds(2);
	} while ( !DIRECT_READ(reg, mask));

	noInterrupts();
    196e:	f8 94       	cli
	DIRECT_WRITE_LOW(reg, mask);
    1970:	82 81       	ldd	r24, Z+2	; 0x02
    1972:	8f 21       	and	r24, r15
    1974:	82 83       	std	Z+2, r24	; 0x02
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    1976:	81 81       	ldd	r24, Z+1	; 0x01
    1978:	8d 2b       	or	r24, r29
    197a:	81 83       	std	Z+1, r24	; 0x01
	interrupts();
    197c:	78 94       	sei
	delayMicroseconds(480);
    197e:	80 ee       	ldi	r24, 0xE0	; 224
    1980:	91 e0       	ldi	r25, 0x01	; 1
    1982:	0e 94 cd 1b 	call	0x379a	; 0x379a <delayMicroseconds>
	noInterrupts();
    1986:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
    1988:	f8 01       	movw	r30, r16
    198a:	81 81       	ldd	r24, Z+1	; 0x01
    198c:	f8 22       	and	r15, r24
    198e:	f1 82       	std	Z+1, r15	; 0x01
	delayMicroseconds(70);
    1990:	86 e4       	ldi	r24, 0x46	; 70
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 cd 1b 	call	0x379a	; 0x379a <delayMicroseconds>
	r = !DIRECT_READ(reg, mask);
    1998:	f8 01       	movw	r30, r16
    199a:	80 81       	ld	r24, Z
    199c:	d8 23       	and	r29, r24
    199e:	c1 e0       	ldi	r28, 0x01	; 1
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <_ZN7OneWire5resetEv+0x70>
    19a2:	c0 e0       	ldi	r28, 0x00	; 0
	interrupts();
    19a4:	78 94       	sei
	delayMicroseconds(410);
    19a6:	8a e9       	ldi	r24, 0x9A	; 154
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	0e 94 cd 1b 	call	0x379a	; 0x379a <delayMicroseconds>
	return r;
}
    19ae:	8c 2f       	mov	r24, r28
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	ff 90       	pop	r15
    19ba:	08 95       	ret

000019bc <_ZN7OneWire9write_bitEh>:
//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
{
    19bc:	1f 93       	push	r17
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
	IO_REG_TYPE mask=bitmask;
    19c2:	fc 01       	movw	r30, r24
    19c4:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    19c6:	c1 81       	ldd	r28, Z+1	; 0x01
    19c8:	d2 81       	ldd	r29, Z+2	; 0x02

	if (v & 1) {
    19ca:	60 ff       	sbrs	r22, 0
    19cc:	16 c0       	rjmp	.+44     	; 0x19fa <_ZN7OneWire9write_bitEh+0x3e>
		noInterrupts();
    19ce:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	91 2f       	mov	r25, r17
    19d4:	90 95       	com	r25
    19d6:	89 23       	and	r24, r25
    19d8:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	81 2b       	or	r24, r17
    19de:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(10);
    19e0:	8a e0       	ldi	r24, 0x0A	; 10
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 94 cd 1b 	call	0x379a	; 0x379a <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	18 2b       	or	r17, r24
    19ec:	1a 83       	std	Y+2, r17	; 0x02
		interrupts();
    19ee:	78 94       	sei
		delayMicroseconds(55);
    19f0:	87 e3       	ldi	r24, 0x37	; 55
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 cd 1b 	call	0x379a	; 0x379a <delayMicroseconds>
    19f8:	15 c0       	rjmp	.+42     	; 0x1a24 <_ZN7OneWire9write_bitEh+0x68>
	} else {
		noInterrupts();
    19fa:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	91 2f       	mov	r25, r17
    1a00:	90 95       	com	r25
    1a02:	89 23       	and	r24, r25
    1a04:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	81 2b       	or	r24, r17
    1a0a:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(65);
    1a0c:	81 e4       	ldi	r24, 0x41	; 65
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 cd 1b 	call	0x379a	; 0x379a <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	18 2b       	or	r17, r24
    1a18:	1a 83       	std	Y+2, r17	; 0x02
		interrupts();
    1a1a:	78 94       	sei
		delayMicroseconds(5);
    1a1c:	85 e0       	ldi	r24, 0x05	; 5
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 94 cd 1b 	call	0x379a	; 0x379a <delayMicroseconds>
	}
}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	08 95       	ret

00001a2c <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
	IO_REG_TYPE mask=bitmask;
    1a34:	fc 01       	movw	r30, r24
    1a36:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    1a38:	c1 81       	ldd	r28, Z+1	; 0x01
    1a3a:	d2 81       	ldd	r29, Z+2	; 0x02
	uint8_t r;

	noInterrupts();
    1a3c:	f8 94       	cli
	DIRECT_MODE_OUTPUT(reg, mask);
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	81 2b       	or	r24, r17
    1a42:	89 83       	std	Y+1, r24	; 0x01
	DIRECT_WRITE_LOW(reg, mask);
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	01 2f       	mov	r16, r17
    1a48:	00 95       	com	r16
    1a4a:	80 23       	and	r24, r16
    1a4c:	8a 83       	std	Y+2, r24	; 0x02
	delayMicroseconds(3);
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	0e 94 cd 1b 	call	0x379a	; 0x379a <delayMicroseconds>
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	08 23       	and	r16, r24
    1a5a:	09 83       	std	Y+1, r16	; 0x01
	delayMicroseconds(10);
    1a5c:	8a e0       	ldi	r24, 0x0A	; 10
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 cd 1b 	call	0x379a	; 0x379a <delayMicroseconds>
	r = DIRECT_READ(reg, mask);
    1a64:	c8 81       	ld	r28, Y
	interrupts();
    1a66:	78 94       	sei
	delayMicroseconds(53);
    1a68:	85 e3       	ldi	r24, 0x35	; 53
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0e 94 cd 1b 	call	0x379a	; 0x379a <delayMicroseconds>
	DIRECT_MODE_OUTPUT(reg, mask);
	DIRECT_WRITE_LOW(reg, mask);
	delayMicroseconds(3);
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
	delayMicroseconds(10);
	r = DIRECT_READ(reg, mask);
    1a70:	1c 23       	and	r17, r28
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <_ZN7OneWire8read_bitEv+0x4c>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
	interrupts();
	delayMicroseconds(53);
	return r;
}
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	08 95       	ret

00001a82 <_ZN7OneWire5writeEhh>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    1a82:	bf 92       	push	r11
    1a84:	cf 92       	push	r12
    1a86:	df 92       	push	r13
    1a88:	ef 92       	push	r14
    1a8a:	ff 92       	push	r15
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	7c 01       	movw	r14, r24
    1a96:	d6 2e       	mov	r13, r22
    1a98:	b4 2e       	mov	r11, r20
    1a9a:	c8 e0       	ldi	r28, 0x08	; 8
    1a9c:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    1a9e:	11 e0       	ldi	r17, 0x01	; 1
	OneWire::write_bit( (bitMask & v)?1:0);
    1aa0:	01 e0       	ldi	r16, 0x01	; 1
    1aa2:	c1 2c       	mov	r12, r1
    1aa4:	60 2f       	mov	r22, r16
    1aa6:	91 2f       	mov	r25, r17
    1aa8:	9d 21       	and	r25, r13
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <_ZN7OneWire5writeEhh+0x2c>
    1aac:	6c 2d       	mov	r22, r12
    1aae:	c7 01       	movw	r24, r14
    1ab0:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZN7OneWire9write_bitEh>
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    1ab4:	11 0f       	add	r17, r17
    1ab6:	21 97       	sbiw	r28, 0x01	; 1
    1ab8:	a9 f7       	brne	.-22     	; 0x1aa4 <_ZN7OneWire5writeEhh+0x22>
	OneWire::write_bit( (bitMask & v)?1:0);
    }
    if ( !power) {
    1aba:	b1 10       	cpse	r11, r1
    1abc:	15 c0       	rjmp	.+42     	; 0x1ae8 <_ZN7OneWire5writeEhh+0x66>
	noInterrupts();
    1abe:	f8 94       	cli
	DIRECT_MODE_INPUT(baseReg, bitmask);
    1ac0:	d7 01       	movw	r26, r14
    1ac2:	11 96       	adiw	r26, 0x01	; 1
    1ac4:	ed 91       	ld	r30, X+
    1ac6:	fc 91       	ld	r31, X
    1ac8:	12 97       	sbiw	r26, 0x02	; 2
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	8c 91       	ld	r24, X
    1ace:	80 95       	com	r24
    1ad0:	89 23       	and	r24, r25
    1ad2:	81 83       	std	Z+1, r24	; 0x01
	DIRECT_WRITE_LOW(baseReg, bitmask);
    1ad4:	11 96       	adiw	r26, 0x01	; 1
    1ad6:	ed 91       	ld	r30, X+
    1ad8:	fc 91       	ld	r31, X
    1ada:	12 97       	sbiw	r26, 0x02	; 2
    1adc:	92 81       	ldd	r25, Z+2	; 0x02
    1ade:	8c 91       	ld	r24, X
    1ae0:	80 95       	com	r24
    1ae2:	89 23       	and	r24, r25
    1ae4:	82 83       	std	Z+2, r24	; 0x02
	interrupts();
    1ae6:	78 94       	sei
    }
}
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	ff 90       	pop	r15
    1af2:	ef 90       	pop	r14
    1af4:	df 90       	pop	r13
    1af6:	cf 90       	pop	r12
    1af8:	bf 90       	pop	r11
    1afa:	08 95       	ret

00001afc <_ZN7OneWire4readEv>:
}

//
// Read a byte
//
uint8_t OneWire::read() {
    1afc:	ef 92       	push	r14
    1afe:	ff 92       	push	r15
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	7c 01       	movw	r14, r24
    1b0a:	c8 e0       	ldi	r28, 0x08	; 8
    1b0c:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
    uint8_t r = 0;
    1b0e:	00 e0       	ldi	r16, 0x00	; 0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    1b10:	11 e0       	ldi	r17, 0x01	; 1
	if ( OneWire::read_bit()) r |= bitMask;
    1b12:	c7 01       	movw	r24, r14
    1b14:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <_ZN7OneWire8read_bitEv>
    1b18:	81 11       	cpse	r24, r1
    1b1a:	01 2b       	or	r16, r17
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    1b1c:	11 0f       	add	r17, r17
    1b1e:	21 97       	sbiw	r28, 0x01	; 1
    1b20:	c1 f7       	brne	.-16     	; 0x1b12 <_ZN7OneWire4readEv+0x16>
	if ( OneWire::read_bit()) r |= bitMask;
    }
    return r;
}
    1b22:	80 2f       	mov	r24, r16
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	ff 90       	pop	r15
    1b2e:	ef 90       	pop	r14
    1b30:	08 95       	ret

00001b32 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
    1b32:	ef 92       	push	r14
    1b34:	ff 92       	push	r15
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	7c 01       	movw	r14, r24
    1b40:	8b 01       	movw	r16, r22
    uint8_t i;

    write(0x55);           // Choose ROM
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	65 e5       	ldi	r22, 0x55	; 85
    1b46:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <_ZN7OneWire5writeEhh>
    1b4a:	e8 01       	movw	r28, r16
    1b4c:	08 5f       	subi	r16, 0xF8	; 248
    1b4e:	1f 4f       	sbci	r17, 0xFF	; 255

    for (i = 0; i < 8; i++) write(rom[i]);
    1b50:	69 91       	ld	r22, Y+
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	c7 01       	movw	r24, r14
    1b56:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <_ZN7OneWire5writeEhh>
    1b5a:	c0 17       	cp	r28, r16
    1b5c:	d1 07       	cpc	r29, r17
    1b5e:	c1 f7       	brne	.-16     	; 0x1b50 <_ZN7OneWire6selectEPKh+0x1e>
}
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	08 95       	ret

00001b6e <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC);           // Skip ROM
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	6c ec       	ldi	r22, 0xCC	; 204
    1b72:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <_ZN7OneWire5writeEhh>
    1b76:	08 95       	ret

00001b78 <_ZN7OneWire12reset_searchEv>:
//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    1b78:	dc 01       	movw	r26, r24
  // reset the search state
  LastDiscrepancy = 0;
    1b7a:	1b 96       	adiw	r26, 0x0b	; 11
    1b7c:	1c 92       	st	X, r1
    1b7e:	1b 97       	sbiw	r26, 0x0b	; 11
  LastDeviceFlag = FALSE;
    1b80:	1d 96       	adiw	r26, 0x0d	; 13
    1b82:	1c 92       	st	X, r1
    1b84:	1d 97       	sbiw	r26, 0x0d	; 13
  LastFamilyDiscrepancy = 0;
    1b86:	1c 96       	adiw	r26, 0x0c	; 12
    1b88:	1c 92       	st	X, r1
    1b8a:	1c 97       	sbiw	r26, 0x0c	; 12
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
    1b8c:	1a 96       	adiw	r26, 0x0a	; 10
    1b8e:	1c 92       	st	X, r1
    1b90:	fc 01       	movw	r30, r24
    1b92:	3a 96       	adiw	r30, 0x0a	; 10
    1b94:	03 96       	adiw	r24, 0x03	; 3
    1b96:	12 92       	st	-Z, r1
    if ( i == 0) break;
    1b98:	e8 17       	cp	r30, r24
    1b9a:	f9 07       	cpc	r31, r25
    1b9c:	e1 f7       	brne	.-8      	; 0x1b96 <_ZN7OneWire12reset_searchEv+0x1e>
  }
}
    1b9e:	08 95       	ret

00001ba0 <_ZN7OneWireC1Eh>:
*/

#include "OneWire.h"


OneWire::OneWire(uint8_t pin)
    1ba0:	1f 93       	push	r17
    1ba2:	cf 93       	push	r28
    1ba4:	df 93       	push	r29
    1ba6:	ec 01       	movw	r28, r24
    1ba8:	16 2f       	mov	r17, r22
{
	pinMode(pin, INPUT);
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	81 2f       	mov	r24, r17
    1bae:	0e 94 42 1c 	call	0x3884	; 0x3884 <pinMode>
	bitmask = PIN_TO_BITMASK(pin);
    1bb2:	61 2f       	mov	r22, r17
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	fb 01       	movw	r30, r22
    1bb8:	e3 58       	subi	r30, 0x83	; 131
    1bba:	fe 4f       	sbci	r31, 0xFE	; 254
    1bbc:	e4 91       	lpm	r30, Z
    1bbe:	e8 83       	st	Y, r30
	baseReg = PIN_TO_BASEREG(pin);
    1bc0:	fb 01       	movw	r30, r22
    1bc2:	ef 56       	subi	r30, 0x6F	; 111
    1bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc6:	e4 91       	lpm	r30, Z
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	ee 0f       	add	r30, r30
    1bcc:	ff 1f       	adc	r31, r31
    1bce:	eb 55       	subi	r30, 0x5B	; 91
    1bd0:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd2:	85 91       	lpm	r24, Z+
    1bd4:	94 91       	lpm	r25, Z
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
#if ONEWIRE_SEARCH
	reset_search();
    1bda:	ce 01       	movw	r24, r28
    1bdc:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <_ZN7OneWire12reset_searchEv>
#endif
}
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	1f 91       	pop	r17
    1be6:	08 95       	ret

00001be8 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
    1be8:	9f 92       	push	r9
    1bea:	af 92       	push	r10
    1bec:	bf 92       	push	r11
    1bee:	cf 92       	push	r12
    1bf0:	df 92       	push	r13
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	ec 01       	movw	r28, r24
    1c00:	c6 2e       	mov	r12, r22
    1c02:	d7 2e       	mov	r13, r23
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    1c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c06:	81 11       	cpse	r24, r1
    1c08:	61 c0       	rjmp	.+194    	; 0x1ccc <_ZN7OneWire6searchEPh+0xe4>
   {
      // 1-Wire reset
      if (!reset())
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN7OneWire5resetEv>
    1c10:	81 11       	cpse	r24, r1
    1c12:	04 c0       	rjmp	.+8      	; 0x1c1c <_ZN7OneWire6searchEPh+0x34>
      {
         // reset the search
         LastDiscrepancy = 0;
    1c14:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    1c16:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    1c18:	1c 86       	std	Y+12, r1	; 0x0c
         return FALSE;
    1c1a:	72 c0       	rjmp	.+228    	; 0x1d00 <_ZN7OneWire6searchEPh+0x118>
      }

      // issue the search command
      write(0xF0);
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
    1c1e:	60 ef       	ldi	r22, 0xF0	; 240
    1c20:	ce 01       	movw	r24, r28
    1c22:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <_ZN7OneWire5writeEhh>

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
   rom_byte_mask = 1;
    1c26:	01 e0       	ldi	r16, 0x01	; 1
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
    1c28:	f1 2c       	mov	r15, r1

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
    1c2a:	a1 2c       	mov	r10, r1
   uint8_t id_bit, cmp_id_bit;

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
    1c2c:	ee 24       	eor	r14, r14
    1c2e:	e3 94       	inc	r14
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    1c30:	bb 24       	eor	r11, r11
    1c32:	b3 94       	inc	r11
    1c34:	91 2c       	mov	r9, r1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    1c36:	ce 01       	movw	r24, r28
    1c38:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <_ZN7OneWire8read_bitEv>
    1c3c:	18 2f       	mov	r17, r24
         cmp_id_bit = read_bit();
    1c3e:	ce 01       	movw	r24, r28
    1c40:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    1c44:	11 30       	cpi	r17, 0x01	; 1
    1c46:	09 f0       	breq	.+2      	; 0x1c4a <_ZN7OneWire6searchEPh+0x62>
    1c48:	4d c0       	rjmp	.+154    	; 0x1ce4 <_ZN7OneWire6searchEPh+0xfc>
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	c9 f4       	brne	.+50     	; 0x1c80 <_ZN7OneWire6searchEPh+0x98>
    1c4e:	35 c0       	rjmp	.+106    	; 0x1cba <_ZN7OneWire6searchEPh+0xd2>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    1c50:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c52:	e8 16       	cp	r14, r24
    1c54:	48 f4       	brcc	.+18     	; 0x1c68 <_ZN7OneWire6searchEPh+0x80>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    1c56:	fe 01       	movw	r30, r28
    1c58:	ef 0d       	add	r30, r15
    1c5a:	f1 1d       	adc	r31, r1
    1c5c:	83 81       	ldd	r24, Z+3	; 0x03
    1c5e:	80 23       	and	r24, r16
    1c60:	1b 2d       	mov	r17, r11
    1c62:	29 f4       	brne	.+10     	; 0x1c6e <_ZN7OneWire6searchEPh+0x86>
    1c64:	19 2d       	mov	r17, r9
    1c66:	03 c0       	rjmp	.+6      	; 0x1c6e <_ZN7OneWire6searchEPh+0x86>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    1c68:	1b 2d       	mov	r17, r11
    1c6a:	e8 12       	cpse	r14, r24
    1c6c:	19 2d       	mov	r17, r9

               // if 0 was picked then record its position in LastZero
               if (search_direction == 0)
    1c6e:	11 11       	cpse	r17, r1
    1c70:	05 c0       	rjmp	.+10     	; 0x1c7c <_ZN7OneWire6searchEPh+0x94>
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    1c72:	88 e0       	ldi	r24, 0x08	; 8
    1c74:	8e 15       	cp	r24, r14
    1c76:	c8 f1       	brcs	.+114    	; 0x1cea <_ZN7OneWire6searchEPh+0x102>
                     LastFamilyDiscrepancy = last_zero;
    1c78:	ec 86       	std	Y+12, r14	; 0x0c
    1c7a:	37 c0       	rjmp	.+110    	; 0x1cea <_ZN7OneWire6searchEPh+0x102>
               }
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
    1c7c:	11 30       	cpi	r17, 0x01	; 1
    1c7e:	41 f4       	brne	.+16     	; 0x1c90 <_ZN7OneWire6searchEPh+0xa8>
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    1c80:	fe 01       	movw	r30, r28
    1c82:	ef 0d       	add	r30, r15
    1c84:	f1 1d       	adc	r31, r1
    1c86:	83 81       	ldd	r24, Z+3	; 0x03
    1c88:	80 2b       	or	r24, r16
    1c8a:	83 83       	std	Z+3, r24	; 0x03
    1c8c:	1b 2d       	mov	r17, r11
    1c8e:	08 c0       	rjmp	.+16     	; 0x1ca0 <_ZN7OneWire6searchEPh+0xb8>
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    1c90:	fe 01       	movw	r30, r28
    1c92:	ef 0d       	add	r30, r15
    1c94:	f1 1d       	adc	r31, r1
    1c96:	93 81       	ldd	r25, Z+3	; 0x03
    1c98:	80 2f       	mov	r24, r16
    1c9a:	80 95       	com	r24
    1c9c:	89 23       	and	r24, r25
    1c9e:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    1ca0:	61 2f       	mov	r22, r17
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    1ca8:	e3 94       	inc	r14
            rom_byte_mask <<= 1;
    1caa:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    1cac:	11 f4       	brne	.+4      	; 0x1cb2 <_ZN7OneWire6searchEPh+0xca>
            {
                rom_byte_number++;
    1cae:	f3 94       	inc	r15
                rom_byte_mask = 1;
    1cb0:	0b 2d       	mov	r16, r11

      // issue the search command
      write(0xF0);

      // loop to do the search
      do
    1cb2:	87 e0       	ldi	r24, 0x07	; 7
    1cb4:	8f 15       	cp	r24, r15
    1cb6:	08 f0       	brcs	.+2      	; 0x1cba <_ZN7OneWire6searchEPh+0xd2>
    1cb8:	be cf       	rjmp	.-132    	; 0x1c36 <_ZN7OneWire6searchEPh+0x4e>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
    1cba:	80 e4       	ldi	r24, 0x40	; 64
    1cbc:	8e 15       	cp	r24, r14
    1cbe:	30 f4       	brcc	.+12     	; 0x1ccc <_ZN7OneWire6searchEPh+0xe4>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    1cc0:	ab 86       	std	Y+11, r10	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    1cc2:	a1 10       	cpse	r10, r1
    1cc4:	14 c0       	rjmp	.+40     	; 0x1cee <_ZN7OneWire6searchEPh+0x106>
            LastDeviceFlag = TRUE;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	8d 87       	std	Y+13, r24	; 0x0d
    1cca:	11 c0       	rjmp	.+34     	; 0x1cee <_ZN7OneWire6searchEPh+0x106>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    1ccc:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    1cce:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    1cd0:	1c 86       	std	Y+12, r1	; 0x0c
      search_result = FALSE;
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	15 c0       	rjmp	.+42     	; 0x1d00 <_ZN7OneWire6searchEPh+0x118>
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    1cd6:	81 91       	ld	r24, Z+
    1cd8:	8d 93       	st	X+, r24
    1cda:	ec 17       	cp	r30, r28
    1cdc:	fd 07       	cpc	r31, r29
    1cde:	d9 f7       	brne	.-10     	; 0x1cd6 <_ZN7OneWire6searchEPh+0xee>
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	0e c0       	rjmp	.+28     	; 0x1d00 <_ZN7OneWire6searchEPh+0x118>
         if ((id_bit == 1) && (cmp_id_bit == 1))
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    1ce4:	18 13       	cpse	r17, r24
    1ce6:	d4 cf       	rjmp	.-88     	; 0x1c90 <_ZN7OneWire6searchEPh+0xa8>
    1ce8:	b3 cf       	rjmp	.-154    	; 0x1c50 <_ZN7OneWire6searchEPh+0x68>
   uint8_t id_bit, cmp_id_bit;

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
    1cea:	ae 2c       	mov	r10, r14
    1cec:	d1 cf       	rjmp	.-94     	; 0x1c90 <_ZN7OneWire6searchEPh+0xa8>
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	88 23       	and	r24, r24
    1cf2:	61 f3       	breq	.-40     	; 0x1ccc <_ZN7OneWire6searchEPh+0xe4>
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	33 96       	adiw	r30, 0x03	; 3
    1cf8:	ac 2d       	mov	r26, r12
    1cfa:	bd 2d       	mov	r27, r13
    1cfc:	2b 96       	adiw	r28, 0x0b	; 11
    1cfe:	eb cf       	rjmp	.-42     	; 0x1cd6 <_ZN7OneWire6searchEPh+0xee>
      search_result = FALSE;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   }
   return search_result;
  }
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	bf 90       	pop	r11
    1d12:	af 90       	pop	r10
    1d14:	9f 90       	pop	r9
    1d16:	08 95       	ret

00001d18 <_ZN7OneWire4crc8EPKhh>:
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    1d18:	2f ef       	ldi	r18, 0xFF	; 255
    1d1a:	26 0f       	add	r18, r22
    1d1c:	66 23       	and	r22, r22
    1d1e:	69 f0       	breq	.+26     	; 0x1d3a <_ZN7OneWire4crc8EPKhh+0x22>
    1d20:	a8 2f       	mov	r26, r24
    1d22:	b9 2f       	mov	r27, r25
    1d24:	80 e0       	ldi	r24, 0x00	; 0
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    1d26:	9d 91       	ld	r25, X+
    1d28:	e8 2f       	mov	r30, r24
    1d2a:	e9 27       	eor	r30, r25
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	e8 59       	subi	r30, 0x98	; 152
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	84 91       	lpm	r24, Z
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    1d34:	21 50       	subi	r18, 0x01	; 1
    1d36:	b8 f7       	brcc	.-18     	; 0x1d26 <_ZN7OneWire4crc8EPKhh+0xe>
    1d38:	08 95       	ret
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;
    1d3a:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    1d3c:	08 95       	ret

00001d3e <_Z8i2c_initv>:
#define I2C_PULLUPS_ENABLE         PORTC |= 1<<4; PORTC |= 1<<5;   // PIN A4&A5 (SDA&SCL)
#define I2C_PULLUPS_DISABLE        PORTC &= ~(1<<4); PORTC &= ~(1<<5);

void i2c_init(void) {
	#if defined(INTERNAL_I2C_PULLUPS)
	I2C_PULLUPS_ENABLE
    1d3e:	44 9a       	sbi	0x08, 4	; 8
    1d40:	45 9a       	sbi	0x08, 5	; 8
	#else
	I2C_PULLUPS_DISABLE
	#endif
	TWSR = 0;                                    // no prescaler => prescaler = 1
    1d42:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = ((F_CPU / I2C_SPEED) - 16) / 2;   // change the I2C clock rate
    1d46:	80 e2       	ldi	r24, 0x20	; 32
    1d48:	80 93 b8 00 	sts	0x00B8, r24
	TWCR = 1<<TWEN;                              // enable twi module, no interrupt
    1d4c:	84 e0       	ldi	r24, 0x04	; 4
    1d4e:	80 93 bc 00 	sts	0x00BC, r24
    1d52:	08 95       	ret

00001d54 <_Z19waitTransmissionI2Cv>:
	return i2c_read(0);
}

void waitTransmissionI2C() {
	uint16_t count = 255;
	while (!(TWCR & (1<<TWINT))) {
    1d54:	8f ef       	ldi	r24, 0xFF	; 255
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	ec eb       	ldi	r30, 0xBC	; 188
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	0e c0       	rjmp	.+28     	; 0x1d7a <_Z19waitTransmissionI2Cv+0x26>
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
		count--;
		if (count==0) {              //we are in a blocking state => we don't insist
    1d60:	61 f4       	brne	.+24     	; 0x1d7a <_Z19waitTransmissionI2Cv+0x26>
			TWCR = 0;                  //and we force a reset on TWINT register
    1d62:	10 92 bc 00 	sts	0x00BC, r1
			//neutralizeTime = micros(); //we take a timestamp here to neutralize the value during a short delay
			i2c_errors_count++;
    1d66:	80 91 53 07 	lds	r24, 0x0753
    1d6a:	90 91 54 07 	lds	r25, 0x0754
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	90 93 54 07 	sts	0x0754, r25
    1d74:	80 93 53 07 	sts	0x0753, r24
			break;
    1d78:	08 95       	ret
	return i2c_read(0);
}

void waitTransmissionI2C() {
	uint16_t count = 255;
	while (!(TWCR & (1<<TWINT))) {
    1d7a:	20 81       	ld	r18, Z
    1d7c:	22 23       	and	r18, r18
    1d7e:	7c f7       	brge	.-34     	; 0x1d5e <_Z19waitTransmissionI2Cv+0xa>
    1d80:	08 95       	ret

00001d82 <_Z13i2c_rep_starth>:
		}
	}
}


void i2c_rep_start(uint8_t address) {
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	18 2f       	mov	r17, r24
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) ; // send REPEAT START condition
    1d8a:	cc eb       	ldi	r28, 0xBC	; 188
    1d8c:	d0 e0       	ldi	r29, 0x00	; 0
    1d8e:	84 ea       	ldi	r24, 0xA4	; 164
    1d90:	88 83       	st	Y, r24
	waitTransmissionI2C();                       // wait until transmission completed
    1d92:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_Z19waitTransmissionI2Cv>
	TWDR = address;                              // send device address
    1d96:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d9a:	84 e8       	ldi	r24, 0x84	; 132
    1d9c:	88 83       	st	Y, r24
	waitTransmissionI2C();                       // wail until transmission completed
    1d9e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_Z19waitTransmissionI2Cv>
}
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	08 95       	ret

00001daa <_Z9i2c_writeh>:
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
	//  while(TWCR & (1<<TWSTO));                // <- can produce a blocking state with some WMP clones
}

void i2c_write(uint8_t data ) {
	TWDR = data;                                 // send data to the previously addressed device
    1daa:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1dae:	84 e8       	ldi	r24, 0x84	; 132
    1db0:	80 93 bc 00 	sts	0x00BC, r24
	waitTransmissionI2C();
    1db4:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_Z19waitTransmissionI2Cv>
    1db8:	08 95       	ret

00001dba <_Z12i2c_writeReghhh>:
		*from = *to;
		*to = tray;
	}
}

void i2c_writeReg(uint8_t add, uint8_t reg, uint8_t val) {
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	d6 2f       	mov	r29, r22
    1dc0:	c4 2f       	mov	r28, r20
	i2c_rep_start(add<<1); // I2C write direction
    1dc2:	88 0f       	add	r24, r24
    1dc4:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_Z13i2c_rep_starth>
	i2c_write(reg);        // register selection
    1dc8:	8d 2f       	mov	r24, r29
    1dca:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <_Z9i2c_writeh>
	i2c_write(val);        // value to write in register
    1dce:	8c 2f       	mov	r24, r28
    1dd0:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <_Z9i2c_writeh>
	TWCR = (1<<TWINT) | (1<<TWEN);
	waitTransmissionI2C();                       // wail until transmission completed
}

void i2c_stop(void) {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    1dd4:	84 e9       	ldi	r24, 0x94	; 148
    1dd6:	80 93 bc 00 	sts	0x00BC, r24
void i2c_writeReg(uint8_t add, uint8_t reg, uint8_t val) {
	i2c_rep_start(add<<1); // I2C write direction
	i2c_write(reg);        // register selection
	i2c_write(val);        // value to write in register
	i2c_stop();
}
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	08 95       	ret

00001de0 <_Z17i2c_OLED_send_cmdh>:


void i2c_OLED_send_cmd(uint8_t command) {
	TWBR = ((F_CPU / 400000L) - 16) / 2; // change the I2C clock rate
    1de0:	92 e0       	ldi	r25, 0x02	; 2
    1de2:	90 93 b8 00 	sts	0x00B8, r25
	i2c_writeReg(OLED_address, 0x80, (uint8_t)command);
    1de6:	48 2f       	mov	r20, r24
    1de8:	60 e8       	ldi	r22, 0x80	; 128
    1dea:	8c e3       	ldi	r24, 0x3C	; 60
    1dec:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <_Z12i2c_writeReghhh>
    1df0:	08 95       	ret

00001df2 <_Z13i2c_OLED_initv>:
{
	i2c_OLED_init();
}

void  i2c_OLED_init(void){
	i2c_OLED_send_cmd(0xae);    //display off
    1df2:	8e ea       	ldi	r24, 0xAE	; 174
    1df4:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
	i2c_OLED_send_cmd(0x2e);    //deactivate scrolling
    1df8:	8e e2       	ldi	r24, 0x2E	; 46
    1dfa:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
	i2c_OLED_send_cmd(0xa4);          //SET All pixels OFF
    1dfe:	84 ea       	ldi	r24, 0xA4	; 164
    1e00:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
	//  i2c_OLED_send_cmd(0xa5);            //SET ALL pixels ON
	delay(50);
    1e04:	62 e3       	ldi	r22, 0x32	; 50
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>
	i2c_OLED_send_cmd(0x20);            //Set Memory Addressing Mode
    1e10:	80 e2       	ldi	r24, 0x20	; 32
    1e12:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
	i2c_OLED_send_cmd(0x02);            //Set Memory Addressing Mode to Page addressing mode(RESET)
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
	//  i2c_OLED_send_cmd(0xa0);      //colum address 0 mapped to SEG0 (POR)*** wires at bottom
	i2c_OLED_send_cmd(0xa1);    //colum address 127 mapped to SEG0 (POR) ** wires at top of board
    1e1c:	81 ea       	ldi	r24, 0xA1	; 161
    1e1e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
	//  i2c_OLED_send_cmd(0xC0);            // Scan from Right to Left (POR)         *** wires at bottom
	i2c_OLED_send_cmd(0xC8);          // Scan from Left to Right               ** wires at top
    1e22:	88 ec       	ldi	r24, 0xC8	; 200
    1e24:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
	i2c_OLED_send_cmd(0xa6);            // Set WHITE chars on BLACK backround
    1e28:	86 ea       	ldi	r24, 0xA6	; 166
    1e2a:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>

	//  i2c_OLED_send_cmd(0xa7);            // Set BLACK chars on WHITE backround
	i2c_OLED_send_cmd(0x81);            // 81 Setup CONTRAST CONTROL, following byte is the contrast Value
    1e2e:	81 e8       	ldi	r24, 0x81	; 129
    1e30:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
	i2c_OLED_send_cmd(0xff);            // af contrast value between 1 ( == dull) to 256 ( == bright)
    1e34:	8f ef       	ldi	r24, 0xFF	; 255
    1e36:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
	delay(20);
    1e3a:	64 e1       	ldi	r22, 0x14	; 20
    1e3c:	70 e0       	ldi	r23, 0x00	; 0
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>
	i2c_OLED_send_cmd(0xaf);          //display on
    1e46:	8f ea       	ldi	r24, 0xAF	; 175
    1e48:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
	delay(20);
    1e4c:	64 e1       	ldi	r22, 0x14	; 20
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>
    1e58:	08 95       	ret

00001e5a <_Z5setXYhh>:
}


//==========================================================//
void setXY(unsigned char row,unsigned char col)
{
    1e5a:	cf 93       	push	r28
    1e5c:	c6 2f       	mov	r28, r22
}

//==========================================================//
void sendcommand(unsigned char com)
{
	i2c_OLED_send_cmd(com);
    1e5e:	80 55       	subi	r24, 0x50	; 80
    1e60:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>

//==========================================================//
void setXY(unsigned char row,unsigned char col)
{
	sendcommand(0xb0+row);                //set page address
	sendcommand(0x00+(8*col&0x0f));       //set low col address
    1e64:	8c 2f       	mov	r24, r28
    1e66:	88 0f       	add	r24, r24
    1e68:	88 0f       	add	r24, r24
    1e6a:	88 0f       	add	r24, r24
}

//==========================================================//
void sendcommand(unsigned char com)
{
	i2c_OLED_send_cmd(com);
    1e6c:	88 70       	andi	r24, 0x08	; 8
    1e6e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
//==========================================================//
void setXY(unsigned char row,unsigned char col)
{
	sendcommand(0xb0+row);                //set page address
	sendcommand(0x00+(8*col&0x0f));       //set low col address
	sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
    1e72:	8c 2f       	mov	r24, r28
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	96 95       	lsr	r25
    1e78:	87 95       	ror	r24
    1e7a:	8f 70       	andi	r24, 0x0F	; 15
}

//==========================================================//
void sendcommand(unsigned char com)
{
	i2c_OLED_send_cmd(com);
    1e7c:	80 5f       	subi	r24, 0xF0	; 240
    1e7e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
void setXY(unsigned char row,unsigned char col)
{
	sendcommand(0xb0+row);                //set page address
	sendcommand(0x00+(8*col&0x0f));       //set low col address
	sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
}
    1e82:	cf 91       	pop	r28
    1e84:	08 95       	ret

00001e86 <_Z18i2c_OLED_send_byteh>:
	TWBR = ((F_CPU / 400000L) - 16) / 2; // change the I2C clock rate
	i2c_writeReg(OLED_address, 0x80, (uint8_t)command);
}

void i2c_OLED_send_byte(uint8_t val) {
	TWBR = ((F_CPU / 400000L) - 16) / 2; // change the I2C clock rate
    1e86:	92 e0       	ldi	r25, 0x02	; 2
    1e88:	90 93 b8 00 	sts	0x00B8, r25
	i2c_writeReg(OLED_address, 0x40, (uint8_t)val);
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	60 e4       	ldi	r22, 0x40	; 64
    1e90:	8c e3       	ldi	r24, 0x3C	; 60
    1e92:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <_Z12i2c_writeReghhh>
    1e96:	08 95       	ret

00001e98 <_Z13clear_displayv>:
	sendcommand(0xb0+row);                //set page address
	sendcommand(0x00+(8*col&0x0f));       //set low col address
	sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
}
void clear_display(void)
{
    1e98:	cf 93       	push	r28
    1e9a:	df 93       	push	r29
	unsigned char i,k;
	for(k=0;k<8;k++)
    1e9c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		setXY(k,0);
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	8d 2f       	mov	r24, r29
    1ea2:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_Z5setXYhh>
    1ea6:	c0 e0       	ldi	r28, 0x00	; 0
}

//==========================================================//
void SendChar(unsigned char data)
{
	i2c_OLED_send_byte(data);
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_Z18i2c_OLED_send_byteh>
	unsigned char i,k;
	for(k=0;k<8;k++)
	{
		setXY(k,0);
		{
			for(i=0;i<128;i++)     //clear all COL
    1eae:	cf 5f       	subi	r28, 0xFF	; 255
    1eb0:	c0 38       	cpi	r28, 0x80	; 128
    1eb2:	d1 f7       	brne	.-12     	; 0x1ea8 <_Z13clear_displayv+0x10>
	sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
}
void clear_display(void)
{
	unsigned char i,k;
	for(k=0;k<8;k++)
    1eb4:	df 5f       	subi	r29, 0xFF	; 255
    1eb6:	d8 30       	cpi	r29, 0x08	; 8
    1eb8:	91 f7       	brne	.-28     	; 0x1e9e <_Z13clear_displayv+0x6>
				SendChar(0);         //clear all COL
				//delay(10);
			}
		}
	}
}
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	08 95       	ret

00001ec0 <_Z7sendStrPKc>:
	delay(20);
}

//==========================================================//
void sendStr(const char *string)
{
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	ec 01       	movw	r28, r24
	unsigned char i=0;
	//setXY(0,0);
	while(*string)
    1ece:	88 81       	ld	r24, Y
    1ed0:	81 11       	cpse	r24, r1
    1ed2:	21 c0       	rjmp	.+66     	; 0x1f16 <_Z7sendStrPKc+0x56>
    1ed4:	25 c0       	rjmp	.+74     	; 0x1f20 <_Z7sendStrPKc+0x60>
	{
		for(i=0;i<8;i++)
		{
			SendChar(myFont[*string-0x20][i]);
    1ed6:	e8 81       	ld	r30, Y
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	b0 97       	sbiw	r30, 0x20	; 32
    1edc:	ee 0f       	add	r30, r30
    1ede:	ff 1f       	adc	r31, r31
    1ee0:	ee 0f       	add	r30, r30
    1ee2:	ff 1f       	adc	r31, r31
    1ee4:	ee 0f       	add	r30, r30
    1ee6:	ff 1f       	adc	r31, r31
    1ee8:	e0 0f       	add	r30, r16
    1eea:	f1 1f       	adc	r31, r17
    1eec:	ec 5f       	subi	r30, 0xFC	; 252
    1eee:	fe 4f       	sbci	r31, 0xFE	; 254
}

//==========================================================//
void SendChar(unsigned char data)
{
	i2c_OLED_send_byte(data);
    1ef0:	80 81       	ld	r24, Z
    1ef2:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_Z18i2c_OLED_send_byteh>
		for(i=0;i<8;i++)
		{
			SendChar(myFont[*string-0x20][i]);

			// SendChar(*string);
			delay(10);
    1ef6:	6a e0       	ldi	r22, 0x0A	; 10
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>
    1f02:	0f 5f       	subi	r16, 0xFF	; 255
    1f04:	1f 4f       	sbci	r17, 0xFF	; 255
{
	unsigned char i=0;
	//setXY(0,0);
	while(*string)
	{
		for(i=0;i<8;i++)
    1f06:	08 30       	cpi	r16, 0x08	; 8
    1f08:	11 05       	cpc	r17, r1
    1f0a:	29 f7       	brne	.-54     	; 0x1ed6 <_Z7sendStrPKc+0x16>
			SendChar(myFont[*string-0x20][i]);

			// SendChar(*string);
			delay(10);
		}
		*string++;
    1f0c:	21 96       	adiw	r28, 0x01	; 1
//==========================================================//
void sendStr(const char *string)
{
	unsigned char i=0;
	//setXY(0,0);
	while(*string)
    1f0e:	88 81       	ld	r24, Y
    1f10:	81 11       	cpse	r24, r1
    1f12:	03 c0       	rjmp	.+6      	; 0x1f1a <_Z7sendStrPKc+0x5a>
    1f14:	05 c0       	rjmp	.+10     	; 0x1f20 <_Z7sendStrPKc+0x60>
	delay(20);
}

//==========================================================//
void sendStr(const char *string)
{
    1f16:	e1 2c       	mov	r14, r1
    1f18:	f1 2c       	mov	r15, r1
    1f1a:	0e 2d       	mov	r16, r14
    1f1c:	1f 2d       	mov	r17, r15
    1f1e:	db cf       	rjmp	.-74     	; 0x1ed6 <_Z7sendStrPKc+0x16>
			// SendChar(*string);
			delay(10);
		}
		*string++;
	}
}
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	ff 90       	pop	r15
    1f2a:	ef 90       	pop	r14
    1f2c:	08 95       	ret

00001f2e <_Z14float_to_uCharf>:


#ifndef FLOAT_TO_UCHAR_H_
#define FLOAT_TO_UCHAR_H_

unsigned char* float_to_uChar(float inFloat){
    1f2e:	4f 92       	push	r4
    1f30:	5f 92       	push	r5
    1f32:	6f 92       	push	r6
    1f34:	7f 92       	push	r7
    1f36:	8f 92       	push	r8
    1f38:	9f 92       	push	r9
    1f3a:	af 92       	push	r10
    1f3c:	bf 92       	push	r11
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	2a 97       	sbiw	r28, 0x0a	; 10
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	66 2e       	mov	r6, r22
    1f60:	77 2e       	mov	r7, r23
    1f62:	98 2e       	mov	r9, r24
    1f64:	89 2e       	mov	r8, r25
	unsigned char buf[10];
	unsigned char temp = 0;
	float temp_inFloat = inFloat;
	int i = 0;
	if(inFloat / 100 >= 1){
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	48 ec       	ldi	r20, 0xC8	; 200
    1f6c:	52 e4       	ldi	r21, 0x42	; 66
    1f6e:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__divsf3>
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e8       	ldi	r20, 0x80	; 128
    1f78:	5f e3       	ldi	r21, 0x3F	; 63
    1f7a:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    1f7e:	88 23       	and	r24, r24
    1f80:	ac f1       	brlt	.+106    	; 0x1fec <_Z14float_to_uCharf+0xbe>
		temp = 0;
		while(inFloat > 100){
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	48 ec       	ldi	r20, 0xC8	; 200
    1f88:	52 e4       	ldi	r21, 0x42	; 66
    1f8a:	66 2d       	mov	r22, r6
    1f8c:	77 2d       	mov	r23, r7
    1f8e:	89 2d       	mov	r24, r9
    1f90:	98 2d       	mov	r25, r8
    1f92:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    1f96:	18 16       	cp	r1, r24
    1f98:	ec f4       	brge	.+58     	; 0x1fd4 <_Z14float_to_uCharf+0xa6>
    1f9a:	16 2d       	mov	r17, r6
    1f9c:	07 2d       	mov	r16, r7
    1f9e:	f9 2c       	mov	r15, r9
    1fa0:	e8 2c       	mov	r14, r8
    1fa2:	d1 2c       	mov	r13, r1
			inFloat-= 100;
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	48 ec       	ldi	r20, 0xC8	; 200
    1faa:	52 e4       	ldi	r21, 0x42	; 66
    1fac:	61 2f       	mov	r22, r17
    1fae:	70 2f       	mov	r23, r16
    1fb0:	8f 2d       	mov	r24, r15
    1fb2:	9e 2d       	mov	r25, r14
    1fb4:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__subsf3>
    1fb8:	16 2f       	mov	r17, r22
    1fba:	07 2f       	mov	r16, r23
    1fbc:	f8 2e       	mov	r15, r24
    1fbe:	e9 2e       	mov	r14, r25
			temp++;
    1fc0:	d3 94       	inc	r13
	unsigned char temp = 0;
	float temp_inFloat = inFloat;
	int i = 0;
	if(inFloat / 100 >= 1){
		temp = 0;
		while(inFloat > 100){
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	48 ec       	ldi	r20, 0xC8	; 200
    1fc8:	52 e4       	ldi	r21, 0x42	; 66
    1fca:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    1fce:	18 16       	cp	r1, r24
    1fd0:	4c f3       	brlt	.-46     	; 0x1fa4 <_Z14float_to_uCharf+0x76>
    1fd2:	05 c0       	rjmp	.+10     	; 0x1fde <_Z14float_to_uCharf+0xb0>
    1fd4:	16 2d       	mov	r17, r6
    1fd6:	07 2d       	mov	r16, r7
    1fd8:	f9 2c       	mov	r15, r9
    1fda:	e8 2c       	mov	r14, r8
    1fdc:	d1 2c       	mov	r13, r1
			inFloat-= 100;
			temp++;
		}
		buf[i] = temp + 48;
    1fde:	80 e3       	ldi	r24, 0x30	; 48
    1fe0:	8d 0d       	add	r24, r13
    1fe2:	89 83       	std	Y+1, r24	; 0x01
		i++;
    1fe4:	cc 24       	eor	r12, r12
    1fe6:	c3 94       	inc	r12
    1fe8:	d1 2c       	mov	r13, r1
    1fea:	06 c0       	rjmp	.+12     	; 0x1ff8 <_Z14float_to_uCharf+0xca>
    1fec:	16 2d       	mov	r17, r6
    1fee:	07 2d       	mov	r16, r7
    1ff0:	f9 2c       	mov	r15, r9
    1ff2:	e8 2c       	mov	r14, r8

unsigned char* float_to_uChar(float inFloat){
	unsigned char buf[10];
	unsigned char temp = 0;
	float temp_inFloat = inFloat;
	int i = 0;
    1ff4:	c1 2c       	mov	r12, r1
    1ff6:	d1 2c       	mov	r13, r1
			temp++;
		}
		buf[i] = temp + 48;
		i++;
	}
	if(inFloat / 10 >= 1){
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e2       	ldi	r20, 0x20	; 32
    1ffe:	51 e4       	ldi	r21, 0x41	; 65
    2000:	61 2f       	mov	r22, r17
    2002:	70 2f       	mov	r23, r16
    2004:	8f 2d       	mov	r24, r15
    2006:	9e 2d       	mov	r25, r14
    2008:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__divsf3>
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    2018:	88 23       	and	r24, r24
    201a:	84 f1       	brlt	.+96     	; 0x207c <_Z14float_to_uCharf+0x14e>
		temp = 0;
		while(inFloat >= 10){
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e2       	ldi	r20, 0x20	; 32
    2022:	51 e4       	ldi	r21, 0x41	; 65
    2024:	61 2f       	mov	r22, r17
    2026:	70 2f       	mov	r23, r16
    2028:	8f 2d       	mov	r24, r15
    202a:	9e 2d       	mov	r25, r14
    202c:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    2030:	88 23       	and	r24, r24
    2032:	cc f0       	brlt	.+50     	; 0x2066 <_Z14float_to_uCharf+0x138>
    2034:	b1 2c       	mov	r11, r1
			inFloat-= 10;
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e2       	ldi	r20, 0x20	; 32
    203c:	51 e4       	ldi	r21, 0x41	; 65
    203e:	61 2f       	mov	r22, r17
    2040:	70 2f       	mov	r23, r16
    2042:	8f 2d       	mov	r24, r15
    2044:	9e 2d       	mov	r25, r14
    2046:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__subsf3>
    204a:	16 2f       	mov	r17, r22
    204c:	07 2f       	mov	r16, r23
    204e:	f8 2e       	mov	r15, r24
    2050:	e9 2e       	mov	r14, r25
			temp++;
    2052:	b3 94       	inc	r11
		buf[i] = temp + 48;
		i++;
	}
	if(inFloat / 10 >= 1){
		temp = 0;
		while(inFloat >= 10){
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e2       	ldi	r20, 0x20	; 32
    205a:	51 e4       	ldi	r21, 0x41	; 65
    205c:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    2060:	88 23       	and	r24, r24
    2062:	4c f7       	brge	.-46     	; 0x2036 <_Z14float_to_uCharf+0x108>
    2064:	01 c0       	rjmp	.+2      	; 0x2068 <_Z14float_to_uCharf+0x13a>
    2066:	b1 2c       	mov	r11, r1
			inFloat-= 10;
			temp++;
		}
		buf[i] = temp+48;
    2068:	fe 01       	movw	r30, r28
    206a:	ec 0d       	add	r30, r12
    206c:	fd 1d       	adc	r31, r13
    206e:	80 e3       	ldi	r24, 0x30	; 48
    2070:	8b 0d       	add	r24, r11
    2072:	81 83       	std	Z+1, r24	; 0x01
		i++;
    2074:	8f ef       	ldi	r24, 0xFF	; 255
    2076:	c8 1a       	sub	r12, r24
    2078:	d8 0a       	sbc	r13, r24
    207a:	08 c0       	rjmp	.+16     	; 0x208c <_Z14float_to_uCharf+0x15e>
	}
	else{
		buf[i] = 48;
    207c:	fe 01       	movw	r30, r28
    207e:	ec 0d       	add	r30, r12
    2080:	fd 1d       	adc	r31, r13
    2082:	80 e3       	ldi	r24, 0x30	; 48
    2084:	81 83       	std	Z+1, r24	; 0x01
		i++;
    2086:	8f ef       	ldi	r24, 0xFF	; 255
    2088:	c8 1a       	sub	r12, r24
    208a:	d8 0a       	sbc	r13, r24
	}
	if(inFloat >= 0){
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	a9 01       	movw	r20, r18
    2092:	61 2f       	mov	r22, r17
    2094:	70 2f       	mov	r23, r16
    2096:	8f 2d       	mov	r24, r15
    2098:	9e 2d       	mov	r25, r14
    209a:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    209e:	88 23       	and	r24, r24
    20a0:	0c f4       	brge	.+2      	; 0x20a4 <_Z14float_to_uCharf+0x176>
    20a2:	af c0       	rjmp	.+350    	; 0x2202 <_Z14float_to_uCharf+0x2d4>
		temp = 0;
		while(inFloat >= 1){
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	61 2f       	mov	r22, r17
    20ae:	70 2f       	mov	r23, r16
    20b0:	8f 2d       	mov	r24, r15
    20b2:	9e 2d       	mov	r25, r14
    20b4:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    20b8:	88 23       	and	r24, r24
    20ba:	cc f0       	brlt	.+50     	; 0x20ee <_Z14float_to_uCharf+0x1c0>
    20bc:	b1 2c       	mov	r11, r1
			inFloat--;
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e8       	ldi	r20, 0x80	; 128
    20c4:	5f e3       	ldi	r21, 0x3F	; 63
    20c6:	61 2f       	mov	r22, r17
    20c8:	70 2f       	mov	r23, r16
    20ca:	8f 2d       	mov	r24, r15
    20cc:	9e 2d       	mov	r25, r14
    20ce:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__subsf3>
    20d2:	16 2f       	mov	r17, r22
    20d4:	07 2f       	mov	r16, r23
    20d6:	f8 2e       	mov	r15, r24
    20d8:	e9 2e       	mov	r14, r25
			temp++;
    20da:	b3 94       	inc	r11
		buf[i] = 48;
		i++;
	}
	if(inFloat >= 0){
		temp = 0;
		while(inFloat >= 1){
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e8       	ldi	r20, 0x80	; 128
    20e2:	5f e3       	ldi	r21, 0x3F	; 63
    20e4:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    20e8:	88 23       	and	r24, r24
    20ea:	4c f7       	brge	.-46     	; 0x20be <_Z14float_to_uCharf+0x190>
    20ec:	01 c0       	rjmp	.+2      	; 0x20f0 <_Z14float_to_uCharf+0x1c2>
    20ee:	b1 2c       	mov	r11, r1
			inFloat--;
			temp++;
		}
		buf[i] = temp + 48;
    20f0:	e1 e0       	ldi	r30, 0x01	; 1
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	ec 0f       	add	r30, r28
    20f6:	fd 1f       	adc	r31, r29
    20f8:	ec 0d       	add	r30, r12
    20fa:	fd 1d       	adc	r31, r13
    20fc:	80 e3       	ldi	r24, 0x30	; 48
    20fe:	8b 0d       	add	r24, r11
    2100:	80 83       	st	Z, r24
		i++;
    2102:	56 01       	movw	r10, r12
    2104:	8f ef       	ldi	r24, 0xFF	; 255
    2106:	a8 1a       	sub	r10, r24
    2108:	b8 0a       	sbc	r11, r24
	}
	
	buf[i] = '.';
    210a:	e1 e0       	ldi	r30, 0x01	; 1
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	ec 0f       	add	r30, r28
    2110:	fd 1f       	adc	r31, r29
    2112:	ea 0d       	add	r30, r10
    2114:	fb 1d       	adc	r31, r11
    2116:	8e e2       	ldi	r24, 0x2E	; 46
    2118:	80 83       	st	Z, r24
	i++;
    211a:	26 01       	movw	r4, r12
    211c:	82 e0       	ldi	r24, 0x02	; 2
    211e:	48 0e       	add	r4, r24
    2120:	51 1c       	adc	r5, r1
	
	if(inFloat >= 0.1){
    2122:	2d ec       	ldi	r18, 0xCD	; 205
    2124:	3c ec       	ldi	r19, 0xCC	; 204
    2126:	4c ec       	ldi	r20, 0xCC	; 204
    2128:	5d e3       	ldi	r21, 0x3D	; 61
    212a:	61 2f       	mov	r22, r17
    212c:	70 2f       	mov	r23, r16
    212e:	8f 2d       	mov	r24, r15
    2130:	9e 2d       	mov	r25, r14
    2132:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    2136:	88 23       	and	r24, r24
    2138:	14 f4       	brge	.+4      	; 0x213e <_Z14float_to_uCharf+0x210>
    213a:	23 c0       	rjmp	.+70     	; 0x2182 <_Z14float_to_uCharf+0x254>
    213c:	56 01       	movw	r10, r12
    213e:	d1 2c       	mov	r13, r1
		temp = 0;
		while(inFloat >= 0.1){
			inFloat -= 0.1;
    2140:	2d ec       	ldi	r18, 0xCD	; 205
    2142:	3c ec       	ldi	r19, 0xCC	; 204
    2144:	4c ec       	ldi	r20, 0xCC	; 204
    2146:	5d e3       	ldi	r21, 0x3D	; 61
    2148:	61 2f       	mov	r22, r17
    214a:	70 2f       	mov	r23, r16
    214c:	8f 2d       	mov	r24, r15
    214e:	9e 2d       	mov	r25, r14
    2150:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__subsf3>
    2154:	16 2f       	mov	r17, r22
    2156:	07 2f       	mov	r16, r23
    2158:	f8 2e       	mov	r15, r24
    215a:	e9 2e       	mov	r14, r25
			temp+= 1;
    215c:	d3 94       	inc	r13
	buf[i] = '.';
	i++;
	
	if(inFloat >= 0.1){
		temp = 0;
		while(inFloat >= 0.1){
    215e:	2d ec       	ldi	r18, 0xCD	; 205
    2160:	3c ec       	ldi	r19, 0xCC	; 204
    2162:	4c ec       	ldi	r20, 0xCC	; 204
    2164:	5d e3       	ldi	r21, 0x3D	; 61
    2166:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    216a:	88 23       	and	r24, r24
    216c:	4c f7       	brge	.-46     	; 0x2140 <_Z14float_to_uCharf+0x212>
			inFloat -= 0.1;
			temp+= 1;
		}
		buf[i] = temp + 48;
    216e:	fe 01       	movw	r30, r28
    2170:	e4 0d       	add	r30, r4
    2172:	f5 1d       	adc	r31, r5
    2174:	80 e3       	ldi	r24, 0x30	; 48
    2176:	8d 0d       	add	r24, r13
    2178:	81 83       	std	Z+1, r24	; 0x01
		i++;
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	a8 0e       	add	r10, r24
    217e:	b1 1c       	adc	r11, r1
    2180:	08 c0       	rjmp	.+16     	; 0x2192 <_Z14float_to_uCharf+0x264>
	}
	else {
		buf[i] = '0';
    2182:	fe 01       	movw	r30, r28
    2184:	e4 0d       	add	r30, r4
    2186:	f5 1d       	adc	r31, r5
    2188:	80 e3       	ldi	r24, 0x30	; 48
    218a:	81 83       	std	Z+1, r24	; 0x01
		i++;
    218c:	82 e0       	ldi	r24, 0x02	; 2
    218e:	a8 0e       	add	r10, r24
    2190:	b1 1c       	adc	r11, r1
	}
	temp = 0;
	if(inFloat >= 0.01){
    2192:	2a e0       	ldi	r18, 0x0A	; 10
    2194:	37 ed       	ldi	r19, 0xD7	; 215
    2196:	43 e2       	ldi	r20, 0x23	; 35
    2198:	5c e3       	ldi	r21, 0x3C	; 60
    219a:	61 2f       	mov	r22, r17
    219c:	70 2f       	mov	r23, r16
    219e:	8f 2d       	mov	r24, r15
    21a0:	9e 2d       	mov	r25, r14
    21a2:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    21a6:	88 23       	and	r24, r24
    21a8:	f4 f0       	brlt	.+60     	; 0x21e6 <_Z14float_to_uCharf+0x2b8>
    21aa:	d1 2c       	mov	r13, r1
		while(inFloat >= 0.01){
			inFloat -= 0.01;
    21ac:	2a e0       	ldi	r18, 0x0A	; 10
    21ae:	37 ed       	ldi	r19, 0xD7	; 215
    21b0:	43 e2       	ldi	r20, 0x23	; 35
    21b2:	5c e3       	ldi	r21, 0x3C	; 60
    21b4:	61 2f       	mov	r22, r17
    21b6:	70 2f       	mov	r23, r16
    21b8:	8f 2d       	mov	r24, r15
    21ba:	9e 2d       	mov	r25, r14
    21bc:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__subsf3>
    21c0:	16 2f       	mov	r17, r22
    21c2:	07 2f       	mov	r16, r23
    21c4:	f8 2e       	mov	r15, r24
    21c6:	e9 2e       	mov	r14, r25
			temp++;
    21c8:	d3 94       	inc	r13
		buf[i] = '0';
		i++;
	}
	temp = 0;
	if(inFloat >= 0.01){
		while(inFloat >= 0.01){
    21ca:	2a e0       	ldi	r18, 0x0A	; 10
    21cc:	37 ed       	ldi	r19, 0xD7	; 215
    21ce:	43 e2       	ldi	r20, 0x23	; 35
    21d0:	5c e3       	ldi	r21, 0x3C	; 60
    21d2:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    21d6:	88 23       	and	r24, r24
    21d8:	4c f7       	brge	.-46     	; 0x21ac <_Z14float_to_uCharf+0x27e>
			inFloat -= 0.01;
			temp++;
		}
		buf[i] = temp+48;
    21da:	fe 01       	movw	r30, r28
    21dc:	ea 0d       	add	r30, r10
    21de:	fb 1d       	adc	r31, r11
    21e0:	80 e3       	ldi	r24, 0x30	; 48
    21e2:	8d 0d       	add	r24, r13
    21e4:	81 83       	std	Z+1, r24	; 0x01
		i++;

	}
	if(temp_inFloat < 100.00)
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	48 ec       	ldi	r20, 0xC8	; 200
    21ec:	52 e4       	ldi	r21, 0x42	; 66
    21ee:	66 2d       	mov	r22, r6
    21f0:	77 2d       	mov	r23, r7
    21f2:	89 2d       	mov	r24, r9
    21f4:	98 2d       	mov	r25, r8
    21f6:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__cmpsf2>
    21fa:	88 23       	and	r24, r24
    21fc:	d4 f4       	brge	.+52     	; 0x2232 <_Z14float_to_uCharf+0x304>
	buf[5] = 0;
    21fe:	1e 82       	std	Y+6, r1	; 0x06
    2200:	18 c0       	rjmp	.+48     	; 0x2232 <_Z14float_to_uCharf+0x304>
		}
		buf[i] = temp + 48;
		i++;
	}
	
	buf[i] = '.';
    2202:	8e e2       	ldi	r24, 0x2E	; 46
    2204:	fe 01       	movw	r30, r28
    2206:	ec 0d       	add	r30, r12
    2208:	fd 1d       	adc	r31, r13
    220a:	81 83       	std	Z+1, r24	; 0x01
	i++;
    220c:	26 01       	movw	r4, r12
    220e:	8f ef       	ldi	r24, 0xFF	; 255
    2210:	48 1a       	sub	r4, r24
    2212:	58 0a       	sbc	r5, r24
	
	if(inFloat >= 0.1){
    2214:	2d ec       	ldi	r18, 0xCD	; 205
    2216:	3c ec       	ldi	r19, 0xCC	; 204
    2218:	4c ec       	ldi	r20, 0xCC	; 204
    221a:	5d e3       	ldi	r21, 0x3D	; 61
    221c:	61 2f       	mov	r22, r17
    221e:	70 2f       	mov	r23, r16
    2220:	8f 2d       	mov	r24, r15
    2222:	9e 2d       	mov	r25, r14
    2224:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    2228:	88 23       	and	r24, r24
    222a:	0c f0       	brlt	.+2      	; 0x222e <_Z14float_to_uCharf+0x300>
    222c:	87 cf       	rjmp	.-242    	; 0x213c <_Z14float_to_uCharf+0x20e>
    222e:	56 01       	movw	r10, r12
    2230:	a8 cf       	rjmp	.-176    	; 0x2182 <_Z14float_to_uCharf+0x254>

	}
	if(temp_inFloat < 100.00)
	buf[5] = 0;

	delay(1);
    2232:	61 e0       	ldi	r22, 0x01	; 1
    2234:	70 e0       	ldi	r23, 0x00	; 0
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>

	return buf;
}
    223e:	ce 01       	movw	r24, r28
    2240:	01 96       	adiw	r24, 0x01	; 1
    2242:	2a 96       	adiw	r28, 0x0a	; 10
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	1f 91       	pop	r17
    2254:	0f 91       	pop	r16
    2256:	ff 90       	pop	r15
    2258:	ef 90       	pop	r14
    225a:	df 90       	pop	r13
    225c:	cf 90       	pop	r12
    225e:	bf 90       	pop	r11
    2260:	af 90       	pop	r10
    2262:	9f 90       	pop	r9
    2264:	8f 90       	pop	r8
    2266:	7f 90       	pop	r7
    2268:	6f 90       	pop	r6
    226a:	5f 90       	pop	r5
    226c:	4f 90       	pop	r4
    226e:	08 95       	ret

00002270 <_Z6tempSMv>:
DallasTemperature sensors(&oneWire);
//



void tempSM(){
    2270:	4f 92       	push	r4
    2272:	5f 92       	push	r5
    2274:	6f 92       	push	r6
    2276:	7f 92       	push	r7
    2278:	8f 92       	push	r8
    227a:	9f 92       	push	r9
    227c:	af 92       	push	r10
    227e:	bf 92       	push	r11
    2280:	ef 92       	push	r14
    2282:	ff 92       	push	r15
    2284:	0f 93       	push	r16
    2286:	1f 93       	push	r17
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	62 97       	sbiw	r28, 0x12	; 18
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	de bf       	out	0x3e, r29	; 62
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	cd bf       	out	0x3d, r28	; 61
	int numberOfDevices; // Number of temperature devices found

	DeviceAddress tempDeviceAddress; // We'll use this variable to store a found device address

	// For testing purposes, reset the bus every loop so we can see if any devices appear or fall off
	sensors.begin();
    229c:	89 e2       	ldi	r24, 0x29	; 41
    229e:	97 e0       	ldi	r25, 0x07	; 7
    22a0:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZN17DallasTemperature5beginEv>

	// Grab a count of devices on the wire
	numberOfDevices = sensors.getDeviceCount();
    22a4:	89 e2       	ldi	r24, 0x29	; 41
    22a6:	97 e0       	ldi	r25, 0x07	; 7
    22a8:	0e 94 ad 09 	call	0x135a	; 0x135a <_ZN17DallasTemperature14getDeviceCountEv>
    22ac:	e8 2e       	mov	r14, r24
    22ae:	f1 2c       	mov	r15, r1

	//Serial.print(" Parasite:");
	if (sensors.isParasitePowerMode()) Serial.print("ON ");
    22b0:	89 e2       	ldi	r24, 0x29	; 41
    22b2:	97 e0       	ldi	r25, 0x07	; 7
    22b4:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN17DallasTemperature19isParasitePowerModeEv>
    22b8:	88 23       	and	r24, r24
    22ba:	39 f0       	breq	.+14     	; 0x22ca <_Z6tempSMv+0x5a>
    22bc:	6d e0       	ldi	r22, 0x0D	; 13
    22be:	74 e0       	ldi	r23, 0x04	; 4
    22c0:	89 e9       	ldi	r24, 0x99	; 153
    22c2:	97 e0       	ldi	r25, 0x07	; 7
    22c4:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>
    22c8:	04 c0       	rjmp	.+8      	; 0x22d2 <_Z6tempSMv+0x62>

	//Serial.print("Count:");
	//Serial.print(numberOfDevices, DEC);
	// report parasite power requirements

	sensors.requestTemperatures(); // Send the command to get temperatures
    22ca:	89 e2       	ldi	r24, 0x29	; 41
    22cc:	97 e0       	ldi	r25, 0x07	; 7
    22ce:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN17DallasTemperature19requestTemperaturesEv>

	// Loop through each device, print out temperature data
	for(int i=0;i<numberOfDevices; i++)
    22d2:	1e 14       	cp	r1, r14
    22d4:	1f 04       	cpc	r1, r15
    22d6:	0c f0       	brlt	.+2      	; 0x22da <_Z6tempSMv+0x6a>
    22d8:	a2 c0       	rjmp	.+324    	; 0x241e <_Z6tempSMv+0x1ae>
    22da:	00 e0       	ldi	r16, 0x00	; 0
    22dc:	10 e0       	ldi	r17, 0x00	; 0
	{
		// Search the wire for address
		if(sensors.getAddress(tempDeviceAddress, i))
    22de:	40 2f       	mov	r20, r16
    22e0:	be 01       	movw	r22, r28
    22e2:	65 5f       	subi	r22, 0xF5	; 245
    22e4:	7f 4f       	sbci	r23, 0xFF	; 255
    22e6:	89 e2       	ldi	r24, 0x29	; 41
    22e8:	97 e0       	ldi	r25, 0x07	; 7
    22ea:	0e 94 bf 09 	call	0x137e	; 0x137e <_ZN17DallasTemperature10getAddressEPhh>
    22ee:	88 23       	and	r24, r24
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <_Z6tempSMv+0x84>
    22f2:	8f c0       	rjmp	.+286    	; 0x2412 <_Z6tempSMv+0x1a2>
		{
			// Output the device ID
			Serial.print(" #");
    22f4:	61 e1       	ldi	r22, 0x11	; 17
    22f6:	74 e0       	ldi	r23, 0x04	; 4
    22f8:	89 e9       	ldi	r24, 0x99	; 153
    22fa:	97 e0       	ldi	r25, 0x07	; 7
    22fc:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>
			Serial.print(i,DEC);
    2300:	4a e0       	ldi	r20, 0x0A	; 10
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	b8 01       	movw	r22, r16
    2306:	89 e9       	ldi	r24, 0x99	; 153
    2308:	97 e0       	ldi	r25, 0x07	; 7
    230a:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <_ZN5Print5printEii>
			Serial.print("=");
    230e:	64 e1       	ldi	r22, 0x14	; 20
    2310:	74 e0       	ldi	r23, 0x04	; 4
    2312:	89 e9       	ldi	r24, 0x99	; 153
    2314:	97 e0       	ldi	r25, 0x07	; 7
    2316:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>


			float tempC = sensors.getTempC(tempDeviceAddress);
    231a:	be 01       	movw	r22, r28
    231c:	65 5f       	subi	r22, 0xF5	; 245
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	89 e2       	ldi	r24, 0x29	; 41
    2322:	97 e0       	ldi	r25, 0x07	; 7
    2324:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <_ZN17DallasTemperature8getTempCEPh>
    2328:	2b 01       	movw	r4, r22
    232a:	3c 01       	movw	r6, r24
			float tempF = DallasTemperature::toFahrenheit(tempC);
    232c:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN17DallasTemperature12toFahrenheitEf>
    2330:	4b 01       	movw	r8, r22
    2332:	5c 01       	movw	r10, r24
			Serial.println(DallasTemperature::toFahrenheit(tempC)); // Converts tempC to Fahrenheit
    2334:	c3 01       	movw	r24, r6
    2336:	b2 01       	movw	r22, r4
    2338:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN17DallasTemperature12toFahrenheitEf>
    233c:	ab 01       	movw	r20, r22
    233e:	bc 01       	movw	r22, r24
    2340:	22 e0       	ldi	r18, 0x02	; 2
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	89 e9       	ldi	r24, 0x99	; 153
    2346:	97 e0       	ldi	r25, 0x07	; 7
    2348:	0e 94 26 1a 	call	0x344c	; 0x344c <_ZN5Print7printlnEdi>
			setXY(1, 7);
    234c:	67 e0       	ldi	r22, 0x07	; 7
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_Z5setXYhh>
			unsigned char* tempF_uchar;
			tempF_uchar = float_to_uChar(tempF);
    2354:	c5 01       	movw	r24, r10
    2356:	b4 01       	movw	r22, r8
    2358:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_Z14float_to_uCharf>
    235c:	fc 01       	movw	r30, r24
    235e:	de 01       	movw	r26, r28
    2360:	11 96       	adiw	r26, 0x01	; 1
    2362:	9c 01       	movw	r18, r24
    2364:	29 5f       	subi	r18, 0xF9	; 249
    2366:	3f 4f       	sbci	r19, 0xFF	; 255
			char uchar[10];
			for(unsigned int i = 0; i < 7; i++){
				uchar[i] = (unsigned char)tempF_uchar[i];
    2368:	91 91       	ld	r25, Z+
				if(uchar[i] > 57)
    236a:	9a 33       	cpi	r25, 0x3A	; 58
    236c:	10 f4       	brcc	.+4      	; 0x2372 <_Z6tempSMv+0x102>
			setXY(1, 7);
			unsigned char* tempF_uchar;
			tempF_uchar = float_to_uChar(tempF);
			char uchar[10];
			for(unsigned int i = 0; i < 7; i++){
				uchar[i] = (unsigned char)tempF_uchar[i];
    236e:	9c 93       	st	X, r25
    2370:	01 c0       	rjmp	.+2      	; 0x2374 <_Z6tempSMv+0x104>
				if(uchar[i] > 57)
				uchar[i] = 0;
    2372:	1c 92       	st	X, r1
    2374:	11 96       	adiw	r26, 0x01	; 1
			Serial.println(DallasTemperature::toFahrenheit(tempC)); // Converts tempC to Fahrenheit
			setXY(1, 7);
			unsigned char* tempF_uchar;
			tempF_uchar = float_to_uChar(tempF);
			char uchar[10];
			for(unsigned int i = 0; i < 7; i++){
    2376:	e2 17       	cp	r30, r18
    2378:	f3 07       	cpc	r31, r19
    237a:	b1 f7       	brne	.-20     	; 0x2368 <_Z6tempSMv+0xf8>
				uchar[i] = (unsigned char)tempF_uchar[i];
				if(uchar[i] > 57)
				uchar[i] = 0;
			}

			sendStr(uchar);
    237c:	ce 01       	movw	r24, r28
    237e:	01 96       	adiw	r24, 0x01	; 1
    2380:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_Z7sendStrPKc>

			if(low_temp > tempF || low_temp == 0){
    2384:	40 90 4b 07 	lds	r4, 0x074B
    2388:	50 90 4c 07 	lds	r5, 0x074C
    238c:	60 90 4d 07 	lds	r6, 0x074D
    2390:	70 90 4e 07 	lds	r7, 0x074E
    2394:	a3 01       	movw	r20, r6
    2396:	92 01       	movw	r18, r4
    2398:	c5 01       	movw	r24, r10
    239a:	b4 01       	movw	r22, r8
    239c:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__cmpsf2>
    23a0:	88 23       	and	r24, r24
    23a2:	4c f0       	brlt	.+18     	; 0x23b6 <_Z6tempSMv+0x146>
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	a9 01       	movw	r20, r18
    23aa:	c3 01       	movw	r24, r6
    23ac:	b2 01       	movw	r22, r4
    23ae:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__cmpsf2>
    23b2:	81 11       	cpse	r24, r1
    23b4:	10 c0       	rjmp	.+32     	; 0x23d6 <_Z6tempSMv+0x166>
				low_temp = tempF;
    23b6:	80 92 4b 07 	sts	0x074B, r8
    23ba:	90 92 4c 07 	sts	0x074C, r9
    23be:	a0 92 4d 07 	sts	0x074D, r10
    23c2:	b0 92 4e 07 	sts	0x074E, r11
				setXY(4, 6);
    23c6:	66 e0       	ldi	r22, 0x06	; 6
    23c8:	84 e0       	ldi	r24, 0x04	; 4
    23ca:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_Z5setXYhh>
				sendStr(uchar);
    23ce:	ce 01       	movw	r24, r28
    23d0:	01 96       	adiw	r24, 0x01	; 1
    23d2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_Z7sendStrPKc>
			}
			if(max_temp < tempF){
    23d6:	20 91 4f 07 	lds	r18, 0x074F
    23da:	30 91 50 07 	lds	r19, 0x0750
    23de:	40 91 51 07 	lds	r20, 0x0751
    23e2:	50 91 52 07 	lds	r21, 0x0752
    23e6:	c5 01       	movw	r24, r10
    23e8:	b4 01       	movw	r22, r8
    23ea:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    23ee:	18 16       	cp	r1, r24
    23f0:	84 f4       	brge	.+32     	; 0x2412 <_Z6tempSMv+0x1a2>
				max_temp = tempF;
    23f2:	80 92 4f 07 	sts	0x074F, r8
    23f6:	90 92 50 07 	sts	0x0750, r9
    23fa:	a0 92 51 07 	sts	0x0751, r10
    23fe:	b0 92 52 07 	sts	0x0752, r11
				setXY(5, 6);
    2402:	66 e0       	ldi	r22, 0x06	; 6
    2404:	85 e0       	ldi	r24, 0x05	; 5
    2406:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_Z5setXYhh>
				sendStr(uchar);
    240a:	ce 01       	movw	r24, r28
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_Z7sendStrPKc>
	// report parasite power requirements

	sensors.requestTemperatures(); // Send the command to get temperatures

	// Loop through each device, print out temperature data
	for(int i=0;i<numberOfDevices; i++)
    2412:	0f 5f       	subi	r16, 0xFF	; 255
    2414:	1f 4f       	sbci	r17, 0xFF	; 255
    2416:	e0 16       	cp	r14, r16
    2418:	f1 06       	cpc	r15, r17
    241a:	09 f0       	breq	.+2      	; 0x241e <_Z6tempSMv+0x1ae>
    241c:	60 cf       	rjmp	.-320    	; 0x22de <_Z6tempSMv+0x6e>
		}
		//else ghost device! Check your power requirements and cabling
		
	}

}
    241e:	62 96       	adiw	r28, 0x12	; 18
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	df 91       	pop	r29
    242c:	cf 91       	pop	r28
    242e:	1f 91       	pop	r17
    2430:	0f 91       	pop	r16
    2432:	ff 90       	pop	r15
    2434:	ef 90       	pop	r14
    2436:	bf 90       	pop	r11
    2438:	af 90       	pop	r10
    243a:	9f 90       	pop	r9
    243c:	8f 90       	pop	r8
    243e:	7f 90       	pop	r7
    2440:	6f 90       	pop	r6
    2442:	5f 90       	pop	r5
    2444:	4f 90       	pop	r4
    2446:	08 95       	ret

00002448 <setup>:
void setup() {
	// put your setup code here, to run once:
	//Serial.begin(57600);
	//dbg_tx_init();
	
	delay(100);
    2448:	64 e6       	ldi	r22, 0x64	; 100
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>
	wifiPort.begin(38400);
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	56 e9       	ldi	r21, 0x96	; 150
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	8a e0       	ldi	r24, 0x0A	; 10
    245e:	97 e0       	ldi	r25, 0x07	; 7
    2460:	0e 94 24 15 	call	0x2a48	; 0x2a48 <_ZN14SoftwareSerial5beginEl>
	wifiPort.println("begin wifiport Serial");
    2464:	66 e1       	ldi	r22, 0x16	; 22
    2466:	74 e0       	ldi	r23, 0x04	; 4
    2468:	8a e0       	ldi	r24, 0x0A	; 10
    246a:	97 e0       	ldi	r25, 0x07	; 7
    246c:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Print7printlnEPKc>
	delay(100);
    2470:	64 e6       	ldi	r22, 0x64	; 100
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    247c:	26 e0       	ldi	r18, 0x06	; 6
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	56 e9       	ldi	r21, 0x96	; 150
    2482:	60 e0       	ldi	r22, 0x00	; 0
    2484:	70 e0       	ldi	r23, 0x00	; 0
    2486:	89 e9       	ldi	r24, 0x99	; 153
    2488:	97 e0       	ldi	r25, 0x07	; 7
    248a:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_ZN14HardwareSerial5beginEmh>
	// start serial port
	Serial.begin(38400);
	Serial.println("Dallas Temperature IC Control Library Demo");
    248e:	6c e2       	ldi	r22, 0x2C	; 44
    2490:	74 e0       	ldi	r23, 0x04	; 4
    2492:	89 e9       	ldi	r24, 0x99	; 153
    2494:	97 e0       	ldi	r25, 0x07	; 7
    2496:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Print7printlnEPKc>
	
	

	//  Wire.begin();
	i2c_init();
    249a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <_Z8i2c_initv>
	TWCR = 1<<TWEN;                              // enable twi module, no interrupt
}

void init_OLED(void)
{
	i2c_OLED_init();
    249e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_Z13i2c_OLED_initv>
	init_OLED();
	delay(10);
    24a2:	6a e0       	ldi	r22, 0x0A	; 10
    24a4:	70 e0       	ldi	r23, 0x00	; 0
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>
	clear_display();
    24ae:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <_Z13clear_displayv>
	delay(50);
    24b2:	62 e3       	ldi	r22, 0x32	; 50
    24b4:	70 e0       	ldi	r23, 0x00	; 0
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>
}

//==========================================================//
void sendcommand(unsigned char com)
{
	i2c_OLED_send_cmd(com);
    24be:	80 e2       	ldi	r24, 0x20	; 32
    24c0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
    24c4:	82 e0       	ldi	r24, 0x02	; 2
    24c6:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
    24ca:	86 ea       	ldi	r24, 0xA6	; 166
    24cc:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_Z17i2c_OLED_send_cmdh>
	sendcommand(0x02);            //Set Memory Addressing Mode ab Page addressing mode(RESET)

	sendcommand(0xa6);            //Set Normal Display (default)


	setXY(1,1);
    24d0:	61 e0       	ldi	r22, 0x01	; 1
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_Z5setXYhh>
	sendStr(fill_string1);
    24d8:	84 e7       	ldi	r24, 0x74	; 116
    24da:	94 e0       	ldi	r25, 0x04	; 4
    24dc:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_Z7sendStrPKc>
	setXY(2,1);
    24e0:	61 e0       	ldi	r22, 0x01	; 1
    24e2:	82 e0       	ldi	r24, 0x02	; 2
    24e4:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_Z5setXYhh>
	sendStr(fill_string2);
    24e8:	8c e6       	ldi	r24, 0x6C	; 108
    24ea:	94 e0       	ldi	r25, 0x04	; 4
    24ec:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_Z7sendStrPKc>

	setXY(4, 1);
    24f0:	61 e0       	ldi	r22, 0x01	; 1
    24f2:	84 e0       	ldi	r24, 0x04	; 4
    24f4:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_Z5setXYhh>
	sendStr(fill_string3);
    24f8:	86 e6       	ldi	r24, 0x66	; 102
    24fa:	94 e0       	ldi	r25, 0x04	; 4
    24fc:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_Z7sendStrPKc>
	setXY(5, 1);
    2500:	61 e0       	ldi	r22, 0x01	; 1
    2502:	85 e0       	ldi	r24, 0x05	; 5
    2504:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_Z5setXYhh>
	sendStr(fill_string4);
    2508:	80 e6       	ldi	r24, 0x60	; 96
    250a:	94 e0       	ldi	r25, 0x04	; 4
    250c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_Z7sendStrPKc>
	
	delay(10);
    2510:	6a e0       	ldi	r22, 0x0A	; 10
    2512:	70 e0       	ldi	r23, 0x00	; 0
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>
    251c:	08 95       	ret

0000251e <loop>:
	//dbg_putchar('a');
}

void loop() {
    251e:	0f 93       	push	r16
    2520:	1f 93       	push	r17
    2522:	cf 93       	push	r28
    2524:	df 93       	push	r29
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	2a 97       	sbiw	r28, 0x0a	; 10
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
	// put your main code here, to run repeatedly:
	
	wifiPort.println("hello");
    2536:	67 e5       	ldi	r22, 0x57	; 87
    2538:	74 e0       	ldi	r23, 0x04	; 4
    253a:	8a e0       	ldi	r24, 0x0A	; 10
    253c:	97 e0       	ldi	r25, 0x07	; 7
    253e:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN5Print7printlnEPKc>

	
	tempSM();
    2542:	0e 94 38 11 	call	0x2270	; 0x2270 <_Z6tempSMv>
	
	//Serial.println("");
	char buf[10];
	
	sprintf(buf,"%d",counter);
    2546:	80 91 4a 07 	lds	r24, 0x074A
    254a:	1f 92       	push	r1
    254c:	8f 93       	push	r24
    254e:	8d e5       	ldi	r24, 0x5D	; 93
    2550:	94 e0       	ldi	r25, 0x04	; 4
    2552:	9f 93       	push	r25
    2554:	8f 93       	push	r24
    2556:	8e 01       	movw	r16, r28
    2558:	0f 5f       	subi	r16, 0xFF	; 255
    255a:	1f 4f       	sbci	r17, 0xFF	; 255
    255c:	1f 93       	push	r17
    255e:	0f 93       	push	r16
    2560:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <sprintf>
	setXY(7, 1);
    2564:	61 e0       	ldi	r22, 0x01	; 1
    2566:	87 e0       	ldi	r24, 0x07	; 7
    2568:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_Z5setXYhh>
	sendStr(buf);
    256c:	c8 01       	movw	r24, r16
    256e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_Z7sendStrPKc>
	
	counter++;
    2572:	80 91 4a 07 	lds	r24, 0x074A
    2576:	8f 5f       	subi	r24, 0xFF	; 255
    2578:	80 93 4a 07 	sts	0x074A, r24
	delay(1000);
    257c:	68 ee       	ldi	r22, 0xE8	; 232
    257e:	73 e0       	ldi	r23, 0x03	; 3
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	0e 94 a1 1b 	call	0x3742	; 0x3742 <delay>
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
}
    2594:	2a 96       	adiw	r28, 0x0a	; 10
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	1f 91       	pop	r17
    25a6:	0f 91       	pop	r16
    25a8:	08 95       	ret

000025aa <_GLOBAL__sub_I_myFont>:

// Data wire is plugged into port 2 on the Arduino
#define ONE_WIRE_BUS 9
#define TEMPERATURE_PRECISION 9
// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);
    25aa:	69 e0       	ldi	r22, 0x09	; 9
    25ac:	8c e3       	ldi	r24, 0x3C	; 60
    25ae:	97 e0       	ldi	r25, 0x07	; 7
    25b0:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <_ZN7OneWireC1Eh>

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);
    25b4:	6c e3       	ldi	r22, 0x3C	; 60
    25b6:	77 e0       	ldi	r23, 0x07	; 7
    25b8:	89 e2       	ldi	r24, 0x29	; 41
    25ba:	97 e0       	ldi	r25, 0x07	; 7
    25bc:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN17DallasTemperatureC1EP7OneWire>


//myI2c oled_screen;
#define wifiTX 7
#define wifiRX 6
SoftwareSerial wifiPort(wifiRX,wifiTX);
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	47 e0       	ldi	r20, 0x07	; 7
    25c4:	66 e0       	ldi	r22, 0x06	; 6
    25c6:	8a e0       	ldi	r24, 0x0A	; 10
    25c8:	97 e0       	ldi	r25, 0x07	; 7
    25ca:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <_ZN14SoftwareSerialC1Ehhb>
    25ce:	08 95       	ret

000025d0 <_GLOBAL__sub_D_myFont>:
    25d0:	8a e0       	ldi	r24, 0x0A	; 10
    25d2:	97 e0       	ldi	r25, 0x07	; 7
    25d4:	0e 94 9e 14 	call	0x293c	; 0x293c <_ZN14SoftwareSerialD1Ev>
    25d8:	08 95       	ret

000025da <_ZN14SoftwareSerial4readEv>:


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    25da:	20 91 97 07 	lds	r18, 0x0797
    25de:	30 91 98 07 	lds	r19, 0x0798
    25e2:	28 17       	cp	r18, r24
    25e4:	39 07       	cpc	r19, r25
    25e6:	f9 f4       	brne	.+62     	; 0x2626 <_ZN14SoftwareSerial4readEv+0x4c>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    25e8:	90 91 55 07 	lds	r25, 0x0755
    25ec:	80 91 56 07 	lds	r24, 0x0756
    25f0:	98 17       	cp	r25, r24
    25f2:	e1 f0       	breq	.+56     	; 0x262c <_ZN14SoftwareSerial4readEv+0x52>
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
    25f4:	e0 91 55 07 	lds	r30, 0x0755
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	e9 5a       	subi	r30, 0xA9	; 169
    25fc:	f8 4f       	sbci	r31, 0xF8	; 248
    25fe:	80 81       	ld	r24, Z
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
    2600:	20 91 55 07 	lds	r18, 0x0755
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	2f 5f       	subi	r18, 0xFF	; 255
    2608:	3f 4f       	sbci	r19, 0xFF	; 255
    260a:	2f 73       	andi	r18, 0x3F	; 63
    260c:	30 78       	andi	r19, 0x80	; 128
    260e:	33 23       	and	r19, r19
    2610:	34 f4       	brge	.+12     	; 0x261e <_ZN14SoftwareSerial4readEv+0x44>
    2612:	21 50       	subi	r18, 0x01	; 1
    2614:	31 09       	sbc	r19, r1
    2616:	20 6c       	ori	r18, 0xC0	; 192
    2618:	3f 6f       	ori	r19, 0xFF	; 255
    261a:	2f 5f       	subi	r18, 0xFF	; 255
    261c:	3f 4f       	sbci	r19, 0xFF	; 255
    261e:	20 93 55 07 	sts	0x0755, r18
  return d;
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	08 95       	ret

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
    2626:	8f ef       	ldi	r24, 0xFF	; 255
    2628:	9f ef       	ldi	r25, 0xFF	; 255
    262a:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
    262c:	8f ef       	ldi	r24, 0xFF	; 255
    262e:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
    2630:	08 95       	ret

00002632 <_ZN14SoftwareSerial9availableEv>:

int SoftwareSerial::available()
{
  if (!isListening())
    2632:	20 91 97 07 	lds	r18, 0x0797
    2636:	30 91 98 07 	lds	r19, 0x0798
    263a:	28 17       	cp	r18, r24
    263c:	39 07       	cpc	r19, r25
    263e:	b1 f4       	brne	.+44     	; 0x266c <_ZN14SoftwareSerial9availableEv+0x3a>
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
    2640:	20 91 56 07 	lds	r18, 0x0756
    2644:	80 91 55 07 	lds	r24, 0x0755
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	20 5c       	subi	r18, 0xC0	; 192
    264c:	3f 4f       	sbci	r19, 0xFF	; 255
    264e:	28 1b       	sub	r18, r24
    2650:	31 09       	sbc	r19, r1
    2652:	2f 73       	andi	r18, 0x3F	; 63
    2654:	30 78       	andi	r19, 0x80	; 128
    2656:	33 23       	and	r19, r19
    2658:	34 f4       	brge	.+12     	; 0x2666 <_ZN14SoftwareSerial9availableEv+0x34>
    265a:	21 50       	subi	r18, 0x01	; 1
    265c:	31 09       	sbc	r19, r1
    265e:	20 6c       	ori	r18, 0xC0	; 192
    2660:	3f 6f       	ori	r19, 0xFF	; 255
    2662:	2f 5f       	subi	r18, 0xFF	; 255
    2664:	3f 4f       	sbci	r19, 0xFF	; 255
    2666:	82 2f       	mov	r24, r18
    2668:	93 2f       	mov	r25, r19
    266a:	08 95       	ret
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
    2670:	08 95       	ret

00002672 <_ZN14SoftwareSerial5writeEh>:

size_t SoftwareSerial::write(uint8_t b)
{
    2672:	1f 93       	push	r17
    2674:	cf 93       	push	r28
    2676:	df 93       	push	r29
    2678:	ec 01       	movw	r28, r24
  if (_tx_delay == 0) {
    267a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    267c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    267e:	41 15       	cp	r20, r1
    2680:	51 05       	cpc	r21, r1
    2682:	29 f4       	brne	.+10     	; 0x268e <_ZN14SoftwareSerial5writeEh+0x1c>
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	9b 83       	std	Y+3, r25	; 0x03
    268a:	8a 83       	std	Y+2, r24	; 0x02
    setWriteError();
    return 0;
    268c:	39 c0       	rjmp	.+114    	; 0x2700 <_ZN14SoftwareSerial5writeEh+0x8e>

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
    268e:	a9 89       	ldd	r26, Y+17	; 0x11
    2690:	ba 89       	ldd	r27, Y+18	; 0x12
  uint8_t reg_mask = _transmitBitMask;
    2692:	38 89       	ldd	r19, Y+16	; 0x10
  uint8_t inv_mask = ~_transmitBitMask;
    2694:	83 2f       	mov	r24, r19
    2696:	80 95       	com	r24
  uint8_t oldSREG = SREG;
    2698:	1f b7       	in	r17, 0x3f	; 63
  bool inv = _inverse_logic;
    269a:	9e 8d       	ldd	r25, Y+30	; 0x1e
  uint16_t delay = _tx_delay;

  if (inv)
    269c:	91 fb       	bst	r25, 1
    269e:	77 27       	eor	r23, r23
    26a0:	70 f9       	bld	r23, 0
    26a2:	91 fd       	sbrc	r25, 1
    b = ~b;
    26a4:	60 95       	com	r22

  cli();  // turn off interrupts for a clean txmit
    26a6:	f8 94       	cli

  // Write the start bit
  if (inv)
    26a8:	77 23       	and	r23, r23
    26aa:	21 f0       	breq	.+8      	; 0x26b4 <_ZN14SoftwareSerial5writeEh+0x42>
    *reg |= reg_mask;
    26ac:	9c 91       	ld	r25, X
    26ae:	93 2b       	or	r25, r19
    26b0:	9c 93       	st	X, r25
    26b2:	03 c0       	rjmp	.+6      	; 0x26ba <_ZN14SoftwareSerial5writeEh+0x48>
  else
    *reg &= inv_mask;
    26b4:	9c 91       	ld	r25, X
    26b6:	98 23       	and	r25, r24
    26b8:	9c 93       	st	X, r25
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    26ba:	fa 01       	movw	r30, r20
    26bc:	31 97       	sbiw	r30, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <_ZN14SoftwareSerial5writeEh+0x4a>
    26c0:	98 e0       	ldi	r25, 0x08	; 8
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
    26c2:	60 ff       	sbrs	r22, 0
    26c4:	04 c0       	rjmp	.+8      	; 0x26ce <_ZN14SoftwareSerial5writeEh+0x5c>
      *reg |= reg_mask; // send 1
    26c6:	2c 91       	ld	r18, X
    26c8:	23 2b       	or	r18, r19
    26ca:	2c 93       	st	X, r18
    26cc:	03 c0       	rjmp	.+6      	; 0x26d4 <_ZN14SoftwareSerial5writeEh+0x62>
    else
      *reg &= inv_mask; // send 0
    26ce:	2c 91       	ld	r18, X
    26d0:	28 23       	and	r18, r24
    26d2:	2c 93       	st	X, r18
    26d4:	fa 01       	movw	r30, r20
    26d6:	31 97       	sbiw	r30, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <_ZN14SoftwareSerial5writeEh+0x64>

    tunedDelay(delay);
    b >>= 1;
    26da:	66 95       	lsr	r22
    26dc:	91 50       	subi	r25, 0x01	; 1
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
    26de:	89 f7       	brne	.-30     	; 0x26c2 <_ZN14SoftwareSerial5writeEh+0x50>
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
    26e0:	77 23       	and	r23, r23
    26e2:	21 f0       	breq	.+8      	; 0x26ec <_ZN14SoftwareSerial5writeEh+0x7a>
    *reg &= inv_mask;
    26e4:	9c 91       	ld	r25, X
    26e6:	89 23       	and	r24, r25
    26e8:	8c 93       	st	X, r24
    26ea:	03 c0       	rjmp	.+6      	; 0x26f2 <_ZN14SoftwareSerial5writeEh+0x80>
  else
    *reg |= reg_mask;
    26ec:	8c 91       	ld	r24, X
    26ee:	38 2b       	or	r19, r24
    26f0:	3c 93       	st	X, r19

  SREG = oldSREG; // turn interrupts back on
    26f2:	1f bf       	out	0x3f, r17	; 63
    26f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <_ZN14SoftwareSerial5writeEh+0x86>
  tunedDelay(_tx_delay);
  
  return 1;
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	50 e0       	ldi	r21, 0x00	; 0
}
    2700:	ca 01       	movw	r24, r20
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	1f 91       	pop	r17
    2708:	08 95       	ret

0000270a <_ZN14SoftwareSerial5flushEv>:

void SoftwareSerial::flush()
{
  if (!isListening())
    270a:	20 91 97 07 	lds	r18, 0x0797
    270e:	30 91 98 07 	lds	r19, 0x0798
    2712:	28 17       	cp	r18, r24
    2714:	39 07       	cpc	r19, r25
    2716:	39 f4       	brne	.+14     	; 0x2726 <_ZN14SoftwareSerial5flushEv+0x1c>
    return;

  uint8_t oldSREG = SREG;
    2718:	8f b7       	in	r24, 0x3f	; 63
  cli();
    271a:	f8 94       	cli
  _receive_buffer_head = _receive_buffer_tail = 0;
    271c:	10 92 56 07 	sts	0x0756, r1
    2720:	10 92 55 07 	sts	0x0755, r1
  SREG = oldSREG;
    2724:	8f bf       	out	0x3f, r24	; 63
    2726:	08 95       	ret

00002728 <_ZN14SoftwareSerial4peekEv>:
}

int SoftwareSerial::peek()
{
  if (!isListening())
    2728:	20 91 97 07 	lds	r18, 0x0797
    272c:	30 91 98 07 	lds	r19, 0x0798
    2730:	28 17       	cp	r18, r24
    2732:	39 07       	cpc	r19, r25
    2734:	71 f4       	brne	.+28     	; 0x2752 <_ZN14SoftwareSerial4peekEv+0x2a>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    2736:	90 91 55 07 	lds	r25, 0x0755
    273a:	80 91 56 07 	lds	r24, 0x0756
    273e:	98 17       	cp	r25, r24
    2740:	59 f0       	breq	.+22     	; 0x2758 <_ZN14SoftwareSerial4peekEv+0x30>
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
    2742:	e0 91 55 07 	lds	r30, 0x0755
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	e9 5a       	subi	r30, 0xA9	; 169
    274a:	f8 4f       	sbci	r31, 0xF8	; 248
    274c:	80 81       	ld	r24, Z
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	08 95       	ret
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
    2752:	8f ef       	ldi	r24, 0xFF	; 255
    2754:	9f ef       	ldi	r25, 0xFF	; 255
    2756:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
    2758:	8f ef       	ldi	r24, 0xFF	; 255
    275a:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
    275c:	08 95       	ret

0000275e <_ZN14SoftwareSerial13stopListeningEv>:
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    275e:	e0 91 97 07 	lds	r30, 0x0797
    2762:	f0 91 98 07 	lds	r31, 0x0798
    2766:	e8 17       	cp	r30, r24
    2768:	f9 07       	cpc	r31, r25
    276a:	69 f4       	brne	.+26     	; 0x2786 <_ZN14SoftwareSerial13stopListeningEv+0x28>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    276c:	a3 89       	ldd	r26, Z+19	; 0x13
    276e:	b4 89       	ldd	r27, Z+20	; 0x14
    2770:	9c 91       	ld	r25, X
    2772:	85 89       	ldd	r24, Z+21	; 0x15
    2774:	80 95       	com	r24
    2776:	89 23       	and	r24, r25
    2778:	8c 93       	st	X, r24
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    277a:	10 92 98 07 	sts	0x0798, r1
    277e:	10 92 97 07 	sts	0x0797, r1
    return true;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	08 95       	ret
  }
  return false;
    2786:	80 e0       	ldi	r24, 0x00	; 0
}
    2788:	08 95       	ret

0000278a <_ZN14SoftwareSerial6listenEv>:
}

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	ec 01       	movw	r28, r24
  if (!_rx_delay_stopbit)
    2790:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2792:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2794:	89 2b       	or	r24, r25
    2796:	f1 f0       	breq	.+60     	; 0x27d4 <_ZN14SoftwareSerial6listenEv+0x4a>
    return false;

  if (active_object != this)
    2798:	80 91 97 07 	lds	r24, 0x0797
    279c:	90 91 98 07 	lds	r25, 0x0798
    27a0:	8c 17       	cp	r24, r28
    27a2:	9d 07       	cpc	r25, r29
    27a4:	c9 f0       	breq	.+50     	; 0x27d8 <_ZN14SoftwareSerial6listenEv+0x4e>
  {
    if (active_object)
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	11 f0       	breq	.+4      	; 0x27ae <_ZN14SoftwareSerial6listenEv+0x24>
      active_object->stopListening();
    27aa:	0e 94 af 13 	call	0x275e	; 0x275e <_ZN14SoftwareSerial13stopListeningEv>

    _buffer_overflow = false;
    27ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27b0:	8e 7f       	andi	r24, 0xFE	; 254
    27b2:	8e 8f       	std	Y+30, r24	; 0x1e
    _receive_buffer_head = _receive_buffer_tail = 0;
    27b4:	10 92 56 07 	sts	0x0756, r1
    27b8:	10 92 55 07 	sts	0x0755, r1
    active_object = this;
    27bc:	d0 93 98 07 	sts	0x0798, r29
    27c0:	c0 93 97 07 	sts	0x0797, r28
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    27c4:	eb 89       	ldd	r30, Y+19	; 0x13
    27c6:	fc 89       	ldd	r31, Y+20	; 0x14
    27c8:	90 81       	ld	r25, Z
    27ca:	8d 89       	ldd	r24, Y+21	; 0x15
    27cc:	89 2b       	or	r24, r25
    27ce:	80 83       	st	Z, r24
    _buffer_overflow = false;
    _receive_buffer_head = _receive_buffer_tail = 0;
    active_object = this;

    setRxIntMsk(true);
    return true;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	03 c0       	rjmp	.+6      	; 0x27da <_ZN14SoftwareSerial6listenEv+0x50>
// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    return false;
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	01 c0       	rjmp	.+2      	; 0x27da <_ZN14SoftwareSerial6listenEv+0x50>

    setRxIntMsk(true);
    return true;
  }

  return false;
    27d8:	80 e0       	ldi	r24, 0x00	; 0
}
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	08 95       	ret

000027e0 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    27e0:	1f 92       	push	r1
    27e2:	0f 92       	push	r0
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	0f 92       	push	r0
    27e8:	11 24       	eor	r1, r1
    27ea:	2f 93       	push	r18
    27ec:	3f 93       	push	r19
    27ee:	4f 93       	push	r20
    27f0:	5f 93       	push	r21
    27f2:	6f 93       	push	r22
    27f4:	7f 93       	push	r23
    27f6:	8f 93       	push	r24
    27f8:	9f 93       	push	r25
    27fa:	af 93       	push	r26
    27fc:	bf 93       	push	r27
    27fe:	cf 93       	push	r28
    2800:	df 93       	push	r29
    2802:	ef 93       	push	r30
    2804:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    2806:	a0 91 97 07 	lds	r26, 0x0797
    280a:	b0 91 98 07 	lds	r27, 0x0798
    280e:	10 97       	sbiw	r26, 0x00	; 0
    2810:	09 f4       	brne	.+2      	; 0x2814 <__vector_3+0x34>
    2812:	81 c0       	rjmp	.+258    	; 0x2916 <__vector_3+0x136>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2814:	5e 96       	adiw	r26, 0x1e	; 30
    2816:	8c 91       	ld	r24, X
    2818:	5e 97       	sbiw	r26, 0x1e	; 30
    281a:	81 ff       	sbrs	r24, 1
    281c:	0d c0       	rjmp	.+26     	; 0x2838 <__vector_3+0x58>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    281e:	1e 96       	adiw	r26, 0x0e	; 14
    2820:	ed 91       	ld	r30, X+
    2822:	fc 91       	ld	r31, X
    2824:	1f 97       	sbiw	r26, 0x0f	; 15
    2826:	90 81       	ld	r25, Z
    2828:	1d 96       	adiw	r26, 0x0d	; 13
    282a:	8c 91       	ld	r24, X
    282c:	1d 97       	sbiw	r26, 0x0d	; 13
    282e:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	71 f4       	brne	.+28     	; 0x2850 <__vector_3+0x70>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	0c c0       	rjmp	.+24     	; 0x2850 <__vector_3+0x70>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2838:	1e 96       	adiw	r26, 0x0e	; 14
    283a:	ed 91       	ld	r30, X+
    283c:	fc 91       	ld	r31, X
    283e:	1f 97       	sbiw	r26, 0x0f	; 15
    2840:	90 81       	ld	r25, Z
    2842:	1d 96       	adiw	r26, 0x0d	; 13
    2844:	8c 91       	ld	r24, X
    2846:	1d 97       	sbiw	r26, 0x0d	; 13
    2848:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	09 f0       	breq	.+2      	; 0x2850 <__vector_3+0x70>
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	88 23       	and	r24, r24
    2852:	09 f4       	brne	.+2      	; 0x2856 <__vector_3+0x76>
    2854:	60 c0       	rjmp	.+192    	; 0x2916 <__vector_3+0x136>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2856:	53 96       	adiw	r26, 0x13	; 19
    2858:	ed 91       	ld	r30, X+
    285a:	fc 91       	ld	r31, X
    285c:	54 97       	sbiw	r26, 0x14	; 20
    285e:	90 81       	ld	r25, Z
    2860:	55 96       	adiw	r26, 0x15	; 21
    2862:	8c 91       	ld	r24, X
    2864:	55 97       	sbiw	r26, 0x15	; 21
    2866:	80 95       	com	r24
    2868:	89 23       	and	r24, r25
    286a:	80 83       	st	Z, r24
    286c:	56 96       	adiw	r26, 0x16	; 22
    286e:	8d 91       	ld	r24, X+
    2870:	9c 91       	ld	r25, X
    2872:	57 97       	sbiw	r26, 0x17	; 23
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	f1 f7       	brne	.-4      	; 0x2874 <__vector_3+0x94>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    2878:	58 96       	adiw	r26, 0x18	; 24
    287a:	6d 91       	ld	r22, X+
    287c:	7c 91       	ld	r23, X
    287e:	59 97       	sbiw	r26, 0x19	; 25
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2880:	1e 96       	adiw	r26, 0x0e	; 14
    2882:	cd 91       	ld	r28, X+
    2884:	dc 91       	ld	r29, X
    2886:	1f 97       	sbiw	r26, 0x0f	; 15
    2888:	1d 96       	adiw	r26, 0x0d	; 13
    288a:	5c 91       	ld	r21, X
    288c:	1d 97       	sbiw	r26, 0x0d	; 13
    288e:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	fb 01       	movw	r30, r22
    2894:	31 97       	sbiw	r30, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <__vector_3+0xb4>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    2898:	84 2f       	mov	r24, r20
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	95 95       	asr	r25
    289e:	87 95       	ror	r24
    28a0:	48 2f       	mov	r20, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    28a2:	28 81       	ld	r18, Y
    28a4:	25 23       	and	r18, r21
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    28a6:	09 f0       	breq	.+2      	; 0x28aa <__vector_3+0xca>
        d |= 0x80;
    28a8:	40 68       	ori	r20, 0x80	; 128
    28aa:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    28ac:	91 f7       	brne	.-28     	; 0x2892 <__vector_3+0xb2>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    28ae:	5e 96       	adiw	r26, 0x1e	; 30
    28b0:	8c 91       	ld	r24, X
    28b2:	5e 97       	sbiw	r26, 0x1e	; 30
    28b4:	81 fd       	sbrc	r24, 1
      d = ~d;
    28b6:	40 95       	com	r20

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    28b8:	80 91 56 07 	lds	r24, 0x0756
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	8f 73       	andi	r24, 0x3F	; 63
    28c2:	90 78       	andi	r25, 0x80	; 128
    28c4:	99 23       	and	r25, r25
    28c6:	24 f4       	brge	.+8      	; 0x28d0 <__vector_3+0xf0>
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	80 6c       	ori	r24, 0xC0	; 192
    28cc:	9f 6f       	ori	r25, 0xFF	; 255
    28ce:	01 96       	adiw	r24, 0x01	; 1
    if (next != _receive_buffer_head)
    28d0:	20 91 55 07 	lds	r18, 0x0755
    28d4:	28 17       	cp	r18, r24
    28d6:	49 f0       	breq	.+18     	; 0x28ea <__vector_3+0x10a>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    28d8:	e0 91 56 07 	lds	r30, 0x0756
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	e9 5a       	subi	r30, 0xA9	; 169
    28e0:	f8 4f       	sbci	r31, 0xF8	; 248
    28e2:	40 83       	st	Z, r20
      _receive_buffer_tail = next;
    28e4:	80 93 56 07 	sts	0x0756, r24
    28e8:	07 c0       	rjmp	.+14     	; 0x28f8 <__vector_3+0x118>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    28ea:	5e 96       	adiw	r26, 0x1e	; 30
    28ec:	8c 91       	ld	r24, X
    28ee:	5e 97       	sbiw	r26, 0x1e	; 30
    28f0:	81 60       	ori	r24, 0x01	; 1
    28f2:	5e 96       	adiw	r26, 0x1e	; 30
    28f4:	8c 93       	st	X, r24
    28f6:	5e 97       	sbiw	r26, 0x1e	; 30
    28f8:	5a 96       	adiw	r26, 0x1a	; 26
    28fa:	8d 91       	ld	r24, X+
    28fc:	9c 91       	ld	r25, X
    28fe:	5b 97       	sbiw	r26, 0x1b	; 27
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <__vector_3+0x120>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    2904:	53 96       	adiw	r26, 0x13	; 19
    2906:	ed 91       	ld	r30, X+
    2908:	fc 91       	ld	r31, X
    290a:	54 97       	sbiw	r26, 0x14	; 20
    290c:	90 81       	ld	r25, Z
    290e:	55 96       	adiw	r26, 0x15	; 21
    2910:	8c 91       	ld	r24, X
    2912:	89 2b       	or	r24, r25
    2914:	80 83       	st	Z, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    2916:	ff 91       	pop	r31
    2918:	ef 91       	pop	r30
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	bf 91       	pop	r27
    2920:	af 91       	pop	r26
    2922:	9f 91       	pop	r25
    2924:	8f 91       	pop	r24
    2926:	7f 91       	pop	r23
    2928:	6f 91       	pop	r22
    292a:	5f 91       	pop	r21
    292c:	4f 91       	pop	r20
    292e:	3f 91       	pop	r19
    2930:	2f 91       	pop	r18
    2932:	0f 90       	pop	r0
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	0f 90       	pop	r0
    2938:	1f 90       	pop	r1
    293a:	18 95       	reti

0000293c <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    293c:	2f e7       	ldi	r18, 0x7F	; 127
    293e:	34 e0       	ldi	r19, 0x04	; 4
    2940:	fc 01       	movw	r30, r24
    2942:	31 83       	std	Z+1, r19	; 0x01
    2944:	20 83       	st	Z, r18
      *_pcint_maskreg &= ~_pcint_maskvalue;
}

void SoftwareSerial::end()
{
  stopListening();
    2946:	0e 94 af 13 	call	0x275e	; 0x275e <_ZN14SoftwareSerial13stopListeningEv>
    294a:	08 95       	ret

0000294c <_ZN14SoftwareSerial5setTXEh>:
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
{
    294c:	1f 93       	push	r17
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	ec 01       	movw	r28, r24
    2954:	16 2f       	mov	r17, r22
  // First write, then set output. If we do this the other way around,
  // the pin would be output low for a short while before switching to
  // output hihg. Now, it is input with pullup for a short while, which
  // is fine. With inverse logic, either order is fine.
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
    2956:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2958:	66 95       	lsr	r22
    295a:	61 70       	andi	r22, 0x01	; 1
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	68 27       	eor	r22, r24
    2960:	81 2f       	mov	r24, r17
    2962:	0e 94 81 1c 	call	0x3902	; 0x3902 <digitalWrite>
  pinMode(tx, OUTPUT);
    2966:	61 e0       	ldi	r22, 0x01	; 1
    2968:	81 2f       	mov	r24, r17
    296a:	0e 94 42 1c 	call	0x3884	; 0x3884 <pinMode>
  _transmitBitMask = digitalPinToBitMask(tx);
    296e:	61 2f       	mov	r22, r17
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	fb 01       	movw	r30, r22
    2974:	e3 58       	subi	r30, 0x83	; 131
    2976:	fe 4f       	sbci	r31, 0xFE	; 254
    2978:	e4 91       	lpm	r30, Z
    297a:	e8 8b       	std	Y+16, r30	; 0x10
  uint8_t port = digitalPinToPort(tx);
    297c:	fb 01       	movw	r30, r22
    297e:	ef 56       	subi	r30, 0x6F	; 111
    2980:	fe 4f       	sbci	r31, 0xFE	; 254
    2982:	e4 91       	lpm	r30, Z
  _transmitPortRegister = portOutputRegister(port);
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	ee 0f       	add	r30, r30
    2988:	ff 1f       	adc	r31, r31
    298a:	e1 55       	subi	r30, 0x51	; 81
    298c:	fe 4f       	sbci	r31, 0xFE	; 254
    298e:	85 91       	lpm	r24, Z+
    2990:	94 91       	lpm	r25, Z
    2992:	9a 8b       	std	Y+18, r25	; 0x12
    2994:	89 8b       	std	Y+17, r24	; 0x11
}
    2996:	df 91       	pop	r29
    2998:	cf 91       	pop	r28
    299a:	1f 91       	pop	r17
    299c:	08 95       	ret

0000299e <_ZN14SoftwareSerial5setRXEh>:

void SoftwareSerial::setRX(uint8_t rx)
{
    299e:	1f 93       	push	r17
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	ec 01       	movw	r28, r24
    29a6:	16 2f       	mov	r17, r22
  pinMode(rx, INPUT);
    29a8:	60 e0       	ldi	r22, 0x00	; 0
    29aa:	81 2f       	mov	r24, r17
    29ac:	0e 94 42 1c 	call	0x3884	; 0x3884 <pinMode>
  if (!_inverse_logic)
    29b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29b2:	81 fd       	sbrc	r24, 1
    29b4:	04 c0       	rjmp	.+8      	; 0x29be <_ZN14SoftwareSerial5setRXEh+0x20>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
    29b6:	61 e0       	ldi	r22, 0x01	; 1
    29b8:	81 2f       	mov	r24, r17
    29ba:	0e 94 81 1c 	call	0x3902	; 0x3902 <digitalWrite>
  _receivePin = rx;
    29be:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
    29c0:	61 2f       	mov	r22, r17
    29c2:	70 e0       	ldi	r23, 0x00	; 0
    29c4:	fb 01       	movw	r30, r22
    29c6:	e3 58       	subi	r30, 0x83	; 131
    29c8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ca:	e4 91       	lpm	r30, Z
    29cc:	ed 87       	std	Y+13, r30	; 0x0d
  uint8_t port = digitalPinToPort(rx);
    29ce:	fb 01       	movw	r30, r22
    29d0:	ef 56       	subi	r30, 0x6F	; 111
    29d2:	fe 4f       	sbci	r31, 0xFE	; 254
    29d4:	e4 91       	lpm	r30, Z
  _receivePortRegister = portInputRegister(port);
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	ee 0f       	add	r30, r30
    29da:	ff 1f       	adc	r31, r31
    29dc:	eb 55       	subi	r30, 0x5B	; 91
    29de:	fe 4f       	sbci	r31, 0xFE	; 254
    29e0:	85 91       	lpm	r24, Z+
    29e2:	94 91       	lpm	r25, Z
    29e4:	9f 87       	std	Y+15, r25	; 0x0f
    29e6:	8e 87       	std	Y+14, r24	; 0x0e
}
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	1f 91       	pop	r17
    29ee:	08 95       	ret

000029f0 <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
    29f0:	1f 93       	push	r17
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
    29f6:	ec 01       	movw	r28, r24
    29f8:	16 2f       	mov	r17, r22
  public:
    Print() : write_error(0) {}
    29fa:	1b 82       	std	Y+3, r1	; 0x03
    29fc:	1a 82       	std	Y+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    29fe:	88 ee       	ldi	r24, 0xE8	; 232
    2a00:	93 e0       	ldi	r25, 0x03	; 3
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	8c 83       	std	Y+4, r24	; 0x04
    2a08:	9d 83       	std	Y+5, r25	; 0x05
    2a0a:	ae 83       	std	Y+6, r26	; 0x06
    2a0c:	bf 83       	std	Y+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
    2a0e:	8f e7       	ldi	r24, 0x7F	; 127
    2a10:	94 e0       	ldi	r25, 0x04	; 4
    2a12:	99 83       	std	Y+1, r25	; 0x01
    2a14:	88 83       	st	Y, r24
    2a16:	1f 8a       	std	Y+23, r1	; 0x17
    2a18:	1e 8a       	std	Y+22, r1	; 0x16
    2a1a:	19 8e       	std	Y+25, r1	; 0x19
    2a1c:	18 8e       	std	Y+24, r1	; 0x18
    2a1e:	1b 8e       	std	Y+27, r1	; 0x1b
    2a20:	1a 8e       	std	Y+26, r1	; 0x1a
    2a22:	1d 8e       	std	Y+29, r1	; 0x1d
    2a24:	1c 8e       	std	Y+28, r1	; 0x1c
    2a26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a28:	8e 7f       	andi	r24, 0xFE	; 254
    2a2a:	20 fb       	bst	r18, 0
    2a2c:	81 f9       	bld	r24, 1
    2a2e:	8e 8f       	std	Y+30, r24	; 0x1e
{
  setTX(transmitPin);
    2a30:	64 2f       	mov	r22, r20
    2a32:	ce 01       	movw	r24, r28
    2a34:	0e 94 a6 14 	call	0x294c	; 0x294c <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
    2a38:	61 2f       	mov	r22, r17
    2a3a:	ce 01       	movw	r24, r28
    2a3c:	0e 94 cf 14 	call	0x299e	; 0x299e <_ZN14SoftwareSerial5setRXEh>
}
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	1f 91       	pop	r17
    2a46:	08 95       	ret

00002a48 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	ec 01       	movw	r28, r24
    2a4e:	9a 01       	movw	r18, r20
    2a50:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2a52:	1b 8e       	std	Y+27, r1	; 0x1b
    2a54:	1a 8e       	std	Y+26, r1	; 0x1a
    2a56:	19 8e       	std	Y+25, r1	; 0x19
    2a58:	18 8e       	std	Y+24, r1	; 0x18
    2a5a:	1f 8a       	std	Y+23, r1	; 0x17
    2a5c:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2a5e:	60 e8       	ldi	r22, 0x80	; 128
    2a60:	74 e8       	ldi	r23, 0x84	; 132
    2a62:	8e e1       	ldi	r24, 0x1E	; 30
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__divmodsi4>
    2a6a:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2a6c:	24 30       	cpi	r18, 0x04	; 4
    2a6e:	31 05       	cpc	r19, r1
    2a70:	18 f0       	brcs	.+6      	; 0x2a78 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    2a72:	c9 01       	movw	r24, r18
    2a74:	03 97       	sbiw	r24, 0x03	; 3
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2a7c:	9d 8f       	std	Y+29, r25	; 0x1d
    2a7e:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    2a80:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a82:	86 31       	cpi	r24, 0x16	; 22
    2a84:	08 f0       	brcs	.+2      	; 0x2a88 <_ZN14SoftwareSerial5beginEl+0x40>
    2a86:	41 c0       	rjmp	.+130    	; 0x2b0a <_ZN14SoftwareSerial5beginEl+0xc2>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2a88:	b9 01       	movw	r22, r18
    2a8a:	76 95       	lsr	r23
    2a8c:	67 95       	ror	r22
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2a8e:	64 31       	cpi	r22, 0x14	; 20
    2a90:	71 05       	cpc	r23, r1
    2a92:	18 f0       	brcs	.+6      	; 0x2a9a <_ZN14SoftwareSerial5beginEl+0x52>
    return num - sub;
    2a94:	63 51       	subi	r22, 0x13	; 19
    2a96:	71 09       	sbc	r23, r1
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <_ZN14SoftwareSerial5beginEl+0x56>
  else
    return 1;
    2a9a:	61 e0       	ldi	r22, 0x01	; 1
    2a9c:	70 e0       	ldi	r23, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2a9e:	7f 8b       	std	Y+23, r23	; 0x17
    2aa0:	6e 8b       	std	Y+22, r22	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2aa2:	36 97       	sbiw	r30, 0x06	; 6
    2aa4:	20 f0       	brcs	.+8      	; 0x2aae <_ZN14SoftwareSerial5beginEl+0x66>
    return num - sub;
    2aa6:	b9 01       	movw	r22, r18
    2aa8:	65 50       	subi	r22, 0x05	; 5
    2aaa:	71 09       	sbc	r23, r1
    2aac:	02 c0       	rjmp	.+4      	; 0x2ab2 <_ZN14SoftwareSerial5beginEl+0x6a>
  else
    return 1;
    2aae:	61 e0       	ldi	r22, 0x01	; 1
    2ab0:	70 e0       	ldi	r23, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2ab2:	79 8f       	std	Y+25, r23	; 0x19
    2ab4:	68 8f       	std	Y+24, r22	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2ab6:	b9 01       	movw	r22, r18
    2ab8:	66 0f       	add	r22, r22
    2aba:	77 1f       	adc	r23, r23
    2abc:	26 0f       	add	r18, r22
    2abe:	37 1f       	adc	r19, r23
    2ac0:	36 95       	lsr	r19
    2ac2:	27 95       	ror	r18
    2ac4:	36 95       	lsr	r19
    2ac6:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2ac8:	2d 30       	cpi	r18, 0x0D	; 13
    2aca:	31 05       	cpc	r19, r1
    2acc:	10 f1       	brcs	.+68     	; 0x2b12 <_ZN14SoftwareSerial5beginEl+0xca>
    return num - sub;
    2ace:	2c 50       	subi	r18, 0x0C	; 12
    2ad0:	31 09       	sbc	r19, r1
    2ad2:	21 c0       	rjmp	.+66     	; 0x2b16 <_ZN14SoftwareSerial5beginEl+0xce>


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2ad4:	21 e0       	ldi	r18, 0x01	; 1
    2ad6:	8e 30       	cpi	r24, 0x0E	; 14
    2ad8:	08 f4       	brcc	.+2      	; 0x2adc <_ZN14SoftwareSerial5beginEl+0x94>
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	01 c0       	rjmp	.+2      	; 0x2ae2 <_ZN14SoftwareSerial5beginEl+0x9a>
    2ae0:	88 0f       	add	r24, r24
    2ae2:	2a 95       	dec	r18
    2ae4:	ea f7       	brpl	.-6      	; 0x2ae0 <_ZN14SoftwareSerial5beginEl+0x98>
    2ae6:	98 2b       	or	r25, r24
    2ae8:	90 93 68 00 	sts	0x0068, r25
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2aec:	9c 85       	ldd	r25, Y+12	; 0x0c
    2aee:	98 30       	cpi	r25, 0x08	; 8
    2af0:	d0 f0       	brcs	.+52     	; 0x2b26 <_ZN14SoftwareSerial5beginEl+0xde>
    2af2:	9e 30       	cpi	r25, 0x0E	; 14
    2af4:	10 f1       	brcs	.+68     	; 0x2b3a <_ZN14SoftwareSerial5beginEl+0xf2>
    2af6:	96 31       	cpi	r25, 0x16	; 22
    2af8:	58 f1       	brcs	.+86     	; 0x2b50 <_ZN14SoftwareSerial5beginEl+0x108>
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	2a c0       	rjmp	.+84     	; 0x2b54 <_ZN14SoftwareSerial5beginEl+0x10c>
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2b00:	8d 8b       	std	Y+21, r24	; 0x15
    2b02:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b04:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <_ZN14SoftwareSerial5beginEl+0xbe>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	0e 94 c5 13 	call	0x278a	; 0x278a <_ZN14SoftwareSerial6listenEv>
    2b10:	2a c0       	rjmp	.+84     	; 0x2b66 <_ZN14SoftwareSerial5beginEl+0x11e>

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    2b12:	21 e0       	ldi	r18, 0x01	; 1
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2b16:	3b 8f       	std	Y+27, r19	; 0x1b
    2b18:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2b1a:	90 91 68 00 	lds	r25, 0x0068
    2b1e:	88 30       	cpi	r24, 0x08	; 8
    2b20:	c8 f6       	brcc	.-78     	; 0x2ad4 <_ZN14SoftwareSerial5beginEl+0x8c>
    2b22:	84 e0       	ldi	r24, 0x04	; 4
    2b24:	e0 cf       	rjmp	.-64     	; 0x2ae6 <_ZN14SoftwareSerial5beginEl+0x9e>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2b26:	2d e6       	ldi	r18, 0x6D	; 109
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	3c 8b       	std	Y+20, r19	; 0x14
    2b2c:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	01 c0       	rjmp	.+2      	; 0x2b34 <_ZN14SoftwareSerial5beginEl+0xec>
    2b32:	88 0f       	add	r24, r24
    2b34:	9a 95       	dec	r25
    2b36:	ea f7       	brpl	.-6      	; 0x2b32 <_ZN14SoftwareSerial5beginEl+0xea>
    2b38:	e3 cf       	rjmp	.-58     	; 0x2b00 <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2b3a:	2b e6       	ldi	r18, 0x6B	; 107
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	3c 8b       	std	Y+20, r19	; 0x14
    2b40:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2b42:	98 50       	subi	r25, 0x08	; 8
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	01 c0       	rjmp	.+2      	; 0x2b4a <_ZN14SoftwareSerial5beginEl+0x102>
    2b48:	88 0f       	add	r24, r24
    2b4a:	9a 95       	dec	r25
    2b4c:	ea f7       	brpl	.-6      	; 0x2b48 <_ZN14SoftwareSerial5beginEl+0x100>
    2b4e:	d8 cf       	rjmp	.-80     	; 0x2b00 <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2b50:	2c e6       	ldi	r18, 0x6C	; 108
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	3c 8b       	std	Y+20, r19	; 0x14
    2b56:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2b58:	9e 50       	subi	r25, 0x0E	; 14
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	01 c0       	rjmp	.+2      	; 0x2b60 <_ZN14SoftwareSerial5beginEl+0x118>
    2b5e:	88 0f       	add	r24, r24
    2b60:	9a 95       	dec	r25
    2b62:	ea f7       	brpl	.-6      	; 0x2b5e <_ZN14SoftwareSerial5beginEl+0x116>
    2b64:	cd cf       	rjmp	.-102    	; 0x2b00 <_ZN14SoftwareSerial5beginEl+0xb8>
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	08 95       	ret

00002b6c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2b6c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2b6e:	91 8d       	ldd	r25, Z+25	; 0x19
    2b70:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b72:	89 2f       	mov	r24, r25
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	80 5c       	subi	r24, 0xC0	; 192
    2b78:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7a:	82 1b       	sub	r24, r18
    2b7c:	91 09       	sbc	r25, r1
}
    2b7e:	8f 73       	andi	r24, 0x3F	; 63
    2b80:	99 27       	eor	r25, r25
    2b82:	08 95       	ret

00002b84 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2b84:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2b86:	91 8d       	ldd	r25, Z+25	; 0x19
    2b88:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b8a:	98 17       	cp	r25, r24
    2b8c:	31 f0       	breq	.+12     	; 0x2b9a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2b8e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b90:	e8 0f       	add	r30, r24
    2b92:	f1 1d       	adc	r31, r1
    2b94:	85 8d       	ldd	r24, Z+29	; 0x1d
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2b9a:	8f ef       	ldi	r24, 0xFF	; 255
    2b9c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2b9e:	08 95       	ret

00002ba0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2ba0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2ba2:	91 8d       	ldd	r25, Z+25	; 0x19
    2ba4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ba6:	98 17       	cp	r25, r24
    2ba8:	61 f0       	breq	.+24     	; 0x2bc2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2baa:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bac:	df 01       	movw	r26, r30
    2bae:	a8 0f       	add	r26, r24
    2bb0:	b1 1d       	adc	r27, r1
    2bb2:	5d 96       	adiw	r26, 0x1d	; 29
    2bb4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2bb6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2bb8:	9f 5f       	subi	r25, 0xFF	; 255
    2bba:	9f 73       	andi	r25, 0x3F	; 63
    2bbc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2bc2:	8f ef       	ldi	r24, 0xFF	; 255
    2bc4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2bc6:	08 95       	ret

00002bc8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2bc8:	8f e4       	ldi	r24, 0x4F	; 79
    2bca:	97 e1       	ldi	r25, 0x17	; 23
    2bcc:	89 2b       	or	r24, r25
    2bce:	49 f0       	breq	.+18     	; 0x2be2 <_Z14serialEventRunv+0x1a>
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	89 2b       	or	r24, r25
    2bd6:	29 f0       	breq	.+10     	; 0x2be2 <_Z14serialEventRunv+0x1a>
    2bd8:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <_Z17Serial0_availablev>
    2bdc:	81 11       	cpse	r24, r1
    2bde:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2be2:	08 95       	ret

00002be4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2be4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2be6:	84 8d       	ldd	r24, Z+28	; 0x1c
    2be8:	df 01       	movw	r26, r30
    2bea:	a8 0f       	add	r26, r24
    2bec:	b1 1d       	adc	r27, r1
    2bee:	a3 5a       	subi	r26, 0xA3	; 163
    2bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bf2:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2bf4:	24 8d       	ldd	r18, Z+28	; 0x1c
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	2f 5f       	subi	r18, 0xFF	; 255
    2bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2bfc:	2f 73       	andi	r18, 0x3F	; 63
    2bfe:	30 78       	andi	r19, 0x80	; 128
    2c00:	33 23       	and	r19, r19
    2c02:	34 f4       	brge	.+12     	; 0x2c10 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    2c04:	21 50       	subi	r18, 0x01	; 1
    2c06:	31 09       	sbc	r19, r1
    2c08:	20 6c       	ori	r18, 0xC0	; 192
    2c0a:	3f 6f       	ori	r19, 0xFF	; 255
    2c0c:	2f 5f       	subi	r18, 0xFF	; 255
    2c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c10:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    2c12:	a6 89       	ldd	r26, Z+22	; 0x16
    2c14:	b7 89       	ldd	r27, Z+23	; 0x17
    2c16:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2c18:	a0 89       	ldd	r26, Z+16	; 0x10
    2c1a:	b1 89       	ldd	r27, Z+17	; 0x11
    2c1c:	8c 91       	ld	r24, X
    2c1e:	80 64       	ori	r24, 0x40	; 64
    2c20:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2c22:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c24:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c26:	98 13       	cpse	r25, r24
    2c28:	06 c0       	rjmp	.+12     	; 0x2c36 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2c2a:	02 88       	ldd	r0, Z+18	; 0x12
    2c2c:	f3 89       	ldd	r31, Z+19	; 0x13
    2c2e:	e0 2d       	mov	r30, r0
    2c30:	80 81       	ld	r24, Z
    2c32:	8f 7d       	andi	r24, 0xDF	; 223
    2c34:	80 83       	st	Z, r24
    2c36:	08 95       	ret

00002c38 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2c38:	cf 93       	push	r28
    2c3a:	df 93       	push	r29
    2c3c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2c3e:	88 8d       	ldd	r24, Y+24	; 0x18
    2c40:	81 11       	cpse	r24, r1
    2c42:	0f c0       	rjmp	.+30     	; 0x2c62 <_ZN14HardwareSerial5flushEv+0x2a>
    2c44:	18 c0       	rjmp	.+48     	; 0x2c76 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	07 fc       	sbrc	r0, 7
    2c4a:	0d c0       	rjmp	.+26     	; 0x2c66 <_ZN14HardwareSerial5flushEv+0x2e>
    2c4c:	90 81       	ld	r25, Z
    2c4e:	95 ff       	sbrs	r25, 5
    2c50:	0a c0       	rjmp	.+20     	; 0x2c66 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2c52:	a8 89       	ldd	r26, Y+16	; 0x10
    2c54:	b9 89       	ldd	r27, Y+17	; 0x11
    2c56:	8c 91       	ld	r24, X
    2c58:	85 ff       	sbrs	r24, 5
    2c5a:	05 c0       	rjmp	.+10     	; 0x2c66 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
    2c5c:	ce 01       	movw	r24, r28
    2c5e:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2c62:	ea 89       	ldd	r30, Y+18	; 0x12
    2c64:	fb 89       	ldd	r31, Y+19	; 0x13
    2c66:	90 81       	ld	r25, Z
    2c68:	95 fd       	sbrc	r25, 5
    2c6a:	ed cf       	rjmp	.-38     	; 0x2c46 <_ZN14HardwareSerial5flushEv+0xe>
    2c6c:	a8 89       	ldd	r26, Y+16	; 0x10
    2c6e:	b9 89       	ldd	r27, Y+17	; 0x11
    2c70:	8c 91       	ld	r24, X
    2c72:	86 ff       	sbrs	r24, 6
    2c74:	e8 cf       	rjmp	.-48     	; 0x2c46 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2c76:	df 91       	pop	r29
    2c78:	cf 91       	pop	r28
    2c7a:	08 95       	ret

00002c7c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2c7c:	0f 93       	push	r16
    2c7e:	1f 93       	push	r17
    2c80:	cf 93       	push	r28
    2c82:	df 93       	push	r29
    2c84:	fc 01       	movw	r30, r24
  _written = true;
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2c8a:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c8c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c8e:	98 13       	cpse	r25, r24
    2c90:	22 c0       	rjmp	.+68     	; 0x2cd6 <_ZN14HardwareSerial5writeEh+0x5a>
    2c92:	a0 89       	ldd	r26, Z+16	; 0x10
    2c94:	b1 89       	ldd	r27, Z+17	; 0x11
    2c96:	8c 91       	ld	r24, X
    2c98:	85 fd       	sbrc	r24, 5
    2c9a:	2f c0       	rjmp	.+94     	; 0x2cfa <_ZN14HardwareSerial5writeEh+0x7e>
    2c9c:	1c c0       	rjmp	.+56     	; 0x2cd6 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	07 fc       	sbrc	r0, 7
    2ca2:	08 c0       	rjmp	.+16     	; 0x2cb4 <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2ca4:	e8 89       	ldd	r30, Y+16	; 0x10
    2ca6:	f9 89       	ldd	r31, Y+17	; 0x11
    2ca8:	80 81       	ld	r24, Z
    2caa:	85 ff       	sbrs	r24, 5
    2cac:	03 c0       	rjmp	.+6      	; 0x2cb4 <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
    2cae:	ce 01       	movw	r24, r28
    2cb0:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2cb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cb6:	09 17       	cp	r16, r25
    2cb8:	91 f3       	breq	.-28     	; 0x2c9e <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2cba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e8 0f       	add	r30, r24
    2cc0:	f1 1d       	adc	r31, r1
    2cc2:	e3 5a       	subi	r30, 0xA3	; 163
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    2cc8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2cca:	ea 89       	ldd	r30, Y+18	; 0x12
    2ccc:	fb 89       	ldd	r31, Y+19	; 0x13
    2cce:	80 81       	ld	r24, Z
    2cd0:	80 62       	ori	r24, 0x20	; 32
    2cd2:	80 83       	st	Z, r24
  
  return 1;
    2cd4:	1b c0       	rjmp	.+54     	; 0x2d0c <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2cd6:	23 8d       	ldd	r18, Z+27	; 0x1b
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	2f 5f       	subi	r18, 0xFF	; 255
    2cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cde:	2f 73       	andi	r18, 0x3F	; 63
    2ce0:	30 78       	andi	r19, 0x80	; 128
    2ce2:	33 23       	and	r19, r19
    2ce4:	34 f4       	brge	.+12     	; 0x2cf2 <_ZN14HardwareSerial5writeEh+0x76>
    2ce6:	21 50       	subi	r18, 0x01	; 1
    2ce8:	31 09       	sbc	r19, r1
    2cea:	20 6c       	ori	r18, 0xC0	; 192
    2cec:	3f 6f       	ori	r19, 0xFF	; 255
    2cee:	2f 5f       	subi	r18, 0xFF	; 255
    2cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf2:	16 2f       	mov	r17, r22
    2cf4:	ef 01       	movw	r28, r30
    2cf6:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2cf8:	dd cf       	rjmp	.-70     	; 0x2cb4 <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2cfa:	a6 89       	ldd	r26, Z+22	; 0x16
    2cfc:	b7 89       	ldd	r27, Z+23	; 0x17
    2cfe:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    2d00:	00 88       	ldd	r0, Z+16	; 0x10
    2d02:	f1 89       	ldd	r31, Z+17	; 0x11
    2d04:	e0 2d       	mov	r30, r0
    2d06:	80 81       	ld	r24, Z
    2d08:	80 64       	ori	r24, 0x40	; 64
    2d0a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	1f 91       	pop	r17
    2d16:	0f 91       	pop	r16
    2d18:	08 95       	ret

00002d1a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2d1a:	bf 92       	push	r11
    2d1c:	cf 92       	push	r12
    2d1e:	df 92       	push	r13
    2d20:	ef 92       	push	r14
    2d22:	ff 92       	push	r15
    2d24:	0f 93       	push	r16
    2d26:	1f 93       	push	r17
    2d28:	cf 93       	push	r28
    2d2a:	df 93       	push	r29
    2d2c:	ec 01       	movw	r28, r24
    2d2e:	6a 01       	movw	r12, r20
    2d30:	7b 01       	movw	r14, r22
    2d32:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2d34:	60 e8       	ldi	r22, 0x80	; 128
    2d36:	74 e8       	ldi	r23, 0x84	; 132
    2d38:	8e e1       	ldi	r24, 0x1E	; 30
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	a7 01       	movw	r20, r14
    2d3e:	96 01       	movw	r18, r12
    2d40:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <__udivmodsi4>
    2d44:	89 01       	movw	r16, r18
    2d46:	9a 01       	movw	r18, r20
    2d48:	01 50       	subi	r16, 0x01	; 1
    2d4a:	11 09       	sbc	r17, r1
    2d4c:	21 09       	sbc	r18, r1
    2d4e:	31 09       	sbc	r19, r1
    2d50:	36 95       	lsr	r19
    2d52:	27 95       	ror	r18
    2d54:	17 95       	ror	r17
    2d56:	07 95       	ror	r16
  *_ucsra = 1 << U2X0;
    2d58:	e8 89       	ldd	r30, Y+16	; 0x10
    2d5a:	f9 89       	ldd	r31, Y+17	; 0x11
    2d5c:	82 e0       	ldi	r24, 0x02	; 2
    2d5e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2d60:	01 15       	cp	r16, r1
    2d62:	80 e1       	ldi	r24, 0x10	; 16
    2d64:	18 07       	cpc	r17, r24
    2d66:	a8 f0       	brcs	.+42     	; 0x2d92 <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
    2d68:	e8 89       	ldd	r30, Y+16	; 0x10
    2d6a:	f9 89       	ldd	r31, Y+17	; 0x11
    2d6c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2d6e:	60 e4       	ldi	r22, 0x40	; 64
    2d70:	72 e4       	ldi	r23, 0x42	; 66
    2d72:	8f e0       	ldi	r24, 0x0F	; 15
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	a7 01       	movw	r20, r14
    2d78:	96 01       	movw	r18, r12
    2d7a:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <__udivmodsi4>
    2d7e:	da 01       	movw	r26, r20
    2d80:	c9 01       	movw	r24, r18
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	a1 09       	sbc	r26, r1
    2d86:	b1 09       	sbc	r27, r1
    2d88:	b6 95       	lsr	r27
    2d8a:	a7 95       	ror	r26
    2d8c:	97 95       	ror	r25
    2d8e:	87 95       	ror	r24
    2d90:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2d92:	ec 85       	ldd	r30, Y+12	; 0x0c
    2d94:	fd 85       	ldd	r31, Y+13	; 0x0d
    2d96:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    2d98:	ee 85       	ldd	r30, Y+14	; 0x0e
    2d9a:	ff 85       	ldd	r31, Y+15	; 0x0f
    2d9c:	00 83       	st	Z, r16

  _written = false;
    2d9e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2da0:	ec 89       	ldd	r30, Y+20	; 0x14
    2da2:	fd 89       	ldd	r31, Y+21	; 0x15
    2da4:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    2da6:	ea 89       	ldd	r30, Y+18	; 0x12
    2da8:	fb 89       	ldd	r31, Y+19	; 0x13
    2daa:	80 81       	ld	r24, Z
    2dac:	80 61       	ori	r24, 0x10	; 16
    2dae:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2db0:	ea 89       	ldd	r30, Y+18	; 0x12
    2db2:	fb 89       	ldd	r31, Y+19	; 0x13
    2db4:	80 81       	ld	r24, Z
    2db6:	88 60       	ori	r24, 0x08	; 8
    2db8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2dba:	ea 89       	ldd	r30, Y+18	; 0x12
    2dbc:	fb 89       	ldd	r31, Y+19	; 0x13
    2dbe:	80 81       	ld	r24, Z
    2dc0:	80 68       	ori	r24, 0x80	; 128
    2dc2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2dc4:	ea 89       	ldd	r30, Y+18	; 0x12
    2dc6:	fb 89       	ldd	r31, Y+19	; 0x13
    2dc8:	80 81       	ld	r24, Z
    2dca:	8f 7d       	andi	r24, 0xDF	; 223
    2dcc:	80 83       	st	Z, r24
}
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	1f 91       	pop	r17
    2dd4:	0f 91       	pop	r16
    2dd6:	ff 90       	pop	r15
    2dd8:	ef 90       	pop	r14
    2dda:	df 90       	pop	r13
    2ddc:	cf 90       	pop	r12
    2dde:	bf 90       	pop	r11
    2de0:	08 95       	ret

00002de2 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2de2:	1f 92       	push	r1
    2de4:	0f 92       	push	r0
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	0f 92       	push	r0
    2dea:	11 24       	eor	r1, r1
    2dec:	2f 93       	push	r18
    2dee:	8f 93       	push	r24
    2df0:	9f 93       	push	r25
    2df2:	af 93       	push	r26
    2df4:	bf 93       	push	r27
    2df6:	ef 93       	push	r30
    2df8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2dfa:	e0 91 a9 07 	lds	r30, 0x07A9
    2dfe:	f0 91 aa 07 	lds	r31, 0x07AA
    2e02:	80 81       	ld	r24, Z
    2e04:	82 fd       	sbrc	r24, 2
    2e06:	14 c0       	rjmp	.+40     	; 0x2e30 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2e08:	e9 e9       	ldi	r30, 0x99	; 153
    2e0a:	f7 e0       	ldi	r31, 0x07	; 7
    2e0c:	a6 89       	ldd	r26, Z+22	; 0x16
    2e0e:	b7 89       	ldd	r27, Z+23	; 0x17
    2e10:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2e12:	81 8d       	ldd	r24, Z+25	; 0x19
    2e14:	8f 5f       	subi	r24, 0xFF	; 255
    2e16:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2e18:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e1a:	89 17       	cp	r24, r25
    2e1c:	71 f0       	breq	.+28     	; 0x2e3a <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
    2e1e:	df 01       	movw	r26, r30
    2e20:	e1 8d       	ldd	r30, Z+25	; 0x19
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	e7 56       	subi	r30, 0x67	; 103
    2e26:	f8 4f       	sbci	r31, 0xF8	; 248
    2e28:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    2e2a:	59 96       	adiw	r26, 0x19	; 25
    2e2c:	8c 93       	st	X, r24
    2e2e:	05 c0       	rjmp	.+10     	; 0x2e3a <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2e30:	e0 91 af 07 	lds	r30, 0x07AF
    2e34:	f0 91 b0 07 	lds	r31, 0x07B0
    2e38:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2e3a:	ff 91       	pop	r31
    2e3c:	ef 91       	pop	r30
    2e3e:	bf 91       	pop	r27
    2e40:	af 91       	pop	r26
    2e42:	9f 91       	pop	r25
    2e44:	8f 91       	pop	r24
    2e46:	2f 91       	pop	r18
    2e48:	0f 90       	pop	r0
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	0f 90       	pop	r0
    2e4e:	1f 90       	pop	r1
    2e50:	18 95       	reti

00002e52 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2e52:	1f 92       	push	r1
    2e54:	0f 92       	push	r0
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	0f 92       	push	r0
    2e5a:	11 24       	eor	r1, r1
    2e5c:	2f 93       	push	r18
    2e5e:	3f 93       	push	r19
    2e60:	4f 93       	push	r20
    2e62:	5f 93       	push	r21
    2e64:	6f 93       	push	r22
    2e66:	7f 93       	push	r23
    2e68:	8f 93       	push	r24
    2e6a:	9f 93       	push	r25
    2e6c:	af 93       	push	r26
    2e6e:	bf 93       	push	r27
    2e70:	ef 93       	push	r30
    2e72:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2e74:	89 e9       	ldi	r24, 0x99	; 153
    2e76:	97 e0       	ldi	r25, 0x07	; 7
    2e78:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2e7c:	ff 91       	pop	r31
    2e7e:	ef 91       	pop	r30
    2e80:	bf 91       	pop	r27
    2e82:	af 91       	pop	r26
    2e84:	9f 91       	pop	r25
    2e86:	8f 91       	pop	r24
    2e88:	7f 91       	pop	r23
    2e8a:	6f 91       	pop	r22
    2e8c:	5f 91       	pop	r21
    2e8e:	4f 91       	pop	r20
    2e90:	3f 91       	pop	r19
    2e92:	2f 91       	pop	r18
    2e94:	0f 90       	pop	r0
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	0f 90       	pop	r0
    2e9a:	1f 90       	pop	r1
    2e9c:	18 95       	reti

00002e9e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2e9e:	89 e9       	ldi	r24, 0x99	; 153
    2ea0:	97 e0       	ldi	r25, 0x07	; 7
    2ea2:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <_ZN14HardwareSerial9availableEv>
    2ea6:	21 e0       	ldi	r18, 0x01	; 1
    2ea8:	89 2b       	or	r24, r25
    2eaa:	09 f4       	brne	.+2      	; 0x2eae <_Z17Serial0_availablev+0x10>
    2eac:	20 e0       	ldi	r18, 0x00	; 0
}
    2eae:	82 2f       	mov	r24, r18
    2eb0:	08 95       	ret

00002eb2 <_GLOBAL__sub_I___vector_18>:
    2eb2:	e9 e9       	ldi	r30, 0x99	; 153
    2eb4:	f7 e0       	ldi	r31, 0x07	; 7
    2eb6:	13 82       	std	Z+3, r1	; 0x03
    2eb8:	12 82       	std	Z+2, r1	; 0x02
    2eba:	88 ee       	ldi	r24, 0xE8	; 232
    2ebc:	93 e0       	ldi	r25, 0x03	; 3
    2ebe:	a0 e0       	ldi	r26, 0x00	; 0
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	84 83       	std	Z+4, r24	; 0x04
    2ec4:	95 83       	std	Z+5, r25	; 0x05
    2ec6:	a6 83       	std	Z+6, r26	; 0x06
    2ec8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2eca:	8f e8       	ldi	r24, 0x8F	; 143
    2ecc:	94 e0       	ldi	r25, 0x04	; 4
    2ece:	91 83       	std	Z+1, r25	; 0x01
    2ed0:	80 83       	st	Z, r24
    2ed2:	85 ec       	ldi	r24, 0xC5	; 197
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	95 87       	std	Z+13, r25	; 0x0d
    2ed8:	84 87       	std	Z+12, r24	; 0x0c
    2eda:	84 ec       	ldi	r24, 0xC4	; 196
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	97 87       	std	Z+15, r25	; 0x0f
    2ee0:	86 87       	std	Z+14, r24	; 0x0e
    2ee2:	80 ec       	ldi	r24, 0xC0	; 192
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	91 8b       	std	Z+17, r25	; 0x11
    2ee8:	80 8b       	std	Z+16, r24	; 0x10
    2eea:	81 ec       	ldi	r24, 0xC1	; 193
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	93 8b       	std	Z+19, r25	; 0x13
    2ef0:	82 8b       	std	Z+18, r24	; 0x12
    2ef2:	82 ec       	ldi	r24, 0xC2	; 194
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	95 8b       	std	Z+21, r25	; 0x15
    2ef8:	84 8b       	std	Z+20, r24	; 0x14
    2efa:	86 ec       	ldi	r24, 0xC6	; 198
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	97 8b       	std	Z+23, r25	; 0x17
    2f00:	86 8b       	std	Z+22, r24	; 0x16
    2f02:	11 8e       	std	Z+25, r1	; 0x19
    2f04:	12 8e       	std	Z+26, r1	; 0x1a
    2f06:	13 8e       	std	Z+27, r1	; 0x1b
    2f08:	14 8e       	std	Z+28, r1	; 0x1c
    2f0a:	08 95       	ret

00002f0c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2f0c:	08 95       	ret

00002f0e <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    2f0e:	8f 92       	push	r8
    2f10:	9f 92       	push	r9
    2f12:	af 92       	push	r10
    2f14:	bf 92       	push	r11
    2f16:	cf 92       	push	r12
    2f18:	df 92       	push	r13
    2f1a:	ef 92       	push	r14
    2f1c:	ff 92       	push	r15
    2f1e:	0f 93       	push	r16
    2f20:	1f 93       	push	r17
    2f22:	cf 93       	push	r28
    2f24:	df 93       	push	r29
    2f26:	5c 01       	movw	r10, r24
    2f28:	7b 01       	movw	r14, r22
    2f2a:	4c 01       	movw	r8, r24
    2f2c:	82 e0       	ldi	r24, 0x02	; 2
    2f2e:	88 0e       	add	r8, r24
    2f30:	91 1c       	adc	r9, r1
    2f32:	65 01       	movw	r12, r10
    2f34:	e5 e0       	ldi	r30, 0x05	; 5
    2f36:	ce 0e       	add	r12, r30
    2f38:	d1 1c       	adc	r13, r1
    size_t n = 0;
    2f3a:	00 e0       	ldi	r16, 0x00	; 0
    2f3c:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    2f3e:	f4 01       	movw	r30, r8
    2f40:	61 91       	ld	r22, Z+
    2f42:	4f 01       	movw	r8, r30
    2f44:	4a e0       	ldi	r20, 0x0A	; 10
    2f46:	50 e0       	ldi	r21, 0x00	; 0
    2f48:	c7 01       	movw	r24, r14
    2f4a:	0e 94 13 19 	call	0x3226	; 0x3226 <_ZN5Print5printEhi>
    2f4e:	ec 01       	movw	r28, r24
        n += p.print('.');
    2f50:	6e e2       	ldi	r22, 0x2E	; 46
    2f52:	c7 01       	movw	r24, r14
    2f54:	0e 94 27 18 	call	0x304e	; 0x304e <_ZN5Print5printEc>
    2f58:	8c 0f       	add	r24, r28
    2f5a:	9d 1f       	adc	r25, r29
    2f5c:	08 0f       	add	r16, r24
    2f5e:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    2f60:	8c 14       	cp	r8, r12
    2f62:	9d 04       	cpc	r9, r13
    2f64:	61 f7       	brne	.-40     	; 0x2f3e <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    2f66:	4a e0       	ldi	r20, 0x0A	; 10
    2f68:	50 e0       	ldi	r21, 0x00	; 0
    2f6a:	f5 01       	movw	r30, r10
    2f6c:	65 81       	ldd	r22, Z+5	; 0x05
    2f6e:	c7 01       	movw	r24, r14
    2f70:	0e 94 13 19 	call	0x3226	; 0x3226 <_ZN5Print5printEhi>
    return n;
}
    2f74:	80 0f       	add	r24, r16
    2f76:	91 1f       	adc	r25, r17
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	ff 90       	pop	r15
    2f82:	ef 90       	pop	r14
    2f84:	df 90       	pop	r13
    2f86:	cf 90       	pop	r12
    2f88:	bf 90       	pop	r11
    2f8a:	af 90       	pop	r10
    2f8c:	9f 90       	pop	r9
    2f8e:	8f 90       	pop	r8
    2f90:	08 95       	ret

00002f92 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    2f92:	e6 e3       	ldi	r30, 0x36	; 54
    2f94:	f8 e0       	ldi	r31, 0x08	; 8
    2f96:	8f e9       	ldi	r24, 0x9F	; 159
    2f98:	94 e0       	ldi	r25, 0x04	; 4
    2f9a:	91 83       	std	Z+1, r25	; 0x01
    2f9c:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    2f9e:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    2fa0:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    2fa2:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    2fa4:	15 82       	std	Z+5, r1	; 0x05
    2fa6:	08 95       	ret

00002fa8 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2fa8:	08 95       	ret

00002faa <main>:

int main(void)
{
	init();
    2faa:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <init>

	initVariant();
    2fae:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2fb2:	0e 94 24 12 	call	0x2448	; 0x2448 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2fb6:	c4 ee       	ldi	r28, 0xE4	; 228
    2fb8:	d5 e1       	ldi	r29, 0x15	; 21
#endif
	
	setup();
    
	for (;;) {
		loop();
    2fba:	0e 94 8f 12 	call	0x251e	; 0x251e <loop>
		if (serialEventRun) serialEventRun();
    2fbe:	20 97       	sbiw	r28, 0x00	; 0
    2fc0:	e1 f3       	breq	.-8      	; 0x2fba <main+0x10>
    2fc2:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <_Z14serialEventRunv>
    2fc6:	f9 cf       	rjmp	.-14     	; 0x2fba <main+0x10>

00002fc8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2fc8:	cf 92       	push	r12
    2fca:	df 92       	push	r13
    2fcc:	ef 92       	push	r14
    2fce:	ff 92       	push	r15
    2fd0:	0f 93       	push	r16
    2fd2:	1f 93       	push	r17
    2fd4:	cf 93       	push	r28
    2fd6:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
    2fd8:	41 15       	cp	r20, r1
    2fda:	51 05       	cpc	r21, r1
    2fdc:	b1 f0       	breq	.+44     	; 0x300a <_ZN5Print5writeEPKhj+0x42>
    2fde:	8c 01       	movw	r16, r24
    2fe0:	e6 2e       	mov	r14, r22
    2fe2:	f7 2e       	mov	r15, r23
    2fe4:	ea 01       	movw	r28, r20
    2fe6:	c1 2c       	mov	r12, r1
    2fe8:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
    2fea:	d7 01       	movw	r26, r14
    2fec:	6d 91       	ld	r22, X+
    2fee:	7d 01       	movw	r14, r26
    2ff0:	d8 01       	movw	r26, r16
    2ff2:	ed 91       	ld	r30, X+
    2ff4:	fc 91       	ld	r31, X
    2ff6:	01 90       	ld	r0, Z+
    2ff8:	f0 81       	ld	r31, Z
    2ffa:	e0 2d       	mov	r30, r0
    2ffc:	c8 01       	movw	r24, r16
    2ffe:	09 95       	icall
    3000:	c8 0e       	add	r12, r24
    3002:	d9 1e       	adc	r13, r25
    3004:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    3006:	89 f7       	brne	.-30     	; 0x2fea <_ZN5Print5writeEPKhj+0x22>
    3008:	02 c0       	rjmp	.+4      	; 0x300e <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    300a:	c1 2c       	mov	r12, r1
    300c:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    300e:	c6 01       	movw	r24, r12
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	1f 91       	pop	r17
    3016:	0f 91       	pop	r16
    3018:	ff 90       	pop	r15
    301a:	ef 90       	pop	r14
    301c:	df 90       	pop	r13
    301e:	cf 90       	pop	r12
    3020:	08 95       	ret

00003022 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    3022:	61 15       	cp	r22, r1
    3024:	71 05       	cpc	r23, r1
    3026:	81 f0       	breq	.+32     	; 0x3048 <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
    3028:	fb 01       	movw	r30, r22
    302a:	01 90       	ld	r0, Z+
    302c:	00 20       	and	r0, r0
    302e:	e9 f7       	brne	.-6      	; 0x302a <_ZN5Print5printEPKc+0x8>
    3030:	31 97       	sbiw	r30, 0x01	; 1
    3032:	af 01       	movw	r20, r30
    3034:	46 1b       	sub	r20, r22
    3036:	57 0b       	sbc	r21, r23
    3038:	dc 01       	movw	r26, r24
    303a:	ed 91       	ld	r30, X+
    303c:	fc 91       	ld	r31, X
    303e:	02 80       	ldd	r0, Z+2	; 0x02
    3040:	f3 81       	ldd	r31, Z+3	; 0x03
    3042:	e0 2d       	mov	r30, r0
    3044:	09 95       	icall
    3046:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
    304c:	08 95       	ret

0000304e <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    304e:	dc 01       	movw	r26, r24
    3050:	ed 91       	ld	r30, X+
    3052:	fc 91       	ld	r31, X
    3054:	01 90       	ld	r0, Z+
    3056:	f0 81       	ld	r31, Z
    3058:	e0 2d       	mov	r30, r0
    305a:	09 95       	icall
}
    305c:	08 95       	ret

0000305e <_ZN5Print7printlnEv>:
      return write((const uint8_t *)str, strlen(str));
    305e:	dc 01       	movw	r26, r24
    3060:	ed 91       	ld	r30, X+
    3062:	fc 91       	ld	r31, X
    3064:	02 80       	ldd	r0, Z+2	; 0x02
    3066:	f3 81       	ldd	r31, Z+3	; 0x03
    3068:	e0 2d       	mov	r30, r0
    306a:	42 e0       	ldi	r20, 0x02	; 2
    306c:	50 e0       	ldi	r21, 0x00	; 0
    306e:	61 ea       	ldi	r22, 0xA1	; 161
    3070:	74 e0       	ldi	r23, 0x04	; 4
    3072:	09 95       	icall
}

size_t Print::println(void)
{
  return write("\r\n");
}
    3074:	08 95       	ret

00003076 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    3076:	0f 93       	push	r16
    3078:	1f 93       	push	r17
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
    307e:	ec 01       	movw	r28, r24
  size_t n = print(c);
    3080:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>
    3084:	8c 01       	movw	r16, r24
  n += println();
    3086:	ce 01       	movw	r24, r28
    3088:	0e 94 2f 18 	call	0x305e	; 0x305e <_ZN5Print7printlnEv>
  return n;
}
    308c:	80 0f       	add	r24, r16
    308e:	91 1f       	adc	r25, r17
    3090:	df 91       	pop	r29
    3092:	cf 91       	pop	r28
    3094:	1f 91       	pop	r17
    3096:	0f 91       	pop	r16
    3098:	08 95       	ret

0000309a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    309a:	4f 92       	push	r4
    309c:	5f 92       	push	r5
    309e:	6f 92       	push	r6
    30a0:	7f 92       	push	r7
    30a2:	9f 92       	push	r9
    30a4:	af 92       	push	r10
    30a6:	bf 92       	push	r11
    30a8:	cf 92       	push	r12
    30aa:	df 92       	push	r13
    30ac:	ef 92       	push	r14
    30ae:	ff 92       	push	r15
    30b0:	0f 93       	push	r16
    30b2:	1f 93       	push	r17
    30b4:	cf 93       	push	r28
    30b6:	df 93       	push	r29
    30b8:	cd b7       	in	r28, 0x3d	; 61
    30ba:	de b7       	in	r29, 0x3e	; 62
    30bc:	a1 97       	sbiw	r28, 0x21	; 33
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	de bf       	out	0x3e, r29	; 62
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	cd bf       	out	0x3d, r28	; 61
    30c8:	5c 01       	movw	r10, r24
    30ca:	6a 01       	movw	r12, r20
    30cc:	7b 01       	movw	r14, r22
    30ce:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    30d0:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	82 17       	cp	r24, r18
    30d6:	20 f0       	brcs	.+8      	; 0x30e0 <_ZN5Print11printNumberEmh+0x46>
    30d8:	0f 2e       	mov	r0, r31
    30da:	fa e0       	ldi	r31, 0x0A	; 10
    30dc:	9f 2e       	mov	r9, r31
    30de:	f0 2d       	mov	r31, r0
    30e0:	8e 01       	movw	r16, r28
    30e2:	0f 5d       	subi	r16, 0xDF	; 223
    30e4:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
    30e6:	49 2c       	mov	r4, r9
    30e8:	51 2c       	mov	r5, r1
    30ea:	61 2c       	mov	r6, r1
    30ec:	71 2c       	mov	r7, r1
    30ee:	c7 01       	movw	r24, r14
    30f0:	b6 01       	movw	r22, r12
    30f2:	a3 01       	movw	r20, r6
    30f4:	92 01       	movw	r18, r4
    30f6:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <__udivmodsi4>
    char c = m - base * n;
    30fa:	8c 2d       	mov	r24, r12
    30fc:	92 9e       	mul	r9, r18
    30fe:	80 19       	sub	r24, r0
    3100:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3102:	01 50       	subi	r16, 0x01	; 1
    3104:	11 09       	sbc	r17, r1
    3106:	8a 30       	cpi	r24, 0x0A	; 10
    3108:	10 f4       	brcc	.+4      	; 0x310e <_ZN5Print11printNumberEmh+0x74>
    310a:	80 5d       	subi	r24, 0xD0	; 208
    310c:	01 c0       	rjmp	.+2      	; 0x3110 <_ZN5Print11printNumberEmh+0x76>
    310e:	89 5c       	subi	r24, 0xC9	; 201
    3110:	d8 01       	movw	r26, r16
    3112:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    3114:	c2 2e       	mov	r12, r18
    3116:	d3 2e       	mov	r13, r19
    3118:	e4 2e       	mov	r14, r20
    311a:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    311c:	c1 14       	cp	r12, r1
    311e:	d1 04       	cpc	r13, r1
    3120:	e1 04       	cpc	r14, r1
    3122:	f1 04       	cpc	r15, r1
    3124:	21 f7       	brne	.-56     	; 0x30ee <_ZN5Print11printNumberEmh+0x54>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    3126:	01 15       	cp	r16, r1
    3128:	11 05       	cpc	r17, r1
    312a:	91 f0       	breq	.+36     	; 0x3150 <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
    312c:	f8 01       	movw	r30, r16
    312e:	01 90       	ld	r0, Z+
    3130:	00 20       	and	r0, r0
    3132:	e9 f7       	brne	.-6      	; 0x312e <_ZN5Print11printNumberEmh+0x94>
    3134:	31 97       	sbiw	r30, 0x01	; 1
    3136:	af 01       	movw	r20, r30
    3138:	40 1b       	sub	r20, r16
    313a:	51 0b       	sbc	r21, r17
    313c:	d5 01       	movw	r26, r10
    313e:	ed 91       	ld	r30, X+
    3140:	fc 91       	ld	r31, X
    3142:	02 80       	ldd	r0, Z+2	; 0x02
    3144:	f3 81       	ldd	r31, Z+3	; 0x03
    3146:	e0 2d       	mov	r30, r0
    3148:	b8 01       	movw	r22, r16
    314a:	c5 01       	movw	r24, r10
    314c:	09 95       	icall
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    3154:	a1 96       	adiw	r28, 0x21	; 33
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	1f 91       	pop	r17
    3166:	0f 91       	pop	r16
    3168:	ff 90       	pop	r15
    316a:	ef 90       	pop	r14
    316c:	df 90       	pop	r13
    316e:	cf 90       	pop	r12
    3170:	bf 90       	pop	r11
    3172:	af 90       	pop	r10
    3174:	9f 90       	pop	r9
    3176:	7f 90       	pop	r7
    3178:	6f 90       	pop	r6
    317a:	5f 90       	pop	r5
    317c:	4f 90       	pop	r4
    317e:	08 95       	ret

00003180 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    3180:	cf 92       	push	r12
    3182:	df 92       	push	r13
    3184:	ef 92       	push	r14
    3186:	ff 92       	push	r15
    3188:	0f 93       	push	r16
    318a:	1f 93       	push	r17
    318c:	cf 93       	push	r28
    318e:	df 93       	push	r29
    3190:	ec 01       	movw	r28, r24
    3192:	6a 01       	movw	r12, r20
    3194:	7b 01       	movw	r14, r22
  if (base == 0) {
    3196:	21 15       	cp	r18, r1
    3198:	31 05       	cpc	r19, r1
    319a:	41 f4       	brne	.+16     	; 0x31ac <_ZN5Print5printEli+0x2c>
    return write(n);
    319c:	e8 81       	ld	r30, Y
    319e:	f9 81       	ldd	r31, Y+1	; 0x01
    31a0:	01 90       	ld	r0, Z+
    31a2:	f0 81       	ld	r31, Z
    31a4:	e0 2d       	mov	r30, r0
    31a6:	64 2f       	mov	r22, r20
    31a8:	09 95       	icall
    31aa:	1d c0       	rjmp	.+58     	; 0x31e6 <_ZN5Print5printEli+0x66>
  } else if (base == 10) {
    31ac:	2a 30       	cpi	r18, 0x0A	; 10
    31ae:	31 05       	cpc	r19, r1
    31b0:	c1 f4       	brne	.+48     	; 0x31e2 <_ZN5Print5printEli+0x62>
    if (n < 0) {
    31b2:	77 23       	and	r23, r23
    31b4:	94 f4       	brge	.+36     	; 0x31da <_ZN5Print5printEli+0x5a>
      int t = print('-');
    31b6:	6d e2       	ldi	r22, 0x2D	; 45
    31b8:	0e 94 27 18 	call	0x304e	; 0x304e <_ZN5Print5printEc>
    31bc:	8c 01       	movw	r16, r24
      n = -n;
    31be:	44 27       	eor	r20, r20
    31c0:	55 27       	eor	r21, r21
    31c2:	ba 01       	movw	r22, r20
    31c4:	4c 19       	sub	r20, r12
    31c6:	5d 09       	sbc	r21, r13
    31c8:	6e 09       	sbc	r22, r14
    31ca:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    31cc:	2a e0       	ldi	r18, 0x0A	; 10
    31ce:	ce 01       	movw	r24, r28
    31d0:	0e 94 4d 18 	call	0x309a	; 0x309a <_ZN5Print11printNumberEmh>
    31d4:	80 0f       	add	r24, r16
    31d6:	91 1f       	adc	r25, r17
    31d8:	06 c0       	rjmp	.+12     	; 0x31e6 <_ZN5Print5printEli+0x66>
    }
    return printNumber(n, 10);
    31da:	2a e0       	ldi	r18, 0x0A	; 10
    31dc:	0e 94 4d 18 	call	0x309a	; 0x309a <_ZN5Print11printNumberEmh>
    31e0:	02 c0       	rjmp	.+4      	; 0x31e6 <_ZN5Print5printEli+0x66>
  } else {
    return printNumber(n, base);
    31e2:	0e 94 4d 18 	call	0x309a	; 0x309a <_ZN5Print11printNumberEmh>
  }
}
    31e6:	df 91       	pop	r29
    31e8:	cf 91       	pop	r28
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	ff 90       	pop	r15
    31f0:	ef 90       	pop	r14
    31f2:	df 90       	pop	r13
    31f4:	cf 90       	pop	r12
    31f6:	08 95       	ret

000031f8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    31f8:	9a 01       	movw	r18, r20
  return print((long) n, base);
    31fa:	ab 01       	movw	r20, r22
    31fc:	77 0f       	add	r23, r23
    31fe:	66 0b       	sbc	r22, r22
    3200:	77 0b       	sbc	r23, r23
    3202:	0e 94 c0 18 	call	0x3180	; 0x3180 <_ZN5Print5printEli>
}
    3206:	08 95       	ret

00003208 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    3208:	21 15       	cp	r18, r1
    320a:	31 05       	cpc	r19, r1
    320c:	49 f4       	brne	.+18     	; 0x3220 <_ZN5Print5printEmi+0x18>
    320e:	dc 01       	movw	r26, r24
    3210:	ed 91       	ld	r30, X+
    3212:	fc 91       	ld	r31, X
    3214:	01 90       	ld	r0, Z+
    3216:	f0 81       	ld	r31, Z
    3218:	e0 2d       	mov	r30, r0
    321a:	64 2f       	mov	r22, r20
    321c:	09 95       	icall
    321e:	08 95       	ret
  else return printNumber(n, base);
    3220:	0e 94 4d 18 	call	0x309a	; 0x309a <_ZN5Print11printNumberEmh>
}
    3224:	08 95       	ret

00003226 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    3226:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    3228:	46 2f       	mov	r20, r22
    322a:	50 e0       	ldi	r21, 0x00	; 0
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	70 e0       	ldi	r23, 0x00	; 0
    3230:	0e 94 04 19 	call	0x3208	; 0x3208 <_ZN5Print5printEmi>
}
    3234:	08 95       	ret

00003236 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3236:	4f 92       	push	r4
    3238:	5f 92       	push	r5
    323a:	7f 92       	push	r7
    323c:	8f 92       	push	r8
    323e:	9f 92       	push	r9
    3240:	af 92       	push	r10
    3242:	bf 92       	push	r11
    3244:	cf 92       	push	r12
    3246:	df 92       	push	r13
    3248:	ef 92       	push	r14
    324a:	ff 92       	push	r15
    324c:	0f 93       	push	r16
    324e:	1f 93       	push	r17
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	00 d0       	rcall	.+0      	; 0x3256 <_ZN5Print10printFloatEdh+0x20>
    3256:	00 d0       	rcall	.+0      	; 0x3258 <_ZN5Print10printFloatEdh+0x22>
    3258:	cd b7       	in	r28, 0x3d	; 61
    325a:	de b7       	in	r29, 0x3e	; 62
    325c:	8c 01       	movw	r16, r24
    325e:	4a 01       	movw	r8, r20
    3260:	5b 01       	movw	r10, r22
    3262:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    3264:	9a 01       	movw	r18, r20
    3266:	ab 01       	movw	r20, r22
    3268:	c5 01       	movw	r24, r10
    326a:	b4 01       	movw	r22, r8
    326c:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__unordsf2>
    3270:	88 23       	and	r24, r24
    3272:	31 f0       	breq	.+12     	; 0x3280 <_ZN5Print10printFloatEdh+0x4a>
    3274:	64 ea       	ldi	r22, 0xA4	; 164
    3276:	74 e0       	ldi	r23, 0x04	; 4
    3278:	c8 01       	movw	r24, r16
    327a:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>
    327e:	d2 c0       	rjmp	.+420    	; 0x3424 <_ZN5Print10printFloatEdh+0x1ee>
  if (isinf(number)) return print("inf");
    3280:	75 01       	movw	r14, r10
    3282:	64 01       	movw	r12, r8
    3284:	e8 94       	clt
    3286:	f7 f8       	bld	r15, 7
    3288:	2f ef       	ldi	r18, 0xFF	; 255
    328a:	3f ef       	ldi	r19, 0xFF	; 255
    328c:	4f e7       	ldi	r20, 0x7F	; 127
    328e:	5f e7       	ldi	r21, 0x7F	; 127
    3290:	c7 01       	movw	r24, r14
    3292:	b6 01       	movw	r22, r12
    3294:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__unordsf2>
    3298:	81 11       	cpse	r24, r1
    329a:	10 c0       	rjmp	.+32     	; 0x32bc <_ZN5Print10printFloatEdh+0x86>
    329c:	2f ef       	ldi	r18, 0xFF	; 255
    329e:	3f ef       	ldi	r19, 0xFF	; 255
    32a0:	4f e7       	ldi	r20, 0x7F	; 127
    32a2:	5f e7       	ldi	r21, 0x7F	; 127
    32a4:	c7 01       	movw	r24, r14
    32a6:	b6 01       	movw	r22, r12
    32a8:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__cmpsf2>
    32ac:	18 16       	cp	r1, r24
    32ae:	34 f4       	brge	.+12     	; 0x32bc <_ZN5Print10printFloatEdh+0x86>
    32b0:	68 ea       	ldi	r22, 0xA8	; 168
    32b2:	74 e0       	ldi	r23, 0x04	; 4
    32b4:	c8 01       	movw	r24, r16
    32b6:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>
    32ba:	b4 c0       	rjmp	.+360    	; 0x3424 <_ZN5Print10printFloatEdh+0x1ee>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    32bc:	2f ef       	ldi	r18, 0xFF	; 255
    32be:	3f ef       	ldi	r19, 0xFF	; 255
    32c0:	4f e7       	ldi	r20, 0x7F	; 127
    32c2:	5f e4       	ldi	r21, 0x4F	; 79
    32c4:	c5 01       	movw	r24, r10
    32c6:	b4 01       	movw	r22, r8
    32c8:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <__gesf2>
    32cc:	18 16       	cp	r1, r24
    32ce:	34 f4       	brge	.+12     	; 0x32dc <_ZN5Print10printFloatEdh+0xa6>
    32d0:	6c ea       	ldi	r22, 0xAC	; 172
    32d2:	74 e0       	ldi	r23, 0x04	; 4
    32d4:	c8 01       	movw	r24, r16
    32d6:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>
    32da:	a4 c0       	rjmp	.+328    	; 0x3424 <_ZN5Print10printFloatEdh+0x1ee>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    32dc:	2f ef       	ldi	r18, 0xFF	; 255
    32de:	3f ef       	ldi	r19, 0xFF	; 255
    32e0:	4f e7       	ldi	r20, 0x7F	; 127
    32e2:	5f ec       	ldi	r21, 0xCF	; 207
    32e4:	c5 01       	movw	r24, r10
    32e6:	b4 01       	movw	r22, r8
    32e8:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__cmpsf2>
    32ec:	88 23       	and	r24, r24
    32ee:	34 f4       	brge	.+12     	; 0x32fc <_ZN5Print10printFloatEdh+0xc6>
    32f0:	6c ea       	ldi	r22, 0xAC	; 172
    32f2:	74 e0       	ldi	r23, 0x04	; 4
    32f4:	c8 01       	movw	r24, r16
    32f6:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>
    32fa:	94 c0       	rjmp	.+296    	; 0x3424 <_ZN5Print10printFloatEdh+0x1ee>
  
  // Handle negative numbers
  if (number < 0.0)
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	a9 01       	movw	r20, r18
    3302:	c5 01       	movw	r24, r10
    3304:	b4 01       	movw	r22, r8
    3306:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__cmpsf2>
    330a:	88 23       	and	r24, r24
    330c:	54 f4       	brge	.+20     	; 0x3322 <_ZN5Print10printFloatEdh+0xec>
  {
     n += print('-');
    330e:	6d e2       	ldi	r22, 0x2D	; 45
    3310:	c8 01       	movw	r24, r16
    3312:	0e 94 27 18 	call	0x304e	; 0x304e <_ZN5Print5printEc>
    3316:	7c 01       	movw	r14, r24
     number = -number;
    3318:	b7 fa       	bst	r11, 7
    331a:	b0 94       	com	r11
    331c:	b7 f8       	bld	r11, 7
    331e:	b0 94       	com	r11
    3320:	02 c0       	rjmp	.+4      	; 0x3326 <_ZN5Print10printFloatEdh+0xf0>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    3322:	e1 2c       	mov	r14, r1
    3324:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3326:	77 20       	and	r7, r7
    3328:	09 f4       	brne	.+2      	; 0x332c <_ZN5Print10printFloatEdh+0xf6>
    332a:	67 c0       	rjmp	.+206    	; 0x33fa <_ZN5Print10printFloatEdh+0x1c4>
    332c:	d1 2c       	mov	r13, r1
    332e:	60 e0       	ldi	r22, 0x00	; 0
    3330:	70 e0       	ldi	r23, 0x00	; 0
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	40 e2       	ldi	r20, 0x20	; 32
    333c:	51 e4       	ldi	r21, 0x41	; 65
    333e:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3342:	d3 94       	inc	r13
    3344:	d7 10       	cpse	r13, r7
    3346:	f7 cf       	rjmp	.-18     	; 0x3336 <_ZN5Print10printFloatEdh+0x100>
    3348:	2b c0       	rjmp	.+86     	; 0x33a0 <_ZN5Print10printFloatEdh+0x16a>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	40 e2       	ldi	r20, 0x20	; 32
    3350:	51 e4       	ldi	r21, 0x41	; 65
    3352:	c5 01       	movw	r24, r10
    3354:	b4 01       	movw	r22, r8
    3356:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__mulsf3>
    335a:	4b 01       	movw	r8, r22
    335c:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    335e:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    3362:	6b 01       	movw	r12, r22
    3364:	77 0f       	add	r23, r23
    3366:	ee 08       	sbc	r14, r14
    3368:	ff 08       	sbc	r15, r15
    336a:	2a e0       	ldi	r18, 0x0A	; 10
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	b7 01       	movw	r22, r14
    3370:	a6 01       	movw	r20, r12
    3372:	c8 01       	movw	r24, r16
    3374:	0e 94 c0 18 	call	0x3180	; 0x3180 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    3378:	48 0e       	add	r4, r24
    337a:	59 1e       	adc	r5, r25
    remainder -= toPrint; 
    337c:	c7 01       	movw	r24, r14
    337e:	b6 01       	movw	r22, r12
    3380:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__floatsisf>
    3384:	9b 01       	movw	r18, r22
    3386:	ac 01       	movw	r20, r24
    3388:	c5 01       	movw	r24, r10
    338a:	b4 01       	movw	r22, r8
    338c:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__subsf3>
    3390:	4b 01       	movw	r8, r22
    3392:	5c 01       	movw	r10, r24
    3394:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    3396:	71 10       	cpse	r7, r1
    3398:	d8 cf       	rjmp	.-80     	; 0x334a <_ZN5Print10printFloatEdh+0x114>
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    339a:	84 2d       	mov	r24, r4
    339c:	95 2d       	mov	r25, r5
    339e:	42 c0       	rjmp	.+132    	; 0x3424 <_ZN5Print10printFloatEdh+0x1ee>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    33a0:	9b 01       	movw	r18, r22
    33a2:	ac 01       	movw	r20, r24
    33a4:	c5 01       	movw	r24, r10
    33a6:	b4 01       	movw	r22, r8
    33a8:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__addsf3>
    33ac:	4b 01       	movw	r8, r22
    33ae:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    33b0:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__fixunssfsi>
    33b4:	69 83       	std	Y+1, r22	; 0x01
    33b6:	7a 83       	std	Y+2, r23	; 0x02
    33b8:	8b 83       	std	Y+3, r24	; 0x03
    33ba:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    33bc:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__floatunsisf>
    33c0:	9b 01       	movw	r18, r22
    33c2:	ac 01       	movw	r20, r24
    33c4:	c5 01       	movw	r24, r10
    33c6:	b4 01       	movw	r22, r8
    33c8:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__subsf3>
    33cc:	4b 01       	movw	r8, r22
    33ce:	5c 01       	movw	r10, r24
  n += print(int_part);
    33d0:	2a e0       	ldi	r18, 0x0A	; 10
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	49 81       	ldd	r20, Y+1	; 0x01
    33d6:	5a 81       	ldd	r21, Y+2	; 0x02
    33d8:	6b 81       	ldd	r22, Y+3	; 0x03
    33da:	7c 81       	ldd	r23, Y+4	; 0x04
    33dc:	c8 01       	movw	r24, r16
    33de:	0e 94 04 19 	call	0x3208	; 0x3208 <_ZN5Print5printEmi>
    33e2:	6c 01       	movw	r12, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    33e4:	60 eb       	ldi	r22, 0xB0	; 176
    33e6:	74 e0       	ldi	r23, 0x04	; 4
    33e8:	c8 01       	movw	r24, r16
    33ea:	0e 94 11 18 	call	0x3022	; 0x3022 <_ZN5Print5printEPKc>
    33ee:	8c 0d       	add	r24, r12
    33f0:	9d 1d       	adc	r25, r13
    33f2:	2c 01       	movw	r4, r24
    33f4:	4e 0c       	add	r4, r14
    33f6:	5f 1c       	adc	r5, r15
    33f8:	a8 cf       	rjmp	.-176    	; 0x334a <_ZN5Print10printFloatEdh+0x114>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e0       	ldi	r20, 0x00	; 0
    3400:	5f e3       	ldi	r21, 0x3F	; 63
    3402:	c5 01       	movw	r24, r10
    3404:	b4 01       	movw	r22, r8
    3406:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    340a:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__fixunssfsi>
    340e:	ab 01       	movw	r20, r22
    3410:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    3412:	2a e0       	ldi	r18, 0x0A	; 10
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	c8 01       	movw	r24, r16
    3418:	0e 94 04 19 	call	0x3208	; 0x3208 <_ZN5Print5printEmi>
    341c:	2c 01       	movw	r4, r24
    341e:	4e 0c       	add	r4, r14
    3420:	5f 1c       	adc	r5, r15
    3422:	bb cf       	rjmp	.-138    	; 0x339a <_ZN5Print10printFloatEdh+0x164>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	df 91       	pop	r29
    342e:	cf 91       	pop	r28
    3430:	1f 91       	pop	r17
    3432:	0f 91       	pop	r16
    3434:	ff 90       	pop	r15
    3436:	ef 90       	pop	r14
    3438:	df 90       	pop	r13
    343a:	cf 90       	pop	r12
    343c:	bf 90       	pop	r11
    343e:	af 90       	pop	r10
    3440:	9f 90       	pop	r9
    3442:	8f 90       	pop	r8
    3444:	7f 90       	pop	r7
    3446:	5f 90       	pop	r5
    3448:	4f 90       	pop	r4
    344a:	08 95       	ret

0000344c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    344c:	0f 93       	push	r16
    344e:	1f 93       	push	r17
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
    3454:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3456:	0e 94 1b 19 	call	0x3236	; 0x3236 <_ZN5Print10printFloatEdh>
    345a:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    345c:	ce 01       	movw	r24, r28
    345e:	0e 94 2f 18 	call	0x305e	; 0x305e <_ZN5Print7printlnEv>
  return n;
}
    3462:	80 0f       	add	r24, r16
    3464:	91 1f       	adc	r25, r17
    3466:	df 91       	pop	r29
    3468:	cf 91       	pop	r28
    346a:	1f 91       	pop	r17
    346c:	0f 91       	pop	r16
    346e:	08 95       	ret

00003470 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    3470:	81 30       	cpi	r24, 0x01	; 1
    3472:	39 f0       	breq	.+14     	; 0x3482 <_Z12disableTimerh+0x12>
    3474:	18 f0       	brcs	.+6      	; 0x347c <_Z12disableTimerh+0xc>
    3476:	82 30       	cpi	r24, 0x02	; 2
    3478:	51 f0       	breq	.+20     	; 0x348e <_Z12disableTimerh+0x1e>
    347a:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    347c:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    3480:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    3482:	ef e6       	ldi	r30, 0x6F	; 111
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	80 81       	ld	r24, Z
    3488:	8d 7f       	andi	r24, 0xFD	; 253
    348a:	80 83       	st	Z, r24
      break;
    348c:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    348e:	e0 e7       	ldi	r30, 0x70	; 112
    3490:	f0 e0       	ldi	r31, 0x00	; 0
    3492:	80 81       	ld	r24, Z
    3494:	8d 7f       	andi	r24, 0xFD	; 253
    3496:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    349e:	e1 eb       	ldi	r30, 0xB1	; 177
    34a0:	f0 e0       	ldi	r31, 0x00	; 0
    34a2:	80 81       	ld	r24, Z
    34a4:	88 7f       	andi	r24, 0xF8	; 248
    34a6:	84 60       	ori	r24, 0x04	; 4
    34a8:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    34aa:	10 92 b3 00 	sts	0x00B3, r1
    34ae:	08 95       	ret

000034b0 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    34b0:	cf 93       	push	r28
    34b2:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    34b4:	80 91 04 04 	lds	r24, 0x0404
    34b8:	8c 13       	cpse	r24, r28
    34ba:	08 c0       	rjmp	.+16     	; 0x34cc <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    34bc:	e8 e6       	ldi	r30, 0x68	; 104
    34be:	f1 e0       	ldi	r31, 0x01	; 1
    34c0:	e4 91       	lpm	r30, Z
    34c2:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    34c4:	9f ef       	ldi	r25, 0xFF	; 255
    34c6:	90 93 04 04 	sts	0x0404, r25
    34ca:	01 c0       	rjmp	.+2      	; 0x34ce <_Z6noToneh+0x1e>
    34cc:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    34ce:	0e 94 38 1a 	call	0x3470	; 0x3470 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    34d2:	60 e0       	ldi	r22, 0x00	; 0
    34d4:	8c 2f       	mov	r24, r28
    34d6:	0e 94 81 1c 	call	0x3902	; 0x3902 <digitalWrite>
}
    34da:	cf 91       	pop	r28
    34dc:	08 95       	ret

000034de <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    34de:	1f 92       	push	r1
    34e0:	0f 92       	push	r0
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	0f 92       	push	r0
    34e6:	11 24       	eor	r1, r1
    34e8:	2f 93       	push	r18
    34ea:	3f 93       	push	r19
    34ec:	4f 93       	push	r20
    34ee:	5f 93       	push	r21
    34f0:	6f 93       	push	r22
    34f2:	7f 93       	push	r23
    34f4:	8f 93       	push	r24
    34f6:	9f 93       	push	r25
    34f8:	af 93       	push	r26
    34fa:	bf 93       	push	r27
    34fc:	ef 93       	push	r30
    34fe:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    3500:	80 91 3f 08 	lds	r24, 0x083F
    3504:	90 91 40 08 	lds	r25, 0x0840
    3508:	a0 91 41 08 	lds	r26, 0x0841
    350c:	b0 91 42 08 	lds	r27, 0x0842
    3510:	89 2b       	or	r24, r25
    3512:	8a 2b       	or	r24, r26
    3514:	8b 2b       	or	r24, r27
    3516:	51 f1       	breq	.+84     	; 0x356c <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    3518:	80 91 3c 08 	lds	r24, 0x083C
    351c:	e0 91 3d 08 	lds	r30, 0x083D
    3520:	f0 91 3e 08 	lds	r31, 0x083E
    3524:	90 81       	ld	r25, Z
    3526:	89 27       	eor	r24, r25
    3528:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    352a:	80 91 3f 08 	lds	r24, 0x083F
    352e:	90 91 40 08 	lds	r25, 0x0840
    3532:	a0 91 41 08 	lds	r26, 0x0841
    3536:	b0 91 42 08 	lds	r27, 0x0842
    353a:	18 16       	cp	r1, r24
    353c:	19 06       	cpc	r1, r25
    353e:	1a 06       	cpc	r1, r26
    3540:	1b 06       	cpc	r1, r27
    3542:	c4 f4       	brge	.+48     	; 0x3574 <__vector_7+0x96>
      timer2_toggle_count--;
    3544:	80 91 3f 08 	lds	r24, 0x083F
    3548:	90 91 40 08 	lds	r25, 0x0840
    354c:	a0 91 41 08 	lds	r26, 0x0841
    3550:	b0 91 42 08 	lds	r27, 0x0842
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	a1 09       	sbc	r26, r1
    3558:	b1 09       	sbc	r27, r1
    355a:	80 93 3f 08 	sts	0x083F, r24
    355e:	90 93 40 08 	sts	0x0840, r25
    3562:	a0 93 41 08 	sts	0x0841, r26
    3566:	b0 93 42 08 	sts	0x0842, r27
    356a:	04 c0       	rjmp	.+8      	; 0x3574 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    356c:	80 91 04 04 	lds	r24, 0x0404
    3570:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    3574:	ff 91       	pop	r31
    3576:	ef 91       	pop	r30
    3578:	bf 91       	pop	r27
    357a:	af 91       	pop	r26
    357c:	9f 91       	pop	r25
    357e:	8f 91       	pop	r24
    3580:	7f 91       	pop	r23
    3582:	6f 91       	pop	r22
    3584:	5f 91       	pop	r21
    3586:	4f 91       	pop	r20
    3588:	3f 91       	pop	r19
    358a:	2f 91       	pop	r18
    358c:	0f 90       	pop	r0
    358e:	0f be       	out	0x3f, r0	; 63
    3590:	0f 90       	pop	r0
    3592:	1f 90       	pop	r1
    3594:	18 95       	reti

00003596 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    3596:	1f 92       	push	r1
    3598:	0f 92       	push	r0
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	0f 92       	push	r0
    359e:	11 24       	eor	r1, r1
    35a0:	2f 93       	push	r18
    35a2:	3f 93       	push	r19
    35a4:	4f 93       	push	r20
    35a6:	5f 93       	push	r21
    35a8:	6f 93       	push	r22
    35aa:	7f 93       	push	r23
    35ac:	8f 93       	push	r24
    35ae:	9f 93       	push	r25
    35b0:	af 93       	push	r26
    35b2:	bf 93       	push	r27
    35b4:	ef 93       	push	r30
    35b6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    35b8:	80 91 43 08 	lds	r24, 0x0843
    35bc:	90 91 44 08 	lds	r25, 0x0844
    35c0:	89 2b       	or	r24, r25
    35c2:	29 f0       	breq	.+10     	; 0x35ce <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    35c4:	e0 91 43 08 	lds	r30, 0x0843
    35c8:	f0 91 44 08 	lds	r31, 0x0844
    35cc:	09 95       	icall
}
    35ce:	ff 91       	pop	r31
    35d0:	ef 91       	pop	r30
    35d2:	bf 91       	pop	r27
    35d4:	af 91       	pop	r26
    35d6:	9f 91       	pop	r25
    35d8:	8f 91       	pop	r24
    35da:	7f 91       	pop	r23
    35dc:	6f 91       	pop	r22
    35de:	5f 91       	pop	r21
    35e0:	4f 91       	pop	r20
    35e2:	3f 91       	pop	r19
    35e4:	2f 91       	pop	r18
    35e6:	0f 90       	pop	r0
    35e8:	0f be       	out	0x3f, r0	; 63
    35ea:	0f 90       	pop	r0
    35ec:	1f 90       	pop	r1
    35ee:	18 95       	reti

000035f0 <__vector_2>:

ISR(INT1_vect) {
    35f0:	1f 92       	push	r1
    35f2:	0f 92       	push	r0
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	0f 92       	push	r0
    35f8:	11 24       	eor	r1, r1
    35fa:	2f 93       	push	r18
    35fc:	3f 93       	push	r19
    35fe:	4f 93       	push	r20
    3600:	5f 93       	push	r21
    3602:	6f 93       	push	r22
    3604:	7f 93       	push	r23
    3606:	8f 93       	push	r24
    3608:	9f 93       	push	r25
    360a:	af 93       	push	r26
    360c:	bf 93       	push	r27
    360e:	ef 93       	push	r30
    3610:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    3612:	80 91 45 08 	lds	r24, 0x0845
    3616:	90 91 46 08 	lds	r25, 0x0846
    361a:	89 2b       	or	r24, r25
    361c:	29 f0       	breq	.+10     	; 0x3628 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    361e:	e0 91 45 08 	lds	r30, 0x0845
    3622:	f0 91 46 08 	lds	r31, 0x0846
    3626:	09 95       	icall
}
    3628:	ff 91       	pop	r31
    362a:	ef 91       	pop	r30
    362c:	bf 91       	pop	r27
    362e:	af 91       	pop	r26
    3630:	9f 91       	pop	r25
    3632:	8f 91       	pop	r24
    3634:	7f 91       	pop	r23
    3636:	6f 91       	pop	r22
    3638:	5f 91       	pop	r21
    363a:	4f 91       	pop	r20
    363c:	3f 91       	pop	r19
    363e:	2f 91       	pop	r18
    3640:	0f 90       	pop	r0
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	0f 90       	pop	r0
    3646:	1f 90       	pop	r1
    3648:	18 95       	reti

0000364a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    364a:	1f 92       	push	r1
    364c:	0f 92       	push	r0
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	0f 92       	push	r0
    3652:	11 24       	eor	r1, r1
    3654:	2f 93       	push	r18
    3656:	3f 93       	push	r19
    3658:	8f 93       	push	r24
    365a:	9f 93       	push	r25
    365c:	af 93       	push	r26
    365e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3660:	80 91 48 08 	lds	r24, 0x0848
    3664:	90 91 49 08 	lds	r25, 0x0849
    3668:	a0 91 4a 08 	lds	r26, 0x084A
    366c:	b0 91 4b 08 	lds	r27, 0x084B
	unsigned char f = timer0_fract;
    3670:	30 91 47 08 	lds	r19, 0x0847

	m += MILLIS_INC;
	f += FRACT_INC;
    3674:	23 e0       	ldi	r18, 0x03	; 3
    3676:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    3678:	2d 37       	cpi	r18, 0x7D	; 125
    367a:	20 f4       	brcc	.+8      	; 0x3684 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    367c:	01 96       	adiw	r24, 0x01	; 1
    367e:	a1 1d       	adc	r26, r1
    3680:	b1 1d       	adc	r27, r1
    3682:	05 c0       	rjmp	.+10     	; 0x368e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    3684:	26 e8       	ldi	r18, 0x86	; 134
    3686:	23 0f       	add	r18, r19
		m += 1;
    3688:	02 96       	adiw	r24, 0x02	; 2
    368a:	a1 1d       	adc	r26, r1
    368c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    368e:	20 93 47 08 	sts	0x0847, r18
	timer0_millis = m;
    3692:	80 93 48 08 	sts	0x0848, r24
    3696:	90 93 49 08 	sts	0x0849, r25
    369a:	a0 93 4a 08 	sts	0x084A, r26
    369e:	b0 93 4b 08 	sts	0x084B, r27
	timer0_overflow_count++;
    36a2:	80 91 4c 08 	lds	r24, 0x084C
    36a6:	90 91 4d 08 	lds	r25, 0x084D
    36aa:	a0 91 4e 08 	lds	r26, 0x084E
    36ae:	b0 91 4f 08 	lds	r27, 0x084F
    36b2:	01 96       	adiw	r24, 0x01	; 1
    36b4:	a1 1d       	adc	r26, r1
    36b6:	b1 1d       	adc	r27, r1
    36b8:	80 93 4c 08 	sts	0x084C, r24
    36bc:	90 93 4d 08 	sts	0x084D, r25
    36c0:	a0 93 4e 08 	sts	0x084E, r26
    36c4:	b0 93 4f 08 	sts	0x084F, r27
}
    36c8:	bf 91       	pop	r27
    36ca:	af 91       	pop	r26
    36cc:	9f 91       	pop	r25
    36ce:	8f 91       	pop	r24
    36d0:	3f 91       	pop	r19
    36d2:	2f 91       	pop	r18
    36d4:	0f 90       	pop	r0
    36d6:	0f be       	out	0x3f, r0	; 63
    36d8:	0f 90       	pop	r0
    36da:	1f 90       	pop	r1
    36dc:	18 95       	reti

000036de <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    36de:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    36e0:	f8 94       	cli
	m = timer0_millis;
    36e2:	60 91 48 08 	lds	r22, 0x0848
    36e6:	70 91 49 08 	lds	r23, 0x0849
    36ea:	80 91 4a 08 	lds	r24, 0x084A
    36ee:	90 91 4b 08 	lds	r25, 0x084B
	SREG = oldSREG;
    36f2:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    36f4:	08 95       	ret

000036f6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    36f6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    36f8:	f8 94       	cli
	m = timer0_overflow_count;
    36fa:	80 91 4c 08 	lds	r24, 0x084C
    36fe:	90 91 4d 08 	lds	r25, 0x084D
    3702:	a0 91 4e 08 	lds	r26, 0x084E
    3706:	b0 91 4f 08 	lds	r27, 0x084F
#if defined(TCNT0)
	t = TCNT0;
    370a:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    370c:	a8 9b       	sbis	0x15, 0	; 21
    370e:	05 c0       	rjmp	.+10     	; 0x371a <micros+0x24>
    3710:	2f 3f       	cpi	r18, 0xFF	; 255
    3712:	19 f0       	breq	.+6      	; 0x371a <micros+0x24>
		m++;
    3714:	01 96       	adiw	r24, 0x01	; 1
    3716:	a1 1d       	adc	r26, r1
    3718:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    371a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    371c:	ba 2f       	mov	r27, r26
    371e:	a9 2f       	mov	r26, r25
    3720:	98 2f       	mov	r25, r24
    3722:	88 27       	eor	r24, r24
    3724:	82 0f       	add	r24, r18
    3726:	91 1d       	adc	r25, r1
    3728:	a1 1d       	adc	r26, r1
    372a:	b1 1d       	adc	r27, r1
    372c:	bc 01       	movw	r22, r24
    372e:	cd 01       	movw	r24, r26
    3730:	66 0f       	add	r22, r22
    3732:	77 1f       	adc	r23, r23
    3734:	88 1f       	adc	r24, r24
    3736:	99 1f       	adc	r25, r25
    3738:	66 0f       	add	r22, r22
    373a:	77 1f       	adc	r23, r23
    373c:	88 1f       	adc	r24, r24
    373e:	99 1f       	adc	r25, r25
}
    3740:	08 95       	ret

00003742 <delay>:

void delay(unsigned long ms)
{
    3742:	cf 92       	push	r12
    3744:	df 92       	push	r13
    3746:	ef 92       	push	r14
    3748:	ff 92       	push	r15
    374a:	cf 93       	push	r28
    374c:	df 93       	push	r29
    374e:	6b 01       	movw	r12, r22
    3750:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    3752:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <micros>
    3756:	eb 01       	movw	r28, r22

	while (ms > 0) {
    3758:	c1 14       	cp	r12, r1
    375a:	d1 04       	cpc	r13, r1
    375c:	e1 04       	cpc	r14, r1
    375e:	f1 04       	cpc	r15, r1
    3760:	a9 f0       	breq	.+42     	; 0x378c <delay+0x4a>
		yield();
    3762:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    3766:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <micros>
    376a:	6c 1b       	sub	r22, r28
    376c:	7d 0b       	sbc	r23, r29
    376e:	68 3e       	cpi	r22, 0xE8	; 232
    3770:	73 40       	sbci	r23, 0x03	; 3
    3772:	38 f0       	brcs	.+14     	; 0x3782 <delay+0x40>
			ms--;
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	c8 1a       	sub	r12, r24
    3778:	d1 08       	sbc	r13, r1
    377a:	e1 08       	sbc	r14, r1
    377c:	f1 08       	sbc	r15, r1
			start += 1000;
    377e:	c8 51       	subi	r28, 0x18	; 24
    3780:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    3782:	c1 14       	cp	r12, r1
    3784:	d1 04       	cpc	r13, r1
    3786:	e1 04       	cpc	r14, r1
    3788:	f1 04       	cpc	r15, r1
    378a:	59 f7       	brne	.-42     	; 0x3762 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    378c:	df 91       	pop	r29
    378e:	cf 91       	pop	r28
    3790:	ff 90       	pop	r15
    3792:	ef 90       	pop	r14
    3794:	df 90       	pop	r13
    3796:	cf 90       	pop	r12
    3798:	08 95       	ret

0000379a <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    379a:	82 30       	cpi	r24, 0x02	; 2
    379c:	91 05       	cpc	r25, r1
    379e:	38 f0       	brcs	.+14     	; 0x37ae <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    37a0:	88 0f       	add	r24, r24
    37a2:	99 1f       	adc	r25, r25
    37a4:	88 0f       	add	r24, r24
    37a6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    37a8:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    37aa:	01 97       	sbiw	r24, 0x01	; 1
    37ac:	f1 f7       	brne	.-4      	; 0x37aa <delayMicroseconds+0x10>
    37ae:	08 95       	ret

000037b0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    37b0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    37b2:	84 b5       	in	r24, 0x24	; 36
    37b4:	82 60       	ori	r24, 0x02	; 2
    37b6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    37b8:	84 b5       	in	r24, 0x24	; 36
    37ba:	81 60       	ori	r24, 0x01	; 1
    37bc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    37be:	85 b5       	in	r24, 0x25	; 37
    37c0:	82 60       	ori	r24, 0x02	; 2
    37c2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    37c4:	85 b5       	in	r24, 0x25	; 37
    37c6:	81 60       	ori	r24, 0x01	; 1
    37c8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    37ca:	ee e6       	ldi	r30, 0x6E	; 110
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	80 81       	ld	r24, Z
    37d0:	81 60       	ori	r24, 0x01	; 1
    37d2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    37d4:	e1 e8       	ldi	r30, 0x81	; 129
    37d6:	f0 e0       	ldi	r31, 0x00	; 0
    37d8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    37da:	80 81       	ld	r24, Z
    37dc:	82 60       	ori	r24, 0x02	; 2
    37de:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    37e0:	80 81       	ld	r24, Z
    37e2:	81 60       	ori	r24, 0x01	; 1
    37e4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    37e6:	e0 e8       	ldi	r30, 0x80	; 128
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	80 81       	ld	r24, Z
    37ec:	81 60       	ori	r24, 0x01	; 1
    37ee:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    37f0:	e1 eb       	ldi	r30, 0xB1	; 177
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	80 81       	ld	r24, Z
    37f6:	84 60       	ori	r24, 0x04	; 4
    37f8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    37fa:	e0 eb       	ldi	r30, 0xB0	; 176
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	80 81       	ld	r24, Z
    3800:	81 60       	ori	r24, 0x01	; 1
    3802:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3804:	ea e7       	ldi	r30, 0x7A	; 122
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 81       	ld	r24, Z
    380a:	84 60       	ori	r24, 0x04	; 4
    380c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    380e:	80 81       	ld	r24, Z
    3810:	82 60       	ori	r24, 0x02	; 2
    3812:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3814:	80 81       	ld	r24, Z
    3816:	81 60       	ori	r24, 0x01	; 1
    3818:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    381a:	80 81       	ld	r24, Z
    381c:	80 68       	ori	r24, 0x80	; 128
    381e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3820:	10 92 c1 00 	sts	0x00C1, r1
    3824:	08 95       	ret

00003826 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3826:	83 30       	cpi	r24, 0x03	; 3
    3828:	69 f0       	breq	.+26     	; 0x3844 <turnOffPWM+0x1e>
    382a:	28 f4       	brcc	.+10     	; 0x3836 <turnOffPWM+0x10>
    382c:	81 30       	cpi	r24, 0x01	; 1
    382e:	b1 f0       	breq	.+44     	; 0x385c <turnOffPWM+0x36>
    3830:	82 30       	cpi	r24, 0x02	; 2
    3832:	c1 f0       	breq	.+48     	; 0x3864 <turnOffPWM+0x3e>
    3834:	08 95       	ret
    3836:	87 30       	cpi	r24, 0x07	; 7
    3838:	c9 f0       	breq	.+50     	; 0x386c <turnOffPWM+0x46>
    383a:	88 30       	cpi	r24, 0x08	; 8
    383c:	e9 f0       	breq	.+58     	; 0x3878 <turnOffPWM+0x52>
    383e:	84 30       	cpi	r24, 0x04	; 4
    3840:	01 f5       	brne	.+64     	; 0x3882 <turnOffPWM+0x5c>
    3842:	06 c0       	rjmp	.+12     	; 0x3850 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3844:	e0 e8       	ldi	r30, 0x80	; 128
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	80 81       	ld	r24, Z
    384a:	8f 77       	andi	r24, 0x7F	; 127
    384c:	80 83       	st	Z, r24
    384e:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3850:	e0 e8       	ldi	r30, 0x80	; 128
    3852:	f0 e0       	ldi	r31, 0x00	; 0
    3854:	80 81       	ld	r24, Z
    3856:	8f 7d       	andi	r24, 0xDF	; 223
    3858:	80 83       	st	Z, r24
    385a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    385c:	84 b5       	in	r24, 0x24	; 36
    385e:	8f 77       	andi	r24, 0x7F	; 127
    3860:	84 bd       	out	0x24, r24	; 36
    3862:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3864:	84 b5       	in	r24, 0x24	; 36
    3866:	8f 7d       	andi	r24, 0xDF	; 223
    3868:	84 bd       	out	0x24, r24	; 36
    386a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    386c:	e0 eb       	ldi	r30, 0xB0	; 176
    386e:	f0 e0       	ldi	r31, 0x00	; 0
    3870:	80 81       	ld	r24, Z
    3872:	8f 77       	andi	r24, 0x7F	; 127
    3874:	80 83       	st	Z, r24
    3876:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3878:	e0 eb       	ldi	r30, 0xB0	; 176
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	80 81       	ld	r24, Z
    387e:	8f 7d       	andi	r24, 0xDF	; 223
    3880:	80 83       	st	Z, r24
    3882:	08 95       	ret

00003884 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	fc 01       	movw	r30, r24
    388c:	e3 58       	subi	r30, 0x83	; 131
    388e:	fe 4f       	sbci	r31, 0xFE	; 254
    3890:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3892:	fc 01       	movw	r30, r24
    3894:	ef 56       	subi	r30, 0x6F	; 111
    3896:	fe 4f       	sbci	r31, 0xFE	; 254
    3898:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    389a:	88 23       	and	r24, r24
    389c:	79 f1       	breq	.+94     	; 0x38fc <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	88 0f       	add	r24, r24
    38a2:	99 1f       	adc	r25, r25
    38a4:	fc 01       	movw	r30, r24
    38a6:	e7 54       	subi	r30, 0x47	; 71
    38a8:	fe 4f       	sbci	r31, 0xFE	; 254
    38aa:	a5 91       	lpm	r26, Z+
    38ac:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    38ae:	fc 01       	movw	r30, r24
    38b0:	e1 55       	subi	r30, 0x51	; 81
    38b2:	fe 4f       	sbci	r31, 0xFE	; 254
    38b4:	c5 91       	lpm	r28, Z+
    38b6:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    38b8:	61 11       	cpse	r22, r1
    38ba:	0c c0       	rjmp	.+24     	; 0x38d4 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    38bc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    38be:	f8 94       	cli
		*reg &= ~bit;
    38c0:	8c 91       	ld	r24, X
    38c2:	e2 2f       	mov	r30, r18
    38c4:	e0 95       	com	r30
    38c6:	8e 23       	and	r24, r30
    38c8:	8c 93       	st	X, r24
		*out &= ~bit;
    38ca:	28 81       	ld	r18, Y
    38cc:	e2 23       	and	r30, r18
    38ce:	e8 83       	st	Y, r30
		SREG = oldSREG;
    38d0:	9f bf       	out	0x3f, r25	; 63
    38d2:	14 c0       	rjmp	.+40     	; 0x38fc <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    38d4:	62 30       	cpi	r22, 0x02	; 2
    38d6:	61 f4       	brne	.+24     	; 0x38f0 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    38d8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    38da:	f8 94       	cli
		*reg &= ~bit;
    38dc:	3c 91       	ld	r19, X
    38de:	82 2f       	mov	r24, r18
    38e0:	80 95       	com	r24
    38e2:	83 23       	and	r24, r19
    38e4:	8c 93       	st	X, r24
		*out |= bit;
    38e6:	e8 81       	ld	r30, Y
    38e8:	e2 2b       	or	r30, r18
    38ea:	e8 83       	st	Y, r30
		SREG = oldSREG;
    38ec:	9f bf       	out	0x3f, r25	; 63
    38ee:	06 c0       	rjmp	.+12     	; 0x38fc <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    38f0:	8f b7       	in	r24, 0x3f	; 63
                cli();
    38f2:	f8 94       	cli
		*reg |= bit;
    38f4:	ec 91       	ld	r30, X
    38f6:	e2 2b       	or	r30, r18
    38f8:	ec 93       	st	X, r30
		SREG = oldSREG;
    38fa:	8f bf       	out	0x3f, r24	; 63
	}
}
    38fc:	df 91       	pop	r29
    38fe:	cf 91       	pop	r28
    3900:	08 95       	ret

00003902 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3902:	1f 93       	push	r17
    3904:	cf 93       	push	r28
    3906:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3908:	28 2f       	mov	r18, r24
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	f9 01       	movw	r30, r18
    390e:	e7 59       	subi	r30, 0x97	; 151
    3910:	fe 4f       	sbci	r31, 0xFE	; 254
    3912:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3914:	f9 01       	movw	r30, r18
    3916:	e3 58       	subi	r30, 0x83	; 131
    3918:	fe 4f       	sbci	r31, 0xFE	; 254
    391a:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    391c:	f9 01       	movw	r30, r18
    391e:	ef 56       	subi	r30, 0x6F	; 111
    3920:	fe 4f       	sbci	r31, 0xFE	; 254
    3922:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3924:	cc 23       	and	r28, r28
    3926:	d1 f0       	breq	.+52     	; 0x395c <digitalWrite+0x5a>
    3928:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    392a:	81 11       	cpse	r24, r1
    392c:	0e 94 13 1c 	call	0x3826	; 0x3826 <turnOffPWM>

	out = portOutputRegister(port);
    3930:	ec 2f       	mov	r30, r28
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	ee 0f       	add	r30, r30
    3936:	ff 1f       	adc	r31, r31
    3938:	e1 55       	subi	r30, 0x51	; 81
    393a:	fe 4f       	sbci	r31, 0xFE	; 254
    393c:	a5 91       	lpm	r26, Z+
    393e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3940:	8f b7       	in	r24, 0x3f	; 63
	cli();
    3942:	f8 94       	cli

	if (val == LOW) {
    3944:	d1 11       	cpse	r29, r1
    3946:	06 c0       	rjmp	.+12     	; 0x3954 <digitalWrite+0x52>
		*out &= ~bit;
    3948:	9c 91       	ld	r25, X
    394a:	e1 2f       	mov	r30, r17
    394c:	e0 95       	com	r30
    394e:	e9 23       	and	r30, r25
    3950:	ec 93       	st	X, r30
    3952:	03 c0       	rjmp	.+6      	; 0x395a <digitalWrite+0x58>
	} else {
		*out |= bit;
    3954:	ec 91       	ld	r30, X
    3956:	e1 2b       	or	r30, r17
    3958:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    395a:	8f bf       	out	0x3f, r24	; 63
}
    395c:	df 91       	pop	r29
    395e:	cf 91       	pop	r28
    3960:	1f 91       	pop	r17
    3962:	08 95       	ret

00003964 <__subsf3>:
    3964:	50 58       	subi	r21, 0x80	; 128

00003966 <__addsf3>:
    3966:	bb 27       	eor	r27, r27
    3968:	aa 27       	eor	r26, r26
    396a:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__addsf3x>
    396e:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__fp_round>
    3972:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fp_pscA>
    3976:	38 f0       	brcs	.+14     	; 0x3986 <__addsf3+0x20>
    3978:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__fp_pscB>
    397c:	20 f0       	brcs	.+8      	; 0x3986 <__addsf3+0x20>
    397e:	39 f4       	brne	.+14     	; 0x398e <__addsf3+0x28>
    3980:	9f 3f       	cpi	r25, 0xFF	; 255
    3982:	19 f4       	brne	.+6      	; 0x398a <__addsf3+0x24>
    3984:	26 f4       	brtc	.+8      	; 0x398e <__addsf3+0x28>
    3986:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__fp_nan>
    398a:	0e f4       	brtc	.+2      	; 0x398e <__addsf3+0x28>
    398c:	e0 95       	com	r30
    398e:	e7 fb       	bst	r30, 7
    3990:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__fp_inf>

00003994 <__addsf3x>:
    3994:	e9 2f       	mov	r30, r25
    3996:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__fp_split3>
    399a:	58 f3       	brcs	.-42     	; 0x3972 <__addsf3+0xc>
    399c:	ba 17       	cp	r27, r26
    399e:	62 07       	cpc	r22, r18
    39a0:	73 07       	cpc	r23, r19
    39a2:	84 07       	cpc	r24, r20
    39a4:	95 07       	cpc	r25, r21
    39a6:	20 f0       	brcs	.+8      	; 0x39b0 <__addsf3x+0x1c>
    39a8:	79 f4       	brne	.+30     	; 0x39c8 <__addsf3x+0x34>
    39aa:	a6 f5       	brtc	.+104    	; 0x3a14 <__addsf3x+0x80>
    39ac:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__fp_zero>
    39b0:	0e f4       	brtc	.+2      	; 0x39b4 <__addsf3x+0x20>
    39b2:	e0 95       	com	r30
    39b4:	0b 2e       	mov	r0, r27
    39b6:	ba 2f       	mov	r27, r26
    39b8:	a0 2d       	mov	r26, r0
    39ba:	0b 01       	movw	r0, r22
    39bc:	b9 01       	movw	r22, r18
    39be:	90 01       	movw	r18, r0
    39c0:	0c 01       	movw	r0, r24
    39c2:	ca 01       	movw	r24, r20
    39c4:	a0 01       	movw	r20, r0
    39c6:	11 24       	eor	r1, r1
    39c8:	ff 27       	eor	r31, r31
    39ca:	59 1b       	sub	r21, r25
    39cc:	99 f0       	breq	.+38     	; 0x39f4 <__addsf3x+0x60>
    39ce:	59 3f       	cpi	r21, 0xF9	; 249
    39d0:	50 f4       	brcc	.+20     	; 0x39e6 <__addsf3x+0x52>
    39d2:	50 3e       	cpi	r21, 0xE0	; 224
    39d4:	68 f1       	brcs	.+90     	; 0x3a30 <__addsf3x+0x9c>
    39d6:	1a 16       	cp	r1, r26
    39d8:	f0 40       	sbci	r31, 0x00	; 0
    39da:	a2 2f       	mov	r26, r18
    39dc:	23 2f       	mov	r18, r19
    39de:	34 2f       	mov	r19, r20
    39e0:	44 27       	eor	r20, r20
    39e2:	58 5f       	subi	r21, 0xF8	; 248
    39e4:	f3 cf       	rjmp	.-26     	; 0x39cc <__addsf3x+0x38>
    39e6:	46 95       	lsr	r20
    39e8:	37 95       	ror	r19
    39ea:	27 95       	ror	r18
    39ec:	a7 95       	ror	r26
    39ee:	f0 40       	sbci	r31, 0x00	; 0
    39f0:	53 95       	inc	r21
    39f2:	c9 f7       	brne	.-14     	; 0x39e6 <__addsf3x+0x52>
    39f4:	7e f4       	brtc	.+30     	; 0x3a14 <__addsf3x+0x80>
    39f6:	1f 16       	cp	r1, r31
    39f8:	ba 0b       	sbc	r27, r26
    39fa:	62 0b       	sbc	r22, r18
    39fc:	73 0b       	sbc	r23, r19
    39fe:	84 0b       	sbc	r24, r20
    3a00:	ba f0       	brmi	.+46     	; 0x3a30 <__addsf3x+0x9c>
    3a02:	91 50       	subi	r25, 0x01	; 1
    3a04:	a1 f0       	breq	.+40     	; 0x3a2e <__addsf3x+0x9a>
    3a06:	ff 0f       	add	r31, r31
    3a08:	bb 1f       	adc	r27, r27
    3a0a:	66 1f       	adc	r22, r22
    3a0c:	77 1f       	adc	r23, r23
    3a0e:	88 1f       	adc	r24, r24
    3a10:	c2 f7       	brpl	.-16     	; 0x3a02 <__addsf3x+0x6e>
    3a12:	0e c0       	rjmp	.+28     	; 0x3a30 <__addsf3x+0x9c>
    3a14:	ba 0f       	add	r27, r26
    3a16:	62 1f       	adc	r22, r18
    3a18:	73 1f       	adc	r23, r19
    3a1a:	84 1f       	adc	r24, r20
    3a1c:	48 f4       	brcc	.+18     	; 0x3a30 <__addsf3x+0x9c>
    3a1e:	87 95       	ror	r24
    3a20:	77 95       	ror	r23
    3a22:	67 95       	ror	r22
    3a24:	b7 95       	ror	r27
    3a26:	f7 95       	ror	r31
    3a28:	9e 3f       	cpi	r25, 0xFE	; 254
    3a2a:	08 f0       	brcs	.+2      	; 0x3a2e <__addsf3x+0x9a>
    3a2c:	b0 cf       	rjmp	.-160    	; 0x398e <__addsf3+0x28>
    3a2e:	93 95       	inc	r25
    3a30:	88 0f       	add	r24, r24
    3a32:	08 f0       	brcs	.+2      	; 0x3a36 <__addsf3x+0xa2>
    3a34:	99 27       	eor	r25, r25
    3a36:	ee 0f       	add	r30, r30
    3a38:	97 95       	ror	r25
    3a3a:	87 95       	ror	r24
    3a3c:	08 95       	ret

00003a3e <__cmpsf2>:
    3a3e:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <__fp_cmp>
    3a42:	08 f4       	brcc	.+2      	; 0x3a46 <__cmpsf2+0x8>
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	08 95       	ret

00003a48 <__divsf3>:
    3a48:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <__divsf3x>
    3a4c:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__fp_round>
    3a50:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__fp_pscB>
    3a54:	58 f0       	brcs	.+22     	; 0x3a6c <__divsf3+0x24>
    3a56:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fp_pscA>
    3a5a:	40 f0       	brcs	.+16     	; 0x3a6c <__divsf3+0x24>
    3a5c:	29 f4       	brne	.+10     	; 0x3a68 <__divsf3+0x20>
    3a5e:	5f 3f       	cpi	r21, 0xFF	; 255
    3a60:	29 f0       	breq	.+10     	; 0x3a6c <__divsf3+0x24>
    3a62:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__fp_inf>
    3a66:	51 11       	cpse	r21, r1
    3a68:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__fp_szero>
    3a6c:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__fp_nan>

00003a70 <__divsf3x>:
    3a70:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__fp_split3>
    3a74:	68 f3       	brcs	.-38     	; 0x3a50 <__divsf3+0x8>

00003a76 <__divsf3_pse>:
    3a76:	99 23       	and	r25, r25
    3a78:	b1 f3       	breq	.-20     	; 0x3a66 <__divsf3+0x1e>
    3a7a:	55 23       	and	r21, r21
    3a7c:	91 f3       	breq	.-28     	; 0x3a62 <__divsf3+0x1a>
    3a7e:	95 1b       	sub	r25, r21
    3a80:	55 0b       	sbc	r21, r21
    3a82:	bb 27       	eor	r27, r27
    3a84:	aa 27       	eor	r26, r26
    3a86:	62 17       	cp	r22, r18
    3a88:	73 07       	cpc	r23, r19
    3a8a:	84 07       	cpc	r24, r20
    3a8c:	38 f0       	brcs	.+14     	; 0x3a9c <__divsf3_pse+0x26>
    3a8e:	9f 5f       	subi	r25, 0xFF	; 255
    3a90:	5f 4f       	sbci	r21, 0xFF	; 255
    3a92:	22 0f       	add	r18, r18
    3a94:	33 1f       	adc	r19, r19
    3a96:	44 1f       	adc	r20, r20
    3a98:	aa 1f       	adc	r26, r26
    3a9a:	a9 f3       	breq	.-22     	; 0x3a86 <__divsf3_pse+0x10>
    3a9c:	35 d0       	rcall	.+106    	; 0x3b08 <__divsf3_pse+0x92>
    3a9e:	0e 2e       	mov	r0, r30
    3aa0:	3a f0       	brmi	.+14     	; 0x3ab0 <__divsf3_pse+0x3a>
    3aa2:	e0 e8       	ldi	r30, 0x80	; 128
    3aa4:	32 d0       	rcall	.+100    	; 0x3b0a <__divsf3_pse+0x94>
    3aa6:	91 50       	subi	r25, 0x01	; 1
    3aa8:	50 40       	sbci	r21, 0x00	; 0
    3aaa:	e6 95       	lsr	r30
    3aac:	00 1c       	adc	r0, r0
    3aae:	ca f7       	brpl	.-14     	; 0x3aa2 <__divsf3_pse+0x2c>
    3ab0:	2b d0       	rcall	.+86     	; 0x3b08 <__divsf3_pse+0x92>
    3ab2:	fe 2f       	mov	r31, r30
    3ab4:	29 d0       	rcall	.+82     	; 0x3b08 <__divsf3_pse+0x92>
    3ab6:	66 0f       	add	r22, r22
    3ab8:	77 1f       	adc	r23, r23
    3aba:	88 1f       	adc	r24, r24
    3abc:	bb 1f       	adc	r27, r27
    3abe:	26 17       	cp	r18, r22
    3ac0:	37 07       	cpc	r19, r23
    3ac2:	48 07       	cpc	r20, r24
    3ac4:	ab 07       	cpc	r26, r27
    3ac6:	b0 e8       	ldi	r27, 0x80	; 128
    3ac8:	09 f0       	breq	.+2      	; 0x3acc <__divsf3_pse+0x56>
    3aca:	bb 0b       	sbc	r27, r27
    3acc:	80 2d       	mov	r24, r0
    3ace:	bf 01       	movw	r22, r30
    3ad0:	ff 27       	eor	r31, r31
    3ad2:	93 58       	subi	r25, 0x83	; 131
    3ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ad6:	3a f0       	brmi	.+14     	; 0x3ae6 <__divsf3_pse+0x70>
    3ad8:	9e 3f       	cpi	r25, 0xFE	; 254
    3ada:	51 05       	cpc	r21, r1
    3adc:	78 f0       	brcs	.+30     	; 0x3afc <__divsf3_pse+0x86>
    3ade:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__fp_inf>
    3ae2:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__fp_szero>
    3ae6:	5f 3f       	cpi	r21, 0xFF	; 255
    3ae8:	e4 f3       	brlt	.-8      	; 0x3ae2 <__divsf3_pse+0x6c>
    3aea:	98 3e       	cpi	r25, 0xE8	; 232
    3aec:	d4 f3       	brlt	.-12     	; 0x3ae2 <__divsf3_pse+0x6c>
    3aee:	86 95       	lsr	r24
    3af0:	77 95       	ror	r23
    3af2:	67 95       	ror	r22
    3af4:	b7 95       	ror	r27
    3af6:	f7 95       	ror	r31
    3af8:	9f 5f       	subi	r25, 0xFF	; 255
    3afa:	c9 f7       	brne	.-14     	; 0x3aee <__divsf3_pse+0x78>
    3afc:	88 0f       	add	r24, r24
    3afe:	91 1d       	adc	r25, r1
    3b00:	96 95       	lsr	r25
    3b02:	87 95       	ror	r24
    3b04:	97 f9       	bld	r25, 7
    3b06:	08 95       	ret
    3b08:	e1 e0       	ldi	r30, 0x01	; 1
    3b0a:	66 0f       	add	r22, r22
    3b0c:	77 1f       	adc	r23, r23
    3b0e:	88 1f       	adc	r24, r24
    3b10:	bb 1f       	adc	r27, r27
    3b12:	62 17       	cp	r22, r18
    3b14:	73 07       	cpc	r23, r19
    3b16:	84 07       	cpc	r24, r20
    3b18:	ba 07       	cpc	r27, r26
    3b1a:	20 f0       	brcs	.+8      	; 0x3b24 <__divsf3_pse+0xae>
    3b1c:	62 1b       	sub	r22, r18
    3b1e:	73 0b       	sbc	r23, r19
    3b20:	84 0b       	sbc	r24, r20
    3b22:	ba 0b       	sbc	r27, r26
    3b24:	ee 1f       	adc	r30, r30
    3b26:	88 f7       	brcc	.-30     	; 0x3b0a <__divsf3_pse+0x94>
    3b28:	e0 95       	com	r30
    3b2a:	08 95       	ret

00003b2c <__fixsfsi>:
    3b2c:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__fixunssfsi>
    3b30:	68 94       	set
    3b32:	b1 11       	cpse	r27, r1
    3b34:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__fp_szero>
    3b38:	08 95       	ret

00003b3a <__fixunssfsi>:
    3b3a:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__fp_splitA>
    3b3e:	88 f0       	brcs	.+34     	; 0x3b62 <__fixunssfsi+0x28>
    3b40:	9f 57       	subi	r25, 0x7F	; 127
    3b42:	98 f0       	brcs	.+38     	; 0x3b6a <__fixunssfsi+0x30>
    3b44:	b9 2f       	mov	r27, r25
    3b46:	99 27       	eor	r25, r25
    3b48:	b7 51       	subi	r27, 0x17	; 23
    3b4a:	b0 f0       	brcs	.+44     	; 0x3b78 <__fixunssfsi+0x3e>
    3b4c:	e1 f0       	breq	.+56     	; 0x3b86 <__fixunssfsi+0x4c>
    3b4e:	66 0f       	add	r22, r22
    3b50:	77 1f       	adc	r23, r23
    3b52:	88 1f       	adc	r24, r24
    3b54:	99 1f       	adc	r25, r25
    3b56:	1a f0       	brmi	.+6      	; 0x3b5e <__fixunssfsi+0x24>
    3b58:	ba 95       	dec	r27
    3b5a:	c9 f7       	brne	.-14     	; 0x3b4e <__fixunssfsi+0x14>
    3b5c:	14 c0       	rjmp	.+40     	; 0x3b86 <__fixunssfsi+0x4c>
    3b5e:	b1 30       	cpi	r27, 0x01	; 1
    3b60:	91 f0       	breq	.+36     	; 0x3b86 <__fixunssfsi+0x4c>
    3b62:	0e 94 77 1e 	call	0x3cee	; 0x3cee <__fp_zero>
    3b66:	b1 e0       	ldi	r27, 0x01	; 1
    3b68:	08 95       	ret
    3b6a:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__fp_zero>
    3b6e:	67 2f       	mov	r22, r23
    3b70:	78 2f       	mov	r23, r24
    3b72:	88 27       	eor	r24, r24
    3b74:	b8 5f       	subi	r27, 0xF8	; 248
    3b76:	39 f0       	breq	.+14     	; 0x3b86 <__fixunssfsi+0x4c>
    3b78:	b9 3f       	cpi	r27, 0xF9	; 249
    3b7a:	cc f3       	brlt	.-14     	; 0x3b6e <__fixunssfsi+0x34>
    3b7c:	86 95       	lsr	r24
    3b7e:	77 95       	ror	r23
    3b80:	67 95       	ror	r22
    3b82:	b3 95       	inc	r27
    3b84:	d9 f7       	brne	.-10     	; 0x3b7c <__fixunssfsi+0x42>
    3b86:	3e f4       	brtc	.+14     	; 0x3b96 <__fixunssfsi+0x5c>
    3b88:	90 95       	com	r25
    3b8a:	80 95       	com	r24
    3b8c:	70 95       	com	r23
    3b8e:	61 95       	neg	r22
    3b90:	7f 4f       	sbci	r23, 0xFF	; 255
    3b92:	8f 4f       	sbci	r24, 0xFF	; 255
    3b94:	9f 4f       	sbci	r25, 0xFF	; 255
    3b96:	08 95       	ret

00003b98 <__floatunsisf>:
    3b98:	e8 94       	clt
    3b9a:	09 c0       	rjmp	.+18     	; 0x3bae <__floatsisf+0x12>

00003b9c <__floatsisf>:
    3b9c:	97 fb       	bst	r25, 7
    3b9e:	3e f4       	brtc	.+14     	; 0x3bae <__floatsisf+0x12>
    3ba0:	90 95       	com	r25
    3ba2:	80 95       	com	r24
    3ba4:	70 95       	com	r23
    3ba6:	61 95       	neg	r22
    3ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    3baa:	8f 4f       	sbci	r24, 0xFF	; 255
    3bac:	9f 4f       	sbci	r25, 0xFF	; 255
    3bae:	99 23       	and	r25, r25
    3bb0:	a9 f0       	breq	.+42     	; 0x3bdc <__floatsisf+0x40>
    3bb2:	f9 2f       	mov	r31, r25
    3bb4:	96 e9       	ldi	r25, 0x96	; 150
    3bb6:	bb 27       	eor	r27, r27
    3bb8:	93 95       	inc	r25
    3bba:	f6 95       	lsr	r31
    3bbc:	87 95       	ror	r24
    3bbe:	77 95       	ror	r23
    3bc0:	67 95       	ror	r22
    3bc2:	b7 95       	ror	r27
    3bc4:	f1 11       	cpse	r31, r1
    3bc6:	f8 cf       	rjmp	.-16     	; 0x3bb8 <__floatsisf+0x1c>
    3bc8:	fa f4       	brpl	.+62     	; 0x3c08 <__floatsisf+0x6c>
    3bca:	bb 0f       	add	r27, r27
    3bcc:	11 f4       	brne	.+4      	; 0x3bd2 <__floatsisf+0x36>
    3bce:	60 ff       	sbrs	r22, 0
    3bd0:	1b c0       	rjmp	.+54     	; 0x3c08 <__floatsisf+0x6c>
    3bd2:	6f 5f       	subi	r22, 0xFF	; 255
    3bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bd6:	8f 4f       	sbci	r24, 0xFF	; 255
    3bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3bda:	16 c0       	rjmp	.+44     	; 0x3c08 <__floatsisf+0x6c>
    3bdc:	88 23       	and	r24, r24
    3bde:	11 f0       	breq	.+4      	; 0x3be4 <__floatsisf+0x48>
    3be0:	96 e9       	ldi	r25, 0x96	; 150
    3be2:	11 c0       	rjmp	.+34     	; 0x3c06 <__floatsisf+0x6a>
    3be4:	77 23       	and	r23, r23
    3be6:	21 f0       	breq	.+8      	; 0x3bf0 <__floatsisf+0x54>
    3be8:	9e e8       	ldi	r25, 0x8E	; 142
    3bea:	87 2f       	mov	r24, r23
    3bec:	76 2f       	mov	r23, r22
    3bee:	05 c0       	rjmp	.+10     	; 0x3bfa <__floatsisf+0x5e>
    3bf0:	66 23       	and	r22, r22
    3bf2:	71 f0       	breq	.+28     	; 0x3c10 <__floatsisf+0x74>
    3bf4:	96 e8       	ldi	r25, 0x86	; 134
    3bf6:	86 2f       	mov	r24, r22
    3bf8:	70 e0       	ldi	r23, 0x00	; 0
    3bfa:	60 e0       	ldi	r22, 0x00	; 0
    3bfc:	2a f0       	brmi	.+10     	; 0x3c08 <__floatsisf+0x6c>
    3bfe:	9a 95       	dec	r25
    3c00:	66 0f       	add	r22, r22
    3c02:	77 1f       	adc	r23, r23
    3c04:	88 1f       	adc	r24, r24
    3c06:	da f7       	brpl	.-10     	; 0x3bfe <__floatsisf+0x62>
    3c08:	88 0f       	add	r24, r24
    3c0a:	96 95       	lsr	r25
    3c0c:	87 95       	ror	r24
    3c0e:	97 f9       	bld	r25, 7
    3c10:	08 95       	ret

00003c12 <__fp_cmp>:
    3c12:	99 0f       	add	r25, r25
    3c14:	00 08       	sbc	r0, r0
    3c16:	55 0f       	add	r21, r21
    3c18:	aa 0b       	sbc	r26, r26
    3c1a:	e0 e8       	ldi	r30, 0x80	; 128
    3c1c:	fe ef       	ldi	r31, 0xFE	; 254
    3c1e:	16 16       	cp	r1, r22
    3c20:	17 06       	cpc	r1, r23
    3c22:	e8 07       	cpc	r30, r24
    3c24:	f9 07       	cpc	r31, r25
    3c26:	c0 f0       	brcs	.+48     	; 0x3c58 <__fp_cmp+0x46>
    3c28:	12 16       	cp	r1, r18
    3c2a:	13 06       	cpc	r1, r19
    3c2c:	e4 07       	cpc	r30, r20
    3c2e:	f5 07       	cpc	r31, r21
    3c30:	98 f0       	brcs	.+38     	; 0x3c58 <__fp_cmp+0x46>
    3c32:	62 1b       	sub	r22, r18
    3c34:	73 0b       	sbc	r23, r19
    3c36:	84 0b       	sbc	r24, r20
    3c38:	95 0b       	sbc	r25, r21
    3c3a:	39 f4       	brne	.+14     	; 0x3c4a <__fp_cmp+0x38>
    3c3c:	0a 26       	eor	r0, r26
    3c3e:	61 f0       	breq	.+24     	; 0x3c58 <__fp_cmp+0x46>
    3c40:	23 2b       	or	r18, r19
    3c42:	24 2b       	or	r18, r20
    3c44:	25 2b       	or	r18, r21
    3c46:	21 f4       	brne	.+8      	; 0x3c50 <__fp_cmp+0x3e>
    3c48:	08 95       	ret
    3c4a:	0a 26       	eor	r0, r26
    3c4c:	09 f4       	brne	.+2      	; 0x3c50 <__fp_cmp+0x3e>
    3c4e:	a1 40       	sbci	r26, 0x01	; 1
    3c50:	a6 95       	lsr	r26
    3c52:	8f ef       	ldi	r24, 0xFF	; 255
    3c54:	81 1d       	adc	r24, r1
    3c56:	81 1d       	adc	r24, r1
    3c58:	08 95       	ret

00003c5a <__fp_inf>:
    3c5a:	97 f9       	bld	r25, 7
    3c5c:	9f 67       	ori	r25, 0x7F	; 127
    3c5e:	80 e8       	ldi	r24, 0x80	; 128
    3c60:	70 e0       	ldi	r23, 0x00	; 0
    3c62:	60 e0       	ldi	r22, 0x00	; 0
    3c64:	08 95       	ret

00003c66 <__fp_nan>:
    3c66:	9f ef       	ldi	r25, 0xFF	; 255
    3c68:	80 ec       	ldi	r24, 0xC0	; 192
    3c6a:	08 95       	ret

00003c6c <__fp_pscA>:
    3c6c:	00 24       	eor	r0, r0
    3c6e:	0a 94       	dec	r0
    3c70:	16 16       	cp	r1, r22
    3c72:	17 06       	cpc	r1, r23
    3c74:	18 06       	cpc	r1, r24
    3c76:	09 06       	cpc	r0, r25
    3c78:	08 95       	ret

00003c7a <__fp_pscB>:
    3c7a:	00 24       	eor	r0, r0
    3c7c:	0a 94       	dec	r0
    3c7e:	12 16       	cp	r1, r18
    3c80:	13 06       	cpc	r1, r19
    3c82:	14 06       	cpc	r1, r20
    3c84:	05 06       	cpc	r0, r21
    3c86:	08 95       	ret

00003c88 <__fp_round>:
    3c88:	09 2e       	mov	r0, r25
    3c8a:	03 94       	inc	r0
    3c8c:	00 0c       	add	r0, r0
    3c8e:	11 f4       	brne	.+4      	; 0x3c94 <__fp_round+0xc>
    3c90:	88 23       	and	r24, r24
    3c92:	52 f0       	brmi	.+20     	; 0x3ca8 <__fp_round+0x20>
    3c94:	bb 0f       	add	r27, r27
    3c96:	40 f4       	brcc	.+16     	; 0x3ca8 <__fp_round+0x20>
    3c98:	bf 2b       	or	r27, r31
    3c9a:	11 f4       	brne	.+4      	; 0x3ca0 <__fp_round+0x18>
    3c9c:	60 ff       	sbrs	r22, 0
    3c9e:	04 c0       	rjmp	.+8      	; 0x3ca8 <__fp_round+0x20>
    3ca0:	6f 5f       	subi	r22, 0xFF	; 255
    3ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca4:	8f 4f       	sbci	r24, 0xFF	; 255
    3ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca8:	08 95       	ret

00003caa <__fp_split3>:
    3caa:	57 fd       	sbrc	r21, 7
    3cac:	90 58       	subi	r25, 0x80	; 128
    3cae:	44 0f       	add	r20, r20
    3cb0:	55 1f       	adc	r21, r21
    3cb2:	59 f0       	breq	.+22     	; 0x3cca <__fp_splitA+0x10>
    3cb4:	5f 3f       	cpi	r21, 0xFF	; 255
    3cb6:	71 f0       	breq	.+28     	; 0x3cd4 <__fp_splitA+0x1a>
    3cb8:	47 95       	ror	r20

00003cba <__fp_splitA>:
    3cba:	88 0f       	add	r24, r24
    3cbc:	97 fb       	bst	r25, 7
    3cbe:	99 1f       	adc	r25, r25
    3cc0:	61 f0       	breq	.+24     	; 0x3cda <__fp_splitA+0x20>
    3cc2:	9f 3f       	cpi	r25, 0xFF	; 255
    3cc4:	79 f0       	breq	.+30     	; 0x3ce4 <__fp_splitA+0x2a>
    3cc6:	87 95       	ror	r24
    3cc8:	08 95       	ret
    3cca:	12 16       	cp	r1, r18
    3ccc:	13 06       	cpc	r1, r19
    3cce:	14 06       	cpc	r1, r20
    3cd0:	55 1f       	adc	r21, r21
    3cd2:	f2 cf       	rjmp	.-28     	; 0x3cb8 <__fp_split3+0xe>
    3cd4:	46 95       	lsr	r20
    3cd6:	f1 df       	rcall	.-30     	; 0x3cba <__fp_splitA>
    3cd8:	08 c0       	rjmp	.+16     	; 0x3cea <__fp_splitA+0x30>
    3cda:	16 16       	cp	r1, r22
    3cdc:	17 06       	cpc	r1, r23
    3cde:	18 06       	cpc	r1, r24
    3ce0:	99 1f       	adc	r25, r25
    3ce2:	f1 cf       	rjmp	.-30     	; 0x3cc6 <__fp_splitA+0xc>
    3ce4:	86 95       	lsr	r24
    3ce6:	71 05       	cpc	r23, r1
    3ce8:	61 05       	cpc	r22, r1
    3cea:	08 94       	sec
    3cec:	08 95       	ret

00003cee <__fp_zero>:
    3cee:	e8 94       	clt

00003cf0 <__fp_szero>:
    3cf0:	bb 27       	eor	r27, r27
    3cf2:	66 27       	eor	r22, r22
    3cf4:	77 27       	eor	r23, r23
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	97 f9       	bld	r25, 7
    3cfa:	08 95       	ret

00003cfc <__gesf2>:
    3cfc:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <__fp_cmp>
    3d00:	08 f4       	brcc	.+2      	; 0x3d04 <__gesf2+0x8>
    3d02:	8f ef       	ldi	r24, 0xFF	; 255
    3d04:	08 95       	ret

00003d06 <__mulsf3>:
    3d06:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__mulsf3x>
    3d0a:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__fp_round>
    3d0e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fp_pscA>
    3d12:	38 f0       	brcs	.+14     	; 0x3d22 <__mulsf3+0x1c>
    3d14:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__fp_pscB>
    3d18:	20 f0       	brcs	.+8      	; 0x3d22 <__mulsf3+0x1c>
    3d1a:	95 23       	and	r25, r21
    3d1c:	11 f0       	breq	.+4      	; 0x3d22 <__mulsf3+0x1c>
    3d1e:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__fp_inf>
    3d22:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__fp_nan>
    3d26:	11 24       	eor	r1, r1
    3d28:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__fp_szero>

00003d2c <__mulsf3x>:
    3d2c:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__fp_split3>
    3d30:	70 f3       	brcs	.-36     	; 0x3d0e <__mulsf3+0x8>

00003d32 <__mulsf3_pse>:
    3d32:	95 9f       	mul	r25, r21
    3d34:	c1 f3       	breq	.-16     	; 0x3d26 <__mulsf3+0x20>
    3d36:	95 0f       	add	r25, r21
    3d38:	50 e0       	ldi	r21, 0x00	; 0
    3d3a:	55 1f       	adc	r21, r21
    3d3c:	62 9f       	mul	r22, r18
    3d3e:	f0 01       	movw	r30, r0
    3d40:	72 9f       	mul	r23, r18
    3d42:	bb 27       	eor	r27, r27
    3d44:	f0 0d       	add	r31, r0
    3d46:	b1 1d       	adc	r27, r1
    3d48:	63 9f       	mul	r22, r19
    3d4a:	aa 27       	eor	r26, r26
    3d4c:	f0 0d       	add	r31, r0
    3d4e:	b1 1d       	adc	r27, r1
    3d50:	aa 1f       	adc	r26, r26
    3d52:	64 9f       	mul	r22, r20
    3d54:	66 27       	eor	r22, r22
    3d56:	b0 0d       	add	r27, r0
    3d58:	a1 1d       	adc	r26, r1
    3d5a:	66 1f       	adc	r22, r22
    3d5c:	82 9f       	mul	r24, r18
    3d5e:	22 27       	eor	r18, r18
    3d60:	b0 0d       	add	r27, r0
    3d62:	a1 1d       	adc	r26, r1
    3d64:	62 1f       	adc	r22, r18
    3d66:	73 9f       	mul	r23, r19
    3d68:	b0 0d       	add	r27, r0
    3d6a:	a1 1d       	adc	r26, r1
    3d6c:	62 1f       	adc	r22, r18
    3d6e:	83 9f       	mul	r24, r19
    3d70:	a0 0d       	add	r26, r0
    3d72:	61 1d       	adc	r22, r1
    3d74:	22 1f       	adc	r18, r18
    3d76:	74 9f       	mul	r23, r20
    3d78:	33 27       	eor	r19, r19
    3d7a:	a0 0d       	add	r26, r0
    3d7c:	61 1d       	adc	r22, r1
    3d7e:	23 1f       	adc	r18, r19
    3d80:	84 9f       	mul	r24, r20
    3d82:	60 0d       	add	r22, r0
    3d84:	21 1d       	adc	r18, r1
    3d86:	82 2f       	mov	r24, r18
    3d88:	76 2f       	mov	r23, r22
    3d8a:	6a 2f       	mov	r22, r26
    3d8c:	11 24       	eor	r1, r1
    3d8e:	9f 57       	subi	r25, 0x7F	; 127
    3d90:	50 40       	sbci	r21, 0x00	; 0
    3d92:	9a f0       	brmi	.+38     	; 0x3dba <__mulsf3_pse+0x88>
    3d94:	f1 f0       	breq	.+60     	; 0x3dd2 <__mulsf3_pse+0xa0>
    3d96:	88 23       	and	r24, r24
    3d98:	4a f0       	brmi	.+18     	; 0x3dac <__mulsf3_pse+0x7a>
    3d9a:	ee 0f       	add	r30, r30
    3d9c:	ff 1f       	adc	r31, r31
    3d9e:	bb 1f       	adc	r27, r27
    3da0:	66 1f       	adc	r22, r22
    3da2:	77 1f       	adc	r23, r23
    3da4:	88 1f       	adc	r24, r24
    3da6:	91 50       	subi	r25, 0x01	; 1
    3da8:	50 40       	sbci	r21, 0x00	; 0
    3daa:	a9 f7       	brne	.-22     	; 0x3d96 <__mulsf3_pse+0x64>
    3dac:	9e 3f       	cpi	r25, 0xFE	; 254
    3dae:	51 05       	cpc	r21, r1
    3db0:	80 f0       	brcs	.+32     	; 0x3dd2 <__mulsf3_pse+0xa0>
    3db2:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__fp_inf>
    3db6:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__fp_szero>
    3dba:	5f 3f       	cpi	r21, 0xFF	; 255
    3dbc:	e4 f3       	brlt	.-8      	; 0x3db6 <__mulsf3_pse+0x84>
    3dbe:	98 3e       	cpi	r25, 0xE8	; 232
    3dc0:	d4 f3       	brlt	.-12     	; 0x3db6 <__mulsf3_pse+0x84>
    3dc2:	86 95       	lsr	r24
    3dc4:	77 95       	ror	r23
    3dc6:	67 95       	ror	r22
    3dc8:	b7 95       	ror	r27
    3dca:	f7 95       	ror	r31
    3dcc:	e7 95       	ror	r30
    3dce:	9f 5f       	subi	r25, 0xFF	; 255
    3dd0:	c1 f7       	brne	.-16     	; 0x3dc2 <__mulsf3_pse+0x90>
    3dd2:	fe 2b       	or	r31, r30
    3dd4:	88 0f       	add	r24, r24
    3dd6:	91 1d       	adc	r25, r1
    3dd8:	96 95       	lsr	r25
    3dda:	87 95       	ror	r24
    3ddc:	97 f9       	bld	r25, 7
    3dde:	08 95       	ret

00003de0 <__unordsf2>:
    3de0:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <__fp_cmp>
    3de4:	88 0b       	sbc	r24, r24
    3de6:	99 0b       	sbc	r25, r25
    3de8:	08 95       	ret

00003dea <__udivmodsi4>:
    3dea:	a1 e2       	ldi	r26, 0x21	; 33
    3dec:	1a 2e       	mov	r1, r26
    3dee:	aa 1b       	sub	r26, r26
    3df0:	bb 1b       	sub	r27, r27
    3df2:	fd 01       	movw	r30, r26
    3df4:	0d c0       	rjmp	.+26     	; 0x3e10 <__udivmodsi4_ep>

00003df6 <__udivmodsi4_loop>:
    3df6:	aa 1f       	adc	r26, r26
    3df8:	bb 1f       	adc	r27, r27
    3dfa:	ee 1f       	adc	r30, r30
    3dfc:	ff 1f       	adc	r31, r31
    3dfe:	a2 17       	cp	r26, r18
    3e00:	b3 07       	cpc	r27, r19
    3e02:	e4 07       	cpc	r30, r20
    3e04:	f5 07       	cpc	r31, r21
    3e06:	20 f0       	brcs	.+8      	; 0x3e10 <__udivmodsi4_ep>
    3e08:	a2 1b       	sub	r26, r18
    3e0a:	b3 0b       	sbc	r27, r19
    3e0c:	e4 0b       	sbc	r30, r20
    3e0e:	f5 0b       	sbc	r31, r21

00003e10 <__udivmodsi4_ep>:
    3e10:	66 1f       	adc	r22, r22
    3e12:	77 1f       	adc	r23, r23
    3e14:	88 1f       	adc	r24, r24
    3e16:	99 1f       	adc	r25, r25
    3e18:	1a 94       	dec	r1
    3e1a:	69 f7       	brne	.-38     	; 0x3df6 <__udivmodsi4_loop>
    3e1c:	60 95       	com	r22
    3e1e:	70 95       	com	r23
    3e20:	80 95       	com	r24
    3e22:	90 95       	com	r25
    3e24:	9b 01       	movw	r18, r22
    3e26:	ac 01       	movw	r20, r24
    3e28:	bd 01       	movw	r22, r26
    3e2a:	cf 01       	movw	r24, r30
    3e2c:	08 95       	ret

00003e2e <__divmodsi4>:
    3e2e:	05 2e       	mov	r0, r21
    3e30:	97 fb       	bst	r25, 7
    3e32:	1e f4       	brtc	.+6      	; 0x3e3a <__divmodsi4+0xc>
    3e34:	00 94       	com	r0
    3e36:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__negsi2>
    3e3a:	57 fd       	sbrc	r21, 7
    3e3c:	07 d0       	rcall	.+14     	; 0x3e4c <__divmodsi4_neg2>
    3e3e:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <__udivmodsi4>
    3e42:	07 fc       	sbrc	r0, 7
    3e44:	03 d0       	rcall	.+6      	; 0x3e4c <__divmodsi4_neg2>
    3e46:	4e f4       	brtc	.+18     	; 0x3e5a <__divmodsi4_exit>
    3e48:	0c 94 2e 1f 	jmp	0x3e5c	; 0x3e5c <__negsi2>

00003e4c <__divmodsi4_neg2>:
    3e4c:	50 95       	com	r21
    3e4e:	40 95       	com	r20
    3e50:	30 95       	com	r19
    3e52:	21 95       	neg	r18
    3e54:	3f 4f       	sbci	r19, 0xFF	; 255
    3e56:	4f 4f       	sbci	r20, 0xFF	; 255
    3e58:	5f 4f       	sbci	r21, 0xFF	; 255

00003e5a <__divmodsi4_exit>:
    3e5a:	08 95       	ret

00003e5c <__negsi2>:
    3e5c:	90 95       	com	r25
    3e5e:	80 95       	com	r24
    3e60:	70 95       	com	r23
    3e62:	61 95       	neg	r22
    3e64:	7f 4f       	sbci	r23, 0xFF	; 255
    3e66:	8f 4f       	sbci	r24, 0xFF	; 255
    3e68:	9f 4f       	sbci	r25, 0xFF	; 255
    3e6a:	08 95       	ret

00003e6c <__tablejump2__>:
    3e6c:	ee 0f       	add	r30, r30
    3e6e:	ff 1f       	adc	r31, r31
    3e70:	05 90       	lpm	r0, Z+
    3e72:	f4 91       	lpm	r31, Z
    3e74:	e0 2d       	mov	r30, r0
    3e76:	09 94       	ijmp

00003e78 <sprintf>:
    3e78:	ae e0       	ldi	r26, 0x0E	; 14
    3e7a:	b0 e0       	ldi	r27, 0x00	; 0
    3e7c:	e2 e4       	ldi	r30, 0x42	; 66
    3e7e:	ff e1       	ldi	r31, 0x1F	; 31
    3e80:	0c 94 eb 21 	jmp	0x43d6	; 0x43d6 <__prologue_saves__+0x1c>
    3e84:	0d 89       	ldd	r16, Y+21	; 0x15
    3e86:	1e 89       	ldd	r17, Y+22	; 0x16
    3e88:	86 e0       	ldi	r24, 0x06	; 6
    3e8a:	8c 83       	std	Y+4, r24	; 0x04
    3e8c:	1a 83       	std	Y+2, r17	; 0x02
    3e8e:	09 83       	std	Y+1, r16	; 0x01
    3e90:	8f ef       	ldi	r24, 0xFF	; 255
    3e92:	9f e7       	ldi	r25, 0x7F	; 127
    3e94:	9e 83       	std	Y+6, r25	; 0x06
    3e96:	8d 83       	std	Y+5, r24	; 0x05
    3e98:	ae 01       	movw	r20, r28
    3e9a:	47 5e       	subi	r20, 0xE7	; 231
    3e9c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e9e:	6f 89       	ldd	r22, Y+23	; 0x17
    3ea0:	78 8d       	ldd	r23, Y+24	; 0x18
    3ea2:	ce 01       	movw	r24, r28
    3ea4:	01 96       	adiw	r24, 0x01	; 1
    3ea6:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <vfprintf>
    3eaa:	2f 81       	ldd	r18, Y+7	; 0x07
    3eac:	38 85       	ldd	r19, Y+8	; 0x08
    3eae:	f8 01       	movw	r30, r16
    3eb0:	e2 0f       	add	r30, r18
    3eb2:	f3 1f       	adc	r31, r19
    3eb4:	10 82       	st	Z, r1
    3eb6:	2e 96       	adiw	r28, 0x0e	; 14
    3eb8:	e4 e0       	ldi	r30, 0x04	; 4
    3eba:	0c 94 07 22 	jmp	0x440e	; 0x440e <__epilogue_restores__+0x1c>

00003ebe <vfprintf>:
    3ebe:	ac e0       	ldi	r26, 0x0C	; 12
    3ec0:	b0 e0       	ldi	r27, 0x00	; 0
    3ec2:	e5 e6       	ldi	r30, 0x65	; 101
    3ec4:	ff e1       	ldi	r31, 0x1F	; 31
    3ec6:	0c 94 dd 21 	jmp	0x43ba	; 0x43ba <__prologue_saves__>
    3eca:	7c 01       	movw	r14, r24
    3ecc:	6b 01       	movw	r12, r22
    3ece:	8a 01       	movw	r16, r20
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	17 82       	std	Z+7, r1	; 0x07
    3ed4:	16 82       	std	Z+6, r1	; 0x06
    3ed6:	83 81       	ldd	r24, Z+3	; 0x03
    3ed8:	81 ff       	sbrs	r24, 1
    3eda:	bd c1       	rjmp	.+890    	; 0x4256 <vfprintf+0x398>
    3edc:	ce 01       	movw	r24, r28
    3ede:	01 96       	adiw	r24, 0x01	; 1
    3ee0:	4c 01       	movw	r8, r24
    3ee2:	f7 01       	movw	r30, r14
    3ee4:	93 81       	ldd	r25, Z+3	; 0x03
    3ee6:	f6 01       	movw	r30, r12
    3ee8:	93 fd       	sbrc	r25, 3
    3eea:	85 91       	lpm	r24, Z+
    3eec:	93 ff       	sbrs	r25, 3
    3eee:	81 91       	ld	r24, Z+
    3ef0:	6f 01       	movw	r12, r30
    3ef2:	88 23       	and	r24, r24
    3ef4:	09 f4       	brne	.+2      	; 0x3ef8 <vfprintf+0x3a>
    3ef6:	ab c1       	rjmp	.+854    	; 0x424e <vfprintf+0x390>
    3ef8:	85 32       	cpi	r24, 0x25	; 37
    3efa:	39 f4       	brne	.+14     	; 0x3f0a <vfprintf+0x4c>
    3efc:	93 fd       	sbrc	r25, 3
    3efe:	85 91       	lpm	r24, Z+
    3f00:	93 ff       	sbrs	r25, 3
    3f02:	81 91       	ld	r24, Z+
    3f04:	6f 01       	movw	r12, r30
    3f06:	85 32       	cpi	r24, 0x25	; 37
    3f08:	29 f4       	brne	.+10     	; 0x3f14 <vfprintf+0x56>
    3f0a:	b7 01       	movw	r22, r14
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3f12:	e7 cf       	rjmp	.-50     	; 0x3ee2 <vfprintf+0x24>
    3f14:	51 2c       	mov	r5, r1
    3f16:	31 2c       	mov	r3, r1
    3f18:	20 e0       	ldi	r18, 0x00	; 0
    3f1a:	20 32       	cpi	r18, 0x20	; 32
    3f1c:	a0 f4       	brcc	.+40     	; 0x3f46 <vfprintf+0x88>
    3f1e:	8b 32       	cpi	r24, 0x2B	; 43
    3f20:	69 f0       	breq	.+26     	; 0x3f3c <vfprintf+0x7e>
    3f22:	30 f4       	brcc	.+12     	; 0x3f30 <vfprintf+0x72>
    3f24:	80 32       	cpi	r24, 0x20	; 32
    3f26:	59 f0       	breq	.+22     	; 0x3f3e <vfprintf+0x80>
    3f28:	83 32       	cpi	r24, 0x23	; 35
    3f2a:	69 f4       	brne	.+26     	; 0x3f46 <vfprintf+0x88>
    3f2c:	20 61       	ori	r18, 0x10	; 16
    3f2e:	2c c0       	rjmp	.+88     	; 0x3f88 <vfprintf+0xca>
    3f30:	8d 32       	cpi	r24, 0x2D	; 45
    3f32:	39 f0       	breq	.+14     	; 0x3f42 <vfprintf+0x84>
    3f34:	80 33       	cpi	r24, 0x30	; 48
    3f36:	39 f4       	brne	.+14     	; 0x3f46 <vfprintf+0x88>
    3f38:	21 60       	ori	r18, 0x01	; 1
    3f3a:	26 c0       	rjmp	.+76     	; 0x3f88 <vfprintf+0xca>
    3f3c:	22 60       	ori	r18, 0x02	; 2
    3f3e:	24 60       	ori	r18, 0x04	; 4
    3f40:	23 c0       	rjmp	.+70     	; 0x3f88 <vfprintf+0xca>
    3f42:	28 60       	ori	r18, 0x08	; 8
    3f44:	21 c0       	rjmp	.+66     	; 0x3f88 <vfprintf+0xca>
    3f46:	27 fd       	sbrc	r18, 7
    3f48:	27 c0       	rjmp	.+78     	; 0x3f98 <vfprintf+0xda>
    3f4a:	30 ed       	ldi	r19, 0xD0	; 208
    3f4c:	38 0f       	add	r19, r24
    3f4e:	3a 30       	cpi	r19, 0x0A	; 10
    3f50:	78 f4       	brcc	.+30     	; 0x3f70 <vfprintf+0xb2>
    3f52:	26 ff       	sbrs	r18, 6
    3f54:	06 c0       	rjmp	.+12     	; 0x3f62 <vfprintf+0xa4>
    3f56:	fa e0       	ldi	r31, 0x0A	; 10
    3f58:	5f 9e       	mul	r5, r31
    3f5a:	30 0d       	add	r19, r0
    3f5c:	11 24       	eor	r1, r1
    3f5e:	53 2e       	mov	r5, r19
    3f60:	13 c0       	rjmp	.+38     	; 0x3f88 <vfprintf+0xca>
    3f62:	8a e0       	ldi	r24, 0x0A	; 10
    3f64:	38 9e       	mul	r3, r24
    3f66:	30 0d       	add	r19, r0
    3f68:	11 24       	eor	r1, r1
    3f6a:	33 2e       	mov	r3, r19
    3f6c:	20 62       	ori	r18, 0x20	; 32
    3f6e:	0c c0       	rjmp	.+24     	; 0x3f88 <vfprintf+0xca>
    3f70:	8e 32       	cpi	r24, 0x2E	; 46
    3f72:	21 f4       	brne	.+8      	; 0x3f7c <vfprintf+0xbe>
    3f74:	26 fd       	sbrc	r18, 6
    3f76:	6b c1       	rjmp	.+726    	; 0x424e <vfprintf+0x390>
    3f78:	20 64       	ori	r18, 0x40	; 64
    3f7a:	06 c0       	rjmp	.+12     	; 0x3f88 <vfprintf+0xca>
    3f7c:	8c 36       	cpi	r24, 0x6C	; 108
    3f7e:	11 f4       	brne	.+4      	; 0x3f84 <vfprintf+0xc6>
    3f80:	20 68       	ori	r18, 0x80	; 128
    3f82:	02 c0       	rjmp	.+4      	; 0x3f88 <vfprintf+0xca>
    3f84:	88 36       	cpi	r24, 0x68	; 104
    3f86:	41 f4       	brne	.+16     	; 0x3f98 <vfprintf+0xda>
    3f88:	f6 01       	movw	r30, r12
    3f8a:	93 fd       	sbrc	r25, 3
    3f8c:	85 91       	lpm	r24, Z+
    3f8e:	93 ff       	sbrs	r25, 3
    3f90:	81 91       	ld	r24, Z+
    3f92:	6f 01       	movw	r12, r30
    3f94:	81 11       	cpse	r24, r1
    3f96:	c1 cf       	rjmp	.-126    	; 0x3f1a <vfprintf+0x5c>
    3f98:	98 2f       	mov	r25, r24
    3f9a:	9f 7d       	andi	r25, 0xDF	; 223
    3f9c:	95 54       	subi	r25, 0x45	; 69
    3f9e:	93 30       	cpi	r25, 0x03	; 3
    3fa0:	28 f4       	brcc	.+10     	; 0x3fac <vfprintf+0xee>
    3fa2:	0c 5f       	subi	r16, 0xFC	; 252
    3fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa6:	ff e3       	ldi	r31, 0x3F	; 63
    3fa8:	f9 83       	std	Y+1, r31	; 0x01
    3faa:	0d c0       	rjmp	.+26     	; 0x3fc6 <vfprintf+0x108>
    3fac:	83 36       	cpi	r24, 0x63	; 99
    3fae:	31 f0       	breq	.+12     	; 0x3fbc <vfprintf+0xfe>
    3fb0:	83 37       	cpi	r24, 0x73	; 115
    3fb2:	71 f0       	breq	.+28     	; 0x3fd0 <vfprintf+0x112>
    3fb4:	83 35       	cpi	r24, 0x53	; 83
    3fb6:	09 f0       	breq	.+2      	; 0x3fba <vfprintf+0xfc>
    3fb8:	5b c0       	rjmp	.+182    	; 0x4070 <vfprintf+0x1b2>
    3fba:	22 c0       	rjmp	.+68     	; 0x4000 <vfprintf+0x142>
    3fbc:	f8 01       	movw	r30, r16
    3fbe:	80 81       	ld	r24, Z
    3fc0:	89 83       	std	Y+1, r24	; 0x01
    3fc2:	0e 5f       	subi	r16, 0xFE	; 254
    3fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fc6:	44 24       	eor	r4, r4
    3fc8:	43 94       	inc	r4
    3fca:	51 2c       	mov	r5, r1
    3fcc:	54 01       	movw	r10, r8
    3fce:	15 c0       	rjmp	.+42     	; 0x3ffa <vfprintf+0x13c>
    3fd0:	38 01       	movw	r6, r16
    3fd2:	f2 e0       	ldi	r31, 0x02	; 2
    3fd4:	6f 0e       	add	r6, r31
    3fd6:	71 1c       	adc	r7, r1
    3fd8:	f8 01       	movw	r30, r16
    3fda:	a0 80       	ld	r10, Z
    3fdc:	b1 80       	ldd	r11, Z+1	; 0x01
    3fde:	26 ff       	sbrs	r18, 6
    3fe0:	03 c0       	rjmp	.+6      	; 0x3fe8 <vfprintf+0x12a>
    3fe2:	65 2d       	mov	r22, r5
    3fe4:	70 e0       	ldi	r23, 0x00	; 0
    3fe6:	02 c0       	rjmp	.+4      	; 0x3fec <vfprintf+0x12e>
    3fe8:	6f ef       	ldi	r22, 0xFF	; 255
    3fea:	7f ef       	ldi	r23, 0xFF	; 255
    3fec:	c5 01       	movw	r24, r10
    3fee:	2c 87       	std	Y+12, r18	; 0x0c
    3ff0:	0e 94 3c 21 	call	0x4278	; 0x4278 <strnlen>
    3ff4:	2c 01       	movw	r4, r24
    3ff6:	83 01       	movw	r16, r6
    3ff8:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ffa:	2f 77       	andi	r18, 0x7F	; 127
    3ffc:	22 2e       	mov	r2, r18
    3ffe:	17 c0       	rjmp	.+46     	; 0x402e <vfprintf+0x170>
    4000:	38 01       	movw	r6, r16
    4002:	f2 e0       	ldi	r31, 0x02	; 2
    4004:	6f 0e       	add	r6, r31
    4006:	71 1c       	adc	r7, r1
    4008:	f8 01       	movw	r30, r16
    400a:	a0 80       	ld	r10, Z
    400c:	b1 80       	ldd	r11, Z+1	; 0x01
    400e:	26 ff       	sbrs	r18, 6
    4010:	03 c0       	rjmp	.+6      	; 0x4018 <vfprintf+0x15a>
    4012:	65 2d       	mov	r22, r5
    4014:	70 e0       	ldi	r23, 0x00	; 0
    4016:	02 c0       	rjmp	.+4      	; 0x401c <vfprintf+0x15e>
    4018:	6f ef       	ldi	r22, 0xFF	; 255
    401a:	7f ef       	ldi	r23, 0xFF	; 255
    401c:	c5 01       	movw	r24, r10
    401e:	2c 87       	std	Y+12, r18	; 0x0c
    4020:	0e 94 31 21 	call	0x4262	; 0x4262 <strnlen_P>
    4024:	2c 01       	movw	r4, r24
    4026:	2c 85       	ldd	r18, Y+12	; 0x0c
    4028:	20 68       	ori	r18, 0x80	; 128
    402a:	22 2e       	mov	r2, r18
    402c:	83 01       	movw	r16, r6
    402e:	23 fc       	sbrc	r2, 3
    4030:	1b c0       	rjmp	.+54     	; 0x4068 <vfprintf+0x1aa>
    4032:	83 2d       	mov	r24, r3
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	48 16       	cp	r4, r24
    4038:	59 06       	cpc	r5, r25
    403a:	b0 f4       	brcc	.+44     	; 0x4068 <vfprintf+0x1aa>
    403c:	b7 01       	movw	r22, r14
    403e:	80 e2       	ldi	r24, 0x20	; 32
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    4046:	3a 94       	dec	r3
    4048:	f4 cf       	rjmp	.-24     	; 0x4032 <vfprintf+0x174>
    404a:	f5 01       	movw	r30, r10
    404c:	27 fc       	sbrc	r2, 7
    404e:	85 91       	lpm	r24, Z+
    4050:	27 fe       	sbrs	r2, 7
    4052:	81 91       	ld	r24, Z+
    4054:	5f 01       	movw	r10, r30
    4056:	b7 01       	movw	r22, r14
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    405e:	31 10       	cpse	r3, r1
    4060:	3a 94       	dec	r3
    4062:	f1 e0       	ldi	r31, 0x01	; 1
    4064:	4f 1a       	sub	r4, r31
    4066:	51 08       	sbc	r5, r1
    4068:	41 14       	cp	r4, r1
    406a:	51 04       	cpc	r5, r1
    406c:	71 f7       	brne	.-36     	; 0x404a <vfprintf+0x18c>
    406e:	e5 c0       	rjmp	.+458    	; 0x423a <vfprintf+0x37c>
    4070:	84 36       	cpi	r24, 0x64	; 100
    4072:	11 f0       	breq	.+4      	; 0x4078 <vfprintf+0x1ba>
    4074:	89 36       	cpi	r24, 0x69	; 105
    4076:	39 f5       	brne	.+78     	; 0x40c6 <vfprintf+0x208>
    4078:	f8 01       	movw	r30, r16
    407a:	27 ff       	sbrs	r18, 7
    407c:	07 c0       	rjmp	.+14     	; 0x408c <vfprintf+0x1ce>
    407e:	60 81       	ld	r22, Z
    4080:	71 81       	ldd	r23, Z+1	; 0x01
    4082:	82 81       	ldd	r24, Z+2	; 0x02
    4084:	93 81       	ldd	r25, Z+3	; 0x03
    4086:	0c 5f       	subi	r16, 0xFC	; 252
    4088:	1f 4f       	sbci	r17, 0xFF	; 255
    408a:	08 c0       	rjmp	.+16     	; 0x409c <vfprintf+0x1de>
    408c:	60 81       	ld	r22, Z
    408e:	71 81       	ldd	r23, Z+1	; 0x01
    4090:	07 2e       	mov	r0, r23
    4092:	00 0c       	add	r0, r0
    4094:	88 0b       	sbc	r24, r24
    4096:	99 0b       	sbc	r25, r25
    4098:	0e 5f       	subi	r16, 0xFE	; 254
    409a:	1f 4f       	sbci	r17, 0xFF	; 255
    409c:	2f 76       	andi	r18, 0x6F	; 111
    409e:	72 2e       	mov	r7, r18
    40a0:	97 ff       	sbrs	r25, 7
    40a2:	09 c0       	rjmp	.+18     	; 0x40b6 <vfprintf+0x1f8>
    40a4:	90 95       	com	r25
    40a6:	80 95       	com	r24
    40a8:	70 95       	com	r23
    40aa:	61 95       	neg	r22
    40ac:	7f 4f       	sbci	r23, 0xFF	; 255
    40ae:	8f 4f       	sbci	r24, 0xFF	; 255
    40b0:	9f 4f       	sbci	r25, 0xFF	; 255
    40b2:	20 68       	ori	r18, 0x80	; 128
    40b4:	72 2e       	mov	r7, r18
    40b6:	2a e0       	ldi	r18, 0x0A	; 10
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	a4 01       	movw	r20, r8
    40bc:	0e 94 7f 21 	call	0x42fe	; 0x42fe <__ultoa_invert>
    40c0:	a8 2e       	mov	r10, r24
    40c2:	a8 18       	sub	r10, r8
    40c4:	44 c0       	rjmp	.+136    	; 0x414e <vfprintf+0x290>
    40c6:	85 37       	cpi	r24, 0x75	; 117
    40c8:	29 f4       	brne	.+10     	; 0x40d4 <vfprintf+0x216>
    40ca:	2f 7e       	andi	r18, 0xEF	; 239
    40cc:	b2 2e       	mov	r11, r18
    40ce:	2a e0       	ldi	r18, 0x0A	; 10
    40d0:	30 e0       	ldi	r19, 0x00	; 0
    40d2:	25 c0       	rjmp	.+74     	; 0x411e <vfprintf+0x260>
    40d4:	f2 2f       	mov	r31, r18
    40d6:	f9 7f       	andi	r31, 0xF9	; 249
    40d8:	bf 2e       	mov	r11, r31
    40da:	8f 36       	cpi	r24, 0x6F	; 111
    40dc:	c1 f0       	breq	.+48     	; 0x410e <vfprintf+0x250>
    40de:	18 f4       	brcc	.+6      	; 0x40e6 <vfprintf+0x228>
    40e0:	88 35       	cpi	r24, 0x58	; 88
    40e2:	79 f0       	breq	.+30     	; 0x4102 <vfprintf+0x244>
    40e4:	b4 c0       	rjmp	.+360    	; 0x424e <vfprintf+0x390>
    40e6:	80 37       	cpi	r24, 0x70	; 112
    40e8:	19 f0       	breq	.+6      	; 0x40f0 <vfprintf+0x232>
    40ea:	88 37       	cpi	r24, 0x78	; 120
    40ec:	21 f0       	breq	.+8      	; 0x40f6 <vfprintf+0x238>
    40ee:	af c0       	rjmp	.+350    	; 0x424e <vfprintf+0x390>
    40f0:	2f 2f       	mov	r18, r31
    40f2:	20 61       	ori	r18, 0x10	; 16
    40f4:	b2 2e       	mov	r11, r18
    40f6:	b4 fe       	sbrs	r11, 4
    40f8:	0d c0       	rjmp	.+26     	; 0x4114 <vfprintf+0x256>
    40fa:	8b 2d       	mov	r24, r11
    40fc:	84 60       	ori	r24, 0x04	; 4
    40fe:	b8 2e       	mov	r11, r24
    4100:	09 c0       	rjmp	.+18     	; 0x4114 <vfprintf+0x256>
    4102:	24 ff       	sbrs	r18, 4
    4104:	0a c0       	rjmp	.+20     	; 0x411a <vfprintf+0x25c>
    4106:	9f 2f       	mov	r25, r31
    4108:	96 60       	ori	r25, 0x06	; 6
    410a:	b9 2e       	mov	r11, r25
    410c:	06 c0       	rjmp	.+12     	; 0x411a <vfprintf+0x25c>
    410e:	28 e0       	ldi	r18, 0x08	; 8
    4110:	30 e0       	ldi	r19, 0x00	; 0
    4112:	05 c0       	rjmp	.+10     	; 0x411e <vfprintf+0x260>
    4114:	20 e1       	ldi	r18, 0x10	; 16
    4116:	30 e0       	ldi	r19, 0x00	; 0
    4118:	02 c0       	rjmp	.+4      	; 0x411e <vfprintf+0x260>
    411a:	20 e1       	ldi	r18, 0x10	; 16
    411c:	32 e0       	ldi	r19, 0x02	; 2
    411e:	f8 01       	movw	r30, r16
    4120:	b7 fe       	sbrs	r11, 7
    4122:	07 c0       	rjmp	.+14     	; 0x4132 <vfprintf+0x274>
    4124:	60 81       	ld	r22, Z
    4126:	71 81       	ldd	r23, Z+1	; 0x01
    4128:	82 81       	ldd	r24, Z+2	; 0x02
    412a:	93 81       	ldd	r25, Z+3	; 0x03
    412c:	0c 5f       	subi	r16, 0xFC	; 252
    412e:	1f 4f       	sbci	r17, 0xFF	; 255
    4130:	06 c0       	rjmp	.+12     	; 0x413e <vfprintf+0x280>
    4132:	60 81       	ld	r22, Z
    4134:	71 81       	ldd	r23, Z+1	; 0x01
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	0e 5f       	subi	r16, 0xFE	; 254
    413c:	1f 4f       	sbci	r17, 0xFF	; 255
    413e:	a4 01       	movw	r20, r8
    4140:	0e 94 7f 21 	call	0x42fe	; 0x42fe <__ultoa_invert>
    4144:	a8 2e       	mov	r10, r24
    4146:	a8 18       	sub	r10, r8
    4148:	fb 2d       	mov	r31, r11
    414a:	ff 77       	andi	r31, 0x7F	; 127
    414c:	7f 2e       	mov	r7, r31
    414e:	76 fe       	sbrs	r7, 6
    4150:	0b c0       	rjmp	.+22     	; 0x4168 <vfprintf+0x2aa>
    4152:	37 2d       	mov	r19, r7
    4154:	3e 7f       	andi	r19, 0xFE	; 254
    4156:	a5 14       	cp	r10, r5
    4158:	50 f4       	brcc	.+20     	; 0x416e <vfprintf+0x2b0>
    415a:	74 fe       	sbrs	r7, 4
    415c:	0a c0       	rjmp	.+20     	; 0x4172 <vfprintf+0x2b4>
    415e:	72 fc       	sbrc	r7, 2
    4160:	08 c0       	rjmp	.+16     	; 0x4172 <vfprintf+0x2b4>
    4162:	37 2d       	mov	r19, r7
    4164:	3e 7e       	andi	r19, 0xEE	; 238
    4166:	05 c0       	rjmp	.+10     	; 0x4172 <vfprintf+0x2b4>
    4168:	ba 2c       	mov	r11, r10
    416a:	37 2d       	mov	r19, r7
    416c:	03 c0       	rjmp	.+6      	; 0x4174 <vfprintf+0x2b6>
    416e:	ba 2c       	mov	r11, r10
    4170:	01 c0       	rjmp	.+2      	; 0x4174 <vfprintf+0x2b6>
    4172:	b5 2c       	mov	r11, r5
    4174:	34 ff       	sbrs	r19, 4
    4176:	0d c0       	rjmp	.+26     	; 0x4192 <vfprintf+0x2d4>
    4178:	fe 01       	movw	r30, r28
    417a:	ea 0d       	add	r30, r10
    417c:	f1 1d       	adc	r31, r1
    417e:	80 81       	ld	r24, Z
    4180:	80 33       	cpi	r24, 0x30	; 48
    4182:	11 f4       	brne	.+4      	; 0x4188 <vfprintf+0x2ca>
    4184:	39 7e       	andi	r19, 0xE9	; 233
    4186:	09 c0       	rjmp	.+18     	; 0x419a <vfprintf+0x2dc>
    4188:	32 ff       	sbrs	r19, 2
    418a:	06 c0       	rjmp	.+12     	; 0x4198 <vfprintf+0x2da>
    418c:	b3 94       	inc	r11
    418e:	b3 94       	inc	r11
    4190:	04 c0       	rjmp	.+8      	; 0x419a <vfprintf+0x2dc>
    4192:	83 2f       	mov	r24, r19
    4194:	86 78       	andi	r24, 0x86	; 134
    4196:	09 f0       	breq	.+2      	; 0x419a <vfprintf+0x2dc>
    4198:	b3 94       	inc	r11
    419a:	33 fd       	sbrc	r19, 3
    419c:	13 c0       	rjmp	.+38     	; 0x41c4 <vfprintf+0x306>
    419e:	30 ff       	sbrs	r19, 0
    41a0:	06 c0       	rjmp	.+12     	; 0x41ae <vfprintf+0x2f0>
    41a2:	5a 2c       	mov	r5, r10
    41a4:	b3 14       	cp	r11, r3
    41a6:	18 f4       	brcc	.+6      	; 0x41ae <vfprintf+0x2f0>
    41a8:	53 0c       	add	r5, r3
    41aa:	5b 18       	sub	r5, r11
    41ac:	b3 2c       	mov	r11, r3
    41ae:	b3 14       	cp	r11, r3
    41b0:	68 f4       	brcc	.+26     	; 0x41cc <vfprintf+0x30e>
    41b2:	b7 01       	movw	r22, r14
    41b4:	80 e2       	ldi	r24, 0x20	; 32
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	3c 87       	std	Y+12, r19	; 0x0c
    41ba:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    41be:	b3 94       	inc	r11
    41c0:	3c 85       	ldd	r19, Y+12	; 0x0c
    41c2:	f5 cf       	rjmp	.-22     	; 0x41ae <vfprintf+0x2f0>
    41c4:	b3 14       	cp	r11, r3
    41c6:	10 f4       	brcc	.+4      	; 0x41cc <vfprintf+0x30e>
    41c8:	3b 18       	sub	r3, r11
    41ca:	01 c0       	rjmp	.+2      	; 0x41ce <vfprintf+0x310>
    41cc:	31 2c       	mov	r3, r1
    41ce:	34 ff       	sbrs	r19, 4
    41d0:	12 c0       	rjmp	.+36     	; 0x41f6 <vfprintf+0x338>
    41d2:	b7 01       	movw	r22, r14
    41d4:	80 e3       	ldi	r24, 0x30	; 48
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	3c 87       	std	Y+12, r19	; 0x0c
    41da:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    41de:	3c 85       	ldd	r19, Y+12	; 0x0c
    41e0:	32 ff       	sbrs	r19, 2
    41e2:	17 c0       	rjmp	.+46     	; 0x4212 <vfprintf+0x354>
    41e4:	31 fd       	sbrc	r19, 1
    41e6:	03 c0       	rjmp	.+6      	; 0x41ee <vfprintf+0x330>
    41e8:	88 e7       	ldi	r24, 0x78	; 120
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	02 c0       	rjmp	.+4      	; 0x41f2 <vfprintf+0x334>
    41ee:	88 e5       	ldi	r24, 0x58	; 88
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	b7 01       	movw	r22, r14
    41f4:	0c c0       	rjmp	.+24     	; 0x420e <vfprintf+0x350>
    41f6:	83 2f       	mov	r24, r19
    41f8:	86 78       	andi	r24, 0x86	; 134
    41fa:	59 f0       	breq	.+22     	; 0x4212 <vfprintf+0x354>
    41fc:	31 ff       	sbrs	r19, 1
    41fe:	02 c0       	rjmp	.+4      	; 0x4204 <vfprintf+0x346>
    4200:	8b e2       	ldi	r24, 0x2B	; 43
    4202:	01 c0       	rjmp	.+2      	; 0x4206 <vfprintf+0x348>
    4204:	80 e2       	ldi	r24, 0x20	; 32
    4206:	37 fd       	sbrc	r19, 7
    4208:	8d e2       	ldi	r24, 0x2D	; 45
    420a:	b7 01       	movw	r22, r14
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    4212:	a5 14       	cp	r10, r5
    4214:	38 f4       	brcc	.+14     	; 0x4224 <vfprintf+0x366>
    4216:	b7 01       	movw	r22, r14
    4218:	80 e3       	ldi	r24, 0x30	; 48
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    4220:	5a 94       	dec	r5
    4222:	f7 cf       	rjmp	.-18     	; 0x4212 <vfprintf+0x354>
    4224:	aa 94       	dec	r10
    4226:	f4 01       	movw	r30, r8
    4228:	ea 0d       	add	r30, r10
    422a:	f1 1d       	adc	r31, r1
    422c:	80 81       	ld	r24, Z
    422e:	b7 01       	movw	r22, r14
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    4236:	a1 10       	cpse	r10, r1
    4238:	f5 cf       	rjmp	.-22     	; 0x4224 <vfprintf+0x366>
    423a:	33 20       	and	r3, r3
    423c:	09 f4       	brne	.+2      	; 0x4240 <vfprintf+0x382>
    423e:	51 ce       	rjmp	.-862    	; 0x3ee2 <vfprintf+0x24>
    4240:	b7 01       	movw	r22, r14
    4242:	80 e2       	ldi	r24, 0x20	; 32
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    424a:	3a 94       	dec	r3
    424c:	f6 cf       	rjmp	.-20     	; 0x423a <vfprintf+0x37c>
    424e:	f7 01       	movw	r30, r14
    4250:	86 81       	ldd	r24, Z+6	; 0x06
    4252:	97 81       	ldd	r25, Z+7	; 0x07
    4254:	02 c0       	rjmp	.+4      	; 0x425a <vfprintf+0x39c>
    4256:	8f ef       	ldi	r24, 0xFF	; 255
    4258:	9f ef       	ldi	r25, 0xFF	; 255
    425a:	2c 96       	adiw	r28, 0x0c	; 12
    425c:	e2 e1       	ldi	r30, 0x12	; 18
    425e:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <__epilogue_restores__>

00004262 <strnlen_P>:
    4262:	fc 01       	movw	r30, r24
    4264:	05 90       	lpm	r0, Z+
    4266:	61 50       	subi	r22, 0x01	; 1
    4268:	70 40       	sbci	r23, 0x00	; 0
    426a:	01 10       	cpse	r0, r1
    426c:	d8 f7       	brcc	.-10     	; 0x4264 <strnlen_P+0x2>
    426e:	80 95       	com	r24
    4270:	90 95       	com	r25
    4272:	8e 0f       	add	r24, r30
    4274:	9f 1f       	adc	r25, r31
    4276:	08 95       	ret

00004278 <strnlen>:
    4278:	fc 01       	movw	r30, r24
    427a:	61 50       	subi	r22, 0x01	; 1
    427c:	70 40       	sbci	r23, 0x00	; 0
    427e:	01 90       	ld	r0, Z+
    4280:	01 10       	cpse	r0, r1
    4282:	d8 f7       	brcc	.-10     	; 0x427a <strnlen+0x2>
    4284:	80 95       	com	r24
    4286:	90 95       	com	r25
    4288:	8e 0f       	add	r24, r30
    428a:	9f 1f       	adc	r25, r31
    428c:	08 95       	ret

0000428e <fputc>:
    428e:	0f 93       	push	r16
    4290:	1f 93       	push	r17
    4292:	cf 93       	push	r28
    4294:	df 93       	push	r29
    4296:	fb 01       	movw	r30, r22
    4298:	23 81       	ldd	r18, Z+3	; 0x03
    429a:	21 fd       	sbrc	r18, 1
    429c:	03 c0       	rjmp	.+6      	; 0x42a4 <fputc+0x16>
    429e:	8f ef       	ldi	r24, 0xFF	; 255
    42a0:	9f ef       	ldi	r25, 0xFF	; 255
    42a2:	28 c0       	rjmp	.+80     	; 0x42f4 <fputc+0x66>
    42a4:	22 ff       	sbrs	r18, 2
    42a6:	16 c0       	rjmp	.+44     	; 0x42d4 <fputc+0x46>
    42a8:	46 81       	ldd	r20, Z+6	; 0x06
    42aa:	57 81       	ldd	r21, Z+7	; 0x07
    42ac:	24 81       	ldd	r18, Z+4	; 0x04
    42ae:	35 81       	ldd	r19, Z+5	; 0x05
    42b0:	42 17       	cp	r20, r18
    42b2:	53 07       	cpc	r21, r19
    42b4:	44 f4       	brge	.+16     	; 0x42c6 <fputc+0x38>
    42b6:	a0 81       	ld	r26, Z
    42b8:	b1 81       	ldd	r27, Z+1	; 0x01
    42ba:	9d 01       	movw	r18, r26
    42bc:	2f 5f       	subi	r18, 0xFF	; 255
    42be:	3f 4f       	sbci	r19, 0xFF	; 255
    42c0:	31 83       	std	Z+1, r19	; 0x01
    42c2:	20 83       	st	Z, r18
    42c4:	8c 93       	st	X, r24
    42c6:	26 81       	ldd	r18, Z+6	; 0x06
    42c8:	37 81       	ldd	r19, Z+7	; 0x07
    42ca:	2f 5f       	subi	r18, 0xFF	; 255
    42cc:	3f 4f       	sbci	r19, 0xFF	; 255
    42ce:	37 83       	std	Z+7, r19	; 0x07
    42d0:	26 83       	std	Z+6, r18	; 0x06
    42d2:	10 c0       	rjmp	.+32     	; 0x42f4 <fputc+0x66>
    42d4:	eb 01       	movw	r28, r22
    42d6:	09 2f       	mov	r16, r25
    42d8:	18 2f       	mov	r17, r24
    42da:	00 84       	ldd	r0, Z+8	; 0x08
    42dc:	f1 85       	ldd	r31, Z+9	; 0x09
    42de:	e0 2d       	mov	r30, r0
    42e0:	09 95       	icall
    42e2:	89 2b       	or	r24, r25
    42e4:	e1 f6       	brne	.-72     	; 0x429e <fputc+0x10>
    42e6:	8e 81       	ldd	r24, Y+6	; 0x06
    42e8:	9f 81       	ldd	r25, Y+7	; 0x07
    42ea:	01 96       	adiw	r24, 0x01	; 1
    42ec:	9f 83       	std	Y+7, r25	; 0x07
    42ee:	8e 83       	std	Y+6, r24	; 0x06
    42f0:	81 2f       	mov	r24, r17
    42f2:	90 2f       	mov	r25, r16
    42f4:	df 91       	pop	r29
    42f6:	cf 91       	pop	r28
    42f8:	1f 91       	pop	r17
    42fa:	0f 91       	pop	r16
    42fc:	08 95       	ret

000042fe <__ultoa_invert>:
    42fe:	fa 01       	movw	r30, r20
    4300:	aa 27       	eor	r26, r26
    4302:	28 30       	cpi	r18, 0x08	; 8
    4304:	51 f1       	breq	.+84     	; 0x435a <__ultoa_invert+0x5c>
    4306:	20 31       	cpi	r18, 0x10	; 16
    4308:	81 f1       	breq	.+96     	; 0x436a <__ultoa_invert+0x6c>
    430a:	e8 94       	clt
    430c:	6f 93       	push	r22
    430e:	6e 7f       	andi	r22, 0xFE	; 254
    4310:	6e 5f       	subi	r22, 0xFE	; 254
    4312:	7f 4f       	sbci	r23, 0xFF	; 255
    4314:	8f 4f       	sbci	r24, 0xFF	; 255
    4316:	9f 4f       	sbci	r25, 0xFF	; 255
    4318:	af 4f       	sbci	r26, 0xFF	; 255
    431a:	b1 e0       	ldi	r27, 0x01	; 1
    431c:	3e d0       	rcall	.+124    	; 0x439a <__ultoa_invert+0x9c>
    431e:	b4 e0       	ldi	r27, 0x04	; 4
    4320:	3c d0       	rcall	.+120    	; 0x439a <__ultoa_invert+0x9c>
    4322:	67 0f       	add	r22, r23
    4324:	78 1f       	adc	r23, r24
    4326:	89 1f       	adc	r24, r25
    4328:	9a 1f       	adc	r25, r26
    432a:	a1 1d       	adc	r26, r1
    432c:	68 0f       	add	r22, r24
    432e:	79 1f       	adc	r23, r25
    4330:	8a 1f       	adc	r24, r26
    4332:	91 1d       	adc	r25, r1
    4334:	a1 1d       	adc	r26, r1
    4336:	6a 0f       	add	r22, r26
    4338:	71 1d       	adc	r23, r1
    433a:	81 1d       	adc	r24, r1
    433c:	91 1d       	adc	r25, r1
    433e:	a1 1d       	adc	r26, r1
    4340:	20 d0       	rcall	.+64     	; 0x4382 <__ultoa_invert+0x84>
    4342:	09 f4       	brne	.+2      	; 0x4346 <__ultoa_invert+0x48>
    4344:	68 94       	set
    4346:	3f 91       	pop	r19
    4348:	2a e0       	ldi	r18, 0x0A	; 10
    434a:	26 9f       	mul	r18, r22
    434c:	11 24       	eor	r1, r1
    434e:	30 19       	sub	r19, r0
    4350:	30 5d       	subi	r19, 0xD0	; 208
    4352:	31 93       	st	Z+, r19
    4354:	de f6       	brtc	.-74     	; 0x430c <__ultoa_invert+0xe>
    4356:	cf 01       	movw	r24, r30
    4358:	08 95       	ret
    435a:	46 2f       	mov	r20, r22
    435c:	47 70       	andi	r20, 0x07	; 7
    435e:	40 5d       	subi	r20, 0xD0	; 208
    4360:	41 93       	st	Z+, r20
    4362:	b3 e0       	ldi	r27, 0x03	; 3
    4364:	0f d0       	rcall	.+30     	; 0x4384 <__ultoa_invert+0x86>
    4366:	c9 f7       	brne	.-14     	; 0x435a <__ultoa_invert+0x5c>
    4368:	f6 cf       	rjmp	.-20     	; 0x4356 <__ultoa_invert+0x58>
    436a:	46 2f       	mov	r20, r22
    436c:	4f 70       	andi	r20, 0x0F	; 15
    436e:	40 5d       	subi	r20, 0xD0	; 208
    4370:	4a 33       	cpi	r20, 0x3A	; 58
    4372:	18 f0       	brcs	.+6      	; 0x437a <__ultoa_invert+0x7c>
    4374:	49 5d       	subi	r20, 0xD9	; 217
    4376:	31 fd       	sbrc	r19, 1
    4378:	40 52       	subi	r20, 0x20	; 32
    437a:	41 93       	st	Z+, r20
    437c:	02 d0       	rcall	.+4      	; 0x4382 <__ultoa_invert+0x84>
    437e:	a9 f7       	brne	.-22     	; 0x436a <__ultoa_invert+0x6c>
    4380:	ea cf       	rjmp	.-44     	; 0x4356 <__ultoa_invert+0x58>
    4382:	b4 e0       	ldi	r27, 0x04	; 4
    4384:	a6 95       	lsr	r26
    4386:	97 95       	ror	r25
    4388:	87 95       	ror	r24
    438a:	77 95       	ror	r23
    438c:	67 95       	ror	r22
    438e:	ba 95       	dec	r27
    4390:	c9 f7       	brne	.-14     	; 0x4384 <__ultoa_invert+0x86>
    4392:	00 97       	sbiw	r24, 0x00	; 0
    4394:	61 05       	cpc	r22, r1
    4396:	71 05       	cpc	r23, r1
    4398:	08 95       	ret
    439a:	9b 01       	movw	r18, r22
    439c:	ac 01       	movw	r20, r24
    439e:	0a 2e       	mov	r0, r26
    43a0:	06 94       	lsr	r0
    43a2:	57 95       	ror	r21
    43a4:	47 95       	ror	r20
    43a6:	37 95       	ror	r19
    43a8:	27 95       	ror	r18
    43aa:	ba 95       	dec	r27
    43ac:	c9 f7       	brne	.-14     	; 0x43a0 <__ultoa_invert+0xa2>
    43ae:	62 0f       	add	r22, r18
    43b0:	73 1f       	adc	r23, r19
    43b2:	84 1f       	adc	r24, r20
    43b4:	95 1f       	adc	r25, r21
    43b6:	a0 1d       	adc	r26, r0
    43b8:	08 95       	ret

000043ba <__prologue_saves__>:
    43ba:	2f 92       	push	r2
    43bc:	3f 92       	push	r3
    43be:	4f 92       	push	r4
    43c0:	5f 92       	push	r5
    43c2:	6f 92       	push	r6
    43c4:	7f 92       	push	r7
    43c6:	8f 92       	push	r8
    43c8:	9f 92       	push	r9
    43ca:	af 92       	push	r10
    43cc:	bf 92       	push	r11
    43ce:	cf 92       	push	r12
    43d0:	df 92       	push	r13
    43d2:	ef 92       	push	r14
    43d4:	ff 92       	push	r15
    43d6:	0f 93       	push	r16
    43d8:	1f 93       	push	r17
    43da:	cf 93       	push	r28
    43dc:	df 93       	push	r29
    43de:	cd b7       	in	r28, 0x3d	; 61
    43e0:	de b7       	in	r29, 0x3e	; 62
    43e2:	ca 1b       	sub	r28, r26
    43e4:	db 0b       	sbc	r29, r27
    43e6:	0f b6       	in	r0, 0x3f	; 63
    43e8:	f8 94       	cli
    43ea:	de bf       	out	0x3e, r29	; 62
    43ec:	0f be       	out	0x3f, r0	; 63
    43ee:	cd bf       	out	0x3d, r28	; 61
    43f0:	09 94       	ijmp

000043f2 <__epilogue_restores__>:
    43f2:	2a 88       	ldd	r2, Y+18	; 0x12
    43f4:	39 88       	ldd	r3, Y+17	; 0x11
    43f6:	48 88       	ldd	r4, Y+16	; 0x10
    43f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    43fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    43fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    43fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    4400:	9b 84       	ldd	r9, Y+11	; 0x0b
    4402:	aa 84       	ldd	r10, Y+10	; 0x0a
    4404:	b9 84       	ldd	r11, Y+9	; 0x09
    4406:	c8 84       	ldd	r12, Y+8	; 0x08
    4408:	df 80       	ldd	r13, Y+7	; 0x07
    440a:	ee 80       	ldd	r14, Y+6	; 0x06
    440c:	fd 80       	ldd	r15, Y+5	; 0x05
    440e:	0c 81       	ldd	r16, Y+4	; 0x04
    4410:	1b 81       	ldd	r17, Y+3	; 0x03
    4412:	aa 81       	ldd	r26, Y+2	; 0x02
    4414:	b9 81       	ldd	r27, Y+1	; 0x01
    4416:	ce 0f       	add	r28, r30
    4418:	d1 1d       	adc	r29, r1
    441a:	0f b6       	in	r0, 0x3f	; 63
    441c:	f8 94       	cli
    441e:	de bf       	out	0x3e, r29	; 62
    4420:	0f be       	out	0x3f, r0	; 63
    4422:	cd bf       	out	0x3d, r28	; 61
    4424:	ed 01       	movw	r28, r26
    4426:	08 95       	ret

00004428 <__do_global_dtors>:
    4428:	10 e0       	ldi	r17, 0x00	; 0
    442a:	c7 ee       	ldi	r28, 0xE7	; 231
    442c:	d0 e0       	ldi	r29, 0x00	; 0
    442e:	04 c0       	rjmp	.+8      	; 0x4438 <__do_global_dtors+0x10>
    4430:	fe 01       	movw	r30, r28
    4432:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__tablejump2__>
    4436:	21 96       	adiw	r28, 0x01	; 1
    4438:	c8 3e       	cpi	r28, 0xE8	; 232
    443a:	d1 07       	cpc	r29, r17
    443c:	c9 f7       	brne	.-14     	; 0x4430 <__do_global_dtors+0x8>
    443e:	f8 94       	cli

00004440 <__stop_program>:
    4440:	ff cf       	rjmp	.-2      	; 0x4440 <__stop_program>
