
temp_oled_wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003a4  00800100  00002f88  0000301c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000146  008004a4  008004a4  000033c0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000033c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000341c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006c0  00000000  00000000  0000345c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e921  00000000  00000000  00003b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026c0  00000000  00000000  0001243d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000238c  00000000  00000000  00014afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000173c  00000000  00000000  00016e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003337  00000000  00000000  000185c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000088d1  00000000  00000000  0001b8ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000710  00000000  00000000  000241d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__dtors_end>
       4:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <__vector_1>
       8:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__vector_2>
       c:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__vector_3>
      10:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__vector_3>
      14:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__vector_3>
      18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      1c:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__vector_7>
      20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      40:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__vector_16>
      44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      48:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <__vector_18>
      4c:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__vector_19>
      50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 5e       	subi	r16, 0xE0	; 224
      6a:	bc e2       	ldi	r27, 0x2C	; 44
      6c:	61 3f       	cpi	r22, 0xF1	; 241
      6e:	dd 83       	std	Y+5, r29	; 0x05
      70:	c2 9c       	mul	r12, r2
      72:	7e 20       	and	r7, r14
      74:	a3 fd       	sbrc	r26, 3
      76:	1f 41       	sbci	r17, 0x1F	; 31
      78:	9d c3       	rjmp	.+1850   	; 0x7b4 <_ZN17DallasTemperature8getTempCEPh+0x1a>
      7a:	21 7f       	andi	r18, 0xF1	; 241
      7c:	fc a2       	std	Y+36, r15	; 0x24
      7e:	40 1e       	adc	r4, r16
      80:	5f 01       	movw	r10, r30
      82:	e3 bd       	out	0x23, r30	; 35
      84:	3e 60       	ori	r19, 0x0E	; 14
      86:	82 dc       	rcall	.-1788   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
      88:	23 7d       	andi	r18, 0xD3	; 211
      8a:	9f c1       	rjmp	.+830    	; 0x3ca <_ZN17DallasTemperature15readPowerSupplyEPh+0x3a>
      8c:	42 1c       	adc	r4, r2
      8e:	fe a0       	ldd	r15, Y+38	; 0x26
      90:	e1 bf       	out	0x31, r30	; 49
      92:	5d 03       	fmul	r21, r21
      94:	80 de       	rcall	.-768    	; 0xfffffd96 <__eeprom_end+0xff7efd96>
      96:	3c 62       	ori	r19, 0x2C	; 44
      98:	be e0       	ldi	r27, 0x0E	; 14
      9a:	02 5c       	subi	r16, 0xC2	; 194
      9c:	df 81       	ldd	r29, Y+7	; 0x07
      9e:	63 3d       	cpi	r22, 0xD3	; 211
      a0:	7c 22       	and	r7, r28
      a2:	c0 9e       	mul	r12, r16
      a4:	1d 43       	sbci	r17, 0x3D	; 61
      a6:	a1 ff       	sbrs	r26, 1
      a8:	46 18       	sub	r4, r6
      aa:	fa a4       	ldd	r15, Y+42	; 0x2a
      ac:	27 79       	andi	r18, 0x97	; 151
      ae:	9b c5       	rjmp	.+2870   	; 0xbe6 <_ZN7OneWire6searchEPh+0x118>
      b0:	84 da       	rcall	.-2808   	; 0xfffff5ba <__eeprom_end+0xff7ef5ba>
      b2:	38 66       	ori	r19, 0x68	; 104
      b4:	e5 bb       	out	0x15, r30	; 21
      b6:	59 07       	cpc	r21, r25
      b8:	db 85       	ldd	r29, Y+11	; 0x0b
      ba:	67 39       	cpi	r22, 0x97	; 151
      bc:	ba e4       	ldi	r27, 0x4A	; 74
      be:	06 58       	subi	r16, 0x86	; 134
      c0:	19 47       	sbci	r17, 0x79	; 121
      c2:	a5 fb       	bst	r26, 5
      c4:	78 26       	eor	r7, r24
      c6:	c4 9a       	sbi	0x18, 4	; 24
      c8:	65 3b       	cpi	r22, 0xB5	; 181
      ca:	d9 87       	std	Y+9, r29	; 0x09
      cc:	04 5a       	subi	r16, 0xA4	; 164
      ce:	b8 e6       	ldi	r27, 0x68	; 104
      d0:	a7 f9       	bld	r26, 7
      d2:	1b 45       	sbci	r17, 0x5B	; 91
      d4:	c6 98       	cbi	0x18, 6	; 24
      d6:	7a 24       	eor	r7, r10
      d8:	f8 a6       	std	Y+40, r15	; 0x28
      da:	44 1a       	sub	r4, r20
      dc:	99 c7       	rjmp	.+3890   	; 0x1010 <_Z14float_to_uCharf+0x126>
      de:	25 7b       	andi	r18, 0xB5	; 181
      e0:	3a 64       	ori	r19, 0x4A	; 74
      e2:	86 d8       	rcall	.-3828   	; 0xfffff1f0 <__eeprom_end+0xff7ef1f0>
      e4:	5b 05       	cpc	r21, r11
      e6:	e7 b9       	out	0x07, r30	; 7
      e8:	8c d2       	rcall	.+1304   	; 0x602 <_ZN17DallasTemperature19requestTemperaturesEv+0x4>
      ea:	30 6e       	ori	r19, 0xE0	; 224
      ec:	ed b3       	in	r30, 0x1d	; 29
      ee:	51 0f       	add	r21, r17
      f0:	4e 10       	cpse	r4, r14
      f2:	f2 ac       	ldd	r15, Z+58	; 0x3a
      f4:	2f 71       	andi	r18, 0x1F	; 31
      f6:	93 cd       	rjmp	.-1242   	; 0xfffffc1e <__eeprom_end+0xff7efc1e>
      f8:	11 4f       	sbci	r17, 0xF1	; 241
      fa:	ad f3       	brhs	.-22     	; 0xe6 <__trampolines_end+0x7e>
      fc:	70 2e       	mov	r7, r16
      fe:	cc 92       	st	X, r12
     100:	d3 8d       	ldd	r29, Z+27	; 0x1b
     102:	6f 31       	cpi	r22, 0x1F	; 31
     104:	b2 ec       	ldi	r27, 0xC2	; 194
     106:	0e 50       	subi	r16, 0x0E	; 14
     108:	af f1       	brie	.+106    	; 0x174 <digital_pin_to_timer_PGM+0xb>
     10a:	13 4d       	sbci	r17, 0xD3	; 211
     10c:	ce 90       	ld	r12, -X
     10e:	72 2c       	mov	r7, r2
     110:	6d 33       	cpi	r22, 0x3D	; 61
     112:	d1 8f       	std	Z+25, r29	; 0x19
     114:	0c 52       	subi	r16, 0x2C	; 44
     116:	b0 ee       	ldi	r27, 0xE0	; 224
     118:	32 6c       	ori	r19, 0xC2	; 194
     11a:	8e d0       	rcall	.+284    	; 0x238 <_ZN17DallasTemperatureC1EP7OneWire+0x16>
     11c:	53 0d       	add	r21, r3
     11e:	ef b1       	in	r30, 0x0f	; 15
     120:	f0 ae       	std	Z+56, r15	; 0x38
     122:	4c 12       	cpse	r4, r28
     124:	91 cf       	rjmp	.-222    	; 0x48 <__SREG__+0x9>
     126:	2d 73       	andi	r18, 0x3D	; 61
     128:	ca 94       	dec	r12
     12a:	76 28       	or	r7, r6
     12c:	ab f5       	brvc	.+106    	; 0x198 <digital_pin_to_port_PGM+0x7>
     12e:	17 49       	sbci	r17, 0x97	; 151
     130:	08 56       	subi	r16, 0x68	; 104
     132:	b4 ea       	ldi	r27, 0xA4	; 164
     134:	69 37       	cpi	r22, 0x79	; 121
     136:	d5 8b       	std	Z+21, r29	; 0x15
     138:	57 09       	sbc	r21, r7
     13a:	eb b5       	in	r30, 0x2b	; 43
     13c:	36 68       	ori	r19, 0x86	; 134
     13e:	8a d4       	rcall	.+2324   	; 0xa54 <_ZN7OneWire4skipEv>
     140:	95 cb       	rjmp	.-2262   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
     142:	29 77       	andi	r18, 0x79	; 121
     144:	f4 aa       	std	Z+52, r15	; 0x34
     146:	48 16       	cp	r4, r24
     148:	e9 b7       	in	r30, 0x39	; 57
     14a:	55 0b       	sbc	r21, r21
     14c:	88 d6       	rcall	.+3344   	; 0xe5e <setup+0x4a>
     14e:	34 6a       	ori	r19, 0xA4	; 164
     150:	2b 75       	andi	r18, 0x5B	; 91
     152:	97 c9       	rjmp	.-3282   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     154:	4a 14       	cp	r4, r10
     156:	f6 a8       	ldd	r15, Z+54	; 0x36
     158:	74 2a       	or	r7, r20
     15a:	c8 96       	adiw	r24, 0x38	; 56
     15c:	15 4b       	sbci	r17, 0xB5	; 181
     15e:	a9 f7       	brne	.-22     	; 0x14a <__trampolines_end+0xe2>
     160:	b6 e8       	ldi	r27, 0x86	; 134
     162:	0a 54       	subi	r16, 0x4A	; 74
     164:	d7 89       	ldd	r29, Z+23	; 0x17
     166:	6b 35       	cpi	r22, 0x5B	; 91

00000168 <_ZL21tone_pin_to_timer_PGM>:
     168:	02                                                  .

00000169 <digital_pin_to_timer_PGM>:
     169:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     179:	00 00 00 00                                         ....

0000017d <digital_pin_to_bit_mask_PGM>:
     17d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     18d:	04 08 10 20                                         ... 

00000191 <digital_pin_to_port_PGM>:
     191:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1a1:	03 03 03 03                                         ....

000001a5 <port_to_input_PGM>:
     1a5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001af <port_to_output_PGM>:
     1af:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001b9 <port_to_mode_PGM>:
     1b9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000001c4 <__ctors_start>:
     1c4:	14 0a       	sbc	r1, r20
     1c6:	98 0e       	add	r9, r24
     1c8:	08 0f       	add	r16, r24

000001ca <__ctors_end>:
     1ca:	27 0a       	sbc	r2, r23

000001cc <__dtors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d8 e0       	ldi	r29, 0x08	; 8
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61

000001d8 <__do_copy_data>:
     1d8:	14 e0       	ldi	r17, 0x04	; 4
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b1 e0       	ldi	r27, 0x01	; 1
     1de:	e8 e8       	ldi	r30, 0x88	; 136
     1e0:	ff e2       	ldi	r31, 0x2F	; 47
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__do_copy_data+0x10>
     1e4:	05 90       	lpm	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	a4 3a       	cpi	r26, 0xA4	; 164
     1ea:	b1 07       	cpc	r27, r17
     1ec:	d9 f7       	brne	.-10     	; 0x1e4 <__do_copy_data+0xc>

000001ee <__do_clear_bss>:
     1ee:	25 e0       	ldi	r18, 0x05	; 5
     1f0:	a4 ea       	ldi	r26, 0xA4	; 164
     1f2:	b4 e0       	ldi	r27, 0x04	; 4
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <.do_clear_bss_start>

000001f6 <.do_clear_bss_loop>:
     1f6:	1d 92       	st	X+, r1

000001f8 <.do_clear_bss_start>:
     1f8:	aa 3e       	cpi	r26, 0xEA	; 234
     1fa:	b2 07       	cpc	r27, r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <.do_clear_bss_loop>

000001fe <__do_global_ctors>:
     1fe:	10 e0       	ldi	r17, 0x00	; 0
     200:	c5 ee       	ldi	r28, 0xE5	; 229
     202:	d0 e0       	ldi	r29, 0x00	; 0
     204:	04 c0       	rjmp	.+8      	; 0x20e <__do_global_ctors+0x10>
     206:	21 97       	sbiw	r28, 0x01	; 1
     208:	fe 01       	movw	r30, r28
     20a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__tablejump2__>
     20e:	c2 3e       	cpi	r28, 0xE2	; 226
     210:	d1 07       	cpc	r29, r17
     212:	c9 f7       	brne	.-14     	; 0x206 <__do_global_ctors+0x8>
     214:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <main>
     218:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__do_global_dtors>

0000021c <__bad_interrupt>:
     21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
  _AlarmHandler = handler;
}

// The default alarm handler
void DallasTemperature::defaultAlarmHandler(uint8_t* deviceAddress)
{
     220:	08 95       	ret

00000222 <_ZN17DallasTemperatureC1EP7OneWire>:
extern "C" {
    #include "WConstants.h"
}
#endif

DallasTemperature::DallasTemperature(OneWire* _oneWire)
     222:	fc 01       	movw	r30, r24
  #if REQUIRESALARMS
  : _AlarmHandler(&defaultAlarmHandler)
     224:	80 e1       	ldi	r24, 0x10	; 16
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	92 8b       	std	Z+18, r25	; 0x12
     22a:	81 8b       	std	Z+17, r24	; 0x11
  #endif
{
  _wire = _oneWire;
     22c:	76 83       	std	Z+6, r23	; 0x06
     22e:	65 83       	std	Z+5, r22	; 0x05
  devices = 0;
     230:	14 82       	std	Z+4, r1	; 0x04
  parasite = false;
     232:	10 82       	st	Z, r1
  bitResolution = 9;
     234:	89 e0       	ldi	r24, 0x09	; 9
     236:	81 83       	std	Z+1, r24	; 0x01
  waitForConversion = true;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	82 83       	std	Z+2, r24	; 0x02
  checkForConversion = true;
     23c:	83 83       	std	Z+3, r24	; 0x03
     23e:	08 95       	ret

00000240 <_ZN17DallasTemperature14getDeviceCountEv>:

// returns the number of devices found on the bus
uint8_t DallasTemperature::getDeviceCount(void)
{
  return devices;
}
     240:	fc 01       	movw	r30, r24
     242:	84 81       	ldd	r24, Z+4	; 0x04
     244:	08 95       	ret

00000246 <_ZN17DallasTemperature12validAddressEPh>:

// returns true if address is valid
bool DallasTemperature::validAddress(uint8_t* deviceAddress)
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	eb 01       	movw	r28, r22
  return (_wire->crc8(deviceAddress, 7) == deviceAddress[7]);
     24c:	67 e0       	ldi	r22, 0x07	; 7
     24e:	ce 01       	movw	r24, r28
     250:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN7OneWire4crc8EPKhh>
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	2f 81       	ldd	r18, Y+7	; 0x07
     258:	82 13       	cpse	r24, r18
     25a:	90 e0       	ldi	r25, 0x00	; 0
}
     25c:	89 2f       	mov	r24, r25
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <_ZN17DallasTemperature10getAddressEPhh>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
{
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	8c 01       	movw	r16, r24
     272:	7b 01       	movw	r14, r22
     274:	d4 2f       	mov	r29, r20
  uint8_t depth = 0;

  _wire->reset_search();
     276:	fc 01       	movw	r30, r24
     278:	85 81       	ldd	r24, Z+5	; 0x05
     27a:	96 81       	ldd	r25, Z+6	; 0x06
     27c:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_ZN7OneWire12reset_searchEv>

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
{
  uint8_t depth = 0;
     280:	c0 e0       	ldi	r28, 0x00	; 0
     282:	0b c0       	rjmp	.+22     	; 0x29a <_ZN17DallasTemperature10getAddressEPhh+0x36>

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
     284:	cd 13       	cpse	r28, r29
     286:	06 c0       	rjmp	.+12     	; 0x294 <_ZN17DallasTemperature10getAddressEPhh+0x30>
     288:	b7 01       	movw	r22, r14
     28a:	c8 01       	movw	r24, r16
     28c:	0e 94 23 01 	call	0x246	; 0x246 <_ZN17DallasTemperature12validAddressEPh>
     290:	81 11       	cpse	r24, r1
     292:	0d c0       	rjmp	.+26     	; 0x2ae <_ZN17DallasTemperature10getAddressEPhh+0x4a>
    depth++;
     294:	cf 5f       	subi	r28, 0xFF	; 255
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
     296:	dc 17       	cp	r29, r28
     298:	48 f0       	brcs	.+18     	; 0x2ac <_ZN17DallasTemperature10getAddressEPhh+0x48>
     29a:	b7 01       	movw	r22, r14
     29c:	f8 01       	movw	r30, r16
     29e:	85 81       	ldd	r24, Z+5	; 0x05
     2a0:	96 81       	ldd	r25, Z+6	; 0x06
     2a2:	0e 94 67 05 	call	0xace	; 0xace <_ZN7OneWire6searchEPh>
     2a6:	81 11       	cpse	r24, r1
     2a8:	ed cf       	rjmp	.-38     	; 0x284 <_ZN17DallasTemperature10getAddressEPhh+0x20>
     2aa:	01 c0       	rjmp	.+2      	; 0x2ae <_ZN17DallasTemperature10getAddressEPhh+0x4a>
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    depth++;
  }

  return false;
     2ac:	80 e0       	ldi	r24, 0x00	; 0
}
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	08 95       	ret

000002bc <_ZN17DallasTemperature14readScratchPadEPhS0_>:
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
}

// read device's scratch pad
void DallasTemperature::readScratchPad(uint8_t* deviceAddress, uint8_t* scratchPad)
{
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	ec 01       	movw	r28, r24
     2ca:	7b 01       	movw	r14, r22
     2cc:	8a 01       	movw	r16, r20
  // send the command
  _wire->reset();
     2ce:	8d 81       	ldd	r24, Y+5	; 0x05
     2d0:	9e 81       	ldd	r25, Y+6	; 0x06
     2d2:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
     2d6:	b7 01       	movw	r22, r14
     2d8:	8d 81       	ldd	r24, Y+5	; 0x05
     2da:	9e 81       	ldd	r25, Y+6	; 0x06
     2dc:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN7OneWire6selectEPKh>
  _wire->write(READSCRATCH);
     2e0:	40 e0       	ldi	r20, 0x00	; 0
     2e2:	6e eb       	ldi	r22, 0xBE	; 190
     2e4:	8d 81       	ldd	r24, Y+5	; 0x05
     2e6:	9e 81       	ldd	r25, Y+6	; 0x06
     2e8:	0e 94 b4 04 	call	0x968	; 0x968 <_ZN7OneWire5writeEhh>

  
  // read the response

  // byte 0: temperature LSB
  scratchPad[TEMP_LSB] = _wire->read();
     2ec:	8d 81       	ldd	r24, Y+5	; 0x05
     2ee:	9e 81       	ldd	r25, Y+6	; 0x06
     2f0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN7OneWire4readEv>
     2f4:	f8 01       	movw	r30, r16
     2f6:	80 83       	st	Z, r24

  // byte 1: temperature MSB
  scratchPad[TEMP_MSB] = _wire->read();
     2f8:	8d 81       	ldd	r24, Y+5	; 0x05
     2fa:	9e 81       	ldd	r25, Y+6	; 0x06
     2fc:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN7OneWire4readEv>
     300:	f8 01       	movw	r30, r16
     302:	81 83       	std	Z+1, r24	; 0x01

  // byte 2: high alarm temp
  scratchPad[HIGH_ALARM_TEMP] = _wire->read();
     304:	8d 81       	ldd	r24, Y+5	; 0x05
     306:	9e 81       	ldd	r25, Y+6	; 0x06
     308:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN7OneWire4readEv>
     30c:	f8 01       	movw	r30, r16
     30e:	82 83       	std	Z+2, r24	; 0x02

  // byte 3: low alarm temp
  scratchPad[LOW_ALARM_TEMP] = _wire->read();
     310:	8d 81       	ldd	r24, Y+5	; 0x05
     312:	9e 81       	ldd	r25, Y+6	; 0x06
     314:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN7OneWire4readEv>
     318:	f8 01       	movw	r30, r16
     31a:	83 83       	std	Z+3, r24	; 0x03

  // byte 4:
  // DS18S20: store for crc
  // DS18B20 & DS1822: configuration register
  scratchPad[CONFIGURATION] = _wire->read();
     31c:	8d 81       	ldd	r24, Y+5	; 0x05
     31e:	9e 81       	ldd	r25, Y+6	; 0x06
     320:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN7OneWire4readEv>
     324:	f8 01       	movw	r30, r16
     326:	84 83       	std	Z+4, r24	; 0x04

  // byte 5:
  // internal use & crc
  scratchPad[INTERNAL_BYTE] = _wire->read();
     328:	8d 81       	ldd	r24, Y+5	; 0x05
     32a:	9e 81       	ldd	r25, Y+6	; 0x06
     32c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN7OneWire4readEv>
     330:	f8 01       	movw	r30, r16
     332:	85 83       	std	Z+5, r24	; 0x05

  // byte 6:
  // DS18S20: COUNT_REMAIN
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_REMAIN] = _wire->read();
     334:	8d 81       	ldd	r24, Y+5	; 0x05
     336:	9e 81       	ldd	r25, Y+6	; 0x06
     338:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN7OneWire4readEv>
     33c:	f8 01       	movw	r30, r16
     33e:	86 83       	std	Z+6, r24	; 0x06

  // byte 7:
  // DS18S20: COUNT_PER_C
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_PER_C] = _wire->read();
     340:	8d 81       	ldd	r24, Y+5	; 0x05
     342:	9e 81       	ldd	r25, Y+6	; 0x06
     344:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN7OneWire4readEv>
     348:	f8 01       	movw	r30, r16
     34a:	87 83       	std	Z+7, r24	; 0x07

  // byte 8:
  // SCTRACHPAD_CRC
  scratchPad[SCRATCHPAD_CRC] = _wire->read();
     34c:	8d 81       	ldd	r24, Y+5	; 0x05
     34e:	9e 81       	ldd	r25, Y+6	; 0x06
     350:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN7OneWire4readEv>
     354:	f8 01       	movw	r30, r16
     356:	80 87       	std	Z+8, r24	; 0x08

  _wire->reset();
     358:	8d 81       	ldd	r24, Y+5	; 0x05
     35a:	9e 81       	ldd	r25, Y+6	; 0x06
     35c:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN7OneWire5resetEv>
}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	08 95       	ret

0000036e <_ZN17DallasTemperature11isConnectedEPhS0_>:
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DallasTemperature::isConnected(uint8_t* deviceAddress, uint8_t* scratchPad)
{
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	ea 01       	movw	r28, r20
  readScratchPad(deviceAddress, scratchPad);
     374:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN17DallasTemperature14readScratchPadEPhS0_>
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
     378:	68 e0       	ldi	r22, 0x08	; 8
     37a:	ce 01       	movw	r24, r28
     37c:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN7OneWire4crc8EPKhh>
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	28 85       	ldd	r18, Y+8	; 0x08
     384:	82 13       	cpse	r24, r18
     386:	90 e0       	ldi	r25, 0x00	; 0
}
     388:	89 2f       	mov	r24, r25
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <_ZN17DallasTemperature15readPowerSupplyEPh>:
  _wire->reset();
}

// reads the device's power requirements
bool DallasTemperature::readPowerSupply(uint8_t* deviceAddress)
{
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	ec 01       	movw	r28, r24
     39a:	8b 01       	movw	r16, r22
  bool ret = false;
  _wire->reset();
     39c:	8d 81       	ldd	r24, Y+5	; 0x05
     39e:	9e 81       	ldd	r25, Y+6	; 0x06
     3a0:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
     3a4:	b8 01       	movw	r22, r16
     3a6:	8d 81       	ldd	r24, Y+5	; 0x05
     3a8:	9e 81       	ldd	r25, Y+6	; 0x06
     3aa:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN7OneWire6selectEPKh>
  _wire->write(READPOWERSUPPLY);
     3ae:	40 e0       	ldi	r20, 0x00	; 0
     3b0:	64 eb       	ldi	r22, 0xB4	; 180
     3b2:	8d 81       	ldd	r24, Y+5	; 0x05
     3b4:	9e 81       	ldd	r25, Y+6	; 0x06
     3b6:	0e 94 b4 04 	call	0x968	; 0x968 <_ZN7OneWire5writeEhh>
  if (_wire->read_bit() == 0) ret = true;
     3ba:	8d 81       	ldd	r24, Y+5	; 0x05
     3bc:	9e 81       	ldd	r25, Y+6	; 0x06
     3be:	0e 94 89 04 	call	0x912	; 0x912 <_ZN7OneWire8read_bitEv>
     3c2:	18 2f       	mov	r17, r24
  _wire->reset();
     3c4:	8d 81       	ldd	r24, Y+5	; 0x05
     3c6:	9e 81       	ldd	r25, Y+6	; 0x06
     3c8:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN7OneWire5resetEv>
{
  bool ret = false;
  _wire->reset();
  _wire->select(deviceAddress);
  _wire->write(READPOWERSUPPLY);
  if (_wire->read_bit() == 0) ret = true;
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	11 11       	cpse	r17, r1
     3d0:	80 e0       	ldi	r24, 0x00	; 0
  _wire->reset();
  return ret;
}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	08 95       	ret

000003dc <_ZN17DallasTemperature13getResolutionEPh>:
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
{
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	29 97       	sbiw	r28, 0x09	; 9
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
     3f0:	fb 01       	movw	r30, r22
     3f2:	20 81       	ld	r18, Z
     3f4:	20 31       	cpi	r18, 0x10	; 16
     3f6:	d9 f0       	breq	.+54     	; 0x42e <_ZN17DallasTemperature13getResolutionEPh+0x52>

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
     3f8:	ae 01       	movw	r20, r28
     3fa:	4f 5f       	subi	r20, 0xFF	; 255
     3fc:	5f 4f       	sbci	r21, 0xFF	; 255
     3fe:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN17DallasTemperature11isConnectedEPhS0_>
     402:	88 23       	and	r24, r24
     404:	b1 f0       	breq	.+44     	; 0x432 <_ZN17DallasTemperature13getResolutionEPh+0x56>
  {
	switch (scratchPad[CONFIGURATION])
     406:	8d 81       	ldd	r24, Y+5	; 0x05
     408:	8f 33       	cpi	r24, 0x3F	; 63
     40a:	69 f0       	breq	.+26     	; 0x426 <_ZN17DallasTemperature13getResolutionEPh+0x4a>
     40c:	18 f4       	brcc	.+6      	; 0x414 <_ZN17DallasTemperature13getResolutionEPh+0x38>
     40e:	8f 31       	cpi	r24, 0x1F	; 31
     410:	61 f0       	breq	.+24     	; 0x42a <_ZN17DallasTemperature13getResolutionEPh+0x4e>
     412:	07 c0       	rjmp	.+14     	; 0x422 <_ZN17DallasTemperature13getResolutionEPh+0x46>
     414:	8f 35       	cpi	r24, 0x5F	; 95
     416:	19 f0       	breq	.+6      	; 0x41e <_ZN17DallasTemperature13getResolutionEPh+0x42>
     418:	8f 37       	cpi	r24, 0x7F	; 127
     41a:	69 f0       	breq	.+26     	; 0x436 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
     41c:	02 c0       	rjmp	.+4      	; 0x422 <_ZN17DallasTemperature13getResolutionEPh+0x46>
    {
      case TEMP_12_BIT:
        return 12;
        
      case TEMP_11_BIT:
        return 11;
     41e:	8b e0       	ldi	r24, 0x0B	; 11
     420:	0b c0       	rjmp	.+22     	; 0x438 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
      case TEMP_9_BIT:
        return 9;
        
	}
  }
  return 0;
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	09 c0       	rjmp	.+18     	; 0x438 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
        
      case TEMP_11_BIT:
        return 11;
        
      case TEMP_10_BIT:
        return 10;
     426:	8a e0       	ldi	r24, 0x0A	; 10
     428:	07 c0       	rjmp	.+14     	; 0x438 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
        
      case TEMP_9_BIT:
        return 9;
     42a:	89 e0       	ldi	r24, 0x09	; 9
     42c:	05 c0       	rjmp	.+10     	; 0x438 <_ZN17DallasTemperature13getResolutionEPh+0x5c>

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
{
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
     42e:	89 e0       	ldi	r24, 0x09	; 9
     430:	03 c0       	rjmp	.+6      	; 0x438 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
      case TEMP_9_BIT:
        return 9;
        
	}
  }
  return 0;
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	01 c0       	rjmp	.+2      	; 0x438 <_ZN17DallasTemperature13getResolutionEPh+0x5c>
  if (isConnected(deviceAddress, scratchPad))
  {
	switch (scratchPad[CONFIGURATION])
    {
      case TEMP_12_BIT:
        return 12;
     436:	8c e0       	ldi	r24, 0x0C	; 12
        return 9;
        
	}
  }
  return 0;
}
     438:	29 96       	adiw	r28, 0x09	; 9
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <_ZN17DallasTemperature5beginEv>:
  checkForConversion = true;
}

// initialise the bus
void DallasTemperature::begin(void)
{
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	61 97       	sbiw	r28, 0x11	; 17
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
     466:	8c 01       	movw	r16, r24
  DeviceAddress deviceAddress;

  _wire->reset_search();
     468:	fc 01       	movw	r30, r24
     46a:	85 81       	ldd	r24, Z+5	; 0x05
     46c:	96 81       	ldd	r25, Z+6	; 0x06
     46e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_ZN7OneWire12reset_searchEv>
  devices = 0; // Reset the number of devices when we enumerate wire devices
     472:	f8 01       	movw	r30, r16
     474:	14 82       	std	Z+4, r1	; 0x04

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
     476:	ee 24       	eor	r14, r14
     478:	e3 94       	inc	r14
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
     47a:	37 c0       	rjmp	.+110    	; 0x4ea <_ZN17DallasTemperature5beginEv+0xa0>
  {
    if (validAddress(deviceAddress))
     47c:	be 01       	movw	r22, r28
     47e:	66 5f       	subi	r22, 0xF6	; 246
     480:	7f 4f       	sbci	r23, 0xFF	; 255
     482:	c8 01       	movw	r24, r16
     484:	0e 94 23 01 	call	0x246	; 0x246 <_ZN17DallasTemperature12validAddressEPh>
     488:	88 23       	and	r24, r24
     48a:	79 f1       	breq	.+94     	; 0x4ea <_ZN17DallasTemperature5beginEv+0xa0>
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
     48c:	f8 01       	movw	r30, r16
     48e:	80 81       	ld	r24, Z
     490:	81 11       	cpse	r24, r1
     492:	0a c0       	rjmp	.+20     	; 0x4a8 <_ZN17DallasTemperature5beginEv+0x5e>
     494:	be 01       	movw	r22, r28
     496:	66 5f       	subi	r22, 0xF6	; 246
     498:	7f 4f       	sbci	r23, 0xFF	; 255
     49a:	c8 01       	movw	r24, r16
     49c:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN17DallasTemperature15readPowerSupplyEPh>
     4a0:	88 23       	and	r24, r24
     4a2:	11 f0       	breq	.+4      	; 0x4a8 <_ZN17DallasTemperature5beginEv+0x5e>
     4a4:	f8 01       	movw	r30, r16
     4a6:	e0 82       	st	Z, r14

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
     4a8:	ae 01       	movw	r20, r28
     4aa:	4f 5f       	subi	r20, 0xFF	; 255
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
     4ae:	be 01       	movw	r22, r28
     4b0:	66 5f       	subi	r22, 0xF6	; 246
     4b2:	7f 4f       	sbci	r23, 0xFF	; 255
     4b4:	c8 01       	movw	r24, r16
     4b6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN17DallasTemperature14readScratchPadEPhS0_>

	  bitResolution = max(bitResolution, getResolution(deviceAddress));
     4ba:	f8 01       	movw	r30, r16
     4bc:	f1 80       	ldd	r15, Z+1	; 0x01
     4be:	be 01       	movw	r22, r28
     4c0:	66 5f       	subi	r22, 0xF6	; 246
     4c2:	7f 4f       	sbci	r23, 0xFF	; 255
     4c4:	c8 01       	movw	r24, r16
     4c6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN17DallasTemperature13getResolutionEPh>
     4ca:	8f 15       	cp	r24, r15
     4cc:	18 f4       	brcc	.+6      	; 0x4d4 <_ZN17DallasTemperature5beginEv+0x8a>
     4ce:	f8 01       	movw	r30, r16
     4d0:	81 81       	ldd	r24, Z+1	; 0x01
     4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <_ZN17DallasTemperature5beginEv+0x96>
     4d4:	be 01       	movw	r22, r28
     4d6:	66 5f       	subi	r22, 0xF6	; 246
     4d8:	7f 4f       	sbci	r23, 0xFF	; 255
     4da:	c8 01       	movw	r24, r16
     4dc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN17DallasTemperature13getResolutionEPh>
     4e0:	f8 01       	movw	r30, r16
     4e2:	81 83       	std	Z+1, r24	; 0x01

      devices++;
     4e4:	84 81       	ldd	r24, Z+4	; 0x04
     4e6:	8f 5f       	subi	r24, 0xFF	; 255
     4e8:	84 83       	std	Z+4, r24	; 0x04
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
     4ea:	be 01       	movw	r22, r28
     4ec:	66 5f       	subi	r22, 0xF6	; 246
     4ee:	7f 4f       	sbci	r23, 0xFF	; 255
     4f0:	f8 01       	movw	r30, r16
     4f2:	85 81       	ldd	r24, Z+5	; 0x05
     4f4:	96 81       	ldd	r25, Z+6	; 0x06
     4f6:	0e 94 67 05 	call	0xace	; 0xace <_ZN7OneWire6searchEPh>
     4fa:	81 11       	cpse	r24, r1
     4fc:	bf cf       	rjmp	.-130    	; 0x47c <_ZN17DallasTemperature5beginEv+0x32>
	  bitResolution = max(bitResolution, getResolution(deviceAddress));

      devices++;
    }
  }
}
     4fe:	61 96       	adiw	r28, 0x11	; 17
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	08 95       	ret

00000518 <_ZN17DallasTemperature21isConversionAvailableEPh>:
{
	return checkForConversion;
}

bool DallasTemperature::isConversionAvailable(uint8_t* deviceAddress)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	29 97       	sbiw	r28, 0x09	; 9
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
	// Check if the clock has been raised indicating the conversion is complete
  	ScratchPad scratchPad;
  	readScratchPad(deviceAddress, scratchPad);
     52c:	ae 01       	movw	r20, r28
     52e:	4f 5f       	subi	r20, 0xFF	; 255
     530:	5f 4f       	sbci	r21, 0xFF	; 255
     532:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN17DallasTemperature14readScratchPadEPhS0_>
	return scratchPad[0];
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	99 81       	ldd	r25, Y+1	; 0x01
     53a:	91 11       	cpse	r25, r1
     53c:	01 c0       	rjmp	.+2      	; 0x540 <_ZN17DallasTemperature21isConversionAvailableEPh+0x28>
     53e:	80 e0       	ldi	r24, 0x00	; 0
}	
     540:	29 96       	adiw	r28, 0x09	; 9
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	de bf       	out	0x3e, r29	; 62
     548:	0f be       	out	0x3f, r0	; 63
     54a:	cd bf       	out	0x3d, r28	; 61
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
  return true;
}


void DallasTemperature::blockTillConversionComplete(uint8_t* bitResolution, uint8_t* deviceAddress)
{
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ec 01       	movw	r28, r24
     564:	8b 01       	movw	r16, r22
	if(deviceAddress != 0 && checkForConversion && !parasite)
     566:	45 2b       	or	r20, r21
     568:	f1 f0       	breq	.+60     	; 0x5a6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
     56a:	8b 81       	ldd	r24, Y+3	; 0x03
     56c:	88 23       	and	r24, r24
     56e:	d9 f0       	breq	.+54     	; 0x5a6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
     570:	88 81       	ld	r24, Y
     572:	81 11       	cpse	r24, r1
     574:	18 c0       	rjmp	.+48     	; 0x5a6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
	{
	  	// Continue to check if the IC has responded with a temperature
	  	// NB: Could cause issues with multiple devices (one device may respond faster)
	  	unsigned long start = millis();
     576:	0e 94 4d 11 	call	0x229a	; 0x229a <millis>
     57a:	6b 01       	movw	r12, r22
     57c:	7c 01       	movw	r14, r24
		while(!isConversionAvailable(0) && ((millis() - start) < 750));	
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	ce 01       	movw	r24, r28
     584:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN17DallasTemperature21isConversionAvailableEPh>
     588:	81 11       	cpse	r24, r1
     58a:	0d c0       	rjmp	.+26     	; 0x5a6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
     58c:	0e 94 4d 11 	call	0x229a	; 0x229a <millis>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	8c 19       	sub	r24, r12
     596:	9d 09       	sbc	r25, r13
     598:	ae 09       	sbc	r26, r14
     59a:	bf 09       	sbc	r27, r15
     59c:	8e 3e       	cpi	r24, 0xEE	; 238
     59e:	92 40       	sbci	r25, 0x02	; 2
     5a0:	a1 05       	cpc	r26, r1
     5a2:	b1 05       	cpc	r27, r1
     5a4:	60 f3       	brcs	.-40     	; 0x57e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x2c>
	}
	
  	// Wait a fix number of cycles till conversion is complete (based on IC datasheet)
	  switch (*bitResolution)
     5a6:	f8 01       	movw	r30, r16
     5a8:	80 81       	ld	r24, Z
     5aa:	8a 30       	cpi	r24, 0x0A	; 10
     5ac:	59 f0       	breq	.+22     	; 0x5c4 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x72>
     5ae:	8b 30       	cpi	r24, 0x0B	; 11
     5b0:	81 f0       	breq	.+32     	; 0x5d2 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x80>
     5b2:	89 30       	cpi	r24, 0x09	; 9
     5b4:	a9 f4       	brne	.+42     	; 0x5e0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8e>
	  {
	    case 9:
	      delay(94);
     5b6:	6e e5       	ldi	r22, 0x5E	; 94
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>
	      break;
     5c2:	14 c0       	rjmp	.+40     	; 0x5ec <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x9a>
	    case 10:
	      delay(188);
     5c4:	6c eb       	ldi	r22, 0xBC	; 188
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>
	      break;
     5d0:	0d c0       	rjmp	.+26     	; 0x5ec <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x9a>
	    case 11:
	      delay(375);
     5d2:	67 e7       	ldi	r22, 0x77	; 119
     5d4:	71 e0       	ldi	r23, 0x01	; 1
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>
	      break;
     5de:	06 c0       	rjmp	.+12     	; 0x5ec <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x9a>
	    case 12:
	    default:
	      delay(750);
     5e0:	6e ee       	ldi	r22, 0xEE	; 238
     5e2:	72 e0       	ldi	r23, 0x02	; 2
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>
	      break;
	  }

}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	df 90       	pop	r13
     5fa:	cf 90       	pop	r12
     5fc:	08 95       	ret

000005fe <_ZN17DallasTemperature19requestTemperaturesEv>:
}	


// sends command for all devices on the bus to perform a temperature conversion
void DallasTemperature::requestTemperatures()
{
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	ec 01       	movw	r28, r24
  _wire->reset();
     604:	8d 81       	ldd	r24, Y+5	; 0x05
     606:	9e 81       	ldd	r25, Y+6	; 0x06
     608:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN7OneWire5resetEv>
  _wire->skip();
     60c:	8d 81       	ldd	r24, Y+5	; 0x05
     60e:	9e 81       	ldd	r25, Y+6	; 0x06
     610:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN7OneWire4skipEv>
  _wire->write(STARTCONVO, parasite);
     614:	48 81       	ld	r20, Y
     616:	64 e4       	ldi	r22, 0x44	; 68
     618:	8d 81       	ldd	r24, Y+5	; 0x05
     61a:	9e 81       	ldd	r25, Y+6	; 0x06
     61c:	0e 94 b4 04 	call	0x968	; 0x968 <_ZN7OneWire5writeEhh>

  // ASYNC mode?
  if (!waitForConversion) return; 
     620:	8a 81       	ldd	r24, Y+2	; 0x02
     622:	88 23       	and	r24, r24
     624:	41 f0       	breq	.+16     	; 0x636 <_ZN17DallasTemperature19requestTemperaturesEv+0x38>
  blockTillConversionComplete(&bitResolution, 0);
     626:	be 01       	movw	r22, r28
     628:	6f 5f       	subi	r22, 0xFF	; 255
     62a:	7f 4f       	sbci	r23, 0xFF	; 255
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	ce 01       	movw	r24, r28
     632:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>

  return;
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
  return toFahrenheit(getTempCByIndex(deviceIndex));
}

// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
{
     63c:	8f 92       	push	r8
     63e:	9f 92       	push	r9
     640:	af 92       	push	r10
     642:	bf 92       	push	r11
     644:	cf 92       	push	r12
     646:	df 92       	push	r13
     648:	ef 92       	push	r14
     64a:	ff 92       	push	r15
     64c:	1f 93       	push	r17
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	fb 01       	movw	r30, r22
     654:	ea 01       	movw	r28, r20
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];
     656:	89 81       	ldd	r24, Y+1	; 0x01
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	98 2f       	mov	r25, r24
     65c:	88 27       	eor	r24, r24
     65e:	28 81       	ld	r18, Y
     660:	bc 01       	movw	r22, r24
     662:	62 2b       	or	r22, r18

  switch (deviceAddress[0])
     664:	80 81       	ld	r24, Z
     666:	82 32       	cpi	r24, 0x22	; 34
     668:	31 f0       	breq	.+12     	; 0x676 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3a>
     66a:	88 32       	cpi	r24, 0x28	; 40
     66c:	21 f0       	breq	.+8      	; 0x676 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3a>
     66e:	80 31       	cpi	r24, 0x10	; 16
     670:	09 f0       	breq	.+2      	; 0x674 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x38>
     672:	7e c0       	rjmp	.+252    	; 0x770 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x134>
     674:	4c c0       	rjmp	.+152    	; 0x70e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xd2>
  {
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
     676:	8c 81       	ldd	r24, Y+4	; 0x04
     678:	8f 33       	cpi	r24, 0x3F	; 63
     67a:	29 f1       	breq	.+74     	; 0x6c6 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x8a>
     67c:	18 f4       	brcc	.+6      	; 0x684 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x48>
     67e:	8f 31       	cpi	r24, 0x1F	; 31
     680:	99 f1       	breq	.+102    	; 0x6e8 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xac>
     682:	76 c0       	rjmp	.+236    	; 0x770 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x134>
     684:	8f 35       	cpi	r24, 0x5F	; 95
     686:	81 f0       	breq	.+32     	; 0x6a8 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x6c>
     688:	8f 37       	cpi	r24, 0x7F	; 127
     68a:	09 f0       	breq	.+2      	; 0x68e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x52>
     68c:	71 c0       	rjmp	.+226    	; 0x770 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x134>
      {
        case TEMP_12_BIT:
          return (float)rawTemperature * 0.0625;
     68e:	07 2e       	mov	r0, r23
     690:	00 0c       	add	r0, r0
     692:	88 0b       	sbc	r24, r24
     694:	99 0b       	sbc	r25, r25
     696:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatsisf>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	40 e8       	ldi	r20, 0x80	; 128
     6a0:	5d e3       	ldi	r21, 0x3D	; 61
     6a2:	0e 94 2b 14 	call	0x2856	; 0x2856 <__mulsf3>
     6a6:	65 c0       	rjmp	.+202    	; 0x772 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
          break;
        case TEMP_11_BIT:
          return (float)(rawTemperature >> 1) * 0.125;
     6a8:	75 95       	asr	r23
     6aa:	67 95       	ror	r22
     6ac:	07 2e       	mov	r0, r23
     6ae:	00 0c       	add	r0, r0
     6b0:	88 0b       	sbc	r24, r24
     6b2:	99 0b       	sbc	r25, r25
     6b4:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatsisf>
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	5e e3       	ldi	r21, 0x3E	; 62
     6c0:	0e 94 2b 14 	call	0x2856	; 0x2856 <__mulsf3>
     6c4:	56 c0       	rjmp	.+172    	; 0x772 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
     6c6:	75 95       	asr	r23
     6c8:	67 95       	ror	r22
     6ca:	75 95       	asr	r23
     6cc:	67 95       	ror	r22
     6ce:	07 2e       	mov	r0, r23
     6d0:	00 0c       	add	r0, r0
     6d2:	88 0b       	sbc	r24, r24
     6d4:	99 0b       	sbc	r25, r25
     6d6:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatsisf>
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	40 e8       	ldi	r20, 0x80	; 128
     6e0:	5e e3       	ldi	r21, 0x3E	; 62
     6e2:	0e 94 2b 14 	call	0x2856	; 0x2856 <__mulsf3>
     6e6:	45 c0       	rjmp	.+138    	; 0x772 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
     6e8:	75 95       	asr	r23
     6ea:	67 95       	ror	r22
     6ec:	75 95       	asr	r23
     6ee:	67 95       	ror	r22
     6f0:	75 95       	asr	r23
     6f2:	67 95       	ror	r22
     6f4:	07 2e       	mov	r0, r23
     6f6:	00 0c       	add	r0, r0
     6f8:	88 0b       	sbc	r24, r24
     6fa:	99 0b       	sbc	r25, r25
     6fc:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatsisf>
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	40 e0       	ldi	r20, 0x00	; 0
     706:	5f e3       	ldi	r21, 0x3F	; 63
     708:	0e 94 2b 14 	call	0x2856	; 0x2856 <__mulsf3>
     70c:	32 c0       	rjmp	.+100    	; 0x772 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
      TEMPERATURE = TEMP_READ - 0.25 + --------------------------
                                               COUNT_PER_C
      */

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
     70e:	1f 81       	ldd	r17, Y+7	; 0x07
     710:	75 95       	asr	r23
     712:	67 95       	ror	r22
     714:	07 2e       	mov	r0, r23
     716:	00 0c       	add	r0, r0
     718:	88 0b       	sbc	r24, r24
     71a:	99 0b       	sbc	r25, r25
     71c:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatsisf>
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	40 e8       	ldi	r20, 0x80	; 128
     726:	5e e3       	ldi	r21, 0x3E	; 62
     728:	0e 94 90 12 	call	0x2520	; 0x2520 <__subsf3>
     72c:	6b 01       	movw	r12, r22
     72e:	7c 01       	movw	r14, r24
     730:	81 2f       	mov	r24, r17
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	2e 81       	ldd	r18, Y+6	; 0x06
     736:	82 1b       	sub	r24, r18
     738:	91 09       	sbc	r25, r1
     73a:	bc 01       	movw	r22, r24
     73c:	99 0f       	add	r25, r25
     73e:	88 0b       	sbc	r24, r24
     740:	99 0b       	sbc	r25, r25
     742:	0e 94 76 13 	call	0x26ec	; 0x26ec <__floatsisf>
     746:	4b 01       	movw	r8, r22
     748:	5c 01       	movw	r10, r24
     74a:	61 2f       	mov	r22, r17
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__floatunsisf>
     756:	9b 01       	movw	r18, r22
     758:	ac 01       	movw	r20, r24
     75a:	c5 01       	movw	r24, r10
     75c:	b4 01       	movw	r22, r8
     75e:	0e 94 02 13 	call	0x2604	; 0x2604 <__divsf3>
     762:	9b 01       	movw	r18, r22
     764:	ac 01       	movw	r20, r24
     766:	c7 01       	movw	r24, r14
     768:	b6 01       	movw	r22, r12
     76a:	0e 94 91 12 	call	0x2522	; 0x2522 <__addsf3>
     76e:	01 c0       	rjmp	.+2      	; 0x772 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
     770:	04 c0       	rjmp	.+8      	; 0x77a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x13e>
     772:	56 2f       	mov	r21, r22
     774:	47 2f       	mov	r20, r23
     776:	38 2f       	mov	r19, r24
     778:	29 2f       	mov	r18, r25
      break;
  }
}
     77a:	65 2f       	mov	r22, r21
     77c:	74 2f       	mov	r23, r20
     77e:	83 2f       	mov	r24, r19
     780:	92 2f       	mov	r25, r18
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	ff 90       	pop	r15
     78a:	ef 90       	pop	r14
     78c:	df 90       	pop	r13
     78e:	cf 90       	pop	r12
     790:	bf 90       	pop	r11
     792:	af 90       	pop	r10
     794:	9f 90       	pop	r9
     796:	8f 90       	pop	r8
     798:	08 95       	ret

0000079a <_ZN17DallasTemperature8getTempCEPh>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(uint8_t* deviceAddress)
{
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	29 97       	sbiw	r28, 0x09	; 9
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
     7b6:	8c 01       	movw	r16, r24
     7b8:	7b 01       	movw	r14, r22
  // TODO: Multiple devices (up to 64) on the same bus may take 
  //       some time to negotiate a response
  // What happens in case of collision?

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
     7ba:	ae 01       	movw	r20, r28
     7bc:	4f 5f       	subi	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN17DallasTemperature11isConnectedEPhS0_>
     7c4:	88 23       	and	r24, r24
     7c6:	41 f0       	breq	.+16     	; 0x7d8 <_ZN17DallasTemperature8getTempCEPh+0x3e>
     7c8:	ae 01       	movw	r20, r28
     7ca:	4f 5f       	subi	r20, 0xFF	; 255
     7cc:	5f 4f       	sbci	r21, 0xFF	; 255
     7ce:	b7 01       	movw	r22, r14
     7d0:	c8 01       	movw	r24, r16
     7d2:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <_ZN17DallasTemperature8getTempCEPh+0x46>
  return DEVICE_DISCONNECTED;
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	8e ef       	ldi	r24, 0xFE	; 254
     7de:	92 ec       	ldi	r25, 0xC2	; 194
}
     7e0:	29 96       	adiw	r28, 0x09	; 9
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	08 95       	ret

000007fa <_ZN17DallasTemperature19isParasitePowerModeEv>:

// returns true if the bus requires parasite power
bool DallasTemperature::isParasitePowerMode(void)
{
  return parasite;
}
     7fa:	fc 01       	movw	r30, r24
     7fc:	80 81       	ld	r24, Z
     7fe:	08 95       	ret

00000800 <_ZN17DallasTemperature12toFahrenheitEf>:
#endif

// Convert float celsius to fahrenheit
float DallasTemperature::toFahrenheit(float celsius)
{
  return (celsius * 1.8) + 32;
     800:	26 e6       	ldi	r18, 0x66	; 102
     802:	36 e6       	ldi	r19, 0x66	; 102
     804:	46 ee       	ldi	r20, 0xE6	; 230
     806:	5f e3       	ldi	r21, 0x3F	; 63
     808:	0e 94 2b 14 	call	0x2856	; 0x2856 <__mulsf3>
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	52 e4       	ldi	r21, 0x42	; 66
     814:	0e 94 91 12 	call	0x2522	; 0x2522 <__addsf3>
}
     818:	08 95       	ret

0000081a <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
	IO_REG_TYPE mask = bitmask;
     824:	fc 01       	movw	r30, r24
     826:	d0 81       	ld	r29, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
     828:	01 81       	ldd	r16, Z+1	; 0x01
     82a:	12 81       	ldd	r17, Z+2	; 0x02
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
     82c:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);
     82e:	f8 01       	movw	r30, r16
     830:	81 81       	ldd	r24, Z+1	; 0x01
     832:	fd 2e       	mov	r15, r29
     834:	f0 94       	com	r15
     836:	8f 21       	and	r24, r15
     838:	81 83       	std	Z+1, r24	; 0x01
	interrupts();
     83a:	78 94       	sei
     83c:	cc e7       	ldi	r28, 0x7C	; 124
     83e:	02 c0       	rjmp	.+4      	; 0x844 <_ZN7OneWire5resetEv+0x2a>
     840:	c1 50       	subi	r28, 0x01	; 1
	// wait until the wire is high... just in case
	do {
		if (--retries == 0) return 0;
     842:	41 f1       	breq	.+80     	; 0x894 <_ZN7OneWire5resetEv+0x7a>
		delayMicroseconds(2);
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 ab 11 	call	0x2356	; 0x2356 <delayMicroseconds>
	} while ( !DIRECT_READ(reg, mask));
     84c:	f8 01       	movw	r30, r16
     84e:	90 81       	ld	r25, Z
     850:	9d 23       	and	r25, r29

	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
     852:	b1 f3       	breq	.-20     	; 0x840 <_ZN7OneWire5resetEv+0x26>
		if (--retries == 0) return 0;
		delayMicroseconds(2);
	} while ( !DIRECT_READ(reg, mask));

	noInterrupts();
     854:	f8 94       	cli
	DIRECT_WRITE_LOW(reg, mask);
     856:	82 81       	ldd	r24, Z+2	; 0x02
     858:	8f 21       	and	r24, r15
     85a:	82 83       	std	Z+2, r24	; 0x02
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
     85c:	81 81       	ldd	r24, Z+1	; 0x01
     85e:	8d 2b       	or	r24, r29
     860:	81 83       	std	Z+1, r24	; 0x01
	interrupts();
     862:	78 94       	sei
	delayMicroseconds(480);
     864:	80 ee       	ldi	r24, 0xE0	; 224
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	0e 94 ab 11 	call	0x2356	; 0x2356 <delayMicroseconds>
	noInterrupts();
     86c:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
     86e:	f8 01       	movw	r30, r16
     870:	81 81       	ldd	r24, Z+1	; 0x01
     872:	f8 22       	and	r15, r24
     874:	f1 82       	std	Z+1, r15	; 0x01
	delayMicroseconds(70);
     876:	86 e4       	ldi	r24, 0x46	; 70
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 ab 11 	call	0x2356	; 0x2356 <delayMicroseconds>
	r = !DIRECT_READ(reg, mask);
     87e:	f8 01       	movw	r30, r16
     880:	80 81       	ld	r24, Z
     882:	d8 23       	and	r29, r24
     884:	c1 e0       	ldi	r28, 0x01	; 1
     886:	09 f0       	breq	.+2      	; 0x88a <_ZN7OneWire5resetEv+0x70>
     888:	c0 e0       	ldi	r28, 0x00	; 0
	interrupts();
     88a:	78 94       	sei
	delayMicroseconds(410);
     88c:	8a e9       	ldi	r24, 0x9A	; 154
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 ab 11 	call	0x2356	; 0x2356 <delayMicroseconds>
	return r;
}
     894:	8c 2f       	mov	r24, r28
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	08 95       	ret

000008a2 <_ZN7OneWire9write_bitEh>:
//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
{
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
	IO_REG_TYPE mask=bitmask;
     8a8:	fc 01       	movw	r30, r24
     8aa:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
     8ac:	c1 81       	ldd	r28, Z+1	; 0x01
     8ae:	d2 81       	ldd	r29, Z+2	; 0x02

	if (v & 1) {
     8b0:	60 ff       	sbrs	r22, 0
     8b2:	16 c0       	rjmp	.+44     	; 0x8e0 <_ZN7OneWire9write_bitEh+0x3e>
		noInterrupts();
     8b4:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
     8b6:	8a 81       	ldd	r24, Y+2	; 0x02
     8b8:	91 2f       	mov	r25, r17
     8ba:	90 95       	com	r25
     8bc:	89 23       	and	r24, r25
     8be:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
     8c0:	89 81       	ldd	r24, Y+1	; 0x01
     8c2:	81 2b       	or	r24, r17
     8c4:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(10);
     8c6:	8a e0       	ldi	r24, 0x0A	; 10
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 ab 11 	call	0x2356	; 0x2356 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
     8ce:	8a 81       	ldd	r24, Y+2	; 0x02
     8d0:	18 2b       	or	r17, r24
     8d2:	1a 83       	std	Y+2, r17	; 0x02
		interrupts();
     8d4:	78 94       	sei
		delayMicroseconds(55);
     8d6:	87 e3       	ldi	r24, 0x37	; 55
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 ab 11 	call	0x2356	; 0x2356 <delayMicroseconds>
     8de:	15 c0       	rjmp	.+42     	; 0x90a <__stack+0xb>
	} else {
		noInterrupts();
     8e0:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
     8e2:	8a 81       	ldd	r24, Y+2	; 0x02
     8e4:	91 2f       	mov	r25, r17
     8e6:	90 95       	com	r25
     8e8:	89 23       	and	r24, r25
     8ea:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	81 2b       	or	r24, r17
     8f0:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(65);
     8f2:	81 e4       	ldi	r24, 0x41	; 65
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 ab 11 	call	0x2356	; 0x2356 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
     8fa:	8a 81       	ldd	r24, Y+2	; 0x02
     8fc:	18 2b       	or	r17, r24
     8fe:	1a 83       	std	Y+2, r17	; 0x02
		interrupts();
     900:	78 94       	sei
		delayMicroseconds(5);
     902:	85 e0       	ldi	r24, 0x05	; 5
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 ab 11 	call	0x2356	; 0x2356 <delayMicroseconds>
	}
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	08 95       	ret

00000912 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
	IO_REG_TYPE mask=bitmask;
     91a:	fc 01       	movw	r30, r24
     91c:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
     91e:	c1 81       	ldd	r28, Z+1	; 0x01
     920:	d2 81       	ldd	r29, Z+2	; 0x02
	uint8_t r;

	noInterrupts();
     922:	f8 94       	cli
	DIRECT_MODE_OUTPUT(reg, mask);
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	81 2b       	or	r24, r17
     928:	89 83       	std	Y+1, r24	; 0x01
	DIRECT_WRITE_LOW(reg, mask);
     92a:	8a 81       	ldd	r24, Y+2	; 0x02
     92c:	01 2f       	mov	r16, r17
     92e:	00 95       	com	r16
     930:	80 23       	and	r24, r16
     932:	8a 83       	std	Y+2, r24	; 0x02
	delayMicroseconds(3);
     934:	83 e0       	ldi	r24, 0x03	; 3
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 ab 11 	call	0x2356	; 0x2356 <delayMicroseconds>
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	08 23       	and	r16, r24
     940:	09 83       	std	Y+1, r16	; 0x01
	delayMicroseconds(10);
     942:	8a e0       	ldi	r24, 0x0A	; 10
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 ab 11 	call	0x2356	; 0x2356 <delayMicroseconds>
	r = DIRECT_READ(reg, mask);
     94a:	c8 81       	ld	r28, Y
	interrupts();
     94c:	78 94       	sei
	delayMicroseconds(53);
     94e:	85 e3       	ldi	r24, 0x35	; 53
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 ab 11 	call	0x2356	; 0x2356 <delayMicroseconds>
	DIRECT_MODE_OUTPUT(reg, mask);
	DIRECT_WRITE_LOW(reg, mask);
	delayMicroseconds(3);
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
	delayMicroseconds(10);
	r = DIRECT_READ(reg, mask);
     956:	1c 23       	and	r17, r28
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	09 f4       	brne	.+2      	; 0x95e <_ZN7OneWire8read_bitEv+0x4c>
     95c:	80 e0       	ldi	r24, 0x00	; 0
	interrupts();
	delayMicroseconds(53);
	return r;
}
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	08 95       	ret

00000968 <_ZN7OneWire5writeEhh>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
     968:	bf 92       	push	r11
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	7c 01       	movw	r14, r24
     97c:	d6 2e       	mov	r13, r22
     97e:	b4 2e       	mov	r11, r20
     980:	c8 e0       	ldi	r28, 0x08	; 8
     982:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     984:	11 e0       	ldi	r17, 0x01	; 1
	OneWire::write_bit( (bitMask & v)?1:0);
     986:	01 e0       	ldi	r16, 0x01	; 1
     988:	c1 2c       	mov	r12, r1
     98a:	60 2f       	mov	r22, r16
     98c:	91 2f       	mov	r25, r17
     98e:	9d 21       	and	r25, r13
     990:	09 f4       	brne	.+2      	; 0x994 <_ZN7OneWire5writeEhh+0x2c>
     992:	6c 2d       	mov	r22, r12
     994:	c7 01       	movw	r24, r14
     996:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7OneWire9write_bitEh>
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     99a:	11 0f       	add	r17, r17
     99c:	21 97       	sbiw	r28, 0x01	; 1
     99e:	a9 f7       	brne	.-22     	; 0x98a <_ZN7OneWire5writeEhh+0x22>
	OneWire::write_bit( (bitMask & v)?1:0);
    }
    if ( !power) {
     9a0:	b1 10       	cpse	r11, r1
     9a2:	15 c0       	rjmp	.+42     	; 0x9ce <_ZN7OneWire5writeEhh+0x66>
	noInterrupts();
     9a4:	f8 94       	cli
	DIRECT_MODE_INPUT(baseReg, bitmask);
     9a6:	d7 01       	movw	r26, r14
     9a8:	11 96       	adiw	r26, 0x01	; 1
     9aa:	ed 91       	ld	r30, X+
     9ac:	fc 91       	ld	r31, X
     9ae:	12 97       	sbiw	r26, 0x02	; 2
     9b0:	91 81       	ldd	r25, Z+1	; 0x01
     9b2:	8c 91       	ld	r24, X
     9b4:	80 95       	com	r24
     9b6:	89 23       	and	r24, r25
     9b8:	81 83       	std	Z+1, r24	; 0x01
	DIRECT_WRITE_LOW(baseReg, bitmask);
     9ba:	11 96       	adiw	r26, 0x01	; 1
     9bc:	ed 91       	ld	r30, X+
     9be:	fc 91       	ld	r31, X
     9c0:	12 97       	sbiw	r26, 0x02	; 2
     9c2:	92 81       	ldd	r25, Z+2	; 0x02
     9c4:	8c 91       	ld	r24, X
     9c6:	80 95       	com	r24
     9c8:	89 23       	and	r24, r25
     9ca:	82 83       	std	Z+2, r24	; 0x02
	interrupts();
     9cc:	78 94       	sei
    }
}
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	bf 90       	pop	r11
     9e0:	08 95       	ret

000009e2 <_ZN7OneWire4readEv>:
}

//
// Read a byte
//
uint8_t OneWire::read() {
     9e2:	ef 92       	push	r14
     9e4:	ff 92       	push	r15
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	7c 01       	movw	r14, r24
     9f0:	c8 e0       	ldi	r28, 0x08	; 8
     9f2:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
    uint8_t r = 0;
     9f4:	00 e0       	ldi	r16, 0x00	; 0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     9f6:	11 e0       	ldi	r17, 0x01	; 1
	if ( OneWire::read_bit()) r |= bitMask;
     9f8:	c7 01       	movw	r24, r14
     9fa:	0e 94 89 04 	call	0x912	; 0x912 <_ZN7OneWire8read_bitEv>
     9fe:	81 11       	cpse	r24, r1
     a00:	01 2b       	or	r16, r17
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
     a02:	11 0f       	add	r17, r17
     a04:	21 97       	sbiw	r28, 0x01	; 1
     a06:	c1 f7       	brne	.-16     	; 0x9f8 <_ZN7OneWire4readEv+0x16>
	if ( OneWire::read_bit()) r |= bitMask;
    }
    return r;
}
     a08:	80 2f       	mov	r24, r16
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	08 95       	ret

00000a18 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	7c 01       	movw	r14, r24
     a26:	8b 01       	movw	r16, r22
    uint8_t i;

    write(0x55);           // Choose ROM
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	65 e5       	ldi	r22, 0x55	; 85
     a2c:	0e 94 b4 04 	call	0x968	; 0x968 <_ZN7OneWire5writeEhh>
     a30:	e8 01       	movw	r28, r16
     a32:	08 5f       	subi	r16, 0xF8	; 248
     a34:	1f 4f       	sbci	r17, 0xFF	; 255

    for (i = 0; i < 8; i++) write(rom[i]);
     a36:	69 91       	ld	r22, Y+
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	c7 01       	movw	r24, r14
     a3c:	0e 94 b4 04 	call	0x968	; 0x968 <_ZN7OneWire5writeEhh>
     a40:	c0 17       	cp	r28, r16
     a42:	d1 07       	cpc	r29, r17
     a44:	c1 f7       	brne	.-16     	; 0xa36 <_ZN7OneWire6selectEPKh+0x1e>
}
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	08 95       	ret

00000a54 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC);           // Skip ROM
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	6c ec       	ldi	r22, 0xCC	; 204
     a58:	0e 94 b4 04 	call	0x968	; 0x968 <_ZN7OneWire5writeEhh>
     a5c:	08 95       	ret

00000a5e <_ZN7OneWire12reset_searchEv>:
//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
     a5e:	dc 01       	movw	r26, r24
  // reset the search state
  LastDiscrepancy = 0;
     a60:	1b 96       	adiw	r26, 0x0b	; 11
     a62:	1c 92       	st	X, r1
     a64:	1b 97       	sbiw	r26, 0x0b	; 11
  LastDeviceFlag = FALSE;
     a66:	1d 96       	adiw	r26, 0x0d	; 13
     a68:	1c 92       	st	X, r1
     a6a:	1d 97       	sbiw	r26, 0x0d	; 13
  LastFamilyDiscrepancy = 0;
     a6c:	1c 96       	adiw	r26, 0x0c	; 12
     a6e:	1c 92       	st	X, r1
     a70:	1c 97       	sbiw	r26, 0x0c	; 12
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
     a72:	1a 96       	adiw	r26, 0x0a	; 10
     a74:	1c 92       	st	X, r1
     a76:	fc 01       	movw	r30, r24
     a78:	3a 96       	adiw	r30, 0x0a	; 10
     a7a:	03 96       	adiw	r24, 0x03	; 3
     a7c:	12 92       	st	-Z, r1
    if ( i == 0) break;
     a7e:	e8 17       	cp	r30, r24
     a80:	f9 07       	cpc	r31, r25
     a82:	e1 f7       	brne	.-8      	; 0xa7c <_ZN7OneWire12reset_searchEv+0x1e>
  }
}
     a84:	08 95       	ret

00000a86 <_ZN7OneWireC1Eh>:
*/

#include "OneWire.h"


OneWire::OneWire(uint8_t pin)
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ec 01       	movw	r28, r24
     a8e:	16 2f       	mov	r17, r22
{
	pinMode(pin, INPUT);
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	81 2f       	mov	r24, r17
     a94:	0e 94 20 12 	call	0x2440	; 0x2440 <pinMode>
	bitmask = PIN_TO_BITMASK(pin);
     a98:	61 2f       	mov	r22, r17
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	fb 01       	movw	r30, r22
     a9e:	e3 58       	subi	r30, 0x83	; 131
     aa0:	fe 4f       	sbci	r31, 0xFE	; 254
     aa2:	e4 91       	lpm	r30, Z
     aa4:	e8 83       	st	Y, r30
	baseReg = PIN_TO_BASEREG(pin);
     aa6:	fb 01       	movw	r30, r22
     aa8:	ef 56       	subi	r30, 0x6F	; 111
     aaa:	fe 4f       	sbci	r31, 0xFE	; 254
     aac:	e4 91       	lpm	r30, Z
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	ee 0f       	add	r30, r30
     ab2:	ff 1f       	adc	r31, r31
     ab4:	eb 55       	subi	r30, 0x5B	; 91
     ab6:	fe 4f       	sbci	r31, 0xFE	; 254
     ab8:	85 91       	lpm	r24, Z+
     aba:	94 91       	lpm	r25, Z
     abc:	9a 83       	std	Y+2, r25	; 0x02
     abe:	89 83       	std	Y+1, r24	; 0x01
#if ONEWIRE_SEARCH
	reset_search();
     ac0:	ce 01       	movw	r24, r28
     ac2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_ZN7OneWire12reset_searchEv>
#endif
}
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	08 95       	ret

00000ace <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
     ace:	9f 92       	push	r9
     ad0:	af 92       	push	r10
     ad2:	bf 92       	push	r11
     ad4:	cf 92       	push	r12
     ad6:	df 92       	push	r13
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	ec 01       	movw	r28, r24
     ae6:	c6 2e       	mov	r12, r22
     ae8:	d7 2e       	mov	r13, r23
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
     aea:	8d 85       	ldd	r24, Y+13	; 0x0d
     aec:	81 11       	cpse	r24, r1
     aee:	61 c0       	rjmp	.+194    	; 0xbb2 <_ZN7OneWire6searchEPh+0xe4>
   {
      // 1-Wire reset
      if (!reset())
     af0:	ce 01       	movw	r24, r28
     af2:	0e 94 0d 04 	call	0x81a	; 0x81a <_ZN7OneWire5resetEv>
     af6:	81 11       	cpse	r24, r1
     af8:	04 c0       	rjmp	.+8      	; 0xb02 <_ZN7OneWire6searchEPh+0x34>
      {
         // reset the search
         LastDiscrepancy = 0;
     afa:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
     afc:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
     afe:	1c 86       	std	Y+12, r1	; 0x0c
         return FALSE;
     b00:	72 c0       	rjmp	.+228    	; 0xbe6 <_ZN7OneWire6searchEPh+0x118>
      }

      // issue the search command
      write(0xF0);
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	60 ef       	ldi	r22, 0xF0	; 240
     b06:	ce 01       	movw	r24, r28
     b08:	0e 94 b4 04 	call	0x968	; 0x968 <_ZN7OneWire5writeEhh>

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
   rom_byte_mask = 1;
     b0c:	01 e0       	ldi	r16, 0x01	; 1
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
     b0e:	f1 2c       	mov	r15, r1

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
     b10:	a1 2c       	mov	r10, r1
   uint8_t id_bit, cmp_id_bit;

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
     b12:	ee 24       	eor	r14, r14
     b14:	e3 94       	inc	r14
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
     b16:	bb 24       	eor	r11, r11
     b18:	b3 94       	inc	r11
     b1a:	91 2c       	mov	r9, r1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
     b1c:	ce 01       	movw	r24, r28
     b1e:	0e 94 89 04 	call	0x912	; 0x912 <_ZN7OneWire8read_bitEv>
     b22:	18 2f       	mov	r17, r24
         cmp_id_bit = read_bit();
     b24:	ce 01       	movw	r24, r28
     b26:	0e 94 89 04 	call	0x912	; 0x912 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
     b2a:	11 30       	cpi	r17, 0x01	; 1
     b2c:	09 f0       	breq	.+2      	; 0xb30 <_ZN7OneWire6searchEPh+0x62>
     b2e:	4d c0       	rjmp	.+154    	; 0xbca <_ZN7OneWire6searchEPh+0xfc>
     b30:	81 30       	cpi	r24, 0x01	; 1
     b32:	c9 f4       	brne	.+50     	; 0xb66 <_ZN7OneWire6searchEPh+0x98>
     b34:	35 c0       	rjmp	.+106    	; 0xba0 <_ZN7OneWire6searchEPh+0xd2>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
     b36:	8b 85       	ldd	r24, Y+11	; 0x0b
     b38:	e8 16       	cp	r14, r24
     b3a:	48 f4       	brcc	.+18     	; 0xb4e <_ZN7OneWire6searchEPh+0x80>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
     b3c:	fe 01       	movw	r30, r28
     b3e:	ef 0d       	add	r30, r15
     b40:	f1 1d       	adc	r31, r1
     b42:	83 81       	ldd	r24, Z+3	; 0x03
     b44:	80 23       	and	r24, r16
     b46:	1b 2d       	mov	r17, r11
     b48:	29 f4       	brne	.+10     	; 0xb54 <_ZN7OneWire6searchEPh+0x86>
     b4a:	19 2d       	mov	r17, r9
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <_ZN7OneWire6searchEPh+0x86>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
     b4e:	1b 2d       	mov	r17, r11
     b50:	e8 12       	cpse	r14, r24
     b52:	19 2d       	mov	r17, r9

               // if 0 was picked then record its position in LastZero
               if (search_direction == 0)
     b54:	11 11       	cpse	r17, r1
     b56:	05 c0       	rjmp	.+10     	; 0xb62 <_ZN7OneWire6searchEPh+0x94>
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
     b58:	88 e0       	ldi	r24, 0x08	; 8
     b5a:	8e 15       	cp	r24, r14
     b5c:	c8 f1       	brcs	.+114    	; 0xbd0 <_ZN7OneWire6searchEPh+0x102>
                     LastFamilyDiscrepancy = last_zero;
     b5e:	ec 86       	std	Y+12, r14	; 0x0c
     b60:	37 c0       	rjmp	.+110    	; 0xbd0 <_ZN7OneWire6searchEPh+0x102>
               }
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
     b62:	11 30       	cpi	r17, 0x01	; 1
     b64:	41 f4       	brne	.+16     	; 0xb76 <_ZN7OneWire6searchEPh+0xa8>
              ROM_NO[rom_byte_number] |= rom_byte_mask;
     b66:	fe 01       	movw	r30, r28
     b68:	ef 0d       	add	r30, r15
     b6a:	f1 1d       	adc	r31, r1
     b6c:	83 81       	ldd	r24, Z+3	; 0x03
     b6e:	80 2b       	or	r24, r16
     b70:	83 83       	std	Z+3, r24	; 0x03
     b72:	1b 2d       	mov	r17, r11
     b74:	08 c0       	rjmp	.+16     	; 0xb86 <_ZN7OneWire6searchEPh+0xb8>
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
     b76:	fe 01       	movw	r30, r28
     b78:	ef 0d       	add	r30, r15
     b7a:	f1 1d       	adc	r31, r1
     b7c:	93 81       	ldd	r25, Z+3	; 0x03
     b7e:	80 2f       	mov	r24, r16
     b80:	80 95       	com	r24
     b82:	89 23       	and	r24, r25
     b84:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
     b86:	61 2f       	mov	r22, r17
     b88:	ce 01       	movw	r24, r28
     b8a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
     b8e:	e3 94       	inc	r14
            rom_byte_mask <<= 1;
     b90:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
     b92:	11 f4       	brne	.+4      	; 0xb98 <_ZN7OneWire6searchEPh+0xca>
            {
                rom_byte_number++;
     b94:	f3 94       	inc	r15
                rom_byte_mask = 1;
     b96:	0b 2d       	mov	r16, r11

      // issue the search command
      write(0xF0);

      // loop to do the search
      do
     b98:	87 e0       	ldi	r24, 0x07	; 7
     b9a:	8f 15       	cp	r24, r15
     b9c:	08 f0       	brcs	.+2      	; 0xba0 <_ZN7OneWire6searchEPh+0xd2>
     b9e:	be cf       	rjmp	.-132    	; 0xb1c <_ZN7OneWire6searchEPh+0x4e>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
     ba0:	80 e4       	ldi	r24, 0x40	; 64
     ba2:	8e 15       	cp	r24, r14
     ba4:	30 f4       	brcc	.+12     	; 0xbb2 <_ZN7OneWire6searchEPh+0xe4>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
     ba6:	ab 86       	std	Y+11, r10	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
     ba8:	a1 10       	cpse	r10, r1
     baa:	14 c0       	rjmp	.+40     	; 0xbd4 <_ZN7OneWire6searchEPh+0x106>
            LastDeviceFlag = TRUE;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	8d 87       	std	Y+13, r24	; 0x0d
     bb0:	11 c0       	rjmp	.+34     	; 0xbd4 <_ZN7OneWire6searchEPh+0x106>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
     bb2:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
     bb4:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
     bb6:	1c 86       	std	Y+12, r1	; 0x0c
      search_result = FALSE;
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	15 c0       	rjmp	.+42     	; 0xbe6 <_ZN7OneWire6searchEPh+0x118>
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
     bbc:	81 91       	ld	r24, Z+
     bbe:	8d 93       	st	X+, r24
     bc0:	ec 17       	cp	r30, r28
     bc2:	fd 07       	cpc	r31, r29
     bc4:	d9 f7       	brne	.-10     	; 0xbbc <_ZN7OneWire6searchEPh+0xee>
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	0e c0       	rjmp	.+28     	; 0xbe6 <_ZN7OneWire6searchEPh+0x118>
         if ((id_bit == 1) && (cmp_id_bit == 1))
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
     bca:	18 13       	cpse	r17, r24
     bcc:	d4 cf       	rjmp	.-88     	; 0xb76 <_ZN7OneWire6searchEPh+0xa8>
     bce:	b3 cf       	rjmp	.-154    	; 0xb36 <_ZN7OneWire6searchEPh+0x68>
   uint8_t id_bit, cmp_id_bit;

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
     bd0:	ae 2c       	mov	r10, r14
     bd2:	d1 cf       	rjmp	.-94     	; 0xb76 <_ZN7OneWire6searchEPh+0xa8>
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	88 23       	and	r24, r24
     bd8:	61 f3       	breq	.-40     	; 0xbb2 <_ZN7OneWire6searchEPh+0xe4>
     bda:	fe 01       	movw	r30, r28
     bdc:	33 96       	adiw	r30, 0x03	; 3
     bde:	ac 2d       	mov	r26, r12
     be0:	bd 2d       	mov	r27, r13
     be2:	2b 96       	adiw	r28, 0x0b	; 11
     be4:	eb cf       	rjmp	.-42     	; 0xbbc <_ZN7OneWire6searchEPh+0xee>
      search_result = FALSE;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   }
   return search_result;
  }
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	cf 90       	pop	r12
     bf6:	bf 90       	pop	r11
     bf8:	af 90       	pop	r10
     bfa:	9f 90       	pop	r9
     bfc:	08 95       	ret

00000bfe <_ZN7OneWire4crc8EPKhh>:
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
     bfe:	2f ef       	ldi	r18, 0xFF	; 255
     c00:	26 0f       	add	r18, r22
     c02:	66 23       	and	r22, r22
     c04:	69 f0       	breq	.+26     	; 0xc20 <_ZN7OneWire4crc8EPKhh+0x22>
     c06:	a8 2f       	mov	r26, r24
     c08:	b9 2f       	mov	r27, r25
     c0a:	80 e0       	ldi	r24, 0x00	; 0
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
     c0c:	9d 91       	ld	r25, X+
     c0e:	e8 2f       	mov	r30, r24
     c10:	e9 27       	eor	r30, r25
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	e8 59       	subi	r30, 0x98	; 152
     c16:	ff 4f       	sbci	r31, 0xFF	; 255
     c18:	84 91       	lpm	r24, Z
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
     c1a:	21 50       	subi	r18, 0x01	; 1
     c1c:	b8 f7       	brcc	.-18     	; 0xc0c <_ZN7OneWire4crc8EPKhh+0xe>
     c1e:	08 95       	ret
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;
     c20:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
     c22:	08 95       	ret

00000c24 <_Z8i2c_initv>:
	#define I2C_PULLUPS_ENABLE         PORTC |= 1<<4; PORTC |= 1<<5;   // PIN A4&A5 (SDA&SCL)
	#define I2C_PULLUPS_DISABLE        PORTC &= ~(1<<4); PORTC &= ~(1<<5);
	
	void i2c_init(void) {
		#if defined(INTERNAL_I2C_PULLUPS)
		I2C_PULLUPS_ENABLE
     c24:	44 9a       	sbi	0x08, 4	; 8
     c26:	45 9a       	sbi	0x08, 5	; 8
		#else
		I2C_PULLUPS_DISABLE
		#endif
		TWSR = 0;                                    // no prescaler => prescaler = 1
     c28:	10 92 b9 00 	sts	0x00B9, r1
		TWBR = ((F_CPU / I2C_SPEED) - 16) / 2;   // change the I2C clock rate
     c2c:	80 e2       	ldi	r24, 0x20	; 32
     c2e:	80 93 b8 00 	sts	0x00B8, r24
		TWCR = 1<<TWEN;                              // enable twi module, no interrupt
     c32:	84 e0       	ldi	r24, 0x04	; 4
     c34:	80 93 bc 00 	sts	0x00BC, r24
     c38:	08 95       	ret

00000c3a <_Z19waitTransmissionI2Cv>:
		return i2c_read(0);
	}

	void waitTransmissionI2C() {
		uint16_t count = 255;
		while (!(TWCR & (1<<TWINT))) {
     c3a:	8f ef       	ldi	r24, 0xFF	; 255
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	ec eb       	ldi	r30, 0xBC	; 188
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	0e c0       	rjmp	.+28     	; 0xc60 <_Z19waitTransmissionI2Cv+0x26>
     c44:	01 97       	sbiw	r24, 0x01	; 1
			count--;
			if (count==0) {              //we are in a blocking state => we don't insist
     c46:	61 f4       	brne	.+24     	; 0xc60 <_Z19waitTransmissionI2Cv+0x26>
				TWCR = 0;                  //and we force a reset on TWINT register
     c48:	10 92 bc 00 	sts	0x00BC, r1
				//neutralizeTime = micros(); //we take a timestamp here to neutralize the value during a short delay
				i2c_errors_count++;
     c4c:	80 91 ed 04 	lds	r24, 0x04ED
     c50:	90 91 ee 04 	lds	r25, 0x04EE
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	90 93 ee 04 	sts	0x04EE, r25
     c5a:	80 93 ed 04 	sts	0x04ED, r24
				break;
     c5e:	08 95       	ret
		return i2c_read(0);
	}

	void waitTransmissionI2C() {
		uint16_t count = 255;
		while (!(TWCR & (1<<TWINT))) {
     c60:	20 81       	ld	r18, Z
     c62:	22 23       	and	r18, r18
     c64:	7c f7       	brge	.-34     	; 0xc44 <_Z19waitTransmissionI2Cv+0xa>
     c66:	08 95       	ret

00000c68 <_Z13i2c_rep_starth>:
			}
		}
	}


	void i2c_rep_start(uint8_t address) {
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	18 2f       	mov	r17, r24
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) ; // send REPEAT START condition
     c70:	cc eb       	ldi	r28, 0xBC	; 188
     c72:	d0 e0       	ldi	r29, 0x00	; 0
     c74:	84 ea       	ldi	r24, 0xA4	; 164
     c76:	88 83       	st	Y, r24
		waitTransmissionI2C();                       // wait until transmission completed
     c78:	0e 94 1d 06 	call	0xc3a	; 0xc3a <_Z19waitTransmissionI2Cv>
		TWDR = address;                              // send device address
     c7c:	10 93 bb 00 	sts	0x00BB, r17
		TWCR = (1<<TWINT) | (1<<TWEN);
     c80:	84 e8       	ldi	r24, 0x84	; 132
     c82:	88 83       	st	Y, r24
		waitTransmissionI2C();                       // wail until transmission completed
     c84:	0e 94 1d 06 	call	0xc3a	; 0xc3a <_Z19waitTransmissionI2Cv>
	}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <_Z9i2c_writeh>:
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
		//  while(TWCR & (1<<TWSTO));                // <- can produce a blocking state with some WMP clones
	}

	void i2c_write(uint8_t data ) {
		TWDR = data;                                 // send data to the previously addressed device
     c90:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1<<TWINT) | (1<<TWEN);
     c94:	84 e8       	ldi	r24, 0x84	; 132
     c96:	80 93 bc 00 	sts	0x00BC, r24
		waitTransmissionI2C();
     c9a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <_Z19waitTransmissionI2Cv>
     c9e:	08 95       	ret

00000ca0 <_Z12i2c_writeReghhh>:
			*from = *to;
			*to = tray;
		}
	}

	void i2c_writeReg(uint8_t add, uint8_t reg, uint8_t val) {
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	d6 2f       	mov	r29, r22
     ca6:	c4 2f       	mov	r28, r20
		i2c_rep_start(add<<1); // I2C write direction
     ca8:	88 0f       	add	r24, r24
     caa:	0e 94 34 06 	call	0xc68	; 0xc68 <_Z13i2c_rep_starth>
		i2c_write(reg);        // register selection
     cae:	8d 2f       	mov	r24, r29
     cb0:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z9i2c_writeh>
		i2c_write(val);        // value to write in register
     cb4:	8c 2f       	mov	r24, r28
     cb6:	0e 94 48 06 	call	0xc90	; 0xc90 <_Z9i2c_writeh>
		TWCR = (1<<TWINT) | (1<<TWEN);
		waitTransmissionI2C();                       // wail until transmission completed
	}

	void i2c_stop(void) {
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     cba:	84 e9       	ldi	r24, 0x94	; 148
     cbc:	80 93 bc 00 	sts	0x00BC, r24
	void i2c_writeReg(uint8_t add, uint8_t reg, uint8_t val) {
		i2c_rep_start(add<<1); // I2C write direction
		i2c_write(reg);        // register selection
		i2c_write(val);        // value to write in register
		i2c_stop();
	}
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	08 95       	ret

00000cc6 <_Z17i2c_OLED_send_cmdh>:


	void i2c_OLED_send_cmd(uint8_t command) {
		TWBR = ((F_CPU / 400000L) - 16) / 2; // change the I2C clock rate
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	90 93 b8 00 	sts	0x00B8, r25
		i2c_writeReg(OLED_address, 0x80, (uint8_t)command);
     ccc:	48 2f       	mov	r20, r24
     cce:	60 e8       	ldi	r22, 0x80	; 128
     cd0:	8c e3       	ldi	r24, 0x3C	; 60
     cd2:	0e 94 50 06 	call	0xca0	; 0xca0 <_Z12i2c_writeReghhh>
     cd6:	08 95       	ret

00000cd8 <_Z13i2c_OLED_initv>:
	{
		i2c_OLED_init();
	}
	
	void  i2c_OLED_init(void){
		i2c_OLED_send_cmd(0xae);    //display off
     cd8:	8e ea       	ldi	r24, 0xAE	; 174
     cda:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
		i2c_OLED_send_cmd(0x2e);    //deactivate scrolling
     cde:	8e e2       	ldi	r24, 0x2E	; 46
     ce0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
		i2c_OLED_send_cmd(0xa4);          //SET All pixels OFF
     ce4:	84 ea       	ldi	r24, 0xA4	; 164
     ce6:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
		//  i2c_OLED_send_cmd(0xa5);            //SET ALL pixels ON
		delay(50);
     cea:	62 e3       	ldi	r22, 0x32	; 50
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>
		i2c_OLED_send_cmd(0x20);            //Set Memory Addressing Mode
     cf6:	80 e2       	ldi	r24, 0x20	; 32
     cf8:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
		i2c_OLED_send_cmd(0x02);            //Set Memory Addressing Mode to Page addressing mode(RESET)
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
		//  i2c_OLED_send_cmd(0xa0);      //colum address 0 mapped to SEG0 (POR)*** wires at bottom
		i2c_OLED_send_cmd(0xa1);    //colum address 127 mapped to SEG0 (POR) ** wires at top of board
     d02:	81 ea       	ldi	r24, 0xA1	; 161
     d04:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
		//  i2c_OLED_send_cmd(0xC0);            // Scan from Right to Left (POR)         *** wires at bottom
		i2c_OLED_send_cmd(0xC8);          // Scan from Left to Right               ** wires at top
     d08:	88 ec       	ldi	r24, 0xC8	; 200
     d0a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
		i2c_OLED_send_cmd(0xa6);            // Set WHITE chars on BLACK backround
     d0e:	86 ea       	ldi	r24, 0xA6	; 166
     d10:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>

		//  i2c_OLED_send_cmd(0xa7);            // Set BLACK chars on WHITE backround
		i2c_OLED_send_cmd(0x81);            // 81 Setup CONTRAST CONTROL, following byte is the contrast Value
     d14:	81 e8       	ldi	r24, 0x81	; 129
     d16:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
		i2c_OLED_send_cmd(0xff);            // af contrast value between 1 ( == dull) to 256 ( == bright)
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
		delay(20);
     d20:	64 e1       	ldi	r22, 0x14	; 20
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>
		i2c_OLED_send_cmd(0xaf);          //display on
     d2c:	8f ea       	ldi	r24, 0xAF	; 175
     d2e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
		delay(20);
     d32:	64 e1       	ldi	r22, 0x14	; 20
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>
     d3e:	08 95       	ret

00000d40 <_Z5setXYhh>:
	}
	
	
	//==========================================================//
	void setXY(unsigned char row,unsigned char col)
	{
     d40:	cf 93       	push	r28
     d42:	c6 2f       	mov	r28, r22
	}
	
	//==========================================================//
	void sendcommand(unsigned char com)
	{
		i2c_OLED_send_cmd(com);
     d44:	80 55       	subi	r24, 0x50	; 80
     d46:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
	
	//==========================================================//
	void setXY(unsigned char row,unsigned char col)
	{
		sendcommand(0xb0+row);                //set page address
		sendcommand(0x00+(8*col&0x0f));       //set low col address
     d4a:	8c 2f       	mov	r24, r28
     d4c:	88 0f       	add	r24, r24
     d4e:	88 0f       	add	r24, r24
     d50:	88 0f       	add	r24, r24
	}
	
	//==========================================================//
	void sendcommand(unsigned char com)
	{
		i2c_OLED_send_cmd(com);
     d52:	88 70       	andi	r24, 0x08	; 8
     d54:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
	//==========================================================//
	void setXY(unsigned char row,unsigned char col)
	{
		sendcommand(0xb0+row);                //set page address
		sendcommand(0x00+(8*col&0x0f));       //set low col address
		sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
     d58:	8c 2f       	mov	r24, r28
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	96 95       	lsr	r25
     d5e:	87 95       	ror	r24
     d60:	8f 70       	andi	r24, 0x0F	; 15
	}
	
	//==========================================================//
	void sendcommand(unsigned char com)
	{
		i2c_OLED_send_cmd(com);
     d62:	80 5f       	subi	r24, 0xF0	; 240
     d64:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
	void setXY(unsigned char row,unsigned char col)
	{
		sendcommand(0xb0+row);                //set page address
		sendcommand(0x00+(8*col&0x0f));       //set low col address
		sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
	}
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret

00000d6c <_Z18i2c_OLED_send_byteh>:
		TWBR = ((F_CPU / 400000L) - 16) / 2; // change the I2C clock rate
		i2c_writeReg(OLED_address, 0x80, (uint8_t)command);
	}

	void i2c_OLED_send_byte(uint8_t val) {
		TWBR = ((F_CPU / 400000L) - 16) / 2; // change the I2C clock rate
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	90 93 b8 00 	sts	0x00B8, r25
		i2c_writeReg(OLED_address, 0x40, (uint8_t)val);
     d72:	48 2f       	mov	r20, r24
     d74:	60 e4       	ldi	r22, 0x40	; 64
     d76:	8c e3       	ldi	r24, 0x3C	; 60
     d78:	0e 94 50 06 	call	0xca0	; 0xca0 <_Z12i2c_writeReghhh>
     d7c:	08 95       	ret

00000d7e <_Z13clear_displayv>:
		sendcommand(0xb0+row);                //set page address
		sendcommand(0x00+(8*col&0x0f));       //set low col address
		sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
	}
	void clear_display(void)
	{
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
		unsigned char i,k;
		for(k=0;k<8;k++)
     d82:	d0 e0       	ldi	r29, 0x00	; 0
		{
			setXY(k,0);
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	8d 2f       	mov	r24, r29
     d88:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z5setXYhh>
     d8c:	c0 e0       	ldi	r28, 0x00	; 0
	}
	
	//==========================================================//
	void SendChar(unsigned char data)
	{
		i2c_OLED_send_byte(data);
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_Z18i2c_OLED_send_byteh>
		unsigned char i,k;
		for(k=0;k<8;k++)
		{
			setXY(k,0);
			{
				for(i=0;i<128;i++)     //clear all COL
     d94:	cf 5f       	subi	r28, 0xFF	; 255
     d96:	c0 38       	cpi	r28, 0x80	; 128
     d98:	d1 f7       	brne	.-12     	; 0xd8e <_Z13clear_displayv+0x10>
		sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
	}
	void clear_display(void)
	{
		unsigned char i,k;
		for(k=0;k<8;k++)
     d9a:	df 5f       	subi	r29, 0xFF	; 255
     d9c:	d8 30       	cpi	r29, 0x08	; 8
     d9e:	91 f7       	brne	.-28     	; 0xd84 <_Z13clear_displayv+0x6>
					SendChar(0);         //clear all COL
					//delay(10);
				}
			}
		}
	}
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <_Z7sendStrPKc>:
		delay(20);
	}
	
	//==========================================================//
	void sendStr(const char *string)
	{
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	ec 01       	movw	r28, r24
		unsigned char i=0;
		//setXY(0,0);
		while(*string)
     db4:	88 81       	ld	r24, Y
     db6:	81 11       	cpse	r24, r1
     db8:	21 c0       	rjmp	.+66     	; 0xdfc <_Z7sendStrPKc+0x56>
     dba:	25 c0       	rjmp	.+74     	; 0xe06 <_Z7sendStrPKc+0x60>
		{
			for(i=0;i<8;i++)
			{
				SendChar(myFont[*string-0x20][i]);
     dbc:	e8 81       	ld	r30, Y
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	b0 97       	sbiw	r30, 0x20	; 32
     dc2:	ee 0f       	add	r30, r30
     dc4:	ff 1f       	adc	r31, r31
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	ee 0f       	add	r30, r30
     dcc:	ff 1f       	adc	r31, r31
     dce:	e0 0f       	add	r30, r16
     dd0:	f1 1f       	adc	r31, r17
     dd2:	e0 50       	subi	r30, 0x00	; 0
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
	}
	
	//==========================================================//
	void SendChar(unsigned char data)
	{
		i2c_OLED_send_byte(data);
     dd6:	80 81       	ld	r24, Z
     dd8:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_Z18i2c_OLED_send_byteh>
			for(i=0;i<8;i++)
			{
				SendChar(myFont[*string-0x20][i]);

				// SendChar(*string);
				delay(10);
     ddc:	6a e0       	ldi	r22, 0x0A	; 10
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>
     de8:	0f 5f       	subi	r16, 0xFF	; 255
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		unsigned char i=0;
		//setXY(0,0);
		while(*string)
		{
			for(i=0;i<8;i++)
     dec:	08 30       	cpi	r16, 0x08	; 8
     dee:	11 05       	cpc	r17, r1
     df0:	29 f7       	brne	.-54     	; 0xdbc <_Z7sendStrPKc+0x16>
				SendChar(myFont[*string-0x20][i]);

				// SendChar(*string);
				delay(10);
			}
			*string++;
     df2:	21 96       	adiw	r28, 0x01	; 1
	//==========================================================//
	void sendStr(const char *string)
	{
		unsigned char i=0;
		//setXY(0,0);
		while(*string)
     df4:	88 81       	ld	r24, Y
     df6:	81 11       	cpse	r24, r1
     df8:	03 c0       	rjmp	.+6      	; 0xe00 <_Z7sendStrPKc+0x5a>
     dfa:	05 c0       	rjmp	.+10     	; 0xe06 <_Z7sendStrPKc+0x60>
		delay(20);
	}
	
	//==========================================================//
	void sendStr(const char *string)
	{
     dfc:	e1 2c       	mov	r14, r1
     dfe:	f1 2c       	mov	r15, r1
     e00:	0e 2d       	mov	r16, r14
     e02:	1f 2d       	mov	r17, r15
     e04:	db cf       	rjmp	.-74     	; 0xdbc <_Z7sendStrPKc+0x16>
				// SendChar(*string);
				delay(10);
			}
			*string++;
		}
	}
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	08 95       	ret

00000e14 <setup>:
void setup() {
	// put your setup code here, to run once:
	//Serial.begin(57600);
	//dbg_tx_init();
	
	delay(100);
     e14:	64 e6       	ldi	r22, 0x64	; 100
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>
	wifiPort.begin(38400);
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	56 e9       	ldi	r21, 0x96	; 150
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	84 ea       	ldi	r24, 0xA4	; 164
     e2a:	94 e0       	ldi	r25, 0x04	; 4
     e2c:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <_ZN14SoftwareSerial5beginEl>
	wifiPort.println("begin wifiport Serial");
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	74 e0       	ldi	r23, 0x04	; 4
     e34:	84 ea       	ldi	r24, 0xA4	; 164
     e36:	94 e0       	ldi	r25, 0x04	; 4
     e38:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_ZN5Print7printlnEPKc>
	delay(100);
     e3c:	64 e6       	ldi	r22, 0x64	; 100
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     e48:	26 e0       	ldi	r18, 0x06	; 6
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	56 e9       	ldi	r21, 0x96	; 150
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	83 e3       	ldi	r24, 0x33	; 51
     e54:	95 e0       	ldi	r25, 0x05	; 5
     e56:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN14HardwareSerial5beginEmh>
	// start serial port
	Serial.begin(38400);
	Serial.println("Dallas Temperature IC Control Library Demo");
     e5a:	67 e1       	ldi	r22, 0x17	; 23
     e5c:	74 e0       	ldi	r23, 0x04	; 4
     e5e:	83 e3       	ldi	r24, 0x33	; 51
     e60:	95 e0       	ldi	r25, 0x05	; 5
     e62:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_ZN5Print7printlnEPKc>
	
	

	//  Wire.begin();
	i2c_init();
     e66:	0e 94 12 06 	call	0xc24	; 0xc24 <_Z8i2c_initv>
		TWCR = 1<<TWEN;                              // enable twi module, no interrupt
	}
	
	void init_OLED(void)
	{
		i2c_OLED_init();
     e6a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <_Z13i2c_OLED_initv>
	init_OLED();
	delay(10);
     e6e:	6a e0       	ldi	r22, 0x0A	; 10
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>
	clear_display();
     e7a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_Z13clear_displayv>
	delay(50);
     e7e:	62 e3       	ldi	r22, 0x32	; 50
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>
	}
	
	//==========================================================//
	void sendcommand(unsigned char com)
	{
		i2c_OLED_send_cmd(com);
     e8a:	80 e2       	ldi	r24, 0x20	; 32
     e8c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
     e90:	82 e0       	ldi	r24, 0x02	; 2
     e92:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
     e96:	86 ea       	ldi	r24, 0xA6	; 166
     e98:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_Z17i2c_OLED_send_cmdh>
	sendcommand(0x02);            //Set Memory Addressing Mode ab Page addressing mode(RESET)

	sendcommand(0xa6);            //Set Normal Display (default)


	setXY(1,1);
     e9c:	61 e0       	ldi	r22, 0x01	; 1
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z5setXYhh>
	sendStr(fill_string1);
     ea4:	86 e6       	ldi	r24, 0x66	; 102
     ea6:	94 e0       	ldi	r25, 0x04	; 4
     ea8:	0e 94 d3 06 	call	0xda6	; 0xda6 <_Z7sendStrPKc>
	setXY(2,1);
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z5setXYhh>
	sendStr(fill_string2);
     eb4:	8e e5       	ldi	r24, 0x5E	; 94
     eb6:	94 e0       	ldi	r25, 0x04	; 4
     eb8:	0e 94 d3 06 	call	0xda6	; 0xda6 <_Z7sendStrPKc>

	setXY(4, 1);
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	84 e0       	ldi	r24, 0x04	; 4
     ec0:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z5setXYhh>
	sendStr(fill_string3);
     ec4:	88 e5       	ldi	r24, 0x58	; 88
     ec6:	94 e0       	ldi	r25, 0x04	; 4
     ec8:	0e 94 d3 06 	call	0xda6	; 0xda6 <_Z7sendStrPKc>
	setXY(5, 1);
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	85 e0       	ldi	r24, 0x05	; 5
     ed0:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z5setXYhh>
	sendStr(fill_string4);
     ed4:	82 e5       	ldi	r24, 0x52	; 82
     ed6:	94 e0       	ldi	r25, 0x04	; 4
     ed8:	0e 94 d3 06 	call	0xda6	; 0xda6 <_Z7sendStrPKc>
	
	delay(10);
     edc:	6a e0       	ldi	r22, 0x0A	; 10
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>
     ee8:	08 95       	ret

00000eea <_Z14float_to_uCharf>:
	delay(1000);
}



unsigned char* float_to_uChar(float inFloat){
     eea:	4f 92       	push	r4
     eec:	5f 92       	push	r5
     eee:	6f 92       	push	r6
     ef0:	7f 92       	push	r7
     ef2:	8f 92       	push	r8
     ef4:	9f 92       	push	r9
     ef6:	af 92       	push	r10
     ef8:	bf 92       	push	r11
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	2a 97       	sbiw	r28, 0x0a	; 10
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	66 2e       	mov	r6, r22
     f1c:	77 2e       	mov	r7, r23
     f1e:	98 2e       	mov	r9, r24
     f20:	89 2e       	mov	r8, r25
	unsigned char buf[10];
	unsigned char temp = 0;
	float temp_inFloat = inFloat;
	int i = 0;
	if(inFloat / 100 >= 1){
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	48 ec       	ldi	r20, 0xC8	; 200
     f28:	52 e4       	ldi	r21, 0x42	; 66
     f2a:	0e 94 02 13 	call	0x2604	; 0x2604 <__divsf3>
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	5f e3       	ldi	r21, 0x3F	; 63
     f36:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
     f3a:	88 23       	and	r24, r24
     f3c:	ac f1       	brlt	.+106    	; 0xfa8 <_Z14float_to_uCharf+0xbe>
		temp = 0;
		while(inFloat > 100){
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	48 ec       	ldi	r20, 0xC8	; 200
     f44:	52 e4       	ldi	r21, 0x42	; 66
     f46:	66 2d       	mov	r22, r6
     f48:	77 2d       	mov	r23, r7
     f4a:	89 2d       	mov	r24, r9
     f4c:	98 2d       	mov	r25, r8
     f4e:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
     f52:	18 16       	cp	r1, r24
     f54:	ec f4       	brge	.+58     	; 0xf90 <_Z14float_to_uCharf+0xa6>
     f56:	16 2d       	mov	r17, r6
     f58:	07 2d       	mov	r16, r7
     f5a:	f9 2c       	mov	r15, r9
     f5c:	e8 2c       	mov	r14, r8
     f5e:	d1 2c       	mov	r13, r1
			inFloat-= 100;
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	48 ec       	ldi	r20, 0xC8	; 200
     f66:	52 e4       	ldi	r21, 0x42	; 66
     f68:	61 2f       	mov	r22, r17
     f6a:	70 2f       	mov	r23, r16
     f6c:	8f 2d       	mov	r24, r15
     f6e:	9e 2d       	mov	r25, r14
     f70:	0e 94 90 12 	call	0x2520	; 0x2520 <__subsf3>
     f74:	16 2f       	mov	r17, r22
     f76:	07 2f       	mov	r16, r23
     f78:	f8 2e       	mov	r15, r24
     f7a:	e9 2e       	mov	r14, r25
			temp++;
     f7c:	d3 94       	inc	r13
	unsigned char temp = 0;
	float temp_inFloat = inFloat;
	int i = 0;
	if(inFloat / 100 >= 1){
		temp = 0;
		while(inFloat > 100){
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	48 ec       	ldi	r20, 0xC8	; 200
     f84:	52 e4       	ldi	r21, 0x42	; 66
     f86:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
     f8a:	18 16       	cp	r1, r24
     f8c:	4c f3       	brlt	.-46     	; 0xf60 <_Z14float_to_uCharf+0x76>
     f8e:	05 c0       	rjmp	.+10     	; 0xf9a <_Z14float_to_uCharf+0xb0>
     f90:	16 2d       	mov	r17, r6
     f92:	07 2d       	mov	r16, r7
     f94:	f9 2c       	mov	r15, r9
     f96:	e8 2c       	mov	r14, r8
     f98:	d1 2c       	mov	r13, r1
			inFloat-= 100;
			temp++;
		}
		buf[i] = temp + 48;
     f9a:	80 e3       	ldi	r24, 0x30	; 48
     f9c:	8d 0d       	add	r24, r13
     f9e:	89 83       	std	Y+1, r24	; 0x01
		i++;
     fa0:	cc 24       	eor	r12, r12
     fa2:	c3 94       	inc	r12
     fa4:	d1 2c       	mov	r13, r1
     fa6:	06 c0       	rjmp	.+12     	; 0xfb4 <_Z14float_to_uCharf+0xca>
     fa8:	16 2d       	mov	r17, r6
     faa:	07 2d       	mov	r16, r7
     fac:	f9 2c       	mov	r15, r9
     fae:	e8 2c       	mov	r14, r8

unsigned char* float_to_uChar(float inFloat){
	unsigned char buf[10];
	unsigned char temp = 0;
	float temp_inFloat = inFloat;
	int i = 0;
     fb0:	c1 2c       	mov	r12, r1
     fb2:	d1 2c       	mov	r13, r1
			temp++;
		}
		buf[i] = temp + 48;
		i++;
	}
	if(inFloat / 10 >= 1){
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e2       	ldi	r20, 0x20	; 32
     fba:	51 e4       	ldi	r21, 0x41	; 65
     fbc:	61 2f       	mov	r22, r17
     fbe:	70 2f       	mov	r23, r16
     fc0:	8f 2d       	mov	r24, r15
     fc2:	9e 2d       	mov	r25, r14
     fc4:	0e 94 02 13 	call	0x2604	; 0x2604 <__divsf3>
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e8       	ldi	r20, 0x80	; 128
     fce:	5f e3       	ldi	r21, 0x3F	; 63
     fd0:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
     fd4:	88 23       	and	r24, r24
     fd6:	84 f1       	brlt	.+96     	; 0x1038 <_Z14float_to_uCharf+0x14e>
		temp = 0;
		while(inFloat >= 10){
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e2       	ldi	r20, 0x20	; 32
     fde:	51 e4       	ldi	r21, 0x41	; 65
     fe0:	61 2f       	mov	r22, r17
     fe2:	70 2f       	mov	r23, r16
     fe4:	8f 2d       	mov	r24, r15
     fe6:	9e 2d       	mov	r25, r14
     fe8:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
     fec:	88 23       	and	r24, r24
     fee:	cc f0       	brlt	.+50     	; 0x1022 <_Z14float_to_uCharf+0x138>
     ff0:	b1 2c       	mov	r11, r1
			inFloat-= 10;
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e2       	ldi	r20, 0x20	; 32
     ff8:	51 e4       	ldi	r21, 0x41	; 65
     ffa:	61 2f       	mov	r22, r17
     ffc:	70 2f       	mov	r23, r16
     ffe:	8f 2d       	mov	r24, r15
    1000:	9e 2d       	mov	r25, r14
    1002:	0e 94 90 12 	call	0x2520	; 0x2520 <__subsf3>
    1006:	16 2f       	mov	r17, r22
    1008:	07 2f       	mov	r16, r23
    100a:	f8 2e       	mov	r15, r24
    100c:	e9 2e       	mov	r14, r25
			temp++;
    100e:	b3 94       	inc	r11
		buf[i] = temp + 48;
		i++;
	}
	if(inFloat / 10 >= 1){
		temp = 0;
		while(inFloat >= 10){
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e2       	ldi	r20, 0x20	; 32
    1016:	51 e4       	ldi	r21, 0x41	; 65
    1018:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
    101c:	88 23       	and	r24, r24
    101e:	4c f7       	brge	.-46     	; 0xff2 <_Z14float_to_uCharf+0x108>
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <_Z14float_to_uCharf+0x13a>
    1022:	b1 2c       	mov	r11, r1
			inFloat-= 10;
			temp++;
		}
		buf[i] = temp+48;
    1024:	fe 01       	movw	r30, r28
    1026:	ec 0d       	add	r30, r12
    1028:	fd 1d       	adc	r31, r13
    102a:	80 e3       	ldi	r24, 0x30	; 48
    102c:	8b 0d       	add	r24, r11
    102e:	81 83       	std	Z+1, r24	; 0x01
		i++;
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	c8 1a       	sub	r12, r24
    1034:	d8 0a       	sbc	r13, r24
    1036:	08 c0       	rjmp	.+16     	; 0x1048 <_Z14float_to_uCharf+0x15e>
	}
	else{
		buf[i] = 48;
    1038:	fe 01       	movw	r30, r28
    103a:	ec 0d       	add	r30, r12
    103c:	fd 1d       	adc	r31, r13
    103e:	80 e3       	ldi	r24, 0x30	; 48
    1040:	81 83       	std	Z+1, r24	; 0x01
		i++;
    1042:	8f ef       	ldi	r24, 0xFF	; 255
    1044:	c8 1a       	sub	r12, r24
    1046:	d8 0a       	sbc	r13, r24
	}
	if(inFloat >= 0){
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	a9 01       	movw	r20, r18
    104e:	61 2f       	mov	r22, r17
    1050:	70 2f       	mov	r23, r16
    1052:	8f 2d       	mov	r24, r15
    1054:	9e 2d       	mov	r25, r14
    1056:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
    105a:	88 23       	and	r24, r24
    105c:	0c f4       	brge	.+2      	; 0x1060 <_Z14float_to_uCharf+0x176>
    105e:	af c0       	rjmp	.+350    	; 0x11be <_Z14float_to_uCharf+0x2d4>
		temp = 0;
		while(inFloat >= 1){
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e8       	ldi	r20, 0x80	; 128
    1066:	5f e3       	ldi	r21, 0x3F	; 63
    1068:	61 2f       	mov	r22, r17
    106a:	70 2f       	mov	r23, r16
    106c:	8f 2d       	mov	r24, r15
    106e:	9e 2d       	mov	r25, r14
    1070:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
    1074:	88 23       	and	r24, r24
    1076:	cc f0       	brlt	.+50     	; 0x10aa <_Z14float_to_uCharf+0x1c0>
    1078:	b1 2c       	mov	r11, r1
			inFloat--;
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e8       	ldi	r20, 0x80	; 128
    1080:	5f e3       	ldi	r21, 0x3F	; 63
    1082:	61 2f       	mov	r22, r17
    1084:	70 2f       	mov	r23, r16
    1086:	8f 2d       	mov	r24, r15
    1088:	9e 2d       	mov	r25, r14
    108a:	0e 94 90 12 	call	0x2520	; 0x2520 <__subsf3>
    108e:	16 2f       	mov	r17, r22
    1090:	07 2f       	mov	r16, r23
    1092:	f8 2e       	mov	r15, r24
    1094:	e9 2e       	mov	r14, r25
			temp++;
    1096:	b3 94       	inc	r11
		buf[i] = 48;
		i++;
	}
	if(inFloat >= 0){
		temp = 0;
		while(inFloat >= 1){
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 e8       	ldi	r20, 0x80	; 128
    109e:	5f e3       	ldi	r21, 0x3F	; 63
    10a0:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
    10a4:	88 23       	and	r24, r24
    10a6:	4c f7       	brge	.-46     	; 0x107a <_Z14float_to_uCharf+0x190>
    10a8:	01 c0       	rjmp	.+2      	; 0x10ac <_Z14float_to_uCharf+0x1c2>
    10aa:	b1 2c       	mov	r11, r1
			inFloat--;
			temp++;
		}
		buf[i] = temp + 48;
    10ac:	e1 e0       	ldi	r30, 0x01	; 1
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	ec 0f       	add	r30, r28
    10b2:	fd 1f       	adc	r31, r29
    10b4:	ec 0d       	add	r30, r12
    10b6:	fd 1d       	adc	r31, r13
    10b8:	80 e3       	ldi	r24, 0x30	; 48
    10ba:	8b 0d       	add	r24, r11
    10bc:	80 83       	st	Z, r24
		i++;
    10be:	56 01       	movw	r10, r12
    10c0:	8f ef       	ldi	r24, 0xFF	; 255
    10c2:	a8 1a       	sub	r10, r24
    10c4:	b8 0a       	sbc	r11, r24
	}
	
	buf[i] = '.';
    10c6:	e1 e0       	ldi	r30, 0x01	; 1
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	ec 0f       	add	r30, r28
    10cc:	fd 1f       	adc	r31, r29
    10ce:	ea 0d       	add	r30, r10
    10d0:	fb 1d       	adc	r31, r11
    10d2:	8e e2       	ldi	r24, 0x2E	; 46
    10d4:	80 83       	st	Z, r24
	i++;
    10d6:	26 01       	movw	r4, r12
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	48 0e       	add	r4, r24
    10dc:	51 1c       	adc	r5, r1
	
	if(inFloat >= 0.1){
    10de:	2d ec       	ldi	r18, 0xCD	; 205
    10e0:	3c ec       	ldi	r19, 0xCC	; 204
    10e2:	4c ec       	ldi	r20, 0xCC	; 204
    10e4:	5d e3       	ldi	r21, 0x3D	; 61
    10e6:	61 2f       	mov	r22, r17
    10e8:	70 2f       	mov	r23, r16
    10ea:	8f 2d       	mov	r24, r15
    10ec:	9e 2d       	mov	r25, r14
    10ee:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
    10f2:	88 23       	and	r24, r24
    10f4:	14 f4       	brge	.+4      	; 0x10fa <_Z14float_to_uCharf+0x210>
    10f6:	23 c0       	rjmp	.+70     	; 0x113e <_Z14float_to_uCharf+0x254>
    10f8:	56 01       	movw	r10, r12
    10fa:	d1 2c       	mov	r13, r1
		temp = 0;
		while(inFloat >= 0.1){
			inFloat -= 0.1;
    10fc:	2d ec       	ldi	r18, 0xCD	; 205
    10fe:	3c ec       	ldi	r19, 0xCC	; 204
    1100:	4c ec       	ldi	r20, 0xCC	; 204
    1102:	5d e3       	ldi	r21, 0x3D	; 61
    1104:	61 2f       	mov	r22, r17
    1106:	70 2f       	mov	r23, r16
    1108:	8f 2d       	mov	r24, r15
    110a:	9e 2d       	mov	r25, r14
    110c:	0e 94 90 12 	call	0x2520	; 0x2520 <__subsf3>
    1110:	16 2f       	mov	r17, r22
    1112:	07 2f       	mov	r16, r23
    1114:	f8 2e       	mov	r15, r24
    1116:	e9 2e       	mov	r14, r25
			temp+= 1;
    1118:	d3 94       	inc	r13
	buf[i] = '.';
	i++;
	
	if(inFloat >= 0.1){
		temp = 0;
		while(inFloat >= 0.1){
    111a:	2d ec       	ldi	r18, 0xCD	; 205
    111c:	3c ec       	ldi	r19, 0xCC	; 204
    111e:	4c ec       	ldi	r20, 0xCC	; 204
    1120:	5d e3       	ldi	r21, 0x3D	; 61
    1122:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
    1126:	88 23       	and	r24, r24
    1128:	4c f7       	brge	.-46     	; 0x10fc <_Z14float_to_uCharf+0x212>
			inFloat -= 0.1;
			temp+= 1;
		}
		buf[i] = temp + 48;
    112a:	fe 01       	movw	r30, r28
    112c:	e4 0d       	add	r30, r4
    112e:	f5 1d       	adc	r31, r5
    1130:	80 e3       	ldi	r24, 0x30	; 48
    1132:	8d 0d       	add	r24, r13
    1134:	81 83       	std	Z+1, r24	; 0x01
		i++;
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	a8 0e       	add	r10, r24
    113a:	b1 1c       	adc	r11, r1
    113c:	08 c0       	rjmp	.+16     	; 0x114e <_Z14float_to_uCharf+0x264>
	}
	else {
		buf[i] = '0';
    113e:	fe 01       	movw	r30, r28
    1140:	e4 0d       	add	r30, r4
    1142:	f5 1d       	adc	r31, r5
    1144:	80 e3       	ldi	r24, 0x30	; 48
    1146:	81 83       	std	Z+1, r24	; 0x01
		i++;
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	a8 0e       	add	r10, r24
    114c:	b1 1c       	adc	r11, r1
	}
	temp = 0;
	if(inFloat >= 0.01){
    114e:	2a e0       	ldi	r18, 0x0A	; 10
    1150:	37 ed       	ldi	r19, 0xD7	; 215
    1152:	43 e2       	ldi	r20, 0x23	; 35
    1154:	5c e3       	ldi	r21, 0x3C	; 60
    1156:	61 2f       	mov	r22, r17
    1158:	70 2f       	mov	r23, r16
    115a:	8f 2d       	mov	r24, r15
    115c:	9e 2d       	mov	r25, r14
    115e:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
    1162:	88 23       	and	r24, r24
    1164:	f4 f0       	brlt	.+60     	; 0x11a2 <_Z14float_to_uCharf+0x2b8>
    1166:	d1 2c       	mov	r13, r1
		while(inFloat >= 0.01){
			inFloat -= 0.01;
    1168:	2a e0       	ldi	r18, 0x0A	; 10
    116a:	37 ed       	ldi	r19, 0xD7	; 215
    116c:	43 e2       	ldi	r20, 0x23	; 35
    116e:	5c e3       	ldi	r21, 0x3C	; 60
    1170:	61 2f       	mov	r22, r17
    1172:	70 2f       	mov	r23, r16
    1174:	8f 2d       	mov	r24, r15
    1176:	9e 2d       	mov	r25, r14
    1178:	0e 94 90 12 	call	0x2520	; 0x2520 <__subsf3>
    117c:	16 2f       	mov	r17, r22
    117e:	07 2f       	mov	r16, r23
    1180:	f8 2e       	mov	r15, r24
    1182:	e9 2e       	mov	r14, r25
			temp++;
    1184:	d3 94       	inc	r13
		buf[i] = '0';
		i++;
	}
	temp = 0;
	if(inFloat >= 0.01){
		while(inFloat >= 0.01){
    1186:	2a e0       	ldi	r18, 0x0A	; 10
    1188:	37 ed       	ldi	r19, 0xD7	; 215
    118a:	43 e2       	ldi	r20, 0x23	; 35
    118c:	5c e3       	ldi	r21, 0x3C	; 60
    118e:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
    1192:	88 23       	and	r24, r24
    1194:	4c f7       	brge	.-46     	; 0x1168 <_Z14float_to_uCharf+0x27e>
			inFloat -= 0.01;
			temp++;
		}
		buf[i] = temp+48;
    1196:	fe 01       	movw	r30, r28
    1198:	ea 0d       	add	r30, r10
    119a:	fb 1d       	adc	r31, r11
    119c:	80 e3       	ldi	r24, 0x30	; 48
    119e:	8d 0d       	add	r24, r13
    11a0:	81 83       	std	Z+1, r24	; 0x01
		i++;

	}
	if(temp_inFloat < 100.00)
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	48 ec       	ldi	r20, 0xC8	; 200
    11a8:	52 e4       	ldi	r21, 0x42	; 66
    11aa:	66 2d       	mov	r22, r6
    11ac:	77 2d       	mov	r23, r7
    11ae:	89 2d       	mov	r24, r9
    11b0:	98 2d       	mov	r25, r8
    11b2:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__cmpsf2>
    11b6:	88 23       	and	r24, r24
    11b8:	d4 f4       	brge	.+52     	; 0x11ee <_Z14float_to_uCharf+0x304>
	buf[5] = 0;
    11ba:	1e 82       	std	Y+6, r1	; 0x06
    11bc:	18 c0       	rjmp	.+48     	; 0x11ee <_Z14float_to_uCharf+0x304>
		}
		buf[i] = temp + 48;
		i++;
	}
	
	buf[i] = '.';
    11be:	8e e2       	ldi	r24, 0x2E	; 46
    11c0:	fe 01       	movw	r30, r28
    11c2:	ec 0d       	add	r30, r12
    11c4:	fd 1d       	adc	r31, r13
    11c6:	81 83       	std	Z+1, r24	; 0x01
	i++;
    11c8:	26 01       	movw	r4, r12
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	48 1a       	sub	r4, r24
    11ce:	58 0a       	sbc	r5, r24
	
	if(inFloat >= 0.1){
    11d0:	2d ec       	ldi	r18, 0xCD	; 205
    11d2:	3c ec       	ldi	r19, 0xCC	; 204
    11d4:	4c ec       	ldi	r20, 0xCC	; 204
    11d6:	5d e3       	ldi	r21, 0x3D	; 61
    11d8:	61 2f       	mov	r22, r17
    11da:	70 2f       	mov	r23, r16
    11dc:	8f 2d       	mov	r24, r15
    11de:	9e 2d       	mov	r25, r14
    11e0:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
    11e4:	88 23       	and	r24, r24
    11e6:	0c f0       	brlt	.+2      	; 0x11ea <_Z14float_to_uCharf+0x300>
    11e8:	87 cf       	rjmp	.-242    	; 0x10f8 <_Z14float_to_uCharf+0x20e>
    11ea:	56 01       	movw	r10, r12
    11ec:	a8 cf       	rjmp	.-176    	; 0x113e <_Z14float_to_uCharf+0x254>

	}
	if(temp_inFloat < 100.00)
	buf[5] = 0;

	delay(1);
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>

	return buf;
}
    11fa:	ce 01       	movw	r24, r28
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	2a 96       	adiw	r28, 0x0a	; 10
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	df 90       	pop	r13
    1218:	cf 90       	pop	r12
    121a:	bf 90       	pop	r11
    121c:	af 90       	pop	r10
    121e:	9f 90       	pop	r9
    1220:	8f 90       	pop	r8
    1222:	7f 90       	pop	r7
    1224:	6f 90       	pop	r6
    1226:	5f 90       	pop	r5
    1228:	4f 90       	pop	r4
    122a:	08 95       	ret

0000122c <loop>:
	
	delay(10);
	//dbg_putchar('a');
}

void loop() {
    122c:	4f 92       	push	r4
    122e:	5f 92       	push	r5
    1230:	6f 92       	push	r6
    1232:	7f 92       	push	r7
    1234:	8f 92       	push	r8
    1236:	9f 92       	push	r9
    1238:	af 92       	push	r10
    123a:	bf 92       	push	r11
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	62 97       	sbiw	r28, 0x12	; 18
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
	// put your main code here, to run repeatedly:
	
				wifiPort.println("hello");
    1258:	62 e4       	ldi	r22, 0x42	; 66
    125a:	74 e0       	ldi	r23, 0x04	; 4
    125c:	84 ea       	ldi	r24, 0xA4	; 164
    125e:	94 e0       	ldi	r25, 0x04	; 4
    1260:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_ZN5Print7printlnEPKc>
	int numberOfDevices; // Number of temperature devices found

	DeviceAddress tempDeviceAddress; // We'll use this variable to store a found device address
	
	// For testing purposes, reset the bus every loop so we can see if any devices appear or fall off
	sensors.begin();
    1264:	83 ec       	ldi	r24, 0xC3	; 195
    1266:	94 e0       	ldi	r25, 0x04	; 4
    1268:	0e 94 25 02 	call	0x44a	; 0x44a <_ZN17DallasTemperature5beginEv>

	// Grab a count of devices on the wire
	numberOfDevices = sensors.getDeviceCount();
    126c:	83 ec       	ldi	r24, 0xC3	; 195
    126e:	94 e0       	ldi	r25, 0x04	; 4
    1270:	0e 94 20 01 	call	0x240	; 0x240 <_ZN17DallasTemperature14getDeviceCountEv>
    1274:	e8 2e       	mov	r14, r24
    1276:	f1 2c       	mov	r15, r1

	//Serial.print(" Parasite:");
	if (sensors.isParasitePowerMode()) Serial.print("ON ");
    1278:	83 ec       	ldi	r24, 0xC3	; 195
    127a:	94 e0       	ldi	r25, 0x04	; 4
    127c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN17DallasTemperature19isParasitePowerModeEv>
    1280:	88 23       	and	r24, r24
    1282:	39 f0       	breq	.+14     	; 0x1292 <loop+0x66>
    1284:	68 e4       	ldi	r22, 0x48	; 72
    1286:	74 e0       	ldi	r23, 0x04	; 4
    1288:	83 e3       	ldi	r24, 0x33	; 51
    128a:	95 e0       	ldi	r25, 0x05	; 5
    128c:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN5Print5printEPKc>
    1290:	04 c0       	rjmp	.+8      	; 0x129a <loop+0x6e>
	
	//Serial.print("Count:");
	//Serial.print(numberOfDevices, DEC);
	// report parasite power requirements

	sensors.requestTemperatures(); // Send the command to get temperatures
    1292:	83 ec       	ldi	r24, 0xC3	; 195
    1294:	94 e0       	ldi	r25, 0x04	; 4
    1296:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN17DallasTemperature19requestTemperaturesEv>
	
	// Loop through each device, print out temperature data
	for(int i=0;i<numberOfDevices; i++)
    129a:	1e 14       	cp	r1, r14
    129c:	1f 04       	cpc	r1, r15
    129e:	0c f0       	brlt	.+2      	; 0x12a2 <loop+0x76>
    12a0:	87 c0       	rjmp	.+270    	; 0x13b0 <loop+0x184>
    12a2:	00 e0       	ldi	r16, 0x00	; 0
    12a4:	10 e0       	ldi	r17, 0x00	; 0
	{
		// Search the wire for address
		if(sensors.getAddress(tempDeviceAddress, i))
    12a6:	40 2f       	mov	r20, r16
    12a8:	be 01       	movw	r22, r28
    12aa:	65 5f       	subi	r22, 0xF5	; 245
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	83 ec       	ldi	r24, 0xC3	; 195
    12b0:	94 e0       	ldi	r25, 0x04	; 4
    12b2:	0e 94 32 01 	call	0x264	; 0x264 <_ZN17DallasTemperature10getAddressEPhh>
    12b6:	88 23       	and	r24, r24
    12b8:	09 f4       	brne	.+2      	; 0x12bc <loop+0x90>
    12ba:	74 c0       	rjmp	.+232    	; 0x13a4 <loop+0x178>
		{
			// Output the device ID
			Serial.print(" #");
    12bc:	6c e4       	ldi	r22, 0x4C	; 76
    12be:	74 e0       	ldi	r23, 0x04	; 4
    12c0:	83 e3       	ldi	r24, 0x33	; 51
    12c2:	95 e0       	ldi	r25, 0x05	; 5
    12c4:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN5Print5printEPKc>
			//Serial.print(i,DEC);
			//Serial.print("=");


			float tempC = sensors.getTempC(tempDeviceAddress);
    12c8:	be 01       	movw	r22, r28
    12ca:	65 5f       	subi	r22, 0xF5	; 245
    12cc:	7f 4f       	sbci	r23, 0xFF	; 255
    12ce:	83 ec       	ldi	r24, 0xC3	; 195
    12d0:	94 e0       	ldi	r25, 0x04	; 4
    12d2:	0e 94 cd 03 	call	0x79a	; 0x79a <_ZN17DallasTemperature8getTempCEPh>
			float tempF = DallasTemperature::toFahrenheit(tempC);
    12d6:	0e 94 00 04 	call	0x800	; 0x800 <_ZN17DallasTemperature12toFahrenheitEf>
    12da:	4b 01       	movw	r8, r22
    12dc:	5c 01       	movw	r10, r24
			//Serial.print(DallasTemperature::toFahrenheit(tempC)); // Converts tempC to Fahrenheit
			setXY(1, 7);
    12de:	67 e0       	ldi	r22, 0x07	; 7
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z5setXYhh>
			unsigned char* tempF_uchar;
			tempF_uchar = float_to_uChar(tempF);
    12e6:	c5 01       	movw	r24, r10
    12e8:	b4 01       	movw	r22, r8
    12ea:	0e 94 75 07 	call	0xeea	; 0xeea <_Z14float_to_uCharf>
    12ee:	fc 01       	movw	r30, r24
    12f0:	de 01       	movw	r26, r28
    12f2:	11 96       	adiw	r26, 0x01	; 1
    12f4:	9c 01       	movw	r18, r24
    12f6:	29 5f       	subi	r18, 0xF9	; 249
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255
			char uchar[10];
			for(unsigned int i = 0; i < 7; i++){
				uchar[i] = (unsigned char)tempF_uchar[i];
    12fa:	91 91       	ld	r25, Z+
				if(uchar[i] > 57)
    12fc:	9a 33       	cpi	r25, 0x3A	; 58
    12fe:	10 f4       	brcc	.+4      	; 0x1304 <loop+0xd8>
			setXY(1, 7);
			unsigned char* tempF_uchar;
			tempF_uchar = float_to_uChar(tempF);
			char uchar[10];
			for(unsigned int i = 0; i < 7; i++){
				uchar[i] = (unsigned char)tempF_uchar[i];
    1300:	9c 93       	st	X, r25
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <loop+0xda>
				if(uchar[i] > 57)
				uchar[i] = 0;
    1304:	1c 92       	st	X, r1
    1306:	11 96       	adiw	r26, 0x01	; 1
			//Serial.print(DallasTemperature::toFahrenheit(tempC)); // Converts tempC to Fahrenheit
			setXY(1, 7);
			unsigned char* tempF_uchar;
			tempF_uchar = float_to_uChar(tempF);
			char uchar[10];
			for(unsigned int i = 0; i < 7; i++){
    1308:	e2 17       	cp	r30, r18
    130a:	f3 07       	cpc	r31, r19
    130c:	b1 f7       	brne	.-20     	; 0x12fa <loop+0xce>
				uchar[i] = (unsigned char)tempF_uchar[i];
				if(uchar[i] > 57)
				uchar[i] = 0;
			}

			sendStr(uchar);
    130e:	ce 01       	movw	r24, r28
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	0e 94 d3 06 	call	0xda6	; 0xda6 <_Z7sendStrPKc>

			if(low_temp > tempF || low_temp == 0){
    1316:	40 90 e5 04 	lds	r4, 0x04E5
    131a:	50 90 e6 04 	lds	r5, 0x04E6
    131e:	60 90 e7 04 	lds	r6, 0x04E7
    1322:	70 90 e8 04 	lds	r7, 0x04E8
    1326:	a3 01       	movw	r20, r6
    1328:	92 01       	movw	r18, r4
    132a:	c5 01       	movw	r24, r10
    132c:	b4 01       	movw	r22, r8
    132e:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__cmpsf2>
    1332:	88 23       	and	r24, r24
    1334:	4c f0       	brlt	.+18     	; 0x1348 <loop+0x11c>
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	a9 01       	movw	r20, r18
    133c:	c3 01       	movw	r24, r6
    133e:	b2 01       	movw	r22, r4
    1340:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__cmpsf2>
    1344:	81 11       	cpse	r24, r1
    1346:	10 c0       	rjmp	.+32     	; 0x1368 <loop+0x13c>
				low_temp = tempF;
    1348:	80 92 e5 04 	sts	0x04E5, r8
    134c:	90 92 e6 04 	sts	0x04E6, r9
    1350:	a0 92 e7 04 	sts	0x04E7, r10
    1354:	b0 92 e8 04 	sts	0x04E8, r11
				setXY(4, 6);
    1358:	66 e0       	ldi	r22, 0x06	; 6
    135a:	84 e0       	ldi	r24, 0x04	; 4
    135c:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z5setXYhh>
				sendStr(uchar);
    1360:	ce 01       	movw	r24, r28
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	0e 94 d3 06 	call	0xda6	; 0xda6 <_Z7sendStrPKc>
			}
			if(max_temp < tempF){
    1368:	20 91 e9 04 	lds	r18, 0x04E9
    136c:	30 91 ea 04 	lds	r19, 0x04EA
    1370:	40 91 eb 04 	lds	r20, 0x04EB
    1374:	50 91 ec 04 	lds	r21, 0x04EC
    1378:	c5 01       	movw	r24, r10
    137a:	b4 01       	movw	r22, r8
    137c:	0e 94 26 14 	call	0x284c	; 0x284c <__gesf2>
    1380:	18 16       	cp	r1, r24
    1382:	84 f4       	brge	.+32     	; 0x13a4 <loop+0x178>
				max_temp = tempF;
    1384:	80 92 e9 04 	sts	0x04E9, r8
    1388:	90 92 ea 04 	sts	0x04EA, r9
    138c:	a0 92 eb 04 	sts	0x04EB, r10
    1390:	b0 92 ec 04 	sts	0x04EC, r11
				setXY(5, 6);
    1394:	66 e0       	ldi	r22, 0x06	; 6
    1396:	85 e0       	ldi	r24, 0x05	; 5
    1398:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z5setXYhh>
				sendStr(uchar);
    139c:	ce 01       	movw	r24, r28
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	0e 94 d3 06 	call	0xda6	; 0xda6 <_Z7sendStrPKc>
	// report parasite power requirements

	sensors.requestTemperatures(); // Send the command to get temperatures
	
	// Loop through each device, print out temperature data
	for(int i=0;i<numberOfDevices; i++)
    13a4:	0f 5f       	subi	r16, 0xFF	; 255
    13a6:	1f 4f       	sbci	r17, 0xFF	; 255
    13a8:	e0 16       	cp	r14, r16
    13aa:	f1 06       	cpc	r15, r17
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <loop+0x184>
    13ae:	7b cf       	rjmp	.-266    	; 0x12a6 <loop+0x7a>
	}
	
	//Serial.println("");
	char buf[10];
	
	sprintf(buf,"%d",counter);
    13b0:	80 91 e4 04 	lds	r24, 0x04E4
    13b4:	1f 92       	push	r1
    13b6:	8f 93       	push	r24
    13b8:	8f e4       	ldi	r24, 0x4F	; 79
    13ba:	94 e0       	ldi	r25, 0x04	; 4
    13bc:	9f 93       	push	r25
    13be:	8f 93       	push	r24
    13c0:	8e 01       	movw	r16, r28
    13c2:	0f 5f       	subi	r16, 0xFF	; 255
    13c4:	1f 4f       	sbci	r17, 0xFF	; 255
    13c6:	1f 93       	push	r17
    13c8:	0f 93       	push	r16
    13ca:	0e 94 df 14 	call	0x29be	; 0x29be <sprintf>
	setXY(7, 1);
    13ce:	61 e0       	ldi	r22, 0x01	; 1
    13d0:	87 e0       	ldi	r24, 0x07	; 7
    13d2:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z5setXYhh>
	sendStr(buf);
    13d6:	c8 01       	movw	r24, r16
    13d8:	0e 94 d3 06 	call	0xda6	; 0xda6 <_Z7sendStrPKc>
	
	counter++;
    13dc:	80 91 e4 04 	lds	r24, 0x04E4
    13e0:	8f 5f       	subi	r24, 0xFF	; 255
    13e2:	80 93 e4 04 	sts	0x04E4, r24
	delay(1000);
    13e6:	68 ee       	ldi	r22, 0xE8	; 232
    13e8:	73 e0       	ldi	r23, 0x03	; 3
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 7f 11 	call	0x22fe	; 0x22fe <delay>
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
}
    13fe:	62 96       	adiw	r28, 0x12	; 18
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	bf 90       	pop	r11
    1418:	af 90       	pop	r10
    141a:	9f 90       	pop	r9
    141c:	8f 90       	pop	r8
    141e:	7f 90       	pop	r7
    1420:	6f 90       	pop	r6
    1422:	5f 90       	pop	r5
    1424:	4f 90       	pop	r4
    1426:	08 95       	ret

00001428 <_GLOBAL__sub_I_myFont>:

// Data wire is plugged into port 2 on the Arduino
#define ONE_WIRE_BUS 9
#define TEMPERATURE_PRECISION 9
// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);
    1428:	69 e0       	ldi	r22, 0x09	; 9
    142a:	86 ed       	ldi	r24, 0xD6	; 214
    142c:	94 e0       	ldi	r25, 0x04	; 4
    142e:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN7OneWireC1Eh>

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);
    1432:	66 ed       	ldi	r22, 0xD6	; 214
    1434:	74 e0       	ldi	r23, 0x04	; 4
    1436:	83 ec       	ldi	r24, 0xC3	; 195
    1438:	94 e0       	ldi	r25, 0x04	; 4
    143a:	0e 94 11 01 	call	0x222	; 0x222 <_ZN17DallasTemperatureC1EP7OneWire>
//

//myI2c oled_screen;
#define wifiTX 7
#define wifiRX 6
SoftwareSerial wifiPort(wifiRX,wifiTX);
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	47 e0       	ldi	r20, 0x07	; 7
    1442:	66 e0       	ldi	r22, 0x06	; 6
    1444:	84 ea       	ldi	r24, 0xA4	; 164
    1446:	94 e0       	ldi	r25, 0x04	; 4
    1448:	0e 94 37 0c 	call	0x186e	; 0x186e <_ZN14SoftwareSerialC1Ehhb>
    144c:	08 95       	ret

0000144e <_GLOBAL__sub_D_myFont>:
    144e:	84 ea       	ldi	r24, 0xA4	; 164
    1450:	94 e0       	ldi	r25, 0x04	; 4
    1452:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <_ZN14SoftwareSerialD1Ev>
    1456:	08 95       	ret

00001458 <_ZN14SoftwareSerial4readEv>:


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    1458:	20 91 31 05 	lds	r18, 0x0531
    145c:	30 91 32 05 	lds	r19, 0x0532
    1460:	28 17       	cp	r18, r24
    1462:	39 07       	cpc	r19, r25
    1464:	f9 f4       	brne	.+62     	; 0x14a4 <_ZN14SoftwareSerial4readEv+0x4c>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    1466:	90 91 ef 04 	lds	r25, 0x04EF
    146a:	80 91 f0 04 	lds	r24, 0x04F0
    146e:	98 17       	cp	r25, r24
    1470:	e1 f0       	breq	.+56     	; 0x14aa <_ZN14SoftwareSerial4readEv+0x52>
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
    1472:	e0 91 ef 04 	lds	r30, 0x04EF
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	ef 50       	subi	r30, 0x0F	; 15
    147a:	fb 4f       	sbci	r31, 0xFB	; 251
    147c:	80 81       	ld	r24, Z
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
    147e:	20 91 ef 04 	lds	r18, 0x04EF
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	2f 5f       	subi	r18, 0xFF	; 255
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	2f 73       	andi	r18, 0x3F	; 63
    148a:	30 78       	andi	r19, 0x80	; 128
    148c:	33 23       	and	r19, r19
    148e:	34 f4       	brge	.+12     	; 0x149c <_ZN14SoftwareSerial4readEv+0x44>
    1490:	21 50       	subi	r18, 0x01	; 1
    1492:	31 09       	sbc	r19, r1
    1494:	20 6c       	ori	r18, 0xC0	; 192
    1496:	3f 6f       	ori	r19, 0xFF	; 255
    1498:	2f 5f       	subi	r18, 0xFF	; 255
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	20 93 ef 04 	sts	0x04EF, r18
  return d;
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	08 95       	ret

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
    14a4:	8f ef       	ldi	r24, 0xFF	; 255
    14a6:	9f ef       	ldi	r25, 0xFF	; 255
    14a8:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
    14ae:	08 95       	ret

000014b0 <_ZN14SoftwareSerial9availableEv>:

int SoftwareSerial::available()
{
  if (!isListening())
    14b0:	20 91 31 05 	lds	r18, 0x0531
    14b4:	30 91 32 05 	lds	r19, 0x0532
    14b8:	28 17       	cp	r18, r24
    14ba:	39 07       	cpc	r19, r25
    14bc:	b1 f4       	brne	.+44     	; 0x14ea <_ZN14SoftwareSerial9availableEv+0x3a>
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
    14be:	20 91 f0 04 	lds	r18, 0x04F0
    14c2:	80 91 ef 04 	lds	r24, 0x04EF
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	20 5c       	subi	r18, 0xC0	; 192
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	28 1b       	sub	r18, r24
    14ce:	31 09       	sbc	r19, r1
    14d0:	2f 73       	andi	r18, 0x3F	; 63
    14d2:	30 78       	andi	r19, 0x80	; 128
    14d4:	33 23       	and	r19, r19
    14d6:	34 f4       	brge	.+12     	; 0x14e4 <_ZN14SoftwareSerial9availableEv+0x34>
    14d8:	21 50       	subi	r18, 0x01	; 1
    14da:	31 09       	sbc	r19, r1
    14dc:	20 6c       	ori	r18, 0xC0	; 192
    14de:	3f 6f       	ori	r19, 0xFF	; 255
    14e0:	2f 5f       	subi	r18, 0xFF	; 255
    14e2:	3f 4f       	sbci	r19, 0xFF	; 255
    14e4:	82 2f       	mov	r24, r18
    14e6:	93 2f       	mov	r25, r19
    14e8:	08 95       	ret
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
    14ee:	08 95       	ret

000014f0 <_ZN14SoftwareSerial5writeEh>:

size_t SoftwareSerial::write(uint8_t b)
{
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	ec 01       	movw	r28, r24
  if (_tx_delay == 0) {
    14f8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    14fa:	5d 8d       	ldd	r21, Y+29	; 0x1d
    14fc:	41 15       	cp	r20, r1
    14fe:	51 05       	cpc	r21, r1
    1500:	29 f4       	brne	.+10     	; 0x150c <_ZN14SoftwareSerial5writeEh+0x1c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9b 83       	std	Y+3, r25	; 0x03
    1508:	8a 83       	std	Y+2, r24	; 0x02
    setWriteError();
    return 0;
    150a:	39 c0       	rjmp	.+114    	; 0x157e <_ZN14SoftwareSerial5writeEh+0x8e>

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
    150c:	a9 89       	ldd	r26, Y+17	; 0x11
    150e:	ba 89       	ldd	r27, Y+18	; 0x12
  uint8_t reg_mask = _transmitBitMask;
    1510:	38 89       	ldd	r19, Y+16	; 0x10
  uint8_t inv_mask = ~_transmitBitMask;
    1512:	83 2f       	mov	r24, r19
    1514:	80 95       	com	r24
  uint8_t oldSREG = SREG;
    1516:	1f b7       	in	r17, 0x3f	; 63
  bool inv = _inverse_logic;
    1518:	9e 8d       	ldd	r25, Y+30	; 0x1e
  uint16_t delay = _tx_delay;

  if (inv)
    151a:	91 fb       	bst	r25, 1
    151c:	77 27       	eor	r23, r23
    151e:	70 f9       	bld	r23, 0
    1520:	91 fd       	sbrc	r25, 1
    b = ~b;
    1522:	60 95       	com	r22

  cli();  // turn off interrupts for a clean txmit
    1524:	f8 94       	cli

  // Write the start bit
  if (inv)
    1526:	77 23       	and	r23, r23
    1528:	21 f0       	breq	.+8      	; 0x1532 <_ZN14SoftwareSerial5writeEh+0x42>
    *reg |= reg_mask;
    152a:	9c 91       	ld	r25, X
    152c:	93 2b       	or	r25, r19
    152e:	9c 93       	st	X, r25
    1530:	03 c0       	rjmp	.+6      	; 0x1538 <_ZN14SoftwareSerial5writeEh+0x48>
  else
    *reg &= inv_mask;
    1532:	9c 91       	ld	r25, X
    1534:	98 23       	and	r25, r24
    1536:	9c 93       	st	X, r25
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1538:	fa 01       	movw	r30, r20
    153a:	31 97       	sbiw	r30, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <_ZN14SoftwareSerial5writeEh+0x4a>
    153e:	98 e0       	ldi	r25, 0x08	; 8
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
    1540:	60 ff       	sbrs	r22, 0
    1542:	04 c0       	rjmp	.+8      	; 0x154c <_ZN14SoftwareSerial5writeEh+0x5c>
      *reg |= reg_mask; // send 1
    1544:	2c 91       	ld	r18, X
    1546:	23 2b       	or	r18, r19
    1548:	2c 93       	st	X, r18
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <_ZN14SoftwareSerial5writeEh+0x62>
    else
      *reg &= inv_mask; // send 0
    154c:	2c 91       	ld	r18, X
    154e:	28 23       	and	r18, r24
    1550:	2c 93       	st	X, r18
    1552:	fa 01       	movw	r30, r20
    1554:	31 97       	sbiw	r30, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <_ZN14SoftwareSerial5writeEh+0x64>

    tunedDelay(delay);
    b >>= 1;
    1558:	66 95       	lsr	r22
    155a:	91 50       	subi	r25, 0x01	; 1
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
    155c:	89 f7       	brne	.-30     	; 0x1540 <_ZN14SoftwareSerial5writeEh+0x50>
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
    155e:	77 23       	and	r23, r23
    1560:	21 f0       	breq	.+8      	; 0x156a <_ZN14SoftwareSerial5writeEh+0x7a>
    *reg &= inv_mask;
    1562:	9c 91       	ld	r25, X
    1564:	89 23       	and	r24, r25
    1566:	8c 93       	st	X, r24
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <_ZN14SoftwareSerial5writeEh+0x80>
  else
    *reg |= reg_mask;
    156a:	8c 91       	ld	r24, X
    156c:	38 2b       	or	r19, r24
    156e:	3c 93       	st	X, r19

  SREG = oldSREG; // turn interrupts back on
    1570:	1f bf       	out	0x3f, r17	; 63
    1572:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1574:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <_ZN14SoftwareSerial5writeEh+0x86>
  tunedDelay(_tx_delay);
  
  return 1;
    157a:	41 e0       	ldi	r20, 0x01	; 1
    157c:	50 e0       	ldi	r21, 0x00	; 0
}
    157e:	ca 01       	movw	r24, r20
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	08 95       	ret

00001588 <_ZN14SoftwareSerial5flushEv>:

void SoftwareSerial::flush()
{
  if (!isListening())
    1588:	20 91 31 05 	lds	r18, 0x0531
    158c:	30 91 32 05 	lds	r19, 0x0532
    1590:	28 17       	cp	r18, r24
    1592:	39 07       	cpc	r19, r25
    1594:	39 f4       	brne	.+14     	; 0x15a4 <_ZN14SoftwareSerial5flushEv+0x1c>
    return;

  uint8_t oldSREG = SREG;
    1596:	8f b7       	in	r24, 0x3f	; 63
  cli();
    1598:	f8 94       	cli
  _receive_buffer_head = _receive_buffer_tail = 0;
    159a:	10 92 f0 04 	sts	0x04F0, r1
    159e:	10 92 ef 04 	sts	0x04EF, r1
  SREG = oldSREG;
    15a2:	8f bf       	out	0x3f, r24	; 63
    15a4:	08 95       	ret

000015a6 <_ZN14SoftwareSerial4peekEv>:
}

int SoftwareSerial::peek()
{
  if (!isListening())
    15a6:	20 91 31 05 	lds	r18, 0x0531
    15aa:	30 91 32 05 	lds	r19, 0x0532
    15ae:	28 17       	cp	r18, r24
    15b0:	39 07       	cpc	r19, r25
    15b2:	71 f4       	brne	.+28     	; 0x15d0 <_ZN14SoftwareSerial4peekEv+0x2a>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    15b4:	90 91 ef 04 	lds	r25, 0x04EF
    15b8:	80 91 f0 04 	lds	r24, 0x04F0
    15bc:	98 17       	cp	r25, r24
    15be:	59 f0       	breq	.+22     	; 0x15d6 <_ZN14SoftwareSerial4peekEv+0x30>
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
    15c0:	e0 91 ef 04 	lds	r30, 0x04EF
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	ef 50       	subi	r30, 0x0F	; 15
    15c8:	fb 4f       	sbci	r31, 0xFB	; 251
    15ca:	80 81       	ld	r24, Z
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	08 95       	ret
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
    15d0:	8f ef       	ldi	r24, 0xFF	; 255
    15d2:	9f ef       	ldi	r25, 0xFF	; 255
    15d4:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
    15da:	08 95       	ret

000015dc <_ZN14SoftwareSerial13stopListeningEv>:
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    15dc:	e0 91 31 05 	lds	r30, 0x0531
    15e0:	f0 91 32 05 	lds	r31, 0x0532
    15e4:	e8 17       	cp	r30, r24
    15e6:	f9 07       	cpc	r31, r25
    15e8:	69 f4       	brne	.+26     	; 0x1604 <_ZN14SoftwareSerial13stopListeningEv+0x28>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    15ea:	a3 89       	ldd	r26, Z+19	; 0x13
    15ec:	b4 89       	ldd	r27, Z+20	; 0x14
    15ee:	9c 91       	ld	r25, X
    15f0:	85 89       	ldd	r24, Z+21	; 0x15
    15f2:	80 95       	com	r24
    15f4:	89 23       	and	r24, r25
    15f6:	8c 93       	st	X, r24
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    15f8:	10 92 32 05 	sts	0x0532, r1
    15fc:	10 92 31 05 	sts	0x0531, r1
    return true;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	08 95       	ret
  }
  return false;
    1604:	80 e0       	ldi	r24, 0x00	; 0
}
    1606:	08 95       	ret

00001608 <_ZN14SoftwareSerial6listenEv>:
}

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	ec 01       	movw	r28, r24
  if (!_rx_delay_stopbit)
    160e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1610:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1612:	89 2b       	or	r24, r25
    1614:	f1 f0       	breq	.+60     	; 0x1652 <_ZN14SoftwareSerial6listenEv+0x4a>
    return false;

  if (active_object != this)
    1616:	80 91 31 05 	lds	r24, 0x0531
    161a:	90 91 32 05 	lds	r25, 0x0532
    161e:	8c 17       	cp	r24, r28
    1620:	9d 07       	cpc	r25, r29
    1622:	c9 f0       	breq	.+50     	; 0x1656 <_ZN14SoftwareSerial6listenEv+0x4e>
  {
    if (active_object)
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	11 f0       	breq	.+4      	; 0x162c <_ZN14SoftwareSerial6listenEv+0x24>
      active_object->stopListening();
    1628:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_ZN14SoftwareSerial13stopListeningEv>

    _buffer_overflow = false;
    162c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    162e:	8e 7f       	andi	r24, 0xFE	; 254
    1630:	8e 8f       	std	Y+30, r24	; 0x1e
    _receive_buffer_head = _receive_buffer_tail = 0;
    1632:	10 92 f0 04 	sts	0x04F0, r1
    1636:	10 92 ef 04 	sts	0x04EF, r1
    active_object = this;
    163a:	d0 93 32 05 	sts	0x0532, r29
    163e:	c0 93 31 05 	sts	0x0531, r28
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    1642:	eb 89       	ldd	r30, Y+19	; 0x13
    1644:	fc 89       	ldd	r31, Y+20	; 0x14
    1646:	90 81       	ld	r25, Z
    1648:	8d 89       	ldd	r24, Y+21	; 0x15
    164a:	89 2b       	or	r24, r25
    164c:	80 83       	st	Z, r24
    _buffer_overflow = false;
    _receive_buffer_head = _receive_buffer_tail = 0;
    active_object = this;

    setRxIntMsk(true);
    return true;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <_ZN14SoftwareSerial6listenEv+0x50>
// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    return false;
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <_ZN14SoftwareSerial6listenEv+0x50>

    setRxIntMsk(true);
    return true;
  }

  return false;
    1656:	80 e0       	ldi	r24, 0x00	; 0
}
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    165e:	1f 92       	push	r1
    1660:	0f 92       	push	r0
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	0f 92       	push	r0
    1666:	11 24       	eor	r1, r1
    1668:	2f 93       	push	r18
    166a:	3f 93       	push	r19
    166c:	4f 93       	push	r20
    166e:	5f 93       	push	r21
    1670:	6f 93       	push	r22
    1672:	7f 93       	push	r23
    1674:	8f 93       	push	r24
    1676:	9f 93       	push	r25
    1678:	af 93       	push	r26
    167a:	bf 93       	push	r27
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	ef 93       	push	r30
    1682:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    1684:	a0 91 31 05 	lds	r26, 0x0531
    1688:	b0 91 32 05 	lds	r27, 0x0532
    168c:	10 97       	sbiw	r26, 0x00	; 0
    168e:	09 f4       	brne	.+2      	; 0x1692 <__vector_3+0x34>
    1690:	81 c0       	rjmp	.+258    	; 0x1794 <__vector_3+0x136>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1692:	5e 96       	adiw	r26, 0x1e	; 30
    1694:	8c 91       	ld	r24, X
    1696:	5e 97       	sbiw	r26, 0x1e	; 30
    1698:	81 ff       	sbrs	r24, 1
    169a:	0d c0       	rjmp	.+26     	; 0x16b6 <__vector_3+0x58>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    169c:	1e 96       	adiw	r26, 0x0e	; 14
    169e:	ed 91       	ld	r30, X+
    16a0:	fc 91       	ld	r31, X
    16a2:	1f 97       	sbiw	r26, 0x0f	; 15
    16a4:	90 81       	ld	r25, Z
    16a6:	1d 96       	adiw	r26, 0x0d	; 13
    16a8:	8c 91       	ld	r24, X
    16aa:	1d 97       	sbiw	r26, 0x0d	; 13
    16ac:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	71 f4       	brne	.+28     	; 0x16ce <__vector_3+0x70>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	0c c0       	rjmp	.+24     	; 0x16ce <__vector_3+0x70>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    16b6:	1e 96       	adiw	r26, 0x0e	; 14
    16b8:	ed 91       	ld	r30, X+
    16ba:	fc 91       	ld	r31, X
    16bc:	1f 97       	sbiw	r26, 0x0f	; 15
    16be:	90 81       	ld	r25, Z
    16c0:	1d 96       	adiw	r26, 0x0d	; 13
    16c2:	8c 91       	ld	r24, X
    16c4:	1d 97       	sbiw	r26, 0x0d	; 13
    16c6:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	09 f0       	breq	.+2      	; 0x16ce <__vector_3+0x70>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	88 23       	and	r24, r24
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <__vector_3+0x76>
    16d2:	60 c0       	rjmp	.+192    	; 0x1794 <__vector_3+0x136>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    16d4:	53 96       	adiw	r26, 0x13	; 19
    16d6:	ed 91       	ld	r30, X+
    16d8:	fc 91       	ld	r31, X
    16da:	54 97       	sbiw	r26, 0x14	; 20
    16dc:	90 81       	ld	r25, Z
    16de:	55 96       	adiw	r26, 0x15	; 21
    16e0:	8c 91       	ld	r24, X
    16e2:	55 97       	sbiw	r26, 0x15	; 21
    16e4:	80 95       	com	r24
    16e6:	89 23       	and	r24, r25
    16e8:	80 83       	st	Z, r24
    16ea:	56 96       	adiw	r26, 0x16	; 22
    16ec:	8d 91       	ld	r24, X+
    16ee:	9c 91       	ld	r25, X
    16f0:	57 97       	sbiw	r26, 0x17	; 23
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <__vector_3+0x94>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    16f6:	58 96       	adiw	r26, 0x18	; 24
    16f8:	6d 91       	ld	r22, X+
    16fa:	7c 91       	ld	r23, X
    16fc:	59 97       	sbiw	r26, 0x19	; 25
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    16fe:	1e 96       	adiw	r26, 0x0e	; 14
    1700:	cd 91       	ld	r28, X+
    1702:	dc 91       	ld	r29, X
    1704:	1f 97       	sbiw	r26, 0x0f	; 15
    1706:	1d 96       	adiw	r26, 0x0d	; 13
    1708:	5c 91       	ld	r21, X
    170a:	1d 97       	sbiw	r26, 0x0d	; 13
    170c:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	fb 01       	movw	r30, r22
    1712:	31 97       	sbiw	r30, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <__vector_3+0xb4>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    1716:	84 2f       	mov	r24, r20
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	95 95       	asr	r25
    171c:	87 95       	ror	r24
    171e:	48 2f       	mov	r20, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1720:	28 81       	ld	r18, Y
    1722:	25 23       	and	r18, r21
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    1724:	09 f0       	breq	.+2      	; 0x1728 <__vector_3+0xca>
        d |= 0x80;
    1726:	40 68       	ori	r20, 0x80	; 128
    1728:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    172a:	91 f7       	brne	.-28     	; 0x1710 <__vector_3+0xb2>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    172c:	5e 96       	adiw	r26, 0x1e	; 30
    172e:	8c 91       	ld	r24, X
    1730:	5e 97       	sbiw	r26, 0x1e	; 30
    1732:	81 fd       	sbrc	r24, 1
      d = ~d;
    1734:	40 95       	com	r20

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    1736:	80 91 f0 04 	lds	r24, 0x04F0
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	01 96       	adiw	r24, 0x01	; 1
    173e:	8f 73       	andi	r24, 0x3F	; 63
    1740:	90 78       	andi	r25, 0x80	; 128
    1742:	99 23       	and	r25, r25
    1744:	24 f4       	brge	.+8      	; 0x174e <__vector_3+0xf0>
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	80 6c       	ori	r24, 0xC0	; 192
    174a:	9f 6f       	ori	r25, 0xFF	; 255
    174c:	01 96       	adiw	r24, 0x01	; 1
    if (next != _receive_buffer_head)
    174e:	20 91 ef 04 	lds	r18, 0x04EF
    1752:	28 17       	cp	r18, r24
    1754:	49 f0       	breq	.+18     	; 0x1768 <__vector_3+0x10a>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    1756:	e0 91 f0 04 	lds	r30, 0x04F0
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	ef 50       	subi	r30, 0x0F	; 15
    175e:	fb 4f       	sbci	r31, 0xFB	; 251
    1760:	40 83       	st	Z, r20
      _receive_buffer_tail = next;
    1762:	80 93 f0 04 	sts	0x04F0, r24
    1766:	07 c0       	rjmp	.+14     	; 0x1776 <__vector_3+0x118>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    1768:	5e 96       	adiw	r26, 0x1e	; 30
    176a:	8c 91       	ld	r24, X
    176c:	5e 97       	sbiw	r26, 0x1e	; 30
    176e:	81 60       	ori	r24, 0x01	; 1
    1770:	5e 96       	adiw	r26, 0x1e	; 30
    1772:	8c 93       	st	X, r24
    1774:	5e 97       	sbiw	r26, 0x1e	; 30
    1776:	5a 96       	adiw	r26, 0x1a	; 26
    1778:	8d 91       	ld	r24, X+
    177a:	9c 91       	ld	r25, X
    177c:	5b 97       	sbiw	r26, 0x1b	; 27
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <__vector_3+0x120>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    1782:	53 96       	adiw	r26, 0x13	; 19
    1784:	ed 91       	ld	r30, X+
    1786:	fc 91       	ld	r31, X
    1788:	54 97       	sbiw	r26, 0x14	; 20
    178a:	90 81       	ld	r25, Z
    178c:	55 96       	adiw	r26, 0x15	; 21
    178e:	8c 91       	ld	r24, X
    1790:	89 2b       	or	r24, r25
    1792:	80 83       	st	Z, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    1794:	ff 91       	pop	r31
    1796:	ef 91       	pop	r30
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	0f 90       	pop	r0
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	0f 90       	pop	r0
    17b6:	1f 90       	pop	r1
    17b8:	18 95       	reti

000017ba <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    17ba:	21 e7       	ldi	r18, 0x71	; 113
    17bc:	34 e0       	ldi	r19, 0x04	; 4
    17be:	fc 01       	movw	r30, r24
    17c0:	31 83       	std	Z+1, r19	; 0x01
    17c2:	20 83       	st	Z, r18
      *_pcint_maskreg &= ~_pcint_maskvalue;
}

void SoftwareSerial::end()
{
  stopListening();
    17c4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_ZN14SoftwareSerial13stopListeningEv>
    17c8:	08 95       	ret

000017ca <_ZN14SoftwareSerial5setTXEh>:
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
{
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	ec 01       	movw	r28, r24
    17d2:	16 2f       	mov	r17, r22
  // First write, then set output. If we do this the other way around,
  // the pin would be output low for a short while before switching to
  // output hihg. Now, it is input with pullup for a short while, which
  // is fine. With inverse logic, either order is fine.
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
    17d4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    17d6:	66 95       	lsr	r22
    17d8:	61 70       	andi	r22, 0x01	; 1
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	68 27       	eor	r22, r24
    17de:	81 2f       	mov	r24, r17
    17e0:	0e 94 5f 12 	call	0x24be	; 0x24be <digitalWrite>
  pinMode(tx, OUTPUT);
    17e4:	61 e0       	ldi	r22, 0x01	; 1
    17e6:	81 2f       	mov	r24, r17
    17e8:	0e 94 20 12 	call	0x2440	; 0x2440 <pinMode>
  _transmitBitMask = digitalPinToBitMask(tx);
    17ec:	61 2f       	mov	r22, r17
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	fb 01       	movw	r30, r22
    17f2:	e3 58       	subi	r30, 0x83	; 131
    17f4:	fe 4f       	sbci	r31, 0xFE	; 254
    17f6:	e4 91       	lpm	r30, Z
    17f8:	e8 8b       	std	Y+16, r30	; 0x10
  uint8_t port = digitalPinToPort(tx);
    17fa:	fb 01       	movw	r30, r22
    17fc:	ef 56       	subi	r30, 0x6F	; 111
    17fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1800:	e4 91       	lpm	r30, Z
  _transmitPortRegister = portOutputRegister(port);
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	ee 0f       	add	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	e1 55       	subi	r30, 0x51	; 81
    180a:	fe 4f       	sbci	r31, 0xFE	; 254
    180c:	85 91       	lpm	r24, Z+
    180e:	94 91       	lpm	r25, Z
    1810:	9a 8b       	std	Y+18, r25	; 0x12
    1812:	89 8b       	std	Y+17, r24	; 0x11
}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	08 95       	ret

0000181c <_ZN14SoftwareSerial5setRXEh>:

void SoftwareSerial::setRX(uint8_t rx)
{
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	ec 01       	movw	r28, r24
    1824:	16 2f       	mov	r17, r22
  pinMode(rx, INPUT);
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	81 2f       	mov	r24, r17
    182a:	0e 94 20 12 	call	0x2440	; 0x2440 <pinMode>
  if (!_inverse_logic)
    182e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1830:	81 fd       	sbrc	r24, 1
    1832:	04 c0       	rjmp	.+8      	; 0x183c <_ZN14SoftwareSerial5setRXEh+0x20>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	81 2f       	mov	r24, r17
    1838:	0e 94 5f 12 	call	0x24be	; 0x24be <digitalWrite>
  _receivePin = rx;
    183c:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
    183e:	61 2f       	mov	r22, r17
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	fb 01       	movw	r30, r22
    1844:	e3 58       	subi	r30, 0x83	; 131
    1846:	fe 4f       	sbci	r31, 0xFE	; 254
    1848:	e4 91       	lpm	r30, Z
    184a:	ed 87       	std	Y+13, r30	; 0x0d
  uint8_t port = digitalPinToPort(rx);
    184c:	fb 01       	movw	r30, r22
    184e:	ef 56       	subi	r30, 0x6F	; 111
    1850:	fe 4f       	sbci	r31, 0xFE	; 254
    1852:	e4 91       	lpm	r30, Z
  _receivePortRegister = portInputRegister(port);
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	ee 0f       	add	r30, r30
    1858:	ff 1f       	adc	r31, r31
    185a:	eb 55       	subi	r30, 0x5B	; 91
    185c:	fe 4f       	sbci	r31, 0xFE	; 254
    185e:	85 91       	lpm	r24, Z+
    1860:	94 91       	lpm	r25, Z
    1862:	9f 87       	std	Y+15, r25	; 0x0f
    1864:	8e 87       	std	Y+14, r24	; 0x0e
}
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	08 95       	ret

0000186e <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
    186e:	1f 93       	push	r17
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	ec 01       	movw	r28, r24
    1876:	16 2f       	mov	r17, r22
  public:
    Print() : write_error(0) {}
    1878:	1b 82       	std	Y+3, r1	; 0x03
    187a:	1a 82       	std	Y+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    187c:	88 ee       	ldi	r24, 0xE8	; 232
    187e:	93 e0       	ldi	r25, 0x03	; 3
    1880:	a0 e0       	ldi	r26, 0x00	; 0
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	8c 83       	std	Y+4, r24	; 0x04
    1886:	9d 83       	std	Y+5, r25	; 0x05
    1888:	ae 83       	std	Y+6, r26	; 0x06
    188a:	bf 83       	std	Y+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
    188c:	81 e7       	ldi	r24, 0x71	; 113
    188e:	94 e0       	ldi	r25, 0x04	; 4
    1890:	99 83       	std	Y+1, r25	; 0x01
    1892:	88 83       	st	Y, r24
    1894:	1f 8a       	std	Y+23, r1	; 0x17
    1896:	1e 8a       	std	Y+22, r1	; 0x16
    1898:	19 8e       	std	Y+25, r1	; 0x19
    189a:	18 8e       	std	Y+24, r1	; 0x18
    189c:	1b 8e       	std	Y+27, r1	; 0x1b
    189e:	1a 8e       	std	Y+26, r1	; 0x1a
    18a0:	1d 8e       	std	Y+29, r1	; 0x1d
    18a2:	1c 8e       	std	Y+28, r1	; 0x1c
    18a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18a6:	8e 7f       	andi	r24, 0xFE	; 254
    18a8:	20 fb       	bst	r18, 0
    18aa:	81 f9       	bld	r24, 1
    18ac:	8e 8f       	std	Y+30, r24	; 0x1e
{
  setTX(transmitPin);
    18ae:	64 2f       	mov	r22, r20
    18b0:	ce 01       	movw	r24, r28
    18b2:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
    18b6:	61 2f       	mov	r22, r17
    18b8:	ce 01       	movw	r24, r28
    18ba:	0e 94 0e 0c 	call	0x181c	; 0x181c <_ZN14SoftwareSerial5setRXEh>
}
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	08 95       	ret

000018c6 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	ec 01       	movw	r28, r24
    18cc:	9a 01       	movw	r18, r20
    18ce:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    18d0:	1b 8e       	std	Y+27, r1	; 0x1b
    18d2:	1a 8e       	std	Y+26, r1	; 0x1a
    18d4:	19 8e       	std	Y+25, r1	; 0x19
    18d6:	18 8e       	std	Y+24, r1	; 0x18
    18d8:	1f 8a       	std	Y+23, r1	; 0x17
    18da:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    18dc:	60 e8       	ldi	r22, 0x80	; 128
    18de:	74 e8       	ldi	r23, 0x84	; 132
    18e0:	8e e1       	ldi	r24, 0x1E	; 30
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 ba 14 	call	0x2974	; 0x2974 <__divmodsi4>
    18e8:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    18ea:	24 30       	cpi	r18, 0x04	; 4
    18ec:	31 05       	cpc	r19, r1
    18ee:	18 f0       	brcs	.+6      	; 0x18f6 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    18f0:	c9 01       	movw	r24, r18
    18f2:	03 97       	sbiw	r24, 0x03	; 3
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    18fa:	9d 8f       	std	Y+29, r25	; 0x1d
    18fc:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    18fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1900:	86 31       	cpi	r24, 0x16	; 22
    1902:	08 f0       	brcs	.+2      	; 0x1906 <_ZN14SoftwareSerial5beginEl+0x40>
    1904:	41 c0       	rjmp	.+130    	; 0x1988 <_ZN14SoftwareSerial5beginEl+0xc2>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1906:	b9 01       	movw	r22, r18
    1908:	76 95       	lsr	r23
    190a:	67 95       	ror	r22
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    190c:	64 31       	cpi	r22, 0x14	; 20
    190e:	71 05       	cpc	r23, r1
    1910:	18 f0       	brcs	.+6      	; 0x1918 <_ZN14SoftwareSerial5beginEl+0x52>
    return num - sub;
    1912:	63 51       	subi	r22, 0x13	; 19
    1914:	71 09       	sbc	r23, r1
    1916:	02 c0       	rjmp	.+4      	; 0x191c <_ZN14SoftwareSerial5beginEl+0x56>
  else
    return 1;
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	70 e0       	ldi	r23, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    191c:	7f 8b       	std	Y+23, r23	; 0x17
    191e:	6e 8b       	std	Y+22, r22	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1920:	36 97       	sbiw	r30, 0x06	; 6
    1922:	20 f0       	brcs	.+8      	; 0x192c <_ZN14SoftwareSerial5beginEl+0x66>
    return num - sub;
    1924:	b9 01       	movw	r22, r18
    1926:	65 50       	subi	r22, 0x05	; 5
    1928:	71 09       	sbc	r23, r1
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <_ZN14SoftwareSerial5beginEl+0x6a>
  else
    return 1;
    192c:	61 e0       	ldi	r22, 0x01	; 1
    192e:	70 e0       	ldi	r23, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    1930:	79 8f       	std	Y+25, r23	; 0x19
    1932:	68 8f       	std	Y+24, r22	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1934:	b9 01       	movw	r22, r18
    1936:	66 0f       	add	r22, r22
    1938:	77 1f       	adc	r23, r23
    193a:	26 0f       	add	r18, r22
    193c:	37 1f       	adc	r19, r23
    193e:	36 95       	lsr	r19
    1940:	27 95       	ror	r18
    1942:	36 95       	lsr	r19
    1944:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1946:	2d 30       	cpi	r18, 0x0D	; 13
    1948:	31 05       	cpc	r19, r1
    194a:	10 f1       	brcs	.+68     	; 0x1990 <_ZN14SoftwareSerial5beginEl+0xca>
    return num - sub;
    194c:	2c 50       	subi	r18, 0x0C	; 12
    194e:	31 09       	sbc	r19, r1
    1950:	21 c0       	rjmp	.+66     	; 0x1994 <_ZN14SoftwareSerial5beginEl+0xce>


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    1952:	21 e0       	ldi	r18, 0x01	; 1
    1954:	8e 30       	cpi	r24, 0x0E	; 14
    1956:	08 f4       	brcc	.+2      	; 0x195a <_ZN14SoftwareSerial5beginEl+0x94>
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <_ZN14SoftwareSerial5beginEl+0x9a>
    195e:	88 0f       	add	r24, r24
    1960:	2a 95       	dec	r18
    1962:	ea f7       	brpl	.-6      	; 0x195e <_ZN14SoftwareSerial5beginEl+0x98>
    1964:	98 2b       	or	r25, r24
    1966:	90 93 68 00 	sts	0x0068, r25
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    196a:	9c 85       	ldd	r25, Y+12	; 0x0c
    196c:	98 30       	cpi	r25, 0x08	; 8
    196e:	d0 f0       	brcs	.+52     	; 0x19a4 <_ZN14SoftwareSerial5beginEl+0xde>
    1970:	9e 30       	cpi	r25, 0x0E	; 14
    1972:	10 f1       	brcs	.+68     	; 0x19b8 <_ZN14SoftwareSerial5beginEl+0xf2>
    1974:	96 31       	cpi	r25, 0x16	; 22
    1976:	58 f1       	brcs	.+86     	; 0x19ce <_ZN14SoftwareSerial5beginEl+0x108>
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	2a c0       	rjmp	.+84     	; 0x19d2 <_ZN14SoftwareSerial5beginEl+0x10c>
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    197e:	8d 8b       	std	Y+21, r24	; 0x15
    1980:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1982:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <_ZN14SoftwareSerial5beginEl+0xbe>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    1988:	ce 01       	movw	r24, r28
    198a:	0e 94 04 0b 	call	0x1608	; 0x1608 <_ZN14SoftwareSerial6listenEv>
    198e:	2a c0       	rjmp	.+84     	; 0x19e4 <_ZN14SoftwareSerial5beginEl+0x11e>

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    1990:	21 e0       	ldi	r18, 0x01	; 1
    1992:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1994:	3b 8f       	std	Y+27, r19	; 0x1b
    1996:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    1998:	90 91 68 00 	lds	r25, 0x0068
    199c:	88 30       	cpi	r24, 0x08	; 8
    199e:	c8 f6       	brcc	.-78     	; 0x1952 <_ZN14SoftwareSerial5beginEl+0x8c>
    19a0:	84 e0       	ldi	r24, 0x04	; 4
    19a2:	e0 cf       	rjmp	.-64     	; 0x1964 <_ZN14SoftwareSerial5beginEl+0x9e>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    19a4:	2d e6       	ldi	r18, 0x6D	; 109
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	3c 8b       	std	Y+20, r19	; 0x14
    19aa:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	01 c0       	rjmp	.+2      	; 0x19b2 <_ZN14SoftwareSerial5beginEl+0xec>
    19b0:	88 0f       	add	r24, r24
    19b2:	9a 95       	dec	r25
    19b4:	ea f7       	brpl	.-6      	; 0x19b0 <_ZN14SoftwareSerial5beginEl+0xea>
    19b6:	e3 cf       	rjmp	.-58     	; 0x197e <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    19b8:	2b e6       	ldi	r18, 0x6B	; 107
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	3c 8b       	std	Y+20, r19	; 0x14
    19be:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    19c0:	98 50       	subi	r25, 0x08	; 8
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <_ZN14SoftwareSerial5beginEl+0x102>
    19c6:	88 0f       	add	r24, r24
    19c8:	9a 95       	dec	r25
    19ca:	ea f7       	brpl	.-6      	; 0x19c6 <_ZN14SoftwareSerial5beginEl+0x100>
    19cc:	d8 cf       	rjmp	.-80     	; 0x197e <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    19ce:	2c e6       	ldi	r18, 0x6C	; 108
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	3c 8b       	std	Y+20, r19	; 0x14
    19d4:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    19d6:	9e 50       	subi	r25, 0x0E	; 14
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	01 c0       	rjmp	.+2      	; 0x19de <_ZN14SoftwareSerial5beginEl+0x118>
    19dc:	88 0f       	add	r24, r24
    19de:	9a 95       	dec	r25
    19e0:	ea f7       	brpl	.-6      	; 0x19dc <_ZN14SoftwareSerial5beginEl+0x116>
    19e2:	cd cf       	rjmp	.-102    	; 0x197e <_ZN14SoftwareSerial5beginEl+0xb8>
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    19ea:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    19ec:	91 8d       	ldd	r25, Z+25	; 0x19
    19ee:	22 8d       	ldd	r18, Z+26	; 0x1a
    19f0:	89 2f       	mov	r24, r25
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	80 5c       	subi	r24, 0xC0	; 192
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
    19f8:	82 1b       	sub	r24, r18
    19fa:	91 09       	sbc	r25, r1
}
    19fc:	8f 73       	andi	r24, 0x3F	; 63
    19fe:	99 27       	eor	r25, r25
    1a00:	08 95       	ret

00001a02 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1a02:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1a04:	91 8d       	ldd	r25, Z+25	; 0x19
    1a06:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a08:	98 17       	cp	r25, r24
    1a0a:	31 f0       	breq	.+12     	; 0x1a18 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1a0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a0e:	e8 0f       	add	r30, r24
    1a10:	f1 1d       	adc	r31, r1
    1a12:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1a18:	8f ef       	ldi	r24, 0xFF	; 255
    1a1a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1a1c:	08 95       	ret

00001a1e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1a1e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1a20:	91 8d       	ldd	r25, Z+25	; 0x19
    1a22:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a24:	98 17       	cp	r25, r24
    1a26:	61 f0       	breq	.+24     	; 0x1a40 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1a28:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a2a:	df 01       	movw	r26, r30
    1a2c:	a8 0f       	add	r26, r24
    1a2e:	b1 1d       	adc	r27, r1
    1a30:	5d 96       	adiw	r26, 0x1d	; 29
    1a32:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1a34:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a36:	9f 5f       	subi	r25, 0xFF	; 255
    1a38:	9f 73       	andi	r25, 0x3F	; 63
    1a3a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1a40:	8f ef       	ldi	r24, 0xFF	; 255
    1a42:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1a44:	08 95       	ret

00001a46 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1a46:	8e e8       	ldi	r24, 0x8E	; 142
    1a48:	9e e0       	ldi	r25, 0x0E	; 14
    1a4a:	89 2b       	or	r24, r25
    1a4c:	49 f0       	breq	.+18     	; 0x1a60 <_Z14serialEventRunv+0x1a>
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	89 2b       	or	r24, r25
    1a54:	29 f0       	breq	.+10     	; 0x1a60 <_Z14serialEventRunv+0x1a>
    1a56:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_Z17Serial0_availablev>
    1a5a:	81 11       	cpse	r24, r1
    1a5c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1a60:	08 95       	ret

00001a62 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1a62:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1a64:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a66:	df 01       	movw	r26, r30
    1a68:	a8 0f       	add	r26, r24
    1a6a:	b1 1d       	adc	r27, r1
    1a6c:	a3 5a       	subi	r26, 0xA3	; 163
    1a6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a70:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1a72:	24 8d       	ldd	r18, Z+28	; 0x1c
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	2f 5f       	subi	r18, 0xFF	; 255
    1a78:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7a:	2f 73       	andi	r18, 0x3F	; 63
    1a7c:	30 78       	andi	r19, 0x80	; 128
    1a7e:	33 23       	and	r19, r19
    1a80:	34 f4       	brge	.+12     	; 0x1a8e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    1a82:	21 50       	subi	r18, 0x01	; 1
    1a84:	31 09       	sbc	r19, r1
    1a86:	20 6c       	ori	r18, 0xC0	; 192
    1a88:	3f 6f       	ori	r19, 0xFF	; 255
    1a8a:	2f 5f       	subi	r18, 0xFF	; 255
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    1a90:	a6 89       	ldd	r26, Z+22	; 0x16
    1a92:	b7 89       	ldd	r27, Z+23	; 0x17
    1a94:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1a96:	a0 89       	ldd	r26, Z+16	; 0x10
    1a98:	b1 89       	ldd	r27, Z+17	; 0x11
    1a9a:	8c 91       	ld	r24, X
    1a9c:	80 64       	ori	r24, 0x40	; 64
    1a9e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1aa0:	93 8d       	ldd	r25, Z+27	; 0x1b
    1aa2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1aa4:	98 13       	cpse	r25, r24
    1aa6:	06 c0       	rjmp	.+12     	; 0x1ab4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1aa8:	02 88       	ldd	r0, Z+18	; 0x12
    1aaa:	f3 89       	ldd	r31, Z+19	; 0x13
    1aac:	e0 2d       	mov	r30, r0
    1aae:	80 81       	ld	r24, Z
    1ab0:	8f 7d       	andi	r24, 0xDF	; 223
    1ab2:	80 83       	st	Z, r24
    1ab4:	08 95       	ret

00001ab6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1abc:	88 8d       	ldd	r24, Y+24	; 0x18
    1abe:	81 11       	cpse	r24, r1
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <_ZN14HardwareSerial5flushEv+0x2a>
    1ac2:	18 c0       	rjmp	.+48     	; 0x1af4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	07 fc       	sbrc	r0, 7
    1ac8:	0d c0       	rjmp	.+26     	; 0x1ae4 <_ZN14HardwareSerial5flushEv+0x2e>
    1aca:	90 81       	ld	r25, Z
    1acc:	95 ff       	sbrs	r25, 5
    1ace:	0a c0       	rjmp	.+20     	; 0x1ae4 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1ad0:	a8 89       	ldd	r26, Y+16	; 0x10
    1ad2:	b9 89       	ldd	r27, Y+17	; 0x11
    1ad4:	8c 91       	ld	r24, X
    1ad6:	85 ff       	sbrs	r24, 5
    1ad8:	05 c0       	rjmp	.+10     	; 0x1ae4 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
    1ada:	ce 01       	movw	r24, r28
    1adc:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1ae0:	ea 89       	ldd	r30, Y+18	; 0x12
    1ae2:	fb 89       	ldd	r31, Y+19	; 0x13
    1ae4:	90 81       	ld	r25, Z
    1ae6:	95 fd       	sbrc	r25, 5
    1ae8:	ed cf       	rjmp	.-38     	; 0x1ac4 <_ZN14HardwareSerial5flushEv+0xe>
    1aea:	a8 89       	ldd	r26, Y+16	; 0x10
    1aec:	b9 89       	ldd	r27, Y+17	; 0x11
    1aee:	8c 91       	ld	r24, X
    1af0:	86 ff       	sbrs	r24, 6
    1af2:	e8 cf       	rjmp	.-48     	; 0x1ac4 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	08 95       	ret

00001afa <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1afa:	0f 93       	push	r16
    1afc:	1f 93       	push	r17
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	fc 01       	movw	r30, r24
  _written = true;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1b08:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b0a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b0c:	98 13       	cpse	r25, r24
    1b0e:	22 c0       	rjmp	.+68     	; 0x1b54 <_ZN14HardwareSerial5writeEh+0x5a>
    1b10:	a0 89       	ldd	r26, Z+16	; 0x10
    1b12:	b1 89       	ldd	r27, Z+17	; 0x11
    1b14:	8c 91       	ld	r24, X
    1b16:	85 fd       	sbrc	r24, 5
    1b18:	2f c0       	rjmp	.+94     	; 0x1b78 <_ZN14HardwareSerial5writeEh+0x7e>
    1b1a:	1c c0       	rjmp	.+56     	; 0x1b54 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	07 fc       	sbrc	r0, 7
    1b20:	08 c0       	rjmp	.+16     	; 0x1b32 <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1b22:	e8 89       	ldd	r30, Y+16	; 0x10
    1b24:	f9 89       	ldd	r31, Y+17	; 0x11
    1b26:	80 81       	ld	r24, Z
    1b28:	85 ff       	sbrs	r24, 5
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1b32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b34:	09 17       	cp	r16, r25
    1b36:	91 f3       	breq	.-28     	; 0x1b1c <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1b38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e8 0f       	add	r30, r24
    1b3e:	f1 1d       	adc	r31, r1
    1b40:	e3 5a       	subi	r30, 0xA3	; 163
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    1b46:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1b48:	ea 89       	ldd	r30, Y+18	; 0x12
    1b4a:	fb 89       	ldd	r31, Y+19	; 0x13
    1b4c:	80 81       	ld	r24, Z
    1b4e:	80 62       	ori	r24, 0x20	; 32
    1b50:	80 83       	st	Z, r24
  
  return 1;
    1b52:	1b c0       	rjmp	.+54     	; 0x1b8a <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1b54:	23 8d       	ldd	r18, Z+27	; 0x1b
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	2f 5f       	subi	r18, 0xFF	; 255
    1b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5c:	2f 73       	andi	r18, 0x3F	; 63
    1b5e:	30 78       	andi	r19, 0x80	; 128
    1b60:	33 23       	and	r19, r19
    1b62:	34 f4       	brge	.+12     	; 0x1b70 <_ZN14HardwareSerial5writeEh+0x76>
    1b64:	21 50       	subi	r18, 0x01	; 1
    1b66:	31 09       	sbc	r19, r1
    1b68:	20 6c       	ori	r18, 0xC0	; 192
    1b6a:	3f 6f       	ori	r19, 0xFF	; 255
    1b6c:	2f 5f       	subi	r18, 0xFF	; 255
    1b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b70:	16 2f       	mov	r17, r22
    1b72:	ef 01       	movw	r28, r30
    1b74:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1b76:	dd cf       	rjmp	.-70     	; 0x1b32 <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1b78:	a6 89       	ldd	r26, Z+22	; 0x16
    1b7a:	b7 89       	ldd	r27, Z+23	; 0x17
    1b7c:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    1b7e:	00 88       	ldd	r0, Z+16	; 0x10
    1b80:	f1 89       	ldd	r31, Z+17	; 0x11
    1b82:	e0 2d       	mov	r30, r0
    1b84:	80 81       	ld	r24, Z
    1b86:	80 64       	ori	r24, 0x40	; 64
    1b88:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	08 95       	ret

00001b98 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1b98:	bf 92       	push	r11
    1b9a:	cf 92       	push	r12
    1b9c:	df 92       	push	r13
    1b9e:	ef 92       	push	r14
    1ba0:	ff 92       	push	r15
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	ec 01       	movw	r28, r24
    1bac:	6a 01       	movw	r12, r20
    1bae:	7b 01       	movw	r14, r22
    1bb0:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1bb2:	60 e8       	ldi	r22, 0x80	; 128
    1bb4:	74 e8       	ldi	r23, 0x84	; 132
    1bb6:	8e e1       	ldi	r24, 0x1E	; 30
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	a7 01       	movw	r20, r14
    1bbc:	96 01       	movw	r18, r12
    1bbe:	0e 94 98 14 	call	0x2930	; 0x2930 <__udivmodsi4>
    1bc2:	89 01       	movw	r16, r18
    1bc4:	9a 01       	movw	r18, r20
    1bc6:	01 50       	subi	r16, 0x01	; 1
    1bc8:	11 09       	sbc	r17, r1
    1bca:	21 09       	sbc	r18, r1
    1bcc:	31 09       	sbc	r19, r1
    1bce:	36 95       	lsr	r19
    1bd0:	27 95       	ror	r18
    1bd2:	17 95       	ror	r17
    1bd4:	07 95       	ror	r16
  *_ucsra = 1 << U2X0;
    1bd6:	e8 89       	ldd	r30, Y+16	; 0x10
    1bd8:	f9 89       	ldd	r31, Y+17	; 0x11
    1bda:	82 e0       	ldi	r24, 0x02	; 2
    1bdc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1bde:	01 15       	cp	r16, r1
    1be0:	80 e1       	ldi	r24, 0x10	; 16
    1be2:	18 07       	cpc	r17, r24
    1be4:	a8 f0       	brcs	.+42     	; 0x1c10 <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
    1be6:	e8 89       	ldd	r30, Y+16	; 0x10
    1be8:	f9 89       	ldd	r31, Y+17	; 0x11
    1bea:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1bec:	60 e4       	ldi	r22, 0x40	; 64
    1bee:	72 e4       	ldi	r23, 0x42	; 66
    1bf0:	8f e0       	ldi	r24, 0x0F	; 15
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a7 01       	movw	r20, r14
    1bf6:	96 01       	movw	r18, r12
    1bf8:	0e 94 98 14 	call	0x2930	; 0x2930 <__udivmodsi4>
    1bfc:	da 01       	movw	r26, r20
    1bfe:	c9 01       	movw	r24, r18
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	a1 09       	sbc	r26, r1
    1c04:	b1 09       	sbc	r27, r1
    1c06:	b6 95       	lsr	r27
    1c08:	a7 95       	ror	r26
    1c0a:	97 95       	ror	r25
    1c0c:	87 95       	ror	r24
    1c0e:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1c10:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c12:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c14:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    1c16:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c18:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c1a:	00 83       	st	Z, r16

  _written = false;
    1c1c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1c1e:	ec 89       	ldd	r30, Y+20	; 0x14
    1c20:	fd 89       	ldd	r31, Y+21	; 0x15
    1c22:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    1c24:	ea 89       	ldd	r30, Y+18	; 0x12
    1c26:	fb 89       	ldd	r31, Y+19	; 0x13
    1c28:	80 81       	ld	r24, Z
    1c2a:	80 61       	ori	r24, 0x10	; 16
    1c2c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1c2e:	ea 89       	ldd	r30, Y+18	; 0x12
    1c30:	fb 89       	ldd	r31, Y+19	; 0x13
    1c32:	80 81       	ld	r24, Z
    1c34:	88 60       	ori	r24, 0x08	; 8
    1c36:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1c38:	ea 89       	ldd	r30, Y+18	; 0x12
    1c3a:	fb 89       	ldd	r31, Y+19	; 0x13
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 68       	ori	r24, 0x80	; 128
    1c40:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1c42:	ea 89       	ldd	r30, Y+18	; 0x12
    1c44:	fb 89       	ldd	r31, Y+19	; 0x13
    1c46:	80 81       	ld	r24, Z
    1c48:	8f 7d       	andi	r24, 0xDF	; 223
    1c4a:	80 83       	st	Z, r24
}
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	1f 91       	pop	r17
    1c52:	0f 91       	pop	r16
    1c54:	ff 90       	pop	r15
    1c56:	ef 90       	pop	r14
    1c58:	df 90       	pop	r13
    1c5a:	cf 90       	pop	r12
    1c5c:	bf 90       	pop	r11
    1c5e:	08 95       	ret

00001c60 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1c60:	1f 92       	push	r1
    1c62:	0f 92       	push	r0
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	0f 92       	push	r0
    1c68:	11 24       	eor	r1, r1
    1c6a:	2f 93       	push	r18
    1c6c:	8f 93       	push	r24
    1c6e:	9f 93       	push	r25
    1c70:	af 93       	push	r26
    1c72:	bf 93       	push	r27
    1c74:	ef 93       	push	r30
    1c76:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1c78:	e0 91 43 05 	lds	r30, 0x0543
    1c7c:	f0 91 44 05 	lds	r31, 0x0544
    1c80:	80 81       	ld	r24, Z
    1c82:	82 fd       	sbrc	r24, 2
    1c84:	14 c0       	rjmp	.+40     	; 0x1cae <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1c86:	e3 e3       	ldi	r30, 0x33	; 51
    1c88:	f5 e0       	ldi	r31, 0x05	; 5
    1c8a:	a6 89       	ldd	r26, Z+22	; 0x16
    1c8c:	b7 89       	ldd	r27, Z+23	; 0x17
    1c8e:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1c90:	81 8d       	ldd	r24, Z+25	; 0x19
    1c92:	8f 5f       	subi	r24, 0xFF	; 255
    1c94:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1c96:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c98:	89 17       	cp	r24, r25
    1c9a:	71 f0       	breq	.+28     	; 0x1cb8 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
    1c9c:	df 01       	movw	r26, r30
    1c9e:	e1 8d       	ldd	r30, Z+25	; 0x19
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	ed 5c       	subi	r30, 0xCD	; 205
    1ca4:	fa 4f       	sbci	r31, 0xFA	; 250
    1ca6:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    1ca8:	59 96       	adiw	r26, 0x19	; 25
    1caa:	8c 93       	st	X, r24
    1cac:	05 c0       	rjmp	.+10     	; 0x1cb8 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1cae:	e0 91 49 05 	lds	r30, 0x0549
    1cb2:	f0 91 4a 05 	lds	r31, 0x054A
    1cb6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1cb8:	ff 91       	pop	r31
    1cba:	ef 91       	pop	r30
    1cbc:	bf 91       	pop	r27
    1cbe:	af 91       	pop	r26
    1cc0:	9f 91       	pop	r25
    1cc2:	8f 91       	pop	r24
    1cc4:	2f 91       	pop	r18
    1cc6:	0f 90       	pop	r0
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	0f 90       	pop	r0
    1ccc:	1f 90       	pop	r1
    1cce:	18 95       	reti

00001cd0 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1cd0:	1f 92       	push	r1
    1cd2:	0f 92       	push	r0
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	0f 92       	push	r0
    1cd8:	11 24       	eor	r1, r1
    1cda:	2f 93       	push	r18
    1cdc:	3f 93       	push	r19
    1cde:	4f 93       	push	r20
    1ce0:	5f 93       	push	r21
    1ce2:	6f 93       	push	r22
    1ce4:	7f 93       	push	r23
    1ce6:	8f 93       	push	r24
    1ce8:	9f 93       	push	r25
    1cea:	af 93       	push	r26
    1cec:	bf 93       	push	r27
    1cee:	ef 93       	push	r30
    1cf0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1cf2:	83 e3       	ldi	r24, 0x33	; 51
    1cf4:	95 e0       	ldi	r25, 0x05	; 5
    1cf6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1cfa:	ff 91       	pop	r31
    1cfc:	ef 91       	pop	r30
    1cfe:	bf 91       	pop	r27
    1d00:	af 91       	pop	r26
    1d02:	9f 91       	pop	r25
    1d04:	8f 91       	pop	r24
    1d06:	7f 91       	pop	r23
    1d08:	6f 91       	pop	r22
    1d0a:	5f 91       	pop	r21
    1d0c:	4f 91       	pop	r20
    1d0e:	3f 91       	pop	r19
    1d10:	2f 91       	pop	r18
    1d12:	0f 90       	pop	r0
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	0f 90       	pop	r0
    1d18:	1f 90       	pop	r1
    1d1a:	18 95       	reti

00001d1c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1d1c:	83 e3       	ldi	r24, 0x33	; 51
    1d1e:	95 e0       	ldi	r25, 0x05	; 5
    1d20:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <_ZN14HardwareSerial9availableEv>
    1d24:	21 e0       	ldi	r18, 0x01	; 1
    1d26:	89 2b       	or	r24, r25
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <_Z17Serial0_availablev+0x10>
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
}
    1d2c:	82 2f       	mov	r24, r18
    1d2e:	08 95       	ret

00001d30 <_GLOBAL__sub_I___vector_18>:
    1d30:	e3 e3       	ldi	r30, 0x33	; 51
    1d32:	f5 e0       	ldi	r31, 0x05	; 5
    1d34:	13 82       	std	Z+3, r1	; 0x03
    1d36:	12 82       	std	Z+2, r1	; 0x02
    1d38:	88 ee       	ldi	r24, 0xE8	; 232
    1d3a:	93 e0       	ldi	r25, 0x03	; 3
    1d3c:	a0 e0       	ldi	r26, 0x00	; 0
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	84 83       	std	Z+4, r24	; 0x04
    1d42:	95 83       	std	Z+5, r25	; 0x05
    1d44:	a6 83       	std	Z+6, r26	; 0x06
    1d46:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1d48:	81 e8       	ldi	r24, 0x81	; 129
    1d4a:	94 e0       	ldi	r25, 0x04	; 4
    1d4c:	91 83       	std	Z+1, r25	; 0x01
    1d4e:	80 83       	st	Z, r24
    1d50:	85 ec       	ldi	r24, 0xC5	; 197
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	95 87       	std	Z+13, r25	; 0x0d
    1d56:	84 87       	std	Z+12, r24	; 0x0c
    1d58:	84 ec       	ldi	r24, 0xC4	; 196
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	97 87       	std	Z+15, r25	; 0x0f
    1d5e:	86 87       	std	Z+14, r24	; 0x0e
    1d60:	80 ec       	ldi	r24, 0xC0	; 192
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	91 8b       	std	Z+17, r25	; 0x11
    1d66:	80 8b       	std	Z+16, r24	; 0x10
    1d68:	81 ec       	ldi	r24, 0xC1	; 193
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	93 8b       	std	Z+19, r25	; 0x13
    1d6e:	82 8b       	std	Z+18, r24	; 0x12
    1d70:	82 ec       	ldi	r24, 0xC2	; 194
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	95 8b       	std	Z+21, r25	; 0x15
    1d76:	84 8b       	std	Z+20, r24	; 0x14
    1d78:	86 ec       	ldi	r24, 0xC6	; 198
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	97 8b       	std	Z+23, r25	; 0x17
    1d7e:	86 8b       	std	Z+22, r24	; 0x16
    1d80:	11 8e       	std	Z+25, r1	; 0x19
    1d82:	12 8e       	std	Z+26, r1	; 0x1a
    1d84:	13 8e       	std	Z+27, r1	; 0x1b
    1d86:	14 8e       	std	Z+28, r1	; 0x1c
    1d88:	08 95       	ret

00001d8a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1d8a:	08 95       	ret

00001d8c <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    1d8c:	8f 92       	push	r8
    1d8e:	9f 92       	push	r9
    1d90:	af 92       	push	r10
    1d92:	bf 92       	push	r11
    1d94:	cf 92       	push	r12
    1d96:	df 92       	push	r13
    1d98:	ef 92       	push	r14
    1d9a:	ff 92       	push	r15
    1d9c:	0f 93       	push	r16
    1d9e:	1f 93       	push	r17
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	5c 01       	movw	r10, r24
    1da6:	7b 01       	movw	r14, r22
    1da8:	4c 01       	movw	r8, r24
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	88 0e       	add	r8, r24
    1dae:	91 1c       	adc	r9, r1
    1db0:	65 01       	movw	r12, r10
    1db2:	e5 e0       	ldi	r30, 0x05	; 5
    1db4:	ce 0e       	add	r12, r30
    1db6:	d1 1c       	adc	r13, r1
    size_t n = 0;
    1db8:	00 e0       	ldi	r16, 0x00	; 0
    1dba:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    1dbc:	f4 01       	movw	r30, r8
    1dbe:	61 91       	ld	r22, Z+
    1dc0:	4f 01       	movw	r8, r30
    1dc2:	4a e0       	ldi	r20, 0x0A	; 10
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	c7 01       	movw	r24, r14
    1dc8:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN5Print5printEhi>
    1dcc:	ec 01       	movw	r28, r24
        n += p.print('.');
    1dce:	6e e2       	ldi	r22, 0x2E	; 46
    1dd0:	c7 01       	movw	r24, r14
    1dd2:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print5printEc>
    1dd6:	8c 0f       	add	r24, r28
    1dd8:	9d 1f       	adc	r25, r29
    1dda:	08 0f       	add	r16, r24
    1ddc:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    1dde:	8c 14       	cp	r8, r12
    1de0:	9d 04       	cpc	r9, r13
    1de2:	61 f7       	brne	.-40     	; 0x1dbc <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    1de4:	4a e0       	ldi	r20, 0x0A	; 10
    1de6:	50 e0       	ldi	r21, 0x00	; 0
    1de8:	f5 01       	movw	r30, r10
    1dea:	65 81       	ldd	r22, Z+5	; 0x05
    1dec:	c7 01       	movw	r24, r14
    1dee:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN5Print5printEhi>
    return n;
}
    1df2:	80 0f       	add	r24, r16
    1df4:	91 1f       	adc	r25, r17
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	1f 91       	pop	r17
    1dfc:	0f 91       	pop	r16
    1dfe:	ff 90       	pop	r15
    1e00:	ef 90       	pop	r14
    1e02:	df 90       	pop	r13
    1e04:	cf 90       	pop	r12
    1e06:	bf 90       	pop	r11
    1e08:	af 90       	pop	r10
    1e0a:	9f 90       	pop	r9
    1e0c:	8f 90       	pop	r8
    1e0e:	08 95       	ret

00001e10 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    1e10:	e0 ed       	ldi	r30, 0xD0	; 208
    1e12:	f5 e0       	ldi	r31, 0x05	; 5
    1e14:	81 e9       	ldi	r24, 0x91	; 145
    1e16:	94 e0       	ldi	r25, 0x04	; 4
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    1e1c:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    1e1e:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    1e20:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    1e22:	15 82       	std	Z+5, r1	; 0x05
    1e24:	08 95       	ret

00001e26 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1e26:	08 95       	ret

00001e28 <main>:

int main(void)
{
	init();
    1e28:	0e 94 b6 11 	call	0x236c	; 0x236c <init>

	initVariant();
    1e2c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1e30:	0e 94 0a 07 	call	0xe14	; 0xe14 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1e34:	c3 e2       	ldi	r28, 0x23	; 35
    1e36:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    1e38:	0e 94 16 09 	call	0x122c	; 0x122c <loop>
		if (serialEventRun) serialEventRun();
    1e3c:	20 97       	sbiw	r28, 0x00	; 0
    1e3e:	e1 f3       	breq	.-8      	; 0x1e38 <main+0x10>
    1e40:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_Z14serialEventRunv>
    1e44:	f9 cf       	rjmp	.-14     	; 0x1e38 <main+0x10>

00001e46 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1e46:	cf 92       	push	r12
    1e48:	df 92       	push	r13
    1e4a:	ef 92       	push	r14
    1e4c:	ff 92       	push	r15
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
    1e56:	41 15       	cp	r20, r1
    1e58:	51 05       	cpc	r21, r1
    1e5a:	b1 f0       	breq	.+44     	; 0x1e88 <_ZN5Print5writeEPKhj+0x42>
    1e5c:	8c 01       	movw	r16, r24
    1e5e:	e6 2e       	mov	r14, r22
    1e60:	f7 2e       	mov	r15, r23
    1e62:	ea 01       	movw	r28, r20
    1e64:	c1 2c       	mov	r12, r1
    1e66:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
    1e68:	d7 01       	movw	r26, r14
    1e6a:	6d 91       	ld	r22, X+
    1e6c:	7d 01       	movw	r14, r26
    1e6e:	d8 01       	movw	r26, r16
    1e70:	ed 91       	ld	r30, X+
    1e72:	fc 91       	ld	r31, X
    1e74:	01 90       	ld	r0, Z+
    1e76:	f0 81       	ld	r31, Z
    1e78:	e0 2d       	mov	r30, r0
    1e7a:	c8 01       	movw	r24, r16
    1e7c:	09 95       	icall
    1e7e:	c8 0e       	add	r12, r24
    1e80:	d9 1e       	adc	r13, r25
    1e82:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1e84:	89 f7       	brne	.-30     	; 0x1e68 <_ZN5Print5writeEPKhj+0x22>
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    1e88:	c1 2c       	mov	r12, r1
    1e8a:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    1e8c:	c6 01       	movw	r24, r12
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	df 90       	pop	r13
    1e9c:	cf 90       	pop	r12
    1e9e:	08 95       	ret

00001ea0 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1ea0:	61 15       	cp	r22, r1
    1ea2:	71 05       	cpc	r23, r1
    1ea4:	81 f0       	breq	.+32     	; 0x1ec6 <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
    1ea6:	fb 01       	movw	r30, r22
    1ea8:	01 90       	ld	r0, Z+
    1eaa:	00 20       	and	r0, r0
    1eac:	e9 f7       	brne	.-6      	; 0x1ea8 <_ZN5Print5printEPKc+0x8>
    1eae:	31 97       	sbiw	r30, 0x01	; 1
    1eb0:	af 01       	movw	r20, r30
    1eb2:	46 1b       	sub	r20, r22
    1eb4:	57 0b       	sbc	r21, r23
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	ed 91       	ld	r30, X+
    1eba:	fc 91       	ld	r31, X
    1ebc:	02 80       	ldd	r0, Z+2	; 0x02
    1ebe:	f3 81       	ldd	r31, Z+3	; 0x03
    1ec0:	e0 2d       	mov	r30, r0
    1ec2:	09 95       	icall
    1ec4:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
    1eca:	08 95       	ret

00001ecc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    1ecc:	dc 01       	movw	r26, r24
    1ece:	ed 91       	ld	r30, X+
    1ed0:	fc 91       	ld	r31, X
    1ed2:	01 90       	ld	r0, Z+
    1ed4:	f0 81       	ld	r31, Z
    1ed6:	e0 2d       	mov	r30, r0
    1ed8:	09 95       	icall
}
    1eda:	08 95       	ret

00001edc <_ZN5Print7printlnEv>:
      return write((const uint8_t *)str, strlen(str));
    1edc:	dc 01       	movw	r26, r24
    1ede:	ed 91       	ld	r30, X+
    1ee0:	fc 91       	ld	r31, X
    1ee2:	02 80       	ldd	r0, Z+2	; 0x02
    1ee4:	f3 81       	ldd	r31, Z+3	; 0x03
    1ee6:	e0 2d       	mov	r30, r0
    1ee8:	42 e0       	ldi	r20, 0x02	; 2
    1eea:	50 e0       	ldi	r21, 0x00	; 0
    1eec:	63 e9       	ldi	r22, 0x93	; 147
    1eee:	74 e0       	ldi	r23, 0x04	; 4
    1ef0:	09 95       	icall
}

size_t Print::println(void)
{
  return write("\r\n");
}
    1ef2:	08 95       	ret

00001ef4 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	ec 01       	movw	r28, r24
  size_t n = print(c);
    1efe:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN5Print5printEPKc>
    1f02:	8c 01       	movw	r16, r24
  n += println();
    1f04:	ce 01       	movw	r24, r28
    1f06:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <_ZN5Print7printlnEv>
  return n;
}
    1f0a:	80 0f       	add	r24, r16
    1f0c:	91 1f       	adc	r25, r17
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	1f 91       	pop	r17
    1f14:	0f 91       	pop	r16
    1f16:	08 95       	ret

00001f18 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    1f18:	4f 92       	push	r4
    1f1a:	5f 92       	push	r5
    1f1c:	6f 92       	push	r6
    1f1e:	7f 92       	push	r7
    1f20:	9f 92       	push	r9
    1f22:	af 92       	push	r10
    1f24:	bf 92       	push	r11
    1f26:	cf 92       	push	r12
    1f28:	df 92       	push	r13
    1f2a:	ef 92       	push	r14
    1f2c:	ff 92       	push	r15
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	a1 97       	sbiw	r28, 0x21	; 33
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	5c 01       	movw	r10, r24
    1f48:	6a 01       	movw	r12, r20
    1f4a:	7b 01       	movw	r14, r22
    1f4c:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1f4e:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	82 17       	cp	r24, r18
    1f54:	20 f0       	brcs	.+8      	; 0x1f5e <_ZN5Print11printNumberEmh+0x46>
    1f56:	0f 2e       	mov	r0, r31
    1f58:	fa e0       	ldi	r31, 0x0A	; 10
    1f5a:	9f 2e       	mov	r9, r31
    1f5c:	f0 2d       	mov	r31, r0
    1f5e:	8e 01       	movw	r16, r28
    1f60:	0f 5d       	subi	r16, 0xDF	; 223
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
    1f64:	49 2c       	mov	r4, r9
    1f66:	51 2c       	mov	r5, r1
    1f68:	61 2c       	mov	r6, r1
    1f6a:	71 2c       	mov	r7, r1
    1f6c:	c7 01       	movw	r24, r14
    1f6e:	b6 01       	movw	r22, r12
    1f70:	a3 01       	movw	r20, r6
    1f72:	92 01       	movw	r18, r4
    1f74:	0e 94 98 14 	call	0x2930	; 0x2930 <__udivmodsi4>
    char c = m - base * n;
    1f78:	8c 2d       	mov	r24, r12
    1f7a:	92 9e       	mul	r9, r18
    1f7c:	80 19       	sub	r24, r0
    1f7e:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1f80:	01 50       	subi	r16, 0x01	; 1
    1f82:	11 09       	sbc	r17, r1
    1f84:	8a 30       	cpi	r24, 0x0A	; 10
    1f86:	10 f4       	brcc	.+4      	; 0x1f8c <_ZN5Print11printNumberEmh+0x74>
    1f88:	80 5d       	subi	r24, 0xD0	; 208
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <_ZN5Print11printNumberEmh+0x76>
    1f8c:	89 5c       	subi	r24, 0xC9	; 201
    1f8e:	d8 01       	movw	r26, r16
    1f90:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    1f92:	c2 2e       	mov	r12, r18
    1f94:	d3 2e       	mov	r13, r19
    1f96:	e4 2e       	mov	r14, r20
    1f98:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1f9a:	c1 14       	cp	r12, r1
    1f9c:	d1 04       	cpc	r13, r1
    1f9e:	e1 04       	cpc	r14, r1
    1fa0:	f1 04       	cpc	r15, r1
    1fa2:	21 f7       	brne	.-56     	; 0x1f6c <_ZN5Print11printNumberEmh+0x54>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1fa4:	01 15       	cp	r16, r1
    1fa6:	11 05       	cpc	r17, r1
    1fa8:	91 f0       	breq	.+36     	; 0x1fce <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
    1faa:	f8 01       	movw	r30, r16
    1fac:	01 90       	ld	r0, Z+
    1fae:	00 20       	and	r0, r0
    1fb0:	e9 f7       	brne	.-6      	; 0x1fac <_ZN5Print11printNumberEmh+0x94>
    1fb2:	31 97       	sbiw	r30, 0x01	; 1
    1fb4:	af 01       	movw	r20, r30
    1fb6:	40 1b       	sub	r20, r16
    1fb8:	51 0b       	sbc	r21, r17
    1fba:	d5 01       	movw	r26, r10
    1fbc:	ed 91       	ld	r30, X+
    1fbe:	fc 91       	ld	r31, X
    1fc0:	02 80       	ldd	r0, Z+2	; 0x02
    1fc2:	f3 81       	ldd	r31, Z+3	; 0x03
    1fc4:	e0 2d       	mov	r30, r0
    1fc6:	b8 01       	movw	r22, r16
    1fc8:	c5 01       	movw	r24, r10
    1fca:	09 95       	icall
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    1fd2:	a1 96       	adiw	r28, 0x21	; 33
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	ff 90       	pop	r15
    1fe8:	ef 90       	pop	r14
    1fea:	df 90       	pop	r13
    1fec:	cf 90       	pop	r12
    1fee:	bf 90       	pop	r11
    1ff0:	af 90       	pop	r10
    1ff2:	9f 90       	pop	r9
    1ff4:	7f 90       	pop	r7
    1ff6:	6f 90       	pop	r6
    1ff8:	5f 90       	pop	r5
    1ffa:	4f 90       	pop	r4
    1ffc:	08 95       	ret

00001ffe <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    1ffe:	21 15       	cp	r18, r1
    2000:	31 05       	cpc	r19, r1
    2002:	49 f4       	brne	.+18     	; 0x2016 <_ZN5Print5printEmi+0x18>
    2004:	dc 01       	movw	r26, r24
    2006:	ed 91       	ld	r30, X+
    2008:	fc 91       	ld	r31, X
    200a:	01 90       	ld	r0, Z+
    200c:	f0 81       	ld	r31, Z
    200e:	e0 2d       	mov	r30, r0
    2010:	64 2f       	mov	r22, r20
    2012:	09 95       	icall
    2014:	08 95       	ret
  else return printNumber(n, base);
    2016:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <_ZN5Print11printNumberEmh>
}
    201a:	08 95       	ret

0000201c <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    201c:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    201e:	46 2f       	mov	r20, r22
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <_ZN5Print5printEmi>
}
    202a:	08 95       	ret

0000202c <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	39 f0       	breq	.+14     	; 0x203e <_Z12disableTimerh+0x12>
    2030:	18 f0       	brcs	.+6      	; 0x2038 <_Z12disableTimerh+0xc>
    2032:	82 30       	cpi	r24, 0x02	; 2
    2034:	51 f0       	breq	.+20     	; 0x204a <_Z12disableTimerh+0x1e>
    2036:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    2038:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    203c:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    203e:	ef e6       	ldi	r30, 0x6F	; 111
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	8d 7f       	andi	r24, 0xFD	; 253
    2046:	80 83       	st	Z, r24
      break;
    2048:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    204a:	e0 e7       	ldi	r30, 0x70	; 112
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	8d 7f       	andi	r24, 0xFD	; 253
    2052:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    205a:	e1 eb       	ldi	r30, 0xB1	; 177
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	88 7f       	andi	r24, 0xF8	; 248
    2062:	84 60       	ori	r24, 0x04	; 4
    2064:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    2066:	10 92 b3 00 	sts	0x00B3, r1
    206a:	08 95       	ret

0000206c <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    206c:	cf 93       	push	r28
    206e:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    2070:	80 91 00 04 	lds	r24, 0x0400
    2074:	8c 13       	cpse	r24, r28
    2076:	08 c0       	rjmp	.+16     	; 0x2088 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    2078:	e8 e6       	ldi	r30, 0x68	; 104
    207a:	f1 e0       	ldi	r31, 0x01	; 1
    207c:	e4 91       	lpm	r30, Z
    207e:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
    2080:	9f ef       	ldi	r25, 0xFF	; 255
    2082:	90 93 00 04 	sts	0x0400, r25
    2086:	01 c0       	rjmp	.+2      	; 0x208a <_Z6noToneh+0x1e>
    2088:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
    208a:	0e 94 16 10 	call	0x202c	; 0x202c <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    208e:	60 e0       	ldi	r22, 0x00	; 0
    2090:	8c 2f       	mov	r24, r28
    2092:	0e 94 5f 12 	call	0x24be	; 0x24be <digitalWrite>
}
    2096:	cf 91       	pop	r28
    2098:	08 95       	ret

0000209a <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
    209a:	1f 92       	push	r1
    209c:	0f 92       	push	r0
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	0f 92       	push	r0
    20a2:	11 24       	eor	r1, r1
    20a4:	2f 93       	push	r18
    20a6:	3f 93       	push	r19
    20a8:	4f 93       	push	r20
    20aa:	5f 93       	push	r21
    20ac:	6f 93       	push	r22
    20ae:	7f 93       	push	r23
    20b0:	8f 93       	push	r24
    20b2:	9f 93       	push	r25
    20b4:	af 93       	push	r26
    20b6:	bf 93       	push	r27
    20b8:	ef 93       	push	r30
    20ba:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    20bc:	80 91 d9 05 	lds	r24, 0x05D9
    20c0:	90 91 da 05 	lds	r25, 0x05DA
    20c4:	a0 91 db 05 	lds	r26, 0x05DB
    20c8:	b0 91 dc 05 	lds	r27, 0x05DC
    20cc:	89 2b       	or	r24, r25
    20ce:	8a 2b       	or	r24, r26
    20d0:	8b 2b       	or	r24, r27
    20d2:	51 f1       	breq	.+84     	; 0x2128 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    20d4:	80 91 d6 05 	lds	r24, 0x05D6
    20d8:	e0 91 d7 05 	lds	r30, 0x05D7
    20dc:	f0 91 d8 05 	lds	r31, 0x05D8
    20e0:	90 81       	ld	r25, Z
    20e2:	89 27       	eor	r24, r25
    20e4:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    20e6:	80 91 d9 05 	lds	r24, 0x05D9
    20ea:	90 91 da 05 	lds	r25, 0x05DA
    20ee:	a0 91 db 05 	lds	r26, 0x05DB
    20f2:	b0 91 dc 05 	lds	r27, 0x05DC
    20f6:	18 16       	cp	r1, r24
    20f8:	19 06       	cpc	r1, r25
    20fa:	1a 06       	cpc	r1, r26
    20fc:	1b 06       	cpc	r1, r27
    20fe:	c4 f4       	brge	.+48     	; 0x2130 <__vector_7+0x96>
      timer2_toggle_count--;
    2100:	80 91 d9 05 	lds	r24, 0x05D9
    2104:	90 91 da 05 	lds	r25, 0x05DA
    2108:	a0 91 db 05 	lds	r26, 0x05DB
    210c:	b0 91 dc 05 	lds	r27, 0x05DC
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	a1 09       	sbc	r26, r1
    2114:	b1 09       	sbc	r27, r1
    2116:	80 93 d9 05 	sts	0x05D9, r24
    211a:	90 93 da 05 	sts	0x05DA, r25
    211e:	a0 93 db 05 	sts	0x05DB, r26
    2122:	b0 93 dc 05 	sts	0x05DC, r27
    2126:	04 c0       	rjmp	.+8      	; 0x2130 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    2128:	80 91 00 04 	lds	r24, 0x0400
    212c:	0e 94 36 10 	call	0x206c	; 0x206c <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    2130:	ff 91       	pop	r31
    2132:	ef 91       	pop	r30
    2134:	bf 91       	pop	r27
    2136:	af 91       	pop	r26
    2138:	9f 91       	pop	r25
    213a:	8f 91       	pop	r24
    213c:	7f 91       	pop	r23
    213e:	6f 91       	pop	r22
    2140:	5f 91       	pop	r21
    2142:	4f 91       	pop	r20
    2144:	3f 91       	pop	r19
    2146:	2f 91       	pop	r18
    2148:	0f 90       	pop	r0
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	0f 90       	pop	r0
    214e:	1f 90       	pop	r1
    2150:	18 95       	reti

00002152 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    2152:	1f 92       	push	r1
    2154:	0f 92       	push	r0
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	0f 92       	push	r0
    215a:	11 24       	eor	r1, r1
    215c:	2f 93       	push	r18
    215e:	3f 93       	push	r19
    2160:	4f 93       	push	r20
    2162:	5f 93       	push	r21
    2164:	6f 93       	push	r22
    2166:	7f 93       	push	r23
    2168:	8f 93       	push	r24
    216a:	9f 93       	push	r25
    216c:	af 93       	push	r26
    216e:	bf 93       	push	r27
    2170:	ef 93       	push	r30
    2172:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    2174:	80 91 dd 05 	lds	r24, 0x05DD
    2178:	90 91 de 05 	lds	r25, 0x05DE
    217c:	89 2b       	or	r24, r25
    217e:	29 f0       	breq	.+10     	; 0x218a <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    2180:	e0 91 dd 05 	lds	r30, 0x05DD
    2184:	f0 91 de 05 	lds	r31, 0x05DE
    2188:	09 95       	icall
}
    218a:	ff 91       	pop	r31
    218c:	ef 91       	pop	r30
    218e:	bf 91       	pop	r27
    2190:	af 91       	pop	r26
    2192:	9f 91       	pop	r25
    2194:	8f 91       	pop	r24
    2196:	7f 91       	pop	r23
    2198:	6f 91       	pop	r22
    219a:	5f 91       	pop	r21
    219c:	4f 91       	pop	r20
    219e:	3f 91       	pop	r19
    21a0:	2f 91       	pop	r18
    21a2:	0f 90       	pop	r0
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	0f 90       	pop	r0
    21a8:	1f 90       	pop	r1
    21aa:	18 95       	reti

000021ac <__vector_2>:

ISR(INT1_vect) {
    21ac:	1f 92       	push	r1
    21ae:	0f 92       	push	r0
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	0f 92       	push	r0
    21b4:	11 24       	eor	r1, r1
    21b6:	2f 93       	push	r18
    21b8:	3f 93       	push	r19
    21ba:	4f 93       	push	r20
    21bc:	5f 93       	push	r21
    21be:	6f 93       	push	r22
    21c0:	7f 93       	push	r23
    21c2:	8f 93       	push	r24
    21c4:	9f 93       	push	r25
    21c6:	af 93       	push	r26
    21c8:	bf 93       	push	r27
    21ca:	ef 93       	push	r30
    21cc:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    21ce:	80 91 df 05 	lds	r24, 0x05DF
    21d2:	90 91 e0 05 	lds	r25, 0x05E0
    21d6:	89 2b       	or	r24, r25
    21d8:	29 f0       	breq	.+10     	; 0x21e4 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    21da:	e0 91 df 05 	lds	r30, 0x05DF
    21de:	f0 91 e0 05 	lds	r31, 0x05E0
    21e2:	09 95       	icall
}
    21e4:	ff 91       	pop	r31
    21e6:	ef 91       	pop	r30
    21e8:	bf 91       	pop	r27
    21ea:	af 91       	pop	r26
    21ec:	9f 91       	pop	r25
    21ee:	8f 91       	pop	r24
    21f0:	7f 91       	pop	r23
    21f2:	6f 91       	pop	r22
    21f4:	5f 91       	pop	r21
    21f6:	4f 91       	pop	r20
    21f8:	3f 91       	pop	r19
    21fa:	2f 91       	pop	r18
    21fc:	0f 90       	pop	r0
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	0f 90       	pop	r0
    2202:	1f 90       	pop	r1
    2204:	18 95       	reti

00002206 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2206:	1f 92       	push	r1
    2208:	0f 92       	push	r0
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	0f 92       	push	r0
    220e:	11 24       	eor	r1, r1
    2210:	2f 93       	push	r18
    2212:	3f 93       	push	r19
    2214:	8f 93       	push	r24
    2216:	9f 93       	push	r25
    2218:	af 93       	push	r26
    221a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    221c:	80 91 e2 05 	lds	r24, 0x05E2
    2220:	90 91 e3 05 	lds	r25, 0x05E3
    2224:	a0 91 e4 05 	lds	r26, 0x05E4
    2228:	b0 91 e5 05 	lds	r27, 0x05E5
	unsigned char f = timer0_fract;
    222c:	30 91 e1 05 	lds	r19, 0x05E1

	m += MILLIS_INC;
	f += FRACT_INC;
    2230:	23 e0       	ldi	r18, 0x03	; 3
    2232:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2234:	2d 37       	cpi	r18, 0x7D	; 125
    2236:	20 f4       	brcc	.+8      	; 0x2240 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2238:	01 96       	adiw	r24, 0x01	; 1
    223a:	a1 1d       	adc	r26, r1
    223c:	b1 1d       	adc	r27, r1
    223e:	05 c0       	rjmp	.+10     	; 0x224a <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2240:	26 e8       	ldi	r18, 0x86	; 134
    2242:	23 0f       	add	r18, r19
		m += 1;
    2244:	02 96       	adiw	r24, 0x02	; 2
    2246:	a1 1d       	adc	r26, r1
    2248:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    224a:	20 93 e1 05 	sts	0x05E1, r18
	timer0_millis = m;
    224e:	80 93 e2 05 	sts	0x05E2, r24
    2252:	90 93 e3 05 	sts	0x05E3, r25
    2256:	a0 93 e4 05 	sts	0x05E4, r26
    225a:	b0 93 e5 05 	sts	0x05E5, r27
	timer0_overflow_count++;
    225e:	80 91 e6 05 	lds	r24, 0x05E6
    2262:	90 91 e7 05 	lds	r25, 0x05E7
    2266:	a0 91 e8 05 	lds	r26, 0x05E8
    226a:	b0 91 e9 05 	lds	r27, 0x05E9
    226e:	01 96       	adiw	r24, 0x01	; 1
    2270:	a1 1d       	adc	r26, r1
    2272:	b1 1d       	adc	r27, r1
    2274:	80 93 e6 05 	sts	0x05E6, r24
    2278:	90 93 e7 05 	sts	0x05E7, r25
    227c:	a0 93 e8 05 	sts	0x05E8, r26
    2280:	b0 93 e9 05 	sts	0x05E9, r27
}
    2284:	bf 91       	pop	r27
    2286:	af 91       	pop	r26
    2288:	9f 91       	pop	r25
    228a:	8f 91       	pop	r24
    228c:	3f 91       	pop	r19
    228e:	2f 91       	pop	r18
    2290:	0f 90       	pop	r0
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	0f 90       	pop	r0
    2296:	1f 90       	pop	r1
    2298:	18 95       	reti

0000229a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    229a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    229c:	f8 94       	cli
	m = timer0_millis;
    229e:	60 91 e2 05 	lds	r22, 0x05E2
    22a2:	70 91 e3 05 	lds	r23, 0x05E3
    22a6:	80 91 e4 05 	lds	r24, 0x05E4
    22aa:	90 91 e5 05 	lds	r25, 0x05E5
	SREG = oldSREG;
    22ae:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    22b0:	08 95       	ret

000022b2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    22b2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    22b4:	f8 94       	cli
	m = timer0_overflow_count;
    22b6:	80 91 e6 05 	lds	r24, 0x05E6
    22ba:	90 91 e7 05 	lds	r25, 0x05E7
    22be:	a0 91 e8 05 	lds	r26, 0x05E8
    22c2:	b0 91 e9 05 	lds	r27, 0x05E9
#if defined(TCNT0)
	t = TCNT0;
    22c6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    22c8:	a8 9b       	sbis	0x15, 0	; 21
    22ca:	05 c0       	rjmp	.+10     	; 0x22d6 <micros+0x24>
    22cc:	2f 3f       	cpi	r18, 0xFF	; 255
    22ce:	19 f0       	breq	.+6      	; 0x22d6 <micros+0x24>
		m++;
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	a1 1d       	adc	r26, r1
    22d4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    22d6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    22d8:	ba 2f       	mov	r27, r26
    22da:	a9 2f       	mov	r26, r25
    22dc:	98 2f       	mov	r25, r24
    22de:	88 27       	eor	r24, r24
    22e0:	82 0f       	add	r24, r18
    22e2:	91 1d       	adc	r25, r1
    22e4:	a1 1d       	adc	r26, r1
    22e6:	b1 1d       	adc	r27, r1
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	66 0f       	add	r22, r22
    22ee:	77 1f       	adc	r23, r23
    22f0:	88 1f       	adc	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	66 0f       	add	r22, r22
    22f6:	77 1f       	adc	r23, r23
    22f8:	88 1f       	adc	r24, r24
    22fa:	99 1f       	adc	r25, r25
}
    22fc:	08 95       	ret

000022fe <delay>:

void delay(unsigned long ms)
{
    22fe:	cf 92       	push	r12
    2300:	df 92       	push	r13
    2302:	ef 92       	push	r14
    2304:	ff 92       	push	r15
    2306:	cf 93       	push	r28
    2308:	df 93       	push	r29
    230a:	6b 01       	movw	r12, r22
    230c:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    230e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <micros>
    2312:	eb 01       	movw	r28, r22

	while (ms > 0) {
    2314:	c1 14       	cp	r12, r1
    2316:	d1 04       	cpc	r13, r1
    2318:	e1 04       	cpc	r14, r1
    231a:	f1 04       	cpc	r15, r1
    231c:	a9 f0       	breq	.+42     	; 0x2348 <delay+0x4a>
		yield();
    231e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    2322:	0e 94 59 11 	call	0x22b2	; 0x22b2 <micros>
    2326:	6c 1b       	sub	r22, r28
    2328:	7d 0b       	sbc	r23, r29
    232a:	68 3e       	cpi	r22, 0xE8	; 232
    232c:	73 40       	sbci	r23, 0x03	; 3
    232e:	38 f0       	brcs	.+14     	; 0x233e <delay+0x40>
			ms--;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	c8 1a       	sub	r12, r24
    2334:	d1 08       	sbc	r13, r1
    2336:	e1 08       	sbc	r14, r1
    2338:	f1 08       	sbc	r15, r1
			start += 1000;
    233a:	c8 51       	subi	r28, 0x18	; 24
    233c:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    233e:	c1 14       	cp	r12, r1
    2340:	d1 04       	cpc	r13, r1
    2342:	e1 04       	cpc	r14, r1
    2344:	f1 04       	cpc	r15, r1
    2346:	59 f7       	brne	.-42     	; 0x231e <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	ff 90       	pop	r15
    234e:	ef 90       	pop	r14
    2350:	df 90       	pop	r13
    2352:	cf 90       	pop	r12
    2354:	08 95       	ret

00002356 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2356:	82 30       	cpi	r24, 0x02	; 2
    2358:	91 05       	cpc	r25, r1
    235a:	38 f0       	brcs	.+14     	; 0x236a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2364:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <delayMicroseconds+0x10>
    236a:	08 95       	ret

0000236c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    236c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    236e:	84 b5       	in	r24, 0x24	; 36
    2370:	82 60       	ori	r24, 0x02	; 2
    2372:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2374:	84 b5       	in	r24, 0x24	; 36
    2376:	81 60       	ori	r24, 0x01	; 1
    2378:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    237a:	85 b5       	in	r24, 0x25	; 37
    237c:	82 60       	ori	r24, 0x02	; 2
    237e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2380:	85 b5       	in	r24, 0x25	; 37
    2382:	81 60       	ori	r24, 0x01	; 1
    2384:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2386:	ee e6       	ldi	r30, 0x6E	; 110
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	81 60       	ori	r24, 0x01	; 1
    238e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2390:	e1 e8       	ldi	r30, 0x81	; 129
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2396:	80 81       	ld	r24, Z
    2398:	82 60       	ori	r24, 0x02	; 2
    239a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    239c:	80 81       	ld	r24, Z
    239e:	81 60       	ori	r24, 0x01	; 1
    23a0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    23a2:	e0 e8       	ldi	r30, 0x80	; 128
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	81 60       	ori	r24, 0x01	; 1
    23aa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    23ac:	e1 eb       	ldi	r30, 0xB1	; 177
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	84 60       	ori	r24, 0x04	; 4
    23b4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    23b6:	e0 eb       	ldi	r30, 0xB0	; 176
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	81 60       	ori	r24, 0x01	; 1
    23be:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    23c0:	ea e7       	ldi	r30, 0x7A	; 122
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	84 60       	ori	r24, 0x04	; 4
    23c8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    23ca:	80 81       	ld	r24, Z
    23cc:	82 60       	ori	r24, 0x02	; 2
    23ce:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    23d0:	80 81       	ld	r24, Z
    23d2:	81 60       	ori	r24, 0x01	; 1
    23d4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    23d6:	80 81       	ld	r24, Z
    23d8:	80 68       	ori	r24, 0x80	; 128
    23da:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    23dc:	10 92 c1 00 	sts	0x00C1, r1
    23e0:	08 95       	ret

000023e2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    23e2:	83 30       	cpi	r24, 0x03	; 3
    23e4:	69 f0       	breq	.+26     	; 0x2400 <turnOffPWM+0x1e>
    23e6:	28 f4       	brcc	.+10     	; 0x23f2 <turnOffPWM+0x10>
    23e8:	81 30       	cpi	r24, 0x01	; 1
    23ea:	b1 f0       	breq	.+44     	; 0x2418 <turnOffPWM+0x36>
    23ec:	82 30       	cpi	r24, 0x02	; 2
    23ee:	c1 f0       	breq	.+48     	; 0x2420 <turnOffPWM+0x3e>
    23f0:	08 95       	ret
    23f2:	87 30       	cpi	r24, 0x07	; 7
    23f4:	c9 f0       	breq	.+50     	; 0x2428 <turnOffPWM+0x46>
    23f6:	88 30       	cpi	r24, 0x08	; 8
    23f8:	e9 f0       	breq	.+58     	; 0x2434 <turnOffPWM+0x52>
    23fa:	84 30       	cpi	r24, 0x04	; 4
    23fc:	01 f5       	brne	.+64     	; 0x243e <turnOffPWM+0x5c>
    23fe:	06 c0       	rjmp	.+12     	; 0x240c <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2400:	e0 e8       	ldi	r30, 0x80	; 128
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	8f 77       	andi	r24, 0x7F	; 127
    2408:	80 83       	st	Z, r24
    240a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    240c:	e0 e8       	ldi	r30, 0x80	; 128
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	8f 7d       	andi	r24, 0xDF	; 223
    2414:	80 83       	st	Z, r24
    2416:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2418:	84 b5       	in	r24, 0x24	; 36
    241a:	8f 77       	andi	r24, 0x7F	; 127
    241c:	84 bd       	out	0x24, r24	; 36
    241e:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2420:	84 b5       	in	r24, 0x24	; 36
    2422:	8f 7d       	andi	r24, 0xDF	; 223
    2424:	84 bd       	out	0x24, r24	; 36
    2426:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2428:	e0 eb       	ldi	r30, 0xB0	; 176
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	8f 77       	andi	r24, 0x7F	; 127
    2430:	80 83       	st	Z, r24
    2432:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2434:	e0 eb       	ldi	r30, 0xB0	; 176
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	8f 7d       	andi	r24, 0xDF	; 223
    243c:	80 83       	st	Z, r24
    243e:	08 95       	ret

00002440 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	fc 01       	movw	r30, r24
    2448:	e3 58       	subi	r30, 0x83	; 131
    244a:	fe 4f       	sbci	r31, 0xFE	; 254
    244c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    244e:	fc 01       	movw	r30, r24
    2450:	ef 56       	subi	r30, 0x6F	; 111
    2452:	fe 4f       	sbci	r31, 0xFE	; 254
    2454:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2456:	88 23       	and	r24, r24
    2458:	79 f1       	breq	.+94     	; 0x24b8 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	fc 01       	movw	r30, r24
    2462:	e7 54       	subi	r30, 0x47	; 71
    2464:	fe 4f       	sbci	r31, 0xFE	; 254
    2466:	a5 91       	lpm	r26, Z+
    2468:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    246a:	fc 01       	movw	r30, r24
    246c:	e1 55       	subi	r30, 0x51	; 81
    246e:	fe 4f       	sbci	r31, 0xFE	; 254
    2470:	c5 91       	lpm	r28, Z+
    2472:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    2474:	61 11       	cpse	r22, r1
    2476:	0c c0       	rjmp	.+24     	; 0x2490 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    2478:	9f b7       	in	r25, 0x3f	; 63
                cli();
    247a:	f8 94       	cli
		*reg &= ~bit;
    247c:	8c 91       	ld	r24, X
    247e:	e2 2f       	mov	r30, r18
    2480:	e0 95       	com	r30
    2482:	8e 23       	and	r24, r30
    2484:	8c 93       	st	X, r24
		*out &= ~bit;
    2486:	28 81       	ld	r18, Y
    2488:	e2 23       	and	r30, r18
    248a:	e8 83       	st	Y, r30
		SREG = oldSREG;
    248c:	9f bf       	out	0x3f, r25	; 63
    248e:	14 c0       	rjmp	.+40     	; 0x24b8 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    2490:	62 30       	cpi	r22, 0x02	; 2
    2492:	61 f4       	brne	.+24     	; 0x24ac <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    2494:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2496:	f8 94       	cli
		*reg &= ~bit;
    2498:	3c 91       	ld	r19, X
    249a:	82 2f       	mov	r24, r18
    249c:	80 95       	com	r24
    249e:	83 23       	and	r24, r19
    24a0:	8c 93       	st	X, r24
		*out |= bit;
    24a2:	e8 81       	ld	r30, Y
    24a4:	e2 2b       	or	r30, r18
    24a6:	e8 83       	st	Y, r30
		SREG = oldSREG;
    24a8:	9f bf       	out	0x3f, r25	; 63
    24aa:	06 c0       	rjmp	.+12     	; 0x24b8 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    24ac:	8f b7       	in	r24, 0x3f	; 63
                cli();
    24ae:	f8 94       	cli
		*reg |= bit;
    24b0:	ec 91       	ld	r30, X
    24b2:	e2 2b       	or	r30, r18
    24b4:	ec 93       	st	X, r30
		SREG = oldSREG;
    24b6:	8f bf       	out	0x3f, r24	; 63
	}
}
    24b8:	df 91       	pop	r29
    24ba:	cf 91       	pop	r28
    24bc:	08 95       	ret

000024be <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	f9 01       	movw	r30, r18
    24ca:	e7 59       	subi	r30, 0x97	; 151
    24cc:	fe 4f       	sbci	r31, 0xFE	; 254
    24ce:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    24d0:	f9 01       	movw	r30, r18
    24d2:	e3 58       	subi	r30, 0x83	; 131
    24d4:	fe 4f       	sbci	r31, 0xFE	; 254
    24d6:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    24d8:	f9 01       	movw	r30, r18
    24da:	ef 56       	subi	r30, 0x6F	; 111
    24dc:	fe 4f       	sbci	r31, 0xFE	; 254
    24de:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    24e0:	cc 23       	and	r28, r28
    24e2:	d1 f0       	breq	.+52     	; 0x2518 <digitalWrite+0x5a>
    24e4:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    24e6:	81 11       	cpse	r24, r1
    24e8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <turnOffPWM>

	out = portOutputRegister(port);
    24ec:	ec 2f       	mov	r30, r28
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	ee 0f       	add	r30, r30
    24f2:	ff 1f       	adc	r31, r31
    24f4:	e1 55       	subi	r30, 0x51	; 81
    24f6:	fe 4f       	sbci	r31, 0xFE	; 254
    24f8:	a5 91       	lpm	r26, Z+
    24fa:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    24fc:	8f b7       	in	r24, 0x3f	; 63
	cli();
    24fe:	f8 94       	cli

	if (val == LOW) {
    2500:	d1 11       	cpse	r29, r1
    2502:	06 c0       	rjmp	.+12     	; 0x2510 <digitalWrite+0x52>
		*out &= ~bit;
    2504:	9c 91       	ld	r25, X
    2506:	e1 2f       	mov	r30, r17
    2508:	e0 95       	com	r30
    250a:	e9 23       	and	r30, r25
    250c:	ec 93       	st	X, r30
    250e:	03 c0       	rjmp	.+6      	; 0x2516 <digitalWrite+0x58>
	} else {
		*out |= bit;
    2510:	ec 91       	ld	r30, X
    2512:	e1 2b       	or	r30, r17
    2514:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    2516:	8f bf       	out	0x3f, r24	; 63
}
    2518:	df 91       	pop	r29
    251a:	cf 91       	pop	r28
    251c:	1f 91       	pop	r17
    251e:	08 95       	ret

00002520 <__subsf3>:
    2520:	50 58       	subi	r21, 0x80	; 128

00002522 <__addsf3>:
    2522:	bb 27       	eor	r27, r27
    2524:	aa 27       	eor	r26, r26
    2526:	0e 94 a8 12 	call	0x2550	; 0x2550 <__addsf3x>
    252a:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__fp_round>
    252e:	0e 94 de 13 	call	0x27bc	; 0x27bc <__fp_pscA>
    2532:	38 f0       	brcs	.+14     	; 0x2542 <__addsf3+0x20>
    2534:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__fp_pscB>
    2538:	20 f0       	brcs	.+8      	; 0x2542 <__addsf3+0x20>
    253a:	39 f4       	brne	.+14     	; 0x254a <__addsf3+0x28>
    253c:	9f 3f       	cpi	r25, 0xFF	; 255
    253e:	19 f4       	brne	.+6      	; 0x2546 <__addsf3+0x24>
    2540:	26 f4       	brtc	.+8      	; 0x254a <__addsf3+0x28>
    2542:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__fp_nan>
    2546:	0e f4       	brtc	.+2      	; 0x254a <__addsf3+0x28>
    2548:	e0 95       	com	r30
    254a:	e7 fb       	bst	r30, 7
    254c:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__fp_inf>

00002550 <__addsf3x>:
    2550:	e9 2f       	mov	r30, r25
    2552:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__fp_split3>
    2556:	58 f3       	brcs	.-42     	; 0x252e <__addsf3+0xc>
    2558:	ba 17       	cp	r27, r26
    255a:	62 07       	cpc	r22, r18
    255c:	73 07       	cpc	r23, r19
    255e:	84 07       	cpc	r24, r20
    2560:	95 07       	cpc	r25, r21
    2562:	20 f0       	brcs	.+8      	; 0x256c <__addsf3x+0x1c>
    2564:	79 f4       	brne	.+30     	; 0x2584 <__addsf3x+0x34>
    2566:	a6 f5       	brtc	.+104    	; 0x25d0 <__addsf3x+0x80>
    2568:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__fp_zero>
    256c:	0e f4       	brtc	.+2      	; 0x2570 <__addsf3x+0x20>
    256e:	e0 95       	com	r30
    2570:	0b 2e       	mov	r0, r27
    2572:	ba 2f       	mov	r27, r26
    2574:	a0 2d       	mov	r26, r0
    2576:	0b 01       	movw	r0, r22
    2578:	b9 01       	movw	r22, r18
    257a:	90 01       	movw	r18, r0
    257c:	0c 01       	movw	r0, r24
    257e:	ca 01       	movw	r24, r20
    2580:	a0 01       	movw	r20, r0
    2582:	11 24       	eor	r1, r1
    2584:	ff 27       	eor	r31, r31
    2586:	59 1b       	sub	r21, r25
    2588:	99 f0       	breq	.+38     	; 0x25b0 <__addsf3x+0x60>
    258a:	59 3f       	cpi	r21, 0xF9	; 249
    258c:	50 f4       	brcc	.+20     	; 0x25a2 <__addsf3x+0x52>
    258e:	50 3e       	cpi	r21, 0xE0	; 224
    2590:	68 f1       	brcs	.+90     	; 0x25ec <__addsf3x+0x9c>
    2592:	1a 16       	cp	r1, r26
    2594:	f0 40       	sbci	r31, 0x00	; 0
    2596:	a2 2f       	mov	r26, r18
    2598:	23 2f       	mov	r18, r19
    259a:	34 2f       	mov	r19, r20
    259c:	44 27       	eor	r20, r20
    259e:	58 5f       	subi	r21, 0xF8	; 248
    25a0:	f3 cf       	rjmp	.-26     	; 0x2588 <__addsf3x+0x38>
    25a2:	46 95       	lsr	r20
    25a4:	37 95       	ror	r19
    25a6:	27 95       	ror	r18
    25a8:	a7 95       	ror	r26
    25aa:	f0 40       	sbci	r31, 0x00	; 0
    25ac:	53 95       	inc	r21
    25ae:	c9 f7       	brne	.-14     	; 0x25a2 <__addsf3x+0x52>
    25b0:	7e f4       	brtc	.+30     	; 0x25d0 <__addsf3x+0x80>
    25b2:	1f 16       	cp	r1, r31
    25b4:	ba 0b       	sbc	r27, r26
    25b6:	62 0b       	sbc	r22, r18
    25b8:	73 0b       	sbc	r23, r19
    25ba:	84 0b       	sbc	r24, r20
    25bc:	ba f0       	brmi	.+46     	; 0x25ec <__addsf3x+0x9c>
    25be:	91 50       	subi	r25, 0x01	; 1
    25c0:	a1 f0       	breq	.+40     	; 0x25ea <__addsf3x+0x9a>
    25c2:	ff 0f       	add	r31, r31
    25c4:	bb 1f       	adc	r27, r27
    25c6:	66 1f       	adc	r22, r22
    25c8:	77 1f       	adc	r23, r23
    25ca:	88 1f       	adc	r24, r24
    25cc:	c2 f7       	brpl	.-16     	; 0x25be <__addsf3x+0x6e>
    25ce:	0e c0       	rjmp	.+28     	; 0x25ec <__addsf3x+0x9c>
    25d0:	ba 0f       	add	r27, r26
    25d2:	62 1f       	adc	r22, r18
    25d4:	73 1f       	adc	r23, r19
    25d6:	84 1f       	adc	r24, r20
    25d8:	48 f4       	brcc	.+18     	; 0x25ec <__addsf3x+0x9c>
    25da:	87 95       	ror	r24
    25dc:	77 95       	ror	r23
    25de:	67 95       	ror	r22
    25e0:	b7 95       	ror	r27
    25e2:	f7 95       	ror	r31
    25e4:	9e 3f       	cpi	r25, 0xFE	; 254
    25e6:	08 f0       	brcs	.+2      	; 0x25ea <__addsf3x+0x9a>
    25e8:	b0 cf       	rjmp	.-160    	; 0x254a <__addsf3+0x28>
    25ea:	93 95       	inc	r25
    25ec:	88 0f       	add	r24, r24
    25ee:	08 f0       	brcs	.+2      	; 0x25f2 <__addsf3x+0xa2>
    25f0:	99 27       	eor	r25, r25
    25f2:	ee 0f       	add	r30, r30
    25f4:	97 95       	ror	r25
    25f6:	87 95       	ror	r24
    25f8:	08 95       	ret

000025fa <__cmpsf2>:
    25fa:	0e 94 b1 13 	call	0x2762	; 0x2762 <__fp_cmp>
    25fe:	08 f4       	brcc	.+2      	; 0x2602 <__cmpsf2+0x8>
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	08 95       	ret

00002604 <__divsf3>:
    2604:	0e 94 16 13 	call	0x262c	; 0x262c <__divsf3x>
    2608:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__fp_round>
    260c:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__fp_pscB>
    2610:	58 f0       	brcs	.+22     	; 0x2628 <__divsf3+0x24>
    2612:	0e 94 de 13 	call	0x27bc	; 0x27bc <__fp_pscA>
    2616:	40 f0       	brcs	.+16     	; 0x2628 <__divsf3+0x24>
    2618:	29 f4       	brne	.+10     	; 0x2624 <__divsf3+0x20>
    261a:	5f 3f       	cpi	r21, 0xFF	; 255
    261c:	29 f0       	breq	.+10     	; 0x2628 <__divsf3+0x24>
    261e:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__fp_inf>
    2622:	51 11       	cpse	r21, r1
    2624:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__fp_szero>
    2628:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__fp_nan>

0000262c <__divsf3x>:
    262c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__fp_split3>
    2630:	68 f3       	brcs	.-38     	; 0x260c <__divsf3+0x8>

00002632 <__divsf3_pse>:
    2632:	99 23       	and	r25, r25
    2634:	b1 f3       	breq	.-20     	; 0x2622 <__divsf3+0x1e>
    2636:	55 23       	and	r21, r21
    2638:	91 f3       	breq	.-28     	; 0x261e <__divsf3+0x1a>
    263a:	95 1b       	sub	r25, r21
    263c:	55 0b       	sbc	r21, r21
    263e:	bb 27       	eor	r27, r27
    2640:	aa 27       	eor	r26, r26
    2642:	62 17       	cp	r22, r18
    2644:	73 07       	cpc	r23, r19
    2646:	84 07       	cpc	r24, r20
    2648:	38 f0       	brcs	.+14     	; 0x2658 <__divsf3_pse+0x26>
    264a:	9f 5f       	subi	r25, 0xFF	; 255
    264c:	5f 4f       	sbci	r21, 0xFF	; 255
    264e:	22 0f       	add	r18, r18
    2650:	33 1f       	adc	r19, r19
    2652:	44 1f       	adc	r20, r20
    2654:	aa 1f       	adc	r26, r26
    2656:	a9 f3       	breq	.-22     	; 0x2642 <__divsf3_pse+0x10>
    2658:	35 d0       	rcall	.+106    	; 0x26c4 <__divsf3_pse+0x92>
    265a:	0e 2e       	mov	r0, r30
    265c:	3a f0       	brmi	.+14     	; 0x266c <__divsf3_pse+0x3a>
    265e:	e0 e8       	ldi	r30, 0x80	; 128
    2660:	32 d0       	rcall	.+100    	; 0x26c6 <__divsf3_pse+0x94>
    2662:	91 50       	subi	r25, 0x01	; 1
    2664:	50 40       	sbci	r21, 0x00	; 0
    2666:	e6 95       	lsr	r30
    2668:	00 1c       	adc	r0, r0
    266a:	ca f7       	brpl	.-14     	; 0x265e <__divsf3_pse+0x2c>
    266c:	2b d0       	rcall	.+86     	; 0x26c4 <__divsf3_pse+0x92>
    266e:	fe 2f       	mov	r31, r30
    2670:	29 d0       	rcall	.+82     	; 0x26c4 <__divsf3_pse+0x92>
    2672:	66 0f       	add	r22, r22
    2674:	77 1f       	adc	r23, r23
    2676:	88 1f       	adc	r24, r24
    2678:	bb 1f       	adc	r27, r27
    267a:	26 17       	cp	r18, r22
    267c:	37 07       	cpc	r19, r23
    267e:	48 07       	cpc	r20, r24
    2680:	ab 07       	cpc	r26, r27
    2682:	b0 e8       	ldi	r27, 0x80	; 128
    2684:	09 f0       	breq	.+2      	; 0x2688 <__divsf3_pse+0x56>
    2686:	bb 0b       	sbc	r27, r27
    2688:	80 2d       	mov	r24, r0
    268a:	bf 01       	movw	r22, r30
    268c:	ff 27       	eor	r31, r31
    268e:	93 58       	subi	r25, 0x83	; 131
    2690:	5f 4f       	sbci	r21, 0xFF	; 255
    2692:	3a f0       	brmi	.+14     	; 0x26a2 <__divsf3_pse+0x70>
    2694:	9e 3f       	cpi	r25, 0xFE	; 254
    2696:	51 05       	cpc	r21, r1
    2698:	78 f0       	brcs	.+30     	; 0x26b8 <__divsf3_pse+0x86>
    269a:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__fp_inf>
    269e:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__fp_szero>
    26a2:	5f 3f       	cpi	r21, 0xFF	; 255
    26a4:	e4 f3       	brlt	.-8      	; 0x269e <__divsf3_pse+0x6c>
    26a6:	98 3e       	cpi	r25, 0xE8	; 232
    26a8:	d4 f3       	brlt	.-12     	; 0x269e <__divsf3_pse+0x6c>
    26aa:	86 95       	lsr	r24
    26ac:	77 95       	ror	r23
    26ae:	67 95       	ror	r22
    26b0:	b7 95       	ror	r27
    26b2:	f7 95       	ror	r31
    26b4:	9f 5f       	subi	r25, 0xFF	; 255
    26b6:	c9 f7       	brne	.-14     	; 0x26aa <__divsf3_pse+0x78>
    26b8:	88 0f       	add	r24, r24
    26ba:	91 1d       	adc	r25, r1
    26bc:	96 95       	lsr	r25
    26be:	87 95       	ror	r24
    26c0:	97 f9       	bld	r25, 7
    26c2:	08 95       	ret
    26c4:	e1 e0       	ldi	r30, 0x01	; 1
    26c6:	66 0f       	add	r22, r22
    26c8:	77 1f       	adc	r23, r23
    26ca:	88 1f       	adc	r24, r24
    26cc:	bb 1f       	adc	r27, r27
    26ce:	62 17       	cp	r22, r18
    26d0:	73 07       	cpc	r23, r19
    26d2:	84 07       	cpc	r24, r20
    26d4:	ba 07       	cpc	r27, r26
    26d6:	20 f0       	brcs	.+8      	; 0x26e0 <__divsf3_pse+0xae>
    26d8:	62 1b       	sub	r22, r18
    26da:	73 0b       	sbc	r23, r19
    26dc:	84 0b       	sbc	r24, r20
    26de:	ba 0b       	sbc	r27, r26
    26e0:	ee 1f       	adc	r30, r30
    26e2:	88 f7       	brcc	.-30     	; 0x26c6 <__divsf3_pse+0x94>
    26e4:	e0 95       	com	r30
    26e6:	08 95       	ret

000026e8 <__floatunsisf>:
    26e8:	e8 94       	clt
    26ea:	09 c0       	rjmp	.+18     	; 0x26fe <__floatsisf+0x12>

000026ec <__floatsisf>:
    26ec:	97 fb       	bst	r25, 7
    26ee:	3e f4       	brtc	.+14     	; 0x26fe <__floatsisf+0x12>
    26f0:	90 95       	com	r25
    26f2:	80 95       	com	r24
    26f4:	70 95       	com	r23
    26f6:	61 95       	neg	r22
    26f8:	7f 4f       	sbci	r23, 0xFF	; 255
    26fa:	8f 4f       	sbci	r24, 0xFF	; 255
    26fc:	9f 4f       	sbci	r25, 0xFF	; 255
    26fe:	99 23       	and	r25, r25
    2700:	a9 f0       	breq	.+42     	; 0x272c <__floatsisf+0x40>
    2702:	f9 2f       	mov	r31, r25
    2704:	96 e9       	ldi	r25, 0x96	; 150
    2706:	bb 27       	eor	r27, r27
    2708:	93 95       	inc	r25
    270a:	f6 95       	lsr	r31
    270c:	87 95       	ror	r24
    270e:	77 95       	ror	r23
    2710:	67 95       	ror	r22
    2712:	b7 95       	ror	r27
    2714:	f1 11       	cpse	r31, r1
    2716:	f8 cf       	rjmp	.-16     	; 0x2708 <__floatsisf+0x1c>
    2718:	fa f4       	brpl	.+62     	; 0x2758 <__floatsisf+0x6c>
    271a:	bb 0f       	add	r27, r27
    271c:	11 f4       	brne	.+4      	; 0x2722 <__floatsisf+0x36>
    271e:	60 ff       	sbrs	r22, 0
    2720:	1b c0       	rjmp	.+54     	; 0x2758 <__floatsisf+0x6c>
    2722:	6f 5f       	subi	r22, 0xFF	; 255
    2724:	7f 4f       	sbci	r23, 0xFF	; 255
    2726:	8f 4f       	sbci	r24, 0xFF	; 255
    2728:	9f 4f       	sbci	r25, 0xFF	; 255
    272a:	16 c0       	rjmp	.+44     	; 0x2758 <__floatsisf+0x6c>
    272c:	88 23       	and	r24, r24
    272e:	11 f0       	breq	.+4      	; 0x2734 <__floatsisf+0x48>
    2730:	96 e9       	ldi	r25, 0x96	; 150
    2732:	11 c0       	rjmp	.+34     	; 0x2756 <__floatsisf+0x6a>
    2734:	77 23       	and	r23, r23
    2736:	21 f0       	breq	.+8      	; 0x2740 <__floatsisf+0x54>
    2738:	9e e8       	ldi	r25, 0x8E	; 142
    273a:	87 2f       	mov	r24, r23
    273c:	76 2f       	mov	r23, r22
    273e:	05 c0       	rjmp	.+10     	; 0x274a <__floatsisf+0x5e>
    2740:	66 23       	and	r22, r22
    2742:	71 f0       	breq	.+28     	; 0x2760 <__floatsisf+0x74>
    2744:	96 e8       	ldi	r25, 0x86	; 134
    2746:	86 2f       	mov	r24, r22
    2748:	70 e0       	ldi	r23, 0x00	; 0
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	2a f0       	brmi	.+10     	; 0x2758 <__floatsisf+0x6c>
    274e:	9a 95       	dec	r25
    2750:	66 0f       	add	r22, r22
    2752:	77 1f       	adc	r23, r23
    2754:	88 1f       	adc	r24, r24
    2756:	da f7       	brpl	.-10     	; 0x274e <__floatsisf+0x62>
    2758:	88 0f       	add	r24, r24
    275a:	96 95       	lsr	r25
    275c:	87 95       	ror	r24
    275e:	97 f9       	bld	r25, 7
    2760:	08 95       	ret

00002762 <__fp_cmp>:
    2762:	99 0f       	add	r25, r25
    2764:	00 08       	sbc	r0, r0
    2766:	55 0f       	add	r21, r21
    2768:	aa 0b       	sbc	r26, r26
    276a:	e0 e8       	ldi	r30, 0x80	; 128
    276c:	fe ef       	ldi	r31, 0xFE	; 254
    276e:	16 16       	cp	r1, r22
    2770:	17 06       	cpc	r1, r23
    2772:	e8 07       	cpc	r30, r24
    2774:	f9 07       	cpc	r31, r25
    2776:	c0 f0       	brcs	.+48     	; 0x27a8 <__fp_cmp+0x46>
    2778:	12 16       	cp	r1, r18
    277a:	13 06       	cpc	r1, r19
    277c:	e4 07       	cpc	r30, r20
    277e:	f5 07       	cpc	r31, r21
    2780:	98 f0       	brcs	.+38     	; 0x27a8 <__fp_cmp+0x46>
    2782:	62 1b       	sub	r22, r18
    2784:	73 0b       	sbc	r23, r19
    2786:	84 0b       	sbc	r24, r20
    2788:	95 0b       	sbc	r25, r21
    278a:	39 f4       	brne	.+14     	; 0x279a <__fp_cmp+0x38>
    278c:	0a 26       	eor	r0, r26
    278e:	61 f0       	breq	.+24     	; 0x27a8 <__fp_cmp+0x46>
    2790:	23 2b       	or	r18, r19
    2792:	24 2b       	or	r18, r20
    2794:	25 2b       	or	r18, r21
    2796:	21 f4       	brne	.+8      	; 0x27a0 <__fp_cmp+0x3e>
    2798:	08 95       	ret
    279a:	0a 26       	eor	r0, r26
    279c:	09 f4       	brne	.+2      	; 0x27a0 <__fp_cmp+0x3e>
    279e:	a1 40       	sbci	r26, 0x01	; 1
    27a0:	a6 95       	lsr	r26
    27a2:	8f ef       	ldi	r24, 0xFF	; 255
    27a4:	81 1d       	adc	r24, r1
    27a6:	81 1d       	adc	r24, r1
    27a8:	08 95       	ret

000027aa <__fp_inf>:
    27aa:	97 f9       	bld	r25, 7
    27ac:	9f 67       	ori	r25, 0x7F	; 127
    27ae:	80 e8       	ldi	r24, 0x80	; 128
    27b0:	70 e0       	ldi	r23, 0x00	; 0
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	08 95       	ret

000027b6 <__fp_nan>:
    27b6:	9f ef       	ldi	r25, 0xFF	; 255
    27b8:	80 ec       	ldi	r24, 0xC0	; 192
    27ba:	08 95       	ret

000027bc <__fp_pscA>:
    27bc:	00 24       	eor	r0, r0
    27be:	0a 94       	dec	r0
    27c0:	16 16       	cp	r1, r22
    27c2:	17 06       	cpc	r1, r23
    27c4:	18 06       	cpc	r1, r24
    27c6:	09 06       	cpc	r0, r25
    27c8:	08 95       	ret

000027ca <__fp_pscB>:
    27ca:	00 24       	eor	r0, r0
    27cc:	0a 94       	dec	r0
    27ce:	12 16       	cp	r1, r18
    27d0:	13 06       	cpc	r1, r19
    27d2:	14 06       	cpc	r1, r20
    27d4:	05 06       	cpc	r0, r21
    27d6:	08 95       	ret

000027d8 <__fp_round>:
    27d8:	09 2e       	mov	r0, r25
    27da:	03 94       	inc	r0
    27dc:	00 0c       	add	r0, r0
    27de:	11 f4       	brne	.+4      	; 0x27e4 <__fp_round+0xc>
    27e0:	88 23       	and	r24, r24
    27e2:	52 f0       	brmi	.+20     	; 0x27f8 <__fp_round+0x20>
    27e4:	bb 0f       	add	r27, r27
    27e6:	40 f4       	brcc	.+16     	; 0x27f8 <__fp_round+0x20>
    27e8:	bf 2b       	or	r27, r31
    27ea:	11 f4       	brne	.+4      	; 0x27f0 <__fp_round+0x18>
    27ec:	60 ff       	sbrs	r22, 0
    27ee:	04 c0       	rjmp	.+8      	; 0x27f8 <__fp_round+0x20>
    27f0:	6f 5f       	subi	r22, 0xFF	; 255
    27f2:	7f 4f       	sbci	r23, 0xFF	; 255
    27f4:	8f 4f       	sbci	r24, 0xFF	; 255
    27f6:	9f 4f       	sbci	r25, 0xFF	; 255
    27f8:	08 95       	ret

000027fa <__fp_split3>:
    27fa:	57 fd       	sbrc	r21, 7
    27fc:	90 58       	subi	r25, 0x80	; 128
    27fe:	44 0f       	add	r20, r20
    2800:	55 1f       	adc	r21, r21
    2802:	59 f0       	breq	.+22     	; 0x281a <__fp_splitA+0x10>
    2804:	5f 3f       	cpi	r21, 0xFF	; 255
    2806:	71 f0       	breq	.+28     	; 0x2824 <__fp_splitA+0x1a>
    2808:	47 95       	ror	r20

0000280a <__fp_splitA>:
    280a:	88 0f       	add	r24, r24
    280c:	97 fb       	bst	r25, 7
    280e:	99 1f       	adc	r25, r25
    2810:	61 f0       	breq	.+24     	; 0x282a <__fp_splitA+0x20>
    2812:	9f 3f       	cpi	r25, 0xFF	; 255
    2814:	79 f0       	breq	.+30     	; 0x2834 <__fp_splitA+0x2a>
    2816:	87 95       	ror	r24
    2818:	08 95       	ret
    281a:	12 16       	cp	r1, r18
    281c:	13 06       	cpc	r1, r19
    281e:	14 06       	cpc	r1, r20
    2820:	55 1f       	adc	r21, r21
    2822:	f2 cf       	rjmp	.-28     	; 0x2808 <__fp_split3+0xe>
    2824:	46 95       	lsr	r20
    2826:	f1 df       	rcall	.-30     	; 0x280a <__fp_splitA>
    2828:	08 c0       	rjmp	.+16     	; 0x283a <__fp_splitA+0x30>
    282a:	16 16       	cp	r1, r22
    282c:	17 06       	cpc	r1, r23
    282e:	18 06       	cpc	r1, r24
    2830:	99 1f       	adc	r25, r25
    2832:	f1 cf       	rjmp	.-30     	; 0x2816 <__fp_splitA+0xc>
    2834:	86 95       	lsr	r24
    2836:	71 05       	cpc	r23, r1
    2838:	61 05       	cpc	r22, r1
    283a:	08 94       	sec
    283c:	08 95       	ret

0000283e <__fp_zero>:
    283e:	e8 94       	clt

00002840 <__fp_szero>:
    2840:	bb 27       	eor	r27, r27
    2842:	66 27       	eor	r22, r22
    2844:	77 27       	eor	r23, r23
    2846:	cb 01       	movw	r24, r22
    2848:	97 f9       	bld	r25, 7
    284a:	08 95       	ret

0000284c <__gesf2>:
    284c:	0e 94 b1 13 	call	0x2762	; 0x2762 <__fp_cmp>
    2850:	08 f4       	brcc	.+2      	; 0x2854 <__gesf2+0x8>
    2852:	8f ef       	ldi	r24, 0xFF	; 255
    2854:	08 95       	ret

00002856 <__mulsf3>:
    2856:	0e 94 3e 14 	call	0x287c	; 0x287c <__mulsf3x>
    285a:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__fp_round>
    285e:	0e 94 de 13 	call	0x27bc	; 0x27bc <__fp_pscA>
    2862:	38 f0       	brcs	.+14     	; 0x2872 <__mulsf3+0x1c>
    2864:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__fp_pscB>
    2868:	20 f0       	brcs	.+8      	; 0x2872 <__mulsf3+0x1c>
    286a:	95 23       	and	r25, r21
    286c:	11 f0       	breq	.+4      	; 0x2872 <__mulsf3+0x1c>
    286e:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__fp_inf>
    2872:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__fp_nan>
    2876:	11 24       	eor	r1, r1
    2878:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__fp_szero>

0000287c <__mulsf3x>:
    287c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__fp_split3>
    2880:	70 f3       	brcs	.-36     	; 0x285e <__mulsf3+0x8>

00002882 <__mulsf3_pse>:
    2882:	95 9f       	mul	r25, r21
    2884:	c1 f3       	breq	.-16     	; 0x2876 <__mulsf3+0x20>
    2886:	95 0f       	add	r25, r21
    2888:	50 e0       	ldi	r21, 0x00	; 0
    288a:	55 1f       	adc	r21, r21
    288c:	62 9f       	mul	r22, r18
    288e:	f0 01       	movw	r30, r0
    2890:	72 9f       	mul	r23, r18
    2892:	bb 27       	eor	r27, r27
    2894:	f0 0d       	add	r31, r0
    2896:	b1 1d       	adc	r27, r1
    2898:	63 9f       	mul	r22, r19
    289a:	aa 27       	eor	r26, r26
    289c:	f0 0d       	add	r31, r0
    289e:	b1 1d       	adc	r27, r1
    28a0:	aa 1f       	adc	r26, r26
    28a2:	64 9f       	mul	r22, r20
    28a4:	66 27       	eor	r22, r22
    28a6:	b0 0d       	add	r27, r0
    28a8:	a1 1d       	adc	r26, r1
    28aa:	66 1f       	adc	r22, r22
    28ac:	82 9f       	mul	r24, r18
    28ae:	22 27       	eor	r18, r18
    28b0:	b0 0d       	add	r27, r0
    28b2:	a1 1d       	adc	r26, r1
    28b4:	62 1f       	adc	r22, r18
    28b6:	73 9f       	mul	r23, r19
    28b8:	b0 0d       	add	r27, r0
    28ba:	a1 1d       	adc	r26, r1
    28bc:	62 1f       	adc	r22, r18
    28be:	83 9f       	mul	r24, r19
    28c0:	a0 0d       	add	r26, r0
    28c2:	61 1d       	adc	r22, r1
    28c4:	22 1f       	adc	r18, r18
    28c6:	74 9f       	mul	r23, r20
    28c8:	33 27       	eor	r19, r19
    28ca:	a0 0d       	add	r26, r0
    28cc:	61 1d       	adc	r22, r1
    28ce:	23 1f       	adc	r18, r19
    28d0:	84 9f       	mul	r24, r20
    28d2:	60 0d       	add	r22, r0
    28d4:	21 1d       	adc	r18, r1
    28d6:	82 2f       	mov	r24, r18
    28d8:	76 2f       	mov	r23, r22
    28da:	6a 2f       	mov	r22, r26
    28dc:	11 24       	eor	r1, r1
    28de:	9f 57       	subi	r25, 0x7F	; 127
    28e0:	50 40       	sbci	r21, 0x00	; 0
    28e2:	9a f0       	brmi	.+38     	; 0x290a <__mulsf3_pse+0x88>
    28e4:	f1 f0       	breq	.+60     	; 0x2922 <__mulsf3_pse+0xa0>
    28e6:	88 23       	and	r24, r24
    28e8:	4a f0       	brmi	.+18     	; 0x28fc <__mulsf3_pse+0x7a>
    28ea:	ee 0f       	add	r30, r30
    28ec:	ff 1f       	adc	r31, r31
    28ee:	bb 1f       	adc	r27, r27
    28f0:	66 1f       	adc	r22, r22
    28f2:	77 1f       	adc	r23, r23
    28f4:	88 1f       	adc	r24, r24
    28f6:	91 50       	subi	r25, 0x01	; 1
    28f8:	50 40       	sbci	r21, 0x00	; 0
    28fa:	a9 f7       	brne	.-22     	; 0x28e6 <__mulsf3_pse+0x64>
    28fc:	9e 3f       	cpi	r25, 0xFE	; 254
    28fe:	51 05       	cpc	r21, r1
    2900:	80 f0       	brcs	.+32     	; 0x2922 <__mulsf3_pse+0xa0>
    2902:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__fp_inf>
    2906:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__fp_szero>
    290a:	5f 3f       	cpi	r21, 0xFF	; 255
    290c:	e4 f3       	brlt	.-8      	; 0x2906 <__mulsf3_pse+0x84>
    290e:	98 3e       	cpi	r25, 0xE8	; 232
    2910:	d4 f3       	brlt	.-12     	; 0x2906 <__mulsf3_pse+0x84>
    2912:	86 95       	lsr	r24
    2914:	77 95       	ror	r23
    2916:	67 95       	ror	r22
    2918:	b7 95       	ror	r27
    291a:	f7 95       	ror	r31
    291c:	e7 95       	ror	r30
    291e:	9f 5f       	subi	r25, 0xFF	; 255
    2920:	c1 f7       	brne	.-16     	; 0x2912 <__mulsf3_pse+0x90>
    2922:	fe 2b       	or	r31, r30
    2924:	88 0f       	add	r24, r24
    2926:	91 1d       	adc	r25, r1
    2928:	96 95       	lsr	r25
    292a:	87 95       	ror	r24
    292c:	97 f9       	bld	r25, 7
    292e:	08 95       	ret

00002930 <__udivmodsi4>:
    2930:	a1 e2       	ldi	r26, 0x21	; 33
    2932:	1a 2e       	mov	r1, r26
    2934:	aa 1b       	sub	r26, r26
    2936:	bb 1b       	sub	r27, r27
    2938:	fd 01       	movw	r30, r26
    293a:	0d c0       	rjmp	.+26     	; 0x2956 <__udivmodsi4_ep>

0000293c <__udivmodsi4_loop>:
    293c:	aa 1f       	adc	r26, r26
    293e:	bb 1f       	adc	r27, r27
    2940:	ee 1f       	adc	r30, r30
    2942:	ff 1f       	adc	r31, r31
    2944:	a2 17       	cp	r26, r18
    2946:	b3 07       	cpc	r27, r19
    2948:	e4 07       	cpc	r30, r20
    294a:	f5 07       	cpc	r31, r21
    294c:	20 f0       	brcs	.+8      	; 0x2956 <__udivmodsi4_ep>
    294e:	a2 1b       	sub	r26, r18
    2950:	b3 0b       	sbc	r27, r19
    2952:	e4 0b       	sbc	r30, r20
    2954:	f5 0b       	sbc	r31, r21

00002956 <__udivmodsi4_ep>:
    2956:	66 1f       	adc	r22, r22
    2958:	77 1f       	adc	r23, r23
    295a:	88 1f       	adc	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	1a 94       	dec	r1
    2960:	69 f7       	brne	.-38     	; 0x293c <__udivmodsi4_loop>
    2962:	60 95       	com	r22
    2964:	70 95       	com	r23
    2966:	80 95       	com	r24
    2968:	90 95       	com	r25
    296a:	9b 01       	movw	r18, r22
    296c:	ac 01       	movw	r20, r24
    296e:	bd 01       	movw	r22, r26
    2970:	cf 01       	movw	r24, r30
    2972:	08 95       	ret

00002974 <__divmodsi4>:
    2974:	05 2e       	mov	r0, r21
    2976:	97 fb       	bst	r25, 7
    2978:	1e f4       	brtc	.+6      	; 0x2980 <__divmodsi4+0xc>
    297a:	00 94       	com	r0
    297c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <__negsi2>
    2980:	57 fd       	sbrc	r21, 7
    2982:	07 d0       	rcall	.+14     	; 0x2992 <__divmodsi4_neg2>
    2984:	0e 94 98 14 	call	0x2930	; 0x2930 <__udivmodsi4>
    2988:	07 fc       	sbrc	r0, 7
    298a:	03 d0       	rcall	.+6      	; 0x2992 <__divmodsi4_neg2>
    298c:	4e f4       	brtc	.+18     	; 0x29a0 <__divmodsi4_exit>
    298e:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__negsi2>

00002992 <__divmodsi4_neg2>:
    2992:	50 95       	com	r21
    2994:	40 95       	com	r20
    2996:	30 95       	com	r19
    2998:	21 95       	neg	r18
    299a:	3f 4f       	sbci	r19, 0xFF	; 255
    299c:	4f 4f       	sbci	r20, 0xFF	; 255
    299e:	5f 4f       	sbci	r21, 0xFF	; 255

000029a0 <__divmodsi4_exit>:
    29a0:	08 95       	ret

000029a2 <__negsi2>:
    29a2:	90 95       	com	r25
    29a4:	80 95       	com	r24
    29a6:	70 95       	com	r23
    29a8:	61 95       	neg	r22
    29aa:	7f 4f       	sbci	r23, 0xFF	; 255
    29ac:	8f 4f       	sbci	r24, 0xFF	; 255
    29ae:	9f 4f       	sbci	r25, 0xFF	; 255
    29b0:	08 95       	ret

000029b2 <__tablejump2__>:
    29b2:	ee 0f       	add	r30, r30
    29b4:	ff 1f       	adc	r31, r31
    29b6:	05 90       	lpm	r0, Z+
    29b8:	f4 91       	lpm	r31, Z
    29ba:	e0 2d       	mov	r30, r0
    29bc:	09 94       	ijmp

000029be <sprintf>:
    29be:	ae e0       	ldi	r26, 0x0E	; 14
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	e5 ee       	ldi	r30, 0xE5	; 229
    29c4:	f4 e1       	ldi	r31, 0x14	; 20
    29c6:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__prologue_saves__+0x1c>
    29ca:	0d 89       	ldd	r16, Y+21	; 0x15
    29cc:	1e 89       	ldd	r17, Y+22	; 0x16
    29ce:	86 e0       	ldi	r24, 0x06	; 6
    29d0:	8c 83       	std	Y+4, r24	; 0x04
    29d2:	1a 83       	std	Y+2, r17	; 0x02
    29d4:	09 83       	std	Y+1, r16	; 0x01
    29d6:	8f ef       	ldi	r24, 0xFF	; 255
    29d8:	9f e7       	ldi	r25, 0x7F	; 127
    29da:	9e 83       	std	Y+6, r25	; 0x06
    29dc:	8d 83       	std	Y+5, r24	; 0x05
    29de:	ae 01       	movw	r20, r28
    29e0:	47 5e       	subi	r20, 0xE7	; 231
    29e2:	5f 4f       	sbci	r21, 0xFF	; 255
    29e4:	6f 89       	ldd	r22, Y+23	; 0x17
    29e6:	78 8d       	ldd	r23, Y+24	; 0x18
    29e8:	ce 01       	movw	r24, r28
    29ea:	01 96       	adiw	r24, 0x01	; 1
    29ec:	0e 94 02 15 	call	0x2a04	; 0x2a04 <vfprintf>
    29f0:	2f 81       	ldd	r18, Y+7	; 0x07
    29f2:	38 85       	ldd	r19, Y+8	; 0x08
    29f4:	f8 01       	movw	r30, r16
    29f6:	e2 0f       	add	r30, r18
    29f8:	f3 1f       	adc	r31, r19
    29fa:	10 82       	st	Z, r1
    29fc:	2e 96       	adiw	r28, 0x0e	; 14
    29fe:	e4 e0       	ldi	r30, 0x04	; 4
    2a00:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__epilogue_restores__+0x1c>

00002a04 <vfprintf>:
    2a04:	ac e0       	ldi	r26, 0x0C	; 12
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e8 e0       	ldi	r30, 0x08	; 8
    2a0a:	f5 e1       	ldi	r31, 0x15	; 21
    2a0c:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__prologue_saves__>
    2a10:	7c 01       	movw	r14, r24
    2a12:	6b 01       	movw	r12, r22
    2a14:	8a 01       	movw	r16, r20
    2a16:	fc 01       	movw	r30, r24
    2a18:	17 82       	std	Z+7, r1	; 0x07
    2a1a:	16 82       	std	Z+6, r1	; 0x06
    2a1c:	83 81       	ldd	r24, Z+3	; 0x03
    2a1e:	81 ff       	sbrs	r24, 1
    2a20:	bd c1       	rjmp	.+890    	; 0x2d9c <vfprintf+0x398>
    2a22:	ce 01       	movw	r24, r28
    2a24:	01 96       	adiw	r24, 0x01	; 1
    2a26:	4c 01       	movw	r8, r24
    2a28:	f7 01       	movw	r30, r14
    2a2a:	93 81       	ldd	r25, Z+3	; 0x03
    2a2c:	f6 01       	movw	r30, r12
    2a2e:	93 fd       	sbrc	r25, 3
    2a30:	85 91       	lpm	r24, Z+
    2a32:	93 ff       	sbrs	r25, 3
    2a34:	81 91       	ld	r24, Z+
    2a36:	6f 01       	movw	r12, r30
    2a38:	88 23       	and	r24, r24
    2a3a:	09 f4       	brne	.+2      	; 0x2a3e <vfprintf+0x3a>
    2a3c:	ab c1       	rjmp	.+854    	; 0x2d94 <vfprintf+0x390>
    2a3e:	85 32       	cpi	r24, 0x25	; 37
    2a40:	39 f4       	brne	.+14     	; 0x2a50 <vfprintf+0x4c>
    2a42:	93 fd       	sbrc	r25, 3
    2a44:	85 91       	lpm	r24, Z+
    2a46:	93 ff       	sbrs	r25, 3
    2a48:	81 91       	ld	r24, Z+
    2a4a:	6f 01       	movw	r12, r30
    2a4c:	85 32       	cpi	r24, 0x25	; 37
    2a4e:	29 f4       	brne	.+10     	; 0x2a5a <vfprintf+0x56>
    2a50:	b7 01       	movw	r22, r14
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2a58:	e7 cf       	rjmp	.-50     	; 0x2a28 <vfprintf+0x24>
    2a5a:	51 2c       	mov	r5, r1
    2a5c:	31 2c       	mov	r3, r1
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	20 32       	cpi	r18, 0x20	; 32
    2a62:	a0 f4       	brcc	.+40     	; 0x2a8c <vfprintf+0x88>
    2a64:	8b 32       	cpi	r24, 0x2B	; 43
    2a66:	69 f0       	breq	.+26     	; 0x2a82 <vfprintf+0x7e>
    2a68:	30 f4       	brcc	.+12     	; 0x2a76 <vfprintf+0x72>
    2a6a:	80 32       	cpi	r24, 0x20	; 32
    2a6c:	59 f0       	breq	.+22     	; 0x2a84 <vfprintf+0x80>
    2a6e:	83 32       	cpi	r24, 0x23	; 35
    2a70:	69 f4       	brne	.+26     	; 0x2a8c <vfprintf+0x88>
    2a72:	20 61       	ori	r18, 0x10	; 16
    2a74:	2c c0       	rjmp	.+88     	; 0x2ace <vfprintf+0xca>
    2a76:	8d 32       	cpi	r24, 0x2D	; 45
    2a78:	39 f0       	breq	.+14     	; 0x2a88 <vfprintf+0x84>
    2a7a:	80 33       	cpi	r24, 0x30	; 48
    2a7c:	39 f4       	brne	.+14     	; 0x2a8c <vfprintf+0x88>
    2a7e:	21 60       	ori	r18, 0x01	; 1
    2a80:	26 c0       	rjmp	.+76     	; 0x2ace <vfprintf+0xca>
    2a82:	22 60       	ori	r18, 0x02	; 2
    2a84:	24 60       	ori	r18, 0x04	; 4
    2a86:	23 c0       	rjmp	.+70     	; 0x2ace <vfprintf+0xca>
    2a88:	28 60       	ori	r18, 0x08	; 8
    2a8a:	21 c0       	rjmp	.+66     	; 0x2ace <vfprintf+0xca>
    2a8c:	27 fd       	sbrc	r18, 7
    2a8e:	27 c0       	rjmp	.+78     	; 0x2ade <vfprintf+0xda>
    2a90:	30 ed       	ldi	r19, 0xD0	; 208
    2a92:	38 0f       	add	r19, r24
    2a94:	3a 30       	cpi	r19, 0x0A	; 10
    2a96:	78 f4       	brcc	.+30     	; 0x2ab6 <vfprintf+0xb2>
    2a98:	26 ff       	sbrs	r18, 6
    2a9a:	06 c0       	rjmp	.+12     	; 0x2aa8 <vfprintf+0xa4>
    2a9c:	fa e0       	ldi	r31, 0x0A	; 10
    2a9e:	5f 9e       	mul	r5, r31
    2aa0:	30 0d       	add	r19, r0
    2aa2:	11 24       	eor	r1, r1
    2aa4:	53 2e       	mov	r5, r19
    2aa6:	13 c0       	rjmp	.+38     	; 0x2ace <vfprintf+0xca>
    2aa8:	8a e0       	ldi	r24, 0x0A	; 10
    2aaa:	38 9e       	mul	r3, r24
    2aac:	30 0d       	add	r19, r0
    2aae:	11 24       	eor	r1, r1
    2ab0:	33 2e       	mov	r3, r19
    2ab2:	20 62       	ori	r18, 0x20	; 32
    2ab4:	0c c0       	rjmp	.+24     	; 0x2ace <vfprintf+0xca>
    2ab6:	8e 32       	cpi	r24, 0x2E	; 46
    2ab8:	21 f4       	brne	.+8      	; 0x2ac2 <vfprintf+0xbe>
    2aba:	26 fd       	sbrc	r18, 6
    2abc:	6b c1       	rjmp	.+726    	; 0x2d94 <vfprintf+0x390>
    2abe:	20 64       	ori	r18, 0x40	; 64
    2ac0:	06 c0       	rjmp	.+12     	; 0x2ace <vfprintf+0xca>
    2ac2:	8c 36       	cpi	r24, 0x6C	; 108
    2ac4:	11 f4       	brne	.+4      	; 0x2aca <vfprintf+0xc6>
    2ac6:	20 68       	ori	r18, 0x80	; 128
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <vfprintf+0xca>
    2aca:	88 36       	cpi	r24, 0x68	; 104
    2acc:	41 f4       	brne	.+16     	; 0x2ade <vfprintf+0xda>
    2ace:	f6 01       	movw	r30, r12
    2ad0:	93 fd       	sbrc	r25, 3
    2ad2:	85 91       	lpm	r24, Z+
    2ad4:	93 ff       	sbrs	r25, 3
    2ad6:	81 91       	ld	r24, Z+
    2ad8:	6f 01       	movw	r12, r30
    2ada:	81 11       	cpse	r24, r1
    2adc:	c1 cf       	rjmp	.-126    	; 0x2a60 <vfprintf+0x5c>
    2ade:	98 2f       	mov	r25, r24
    2ae0:	9f 7d       	andi	r25, 0xDF	; 223
    2ae2:	95 54       	subi	r25, 0x45	; 69
    2ae4:	93 30       	cpi	r25, 0x03	; 3
    2ae6:	28 f4       	brcc	.+10     	; 0x2af2 <vfprintf+0xee>
    2ae8:	0c 5f       	subi	r16, 0xFC	; 252
    2aea:	1f 4f       	sbci	r17, 0xFF	; 255
    2aec:	ff e3       	ldi	r31, 0x3F	; 63
    2aee:	f9 83       	std	Y+1, r31	; 0x01
    2af0:	0d c0       	rjmp	.+26     	; 0x2b0c <vfprintf+0x108>
    2af2:	83 36       	cpi	r24, 0x63	; 99
    2af4:	31 f0       	breq	.+12     	; 0x2b02 <vfprintf+0xfe>
    2af6:	83 37       	cpi	r24, 0x73	; 115
    2af8:	71 f0       	breq	.+28     	; 0x2b16 <vfprintf+0x112>
    2afa:	83 35       	cpi	r24, 0x53	; 83
    2afc:	09 f0       	breq	.+2      	; 0x2b00 <vfprintf+0xfc>
    2afe:	5b c0       	rjmp	.+182    	; 0x2bb6 <vfprintf+0x1b2>
    2b00:	22 c0       	rjmp	.+68     	; 0x2b46 <vfprintf+0x142>
    2b02:	f8 01       	movw	r30, r16
    2b04:	80 81       	ld	r24, Z
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	0e 5f       	subi	r16, 0xFE	; 254
    2b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0c:	44 24       	eor	r4, r4
    2b0e:	43 94       	inc	r4
    2b10:	51 2c       	mov	r5, r1
    2b12:	54 01       	movw	r10, r8
    2b14:	15 c0       	rjmp	.+42     	; 0x2b40 <vfprintf+0x13c>
    2b16:	38 01       	movw	r6, r16
    2b18:	f2 e0       	ldi	r31, 0x02	; 2
    2b1a:	6f 0e       	add	r6, r31
    2b1c:	71 1c       	adc	r7, r1
    2b1e:	f8 01       	movw	r30, r16
    2b20:	a0 80       	ld	r10, Z
    2b22:	b1 80       	ldd	r11, Z+1	; 0x01
    2b24:	26 ff       	sbrs	r18, 6
    2b26:	03 c0       	rjmp	.+6      	; 0x2b2e <vfprintf+0x12a>
    2b28:	65 2d       	mov	r22, r5
    2b2a:	70 e0       	ldi	r23, 0x00	; 0
    2b2c:	02 c0       	rjmp	.+4      	; 0x2b32 <vfprintf+0x12e>
    2b2e:	6f ef       	ldi	r22, 0xFF	; 255
    2b30:	7f ef       	ldi	r23, 0xFF	; 255
    2b32:	c5 01       	movw	r24, r10
    2b34:	2c 87       	std	Y+12, r18	; 0x0c
    2b36:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <strnlen>
    2b3a:	2c 01       	movw	r4, r24
    2b3c:	83 01       	movw	r16, r6
    2b3e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b40:	2f 77       	andi	r18, 0x7F	; 127
    2b42:	22 2e       	mov	r2, r18
    2b44:	17 c0       	rjmp	.+46     	; 0x2b74 <vfprintf+0x170>
    2b46:	38 01       	movw	r6, r16
    2b48:	f2 e0       	ldi	r31, 0x02	; 2
    2b4a:	6f 0e       	add	r6, r31
    2b4c:	71 1c       	adc	r7, r1
    2b4e:	f8 01       	movw	r30, r16
    2b50:	a0 80       	ld	r10, Z
    2b52:	b1 80       	ldd	r11, Z+1	; 0x01
    2b54:	26 ff       	sbrs	r18, 6
    2b56:	03 c0       	rjmp	.+6      	; 0x2b5e <vfprintf+0x15a>
    2b58:	65 2d       	mov	r22, r5
    2b5a:	70 e0       	ldi	r23, 0x00	; 0
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <vfprintf+0x15e>
    2b5e:	6f ef       	ldi	r22, 0xFF	; 255
    2b60:	7f ef       	ldi	r23, 0xFF	; 255
    2b62:	c5 01       	movw	r24, r10
    2b64:	2c 87       	std	Y+12, r18	; 0x0c
    2b66:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <strnlen_P>
    2b6a:	2c 01       	movw	r4, r24
    2b6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b6e:	20 68       	ori	r18, 0x80	; 128
    2b70:	22 2e       	mov	r2, r18
    2b72:	83 01       	movw	r16, r6
    2b74:	23 fc       	sbrc	r2, 3
    2b76:	1b c0       	rjmp	.+54     	; 0x2bae <vfprintf+0x1aa>
    2b78:	83 2d       	mov	r24, r3
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	48 16       	cp	r4, r24
    2b7e:	59 06       	cpc	r5, r25
    2b80:	b0 f4       	brcc	.+44     	; 0x2bae <vfprintf+0x1aa>
    2b82:	b7 01       	movw	r22, r14
    2b84:	80 e2       	ldi	r24, 0x20	; 32
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2b8c:	3a 94       	dec	r3
    2b8e:	f4 cf       	rjmp	.-24     	; 0x2b78 <vfprintf+0x174>
    2b90:	f5 01       	movw	r30, r10
    2b92:	27 fc       	sbrc	r2, 7
    2b94:	85 91       	lpm	r24, Z+
    2b96:	27 fe       	sbrs	r2, 7
    2b98:	81 91       	ld	r24, Z+
    2b9a:	5f 01       	movw	r10, r30
    2b9c:	b7 01       	movw	r22, r14
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2ba4:	31 10       	cpse	r3, r1
    2ba6:	3a 94       	dec	r3
    2ba8:	f1 e0       	ldi	r31, 0x01	; 1
    2baa:	4f 1a       	sub	r4, r31
    2bac:	51 08       	sbc	r5, r1
    2bae:	41 14       	cp	r4, r1
    2bb0:	51 04       	cpc	r5, r1
    2bb2:	71 f7       	brne	.-36     	; 0x2b90 <vfprintf+0x18c>
    2bb4:	e5 c0       	rjmp	.+458    	; 0x2d80 <vfprintf+0x37c>
    2bb6:	84 36       	cpi	r24, 0x64	; 100
    2bb8:	11 f0       	breq	.+4      	; 0x2bbe <vfprintf+0x1ba>
    2bba:	89 36       	cpi	r24, 0x69	; 105
    2bbc:	39 f5       	brne	.+78     	; 0x2c0c <vfprintf+0x208>
    2bbe:	f8 01       	movw	r30, r16
    2bc0:	27 ff       	sbrs	r18, 7
    2bc2:	07 c0       	rjmp	.+14     	; 0x2bd2 <vfprintf+0x1ce>
    2bc4:	60 81       	ld	r22, Z
    2bc6:	71 81       	ldd	r23, Z+1	; 0x01
    2bc8:	82 81       	ldd	r24, Z+2	; 0x02
    2bca:	93 81       	ldd	r25, Z+3	; 0x03
    2bcc:	0c 5f       	subi	r16, 0xFC	; 252
    2bce:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd0:	08 c0       	rjmp	.+16     	; 0x2be2 <vfprintf+0x1de>
    2bd2:	60 81       	ld	r22, Z
    2bd4:	71 81       	ldd	r23, Z+1	; 0x01
    2bd6:	07 2e       	mov	r0, r23
    2bd8:	00 0c       	add	r0, r0
    2bda:	88 0b       	sbc	r24, r24
    2bdc:	99 0b       	sbc	r25, r25
    2bde:	0e 5f       	subi	r16, 0xFE	; 254
    2be0:	1f 4f       	sbci	r17, 0xFF	; 255
    2be2:	2f 76       	andi	r18, 0x6F	; 111
    2be4:	72 2e       	mov	r7, r18
    2be6:	97 ff       	sbrs	r25, 7
    2be8:	09 c0       	rjmp	.+18     	; 0x2bfc <vfprintf+0x1f8>
    2bea:	90 95       	com	r25
    2bec:	80 95       	com	r24
    2bee:	70 95       	com	r23
    2bf0:	61 95       	neg	r22
    2bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf4:	8f 4f       	sbci	r24, 0xFF	; 255
    2bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf8:	20 68       	ori	r18, 0x80	; 128
    2bfa:	72 2e       	mov	r7, r18
    2bfc:	2a e0       	ldi	r18, 0x0A	; 10
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	a4 01       	movw	r20, r8
    2c02:	0e 94 22 17 	call	0x2e44	; 0x2e44 <__ultoa_invert>
    2c06:	a8 2e       	mov	r10, r24
    2c08:	a8 18       	sub	r10, r8
    2c0a:	44 c0       	rjmp	.+136    	; 0x2c94 <vfprintf+0x290>
    2c0c:	85 37       	cpi	r24, 0x75	; 117
    2c0e:	29 f4       	brne	.+10     	; 0x2c1a <vfprintf+0x216>
    2c10:	2f 7e       	andi	r18, 0xEF	; 239
    2c12:	b2 2e       	mov	r11, r18
    2c14:	2a e0       	ldi	r18, 0x0A	; 10
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	25 c0       	rjmp	.+74     	; 0x2c64 <vfprintf+0x260>
    2c1a:	f2 2f       	mov	r31, r18
    2c1c:	f9 7f       	andi	r31, 0xF9	; 249
    2c1e:	bf 2e       	mov	r11, r31
    2c20:	8f 36       	cpi	r24, 0x6F	; 111
    2c22:	c1 f0       	breq	.+48     	; 0x2c54 <vfprintf+0x250>
    2c24:	18 f4       	brcc	.+6      	; 0x2c2c <vfprintf+0x228>
    2c26:	88 35       	cpi	r24, 0x58	; 88
    2c28:	79 f0       	breq	.+30     	; 0x2c48 <vfprintf+0x244>
    2c2a:	b4 c0       	rjmp	.+360    	; 0x2d94 <vfprintf+0x390>
    2c2c:	80 37       	cpi	r24, 0x70	; 112
    2c2e:	19 f0       	breq	.+6      	; 0x2c36 <vfprintf+0x232>
    2c30:	88 37       	cpi	r24, 0x78	; 120
    2c32:	21 f0       	breq	.+8      	; 0x2c3c <vfprintf+0x238>
    2c34:	af c0       	rjmp	.+350    	; 0x2d94 <vfprintf+0x390>
    2c36:	2f 2f       	mov	r18, r31
    2c38:	20 61       	ori	r18, 0x10	; 16
    2c3a:	b2 2e       	mov	r11, r18
    2c3c:	b4 fe       	sbrs	r11, 4
    2c3e:	0d c0       	rjmp	.+26     	; 0x2c5a <vfprintf+0x256>
    2c40:	8b 2d       	mov	r24, r11
    2c42:	84 60       	ori	r24, 0x04	; 4
    2c44:	b8 2e       	mov	r11, r24
    2c46:	09 c0       	rjmp	.+18     	; 0x2c5a <vfprintf+0x256>
    2c48:	24 ff       	sbrs	r18, 4
    2c4a:	0a c0       	rjmp	.+20     	; 0x2c60 <vfprintf+0x25c>
    2c4c:	9f 2f       	mov	r25, r31
    2c4e:	96 60       	ori	r25, 0x06	; 6
    2c50:	b9 2e       	mov	r11, r25
    2c52:	06 c0       	rjmp	.+12     	; 0x2c60 <vfprintf+0x25c>
    2c54:	28 e0       	ldi	r18, 0x08	; 8
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	05 c0       	rjmp	.+10     	; 0x2c64 <vfprintf+0x260>
    2c5a:	20 e1       	ldi	r18, 0x10	; 16
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <vfprintf+0x260>
    2c60:	20 e1       	ldi	r18, 0x10	; 16
    2c62:	32 e0       	ldi	r19, 0x02	; 2
    2c64:	f8 01       	movw	r30, r16
    2c66:	b7 fe       	sbrs	r11, 7
    2c68:	07 c0       	rjmp	.+14     	; 0x2c78 <vfprintf+0x274>
    2c6a:	60 81       	ld	r22, Z
    2c6c:	71 81       	ldd	r23, Z+1	; 0x01
    2c6e:	82 81       	ldd	r24, Z+2	; 0x02
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	0c 5f       	subi	r16, 0xFC	; 252
    2c74:	1f 4f       	sbci	r17, 0xFF	; 255
    2c76:	06 c0       	rjmp	.+12     	; 0x2c84 <vfprintf+0x280>
    2c78:	60 81       	ld	r22, Z
    2c7a:	71 81       	ldd	r23, Z+1	; 0x01
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 5f       	subi	r16, 0xFE	; 254
    2c82:	1f 4f       	sbci	r17, 0xFF	; 255
    2c84:	a4 01       	movw	r20, r8
    2c86:	0e 94 22 17 	call	0x2e44	; 0x2e44 <__ultoa_invert>
    2c8a:	a8 2e       	mov	r10, r24
    2c8c:	a8 18       	sub	r10, r8
    2c8e:	fb 2d       	mov	r31, r11
    2c90:	ff 77       	andi	r31, 0x7F	; 127
    2c92:	7f 2e       	mov	r7, r31
    2c94:	76 fe       	sbrs	r7, 6
    2c96:	0b c0       	rjmp	.+22     	; 0x2cae <vfprintf+0x2aa>
    2c98:	37 2d       	mov	r19, r7
    2c9a:	3e 7f       	andi	r19, 0xFE	; 254
    2c9c:	a5 14       	cp	r10, r5
    2c9e:	50 f4       	brcc	.+20     	; 0x2cb4 <vfprintf+0x2b0>
    2ca0:	74 fe       	sbrs	r7, 4
    2ca2:	0a c0       	rjmp	.+20     	; 0x2cb8 <vfprintf+0x2b4>
    2ca4:	72 fc       	sbrc	r7, 2
    2ca6:	08 c0       	rjmp	.+16     	; 0x2cb8 <vfprintf+0x2b4>
    2ca8:	37 2d       	mov	r19, r7
    2caa:	3e 7e       	andi	r19, 0xEE	; 238
    2cac:	05 c0       	rjmp	.+10     	; 0x2cb8 <vfprintf+0x2b4>
    2cae:	ba 2c       	mov	r11, r10
    2cb0:	37 2d       	mov	r19, r7
    2cb2:	03 c0       	rjmp	.+6      	; 0x2cba <vfprintf+0x2b6>
    2cb4:	ba 2c       	mov	r11, r10
    2cb6:	01 c0       	rjmp	.+2      	; 0x2cba <vfprintf+0x2b6>
    2cb8:	b5 2c       	mov	r11, r5
    2cba:	34 ff       	sbrs	r19, 4
    2cbc:	0d c0       	rjmp	.+26     	; 0x2cd8 <vfprintf+0x2d4>
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	ea 0d       	add	r30, r10
    2cc2:	f1 1d       	adc	r31, r1
    2cc4:	80 81       	ld	r24, Z
    2cc6:	80 33       	cpi	r24, 0x30	; 48
    2cc8:	11 f4       	brne	.+4      	; 0x2cce <vfprintf+0x2ca>
    2cca:	39 7e       	andi	r19, 0xE9	; 233
    2ccc:	09 c0       	rjmp	.+18     	; 0x2ce0 <vfprintf+0x2dc>
    2cce:	32 ff       	sbrs	r19, 2
    2cd0:	06 c0       	rjmp	.+12     	; 0x2cde <vfprintf+0x2da>
    2cd2:	b3 94       	inc	r11
    2cd4:	b3 94       	inc	r11
    2cd6:	04 c0       	rjmp	.+8      	; 0x2ce0 <vfprintf+0x2dc>
    2cd8:	83 2f       	mov	r24, r19
    2cda:	86 78       	andi	r24, 0x86	; 134
    2cdc:	09 f0       	breq	.+2      	; 0x2ce0 <vfprintf+0x2dc>
    2cde:	b3 94       	inc	r11
    2ce0:	33 fd       	sbrc	r19, 3
    2ce2:	13 c0       	rjmp	.+38     	; 0x2d0a <vfprintf+0x306>
    2ce4:	30 ff       	sbrs	r19, 0
    2ce6:	06 c0       	rjmp	.+12     	; 0x2cf4 <vfprintf+0x2f0>
    2ce8:	5a 2c       	mov	r5, r10
    2cea:	b3 14       	cp	r11, r3
    2cec:	18 f4       	brcc	.+6      	; 0x2cf4 <vfprintf+0x2f0>
    2cee:	53 0c       	add	r5, r3
    2cf0:	5b 18       	sub	r5, r11
    2cf2:	b3 2c       	mov	r11, r3
    2cf4:	b3 14       	cp	r11, r3
    2cf6:	68 f4       	brcc	.+26     	; 0x2d12 <vfprintf+0x30e>
    2cf8:	b7 01       	movw	r22, r14
    2cfa:	80 e2       	ldi	r24, 0x20	; 32
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	3c 87       	std	Y+12, r19	; 0x0c
    2d00:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2d04:	b3 94       	inc	r11
    2d06:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d08:	f5 cf       	rjmp	.-22     	; 0x2cf4 <vfprintf+0x2f0>
    2d0a:	b3 14       	cp	r11, r3
    2d0c:	10 f4       	brcc	.+4      	; 0x2d12 <vfprintf+0x30e>
    2d0e:	3b 18       	sub	r3, r11
    2d10:	01 c0       	rjmp	.+2      	; 0x2d14 <vfprintf+0x310>
    2d12:	31 2c       	mov	r3, r1
    2d14:	34 ff       	sbrs	r19, 4
    2d16:	12 c0       	rjmp	.+36     	; 0x2d3c <vfprintf+0x338>
    2d18:	b7 01       	movw	r22, r14
    2d1a:	80 e3       	ldi	r24, 0x30	; 48
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	3c 87       	std	Y+12, r19	; 0x0c
    2d20:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2d24:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d26:	32 ff       	sbrs	r19, 2
    2d28:	17 c0       	rjmp	.+46     	; 0x2d58 <vfprintf+0x354>
    2d2a:	31 fd       	sbrc	r19, 1
    2d2c:	03 c0       	rjmp	.+6      	; 0x2d34 <vfprintf+0x330>
    2d2e:	88 e7       	ldi	r24, 0x78	; 120
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	02 c0       	rjmp	.+4      	; 0x2d38 <vfprintf+0x334>
    2d34:	88 e5       	ldi	r24, 0x58	; 88
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	b7 01       	movw	r22, r14
    2d3a:	0c c0       	rjmp	.+24     	; 0x2d54 <vfprintf+0x350>
    2d3c:	83 2f       	mov	r24, r19
    2d3e:	86 78       	andi	r24, 0x86	; 134
    2d40:	59 f0       	breq	.+22     	; 0x2d58 <vfprintf+0x354>
    2d42:	31 ff       	sbrs	r19, 1
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <vfprintf+0x346>
    2d46:	8b e2       	ldi	r24, 0x2B	; 43
    2d48:	01 c0       	rjmp	.+2      	; 0x2d4c <vfprintf+0x348>
    2d4a:	80 e2       	ldi	r24, 0x20	; 32
    2d4c:	37 fd       	sbrc	r19, 7
    2d4e:	8d e2       	ldi	r24, 0x2D	; 45
    2d50:	b7 01       	movw	r22, r14
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2d58:	a5 14       	cp	r10, r5
    2d5a:	38 f4       	brcc	.+14     	; 0x2d6a <vfprintf+0x366>
    2d5c:	b7 01       	movw	r22, r14
    2d5e:	80 e3       	ldi	r24, 0x30	; 48
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2d66:	5a 94       	dec	r5
    2d68:	f7 cf       	rjmp	.-18     	; 0x2d58 <vfprintf+0x354>
    2d6a:	aa 94       	dec	r10
    2d6c:	f4 01       	movw	r30, r8
    2d6e:	ea 0d       	add	r30, r10
    2d70:	f1 1d       	adc	r31, r1
    2d72:	80 81       	ld	r24, Z
    2d74:	b7 01       	movw	r22, r14
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2d7c:	a1 10       	cpse	r10, r1
    2d7e:	f5 cf       	rjmp	.-22     	; 0x2d6a <vfprintf+0x366>
    2d80:	33 20       	and	r3, r3
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <vfprintf+0x382>
    2d84:	51 ce       	rjmp	.-862    	; 0x2a28 <vfprintf+0x24>
    2d86:	b7 01       	movw	r22, r14
    2d88:	80 e2       	ldi	r24, 0x20	; 32
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <fputc>
    2d90:	3a 94       	dec	r3
    2d92:	f6 cf       	rjmp	.-20     	; 0x2d80 <vfprintf+0x37c>
    2d94:	f7 01       	movw	r30, r14
    2d96:	86 81       	ldd	r24, Z+6	; 0x06
    2d98:	97 81       	ldd	r25, Z+7	; 0x07
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <vfprintf+0x39c>
    2d9c:	8f ef       	ldi	r24, 0xFF	; 255
    2d9e:	9f ef       	ldi	r25, 0xFF	; 255
    2da0:	2c 96       	adiw	r28, 0x0c	; 12
    2da2:	e2 e1       	ldi	r30, 0x12	; 18
    2da4:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__epilogue_restores__>

00002da8 <strnlen_P>:
    2da8:	fc 01       	movw	r30, r24
    2daa:	05 90       	lpm	r0, Z+
    2dac:	61 50       	subi	r22, 0x01	; 1
    2dae:	70 40       	sbci	r23, 0x00	; 0
    2db0:	01 10       	cpse	r0, r1
    2db2:	d8 f7       	brcc	.-10     	; 0x2daa <strnlen_P+0x2>
    2db4:	80 95       	com	r24
    2db6:	90 95       	com	r25
    2db8:	8e 0f       	add	r24, r30
    2dba:	9f 1f       	adc	r25, r31
    2dbc:	08 95       	ret

00002dbe <strnlen>:
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	61 50       	subi	r22, 0x01	; 1
    2dc2:	70 40       	sbci	r23, 0x00	; 0
    2dc4:	01 90       	ld	r0, Z+
    2dc6:	01 10       	cpse	r0, r1
    2dc8:	d8 f7       	brcc	.-10     	; 0x2dc0 <strnlen+0x2>
    2dca:	80 95       	com	r24
    2dcc:	90 95       	com	r25
    2dce:	8e 0f       	add	r24, r30
    2dd0:	9f 1f       	adc	r25, r31
    2dd2:	08 95       	ret

00002dd4 <fputc>:
    2dd4:	0f 93       	push	r16
    2dd6:	1f 93       	push	r17
    2dd8:	cf 93       	push	r28
    2dda:	df 93       	push	r29
    2ddc:	fb 01       	movw	r30, r22
    2dde:	23 81       	ldd	r18, Z+3	; 0x03
    2de0:	21 fd       	sbrc	r18, 1
    2de2:	03 c0       	rjmp	.+6      	; 0x2dea <fputc+0x16>
    2de4:	8f ef       	ldi	r24, 0xFF	; 255
    2de6:	9f ef       	ldi	r25, 0xFF	; 255
    2de8:	28 c0       	rjmp	.+80     	; 0x2e3a <fputc+0x66>
    2dea:	22 ff       	sbrs	r18, 2
    2dec:	16 c0       	rjmp	.+44     	; 0x2e1a <fputc+0x46>
    2dee:	46 81       	ldd	r20, Z+6	; 0x06
    2df0:	57 81       	ldd	r21, Z+7	; 0x07
    2df2:	24 81       	ldd	r18, Z+4	; 0x04
    2df4:	35 81       	ldd	r19, Z+5	; 0x05
    2df6:	42 17       	cp	r20, r18
    2df8:	53 07       	cpc	r21, r19
    2dfa:	44 f4       	brge	.+16     	; 0x2e0c <fputc+0x38>
    2dfc:	a0 81       	ld	r26, Z
    2dfe:	b1 81       	ldd	r27, Z+1	; 0x01
    2e00:	9d 01       	movw	r18, r26
    2e02:	2f 5f       	subi	r18, 0xFF	; 255
    2e04:	3f 4f       	sbci	r19, 0xFF	; 255
    2e06:	31 83       	std	Z+1, r19	; 0x01
    2e08:	20 83       	st	Z, r18
    2e0a:	8c 93       	st	X, r24
    2e0c:	26 81       	ldd	r18, Z+6	; 0x06
    2e0e:	37 81       	ldd	r19, Z+7	; 0x07
    2e10:	2f 5f       	subi	r18, 0xFF	; 255
    2e12:	3f 4f       	sbci	r19, 0xFF	; 255
    2e14:	37 83       	std	Z+7, r19	; 0x07
    2e16:	26 83       	std	Z+6, r18	; 0x06
    2e18:	10 c0       	rjmp	.+32     	; 0x2e3a <fputc+0x66>
    2e1a:	eb 01       	movw	r28, r22
    2e1c:	09 2f       	mov	r16, r25
    2e1e:	18 2f       	mov	r17, r24
    2e20:	00 84       	ldd	r0, Z+8	; 0x08
    2e22:	f1 85       	ldd	r31, Z+9	; 0x09
    2e24:	e0 2d       	mov	r30, r0
    2e26:	09 95       	icall
    2e28:	89 2b       	or	r24, r25
    2e2a:	e1 f6       	brne	.-72     	; 0x2de4 <fputc+0x10>
    2e2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e2e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e30:	01 96       	adiw	r24, 0x01	; 1
    2e32:	9f 83       	std	Y+7, r25	; 0x07
    2e34:	8e 83       	std	Y+6, r24	; 0x06
    2e36:	81 2f       	mov	r24, r17
    2e38:	90 2f       	mov	r25, r16
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	1f 91       	pop	r17
    2e40:	0f 91       	pop	r16
    2e42:	08 95       	ret

00002e44 <__ultoa_invert>:
    2e44:	fa 01       	movw	r30, r20
    2e46:	aa 27       	eor	r26, r26
    2e48:	28 30       	cpi	r18, 0x08	; 8
    2e4a:	51 f1       	breq	.+84     	; 0x2ea0 <__ultoa_invert+0x5c>
    2e4c:	20 31       	cpi	r18, 0x10	; 16
    2e4e:	81 f1       	breq	.+96     	; 0x2eb0 <__ultoa_invert+0x6c>
    2e50:	e8 94       	clt
    2e52:	6f 93       	push	r22
    2e54:	6e 7f       	andi	r22, 0xFE	; 254
    2e56:	6e 5f       	subi	r22, 0xFE	; 254
    2e58:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e5e:	af 4f       	sbci	r26, 0xFF	; 255
    2e60:	b1 e0       	ldi	r27, 0x01	; 1
    2e62:	3e d0       	rcall	.+124    	; 0x2ee0 <__ultoa_invert+0x9c>
    2e64:	b4 e0       	ldi	r27, 0x04	; 4
    2e66:	3c d0       	rcall	.+120    	; 0x2ee0 <__ultoa_invert+0x9c>
    2e68:	67 0f       	add	r22, r23
    2e6a:	78 1f       	adc	r23, r24
    2e6c:	89 1f       	adc	r24, r25
    2e6e:	9a 1f       	adc	r25, r26
    2e70:	a1 1d       	adc	r26, r1
    2e72:	68 0f       	add	r22, r24
    2e74:	79 1f       	adc	r23, r25
    2e76:	8a 1f       	adc	r24, r26
    2e78:	91 1d       	adc	r25, r1
    2e7a:	a1 1d       	adc	r26, r1
    2e7c:	6a 0f       	add	r22, r26
    2e7e:	71 1d       	adc	r23, r1
    2e80:	81 1d       	adc	r24, r1
    2e82:	91 1d       	adc	r25, r1
    2e84:	a1 1d       	adc	r26, r1
    2e86:	20 d0       	rcall	.+64     	; 0x2ec8 <__ultoa_invert+0x84>
    2e88:	09 f4       	brne	.+2      	; 0x2e8c <__ultoa_invert+0x48>
    2e8a:	68 94       	set
    2e8c:	3f 91       	pop	r19
    2e8e:	2a e0       	ldi	r18, 0x0A	; 10
    2e90:	26 9f       	mul	r18, r22
    2e92:	11 24       	eor	r1, r1
    2e94:	30 19       	sub	r19, r0
    2e96:	30 5d       	subi	r19, 0xD0	; 208
    2e98:	31 93       	st	Z+, r19
    2e9a:	de f6       	brtc	.-74     	; 0x2e52 <__ultoa_invert+0xe>
    2e9c:	cf 01       	movw	r24, r30
    2e9e:	08 95       	ret
    2ea0:	46 2f       	mov	r20, r22
    2ea2:	47 70       	andi	r20, 0x07	; 7
    2ea4:	40 5d       	subi	r20, 0xD0	; 208
    2ea6:	41 93       	st	Z+, r20
    2ea8:	b3 e0       	ldi	r27, 0x03	; 3
    2eaa:	0f d0       	rcall	.+30     	; 0x2eca <__ultoa_invert+0x86>
    2eac:	c9 f7       	brne	.-14     	; 0x2ea0 <__ultoa_invert+0x5c>
    2eae:	f6 cf       	rjmp	.-20     	; 0x2e9c <__ultoa_invert+0x58>
    2eb0:	46 2f       	mov	r20, r22
    2eb2:	4f 70       	andi	r20, 0x0F	; 15
    2eb4:	40 5d       	subi	r20, 0xD0	; 208
    2eb6:	4a 33       	cpi	r20, 0x3A	; 58
    2eb8:	18 f0       	brcs	.+6      	; 0x2ec0 <__ultoa_invert+0x7c>
    2eba:	49 5d       	subi	r20, 0xD9	; 217
    2ebc:	31 fd       	sbrc	r19, 1
    2ebe:	40 52       	subi	r20, 0x20	; 32
    2ec0:	41 93       	st	Z+, r20
    2ec2:	02 d0       	rcall	.+4      	; 0x2ec8 <__ultoa_invert+0x84>
    2ec4:	a9 f7       	brne	.-22     	; 0x2eb0 <__ultoa_invert+0x6c>
    2ec6:	ea cf       	rjmp	.-44     	; 0x2e9c <__ultoa_invert+0x58>
    2ec8:	b4 e0       	ldi	r27, 0x04	; 4
    2eca:	a6 95       	lsr	r26
    2ecc:	97 95       	ror	r25
    2ece:	87 95       	ror	r24
    2ed0:	77 95       	ror	r23
    2ed2:	67 95       	ror	r22
    2ed4:	ba 95       	dec	r27
    2ed6:	c9 f7       	brne	.-14     	; 0x2eca <__ultoa_invert+0x86>
    2ed8:	00 97       	sbiw	r24, 0x00	; 0
    2eda:	61 05       	cpc	r22, r1
    2edc:	71 05       	cpc	r23, r1
    2ede:	08 95       	ret
    2ee0:	9b 01       	movw	r18, r22
    2ee2:	ac 01       	movw	r20, r24
    2ee4:	0a 2e       	mov	r0, r26
    2ee6:	06 94       	lsr	r0
    2ee8:	57 95       	ror	r21
    2eea:	47 95       	ror	r20
    2eec:	37 95       	ror	r19
    2eee:	27 95       	ror	r18
    2ef0:	ba 95       	dec	r27
    2ef2:	c9 f7       	brne	.-14     	; 0x2ee6 <__ultoa_invert+0xa2>
    2ef4:	62 0f       	add	r22, r18
    2ef6:	73 1f       	adc	r23, r19
    2ef8:	84 1f       	adc	r24, r20
    2efa:	95 1f       	adc	r25, r21
    2efc:	a0 1d       	adc	r26, r0
    2efe:	08 95       	ret

00002f00 <__prologue_saves__>:
    2f00:	2f 92       	push	r2
    2f02:	3f 92       	push	r3
    2f04:	4f 92       	push	r4
    2f06:	5f 92       	push	r5
    2f08:	6f 92       	push	r6
    2f0a:	7f 92       	push	r7
    2f0c:	8f 92       	push	r8
    2f0e:	9f 92       	push	r9
    2f10:	af 92       	push	r10
    2f12:	bf 92       	push	r11
    2f14:	cf 92       	push	r12
    2f16:	df 92       	push	r13
    2f18:	ef 92       	push	r14
    2f1a:	ff 92       	push	r15
    2f1c:	0f 93       	push	r16
    2f1e:	1f 93       	push	r17
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	ca 1b       	sub	r28, r26
    2f2a:	db 0b       	sbc	r29, r27
    2f2c:	0f b6       	in	r0, 0x3f	; 63
    2f2e:	f8 94       	cli
    2f30:	de bf       	out	0x3e, r29	; 62
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	cd bf       	out	0x3d, r28	; 61
    2f36:	09 94       	ijmp

00002f38 <__epilogue_restores__>:
    2f38:	2a 88       	ldd	r2, Y+18	; 0x12
    2f3a:	39 88       	ldd	r3, Y+17	; 0x11
    2f3c:	48 88       	ldd	r4, Y+16	; 0x10
    2f3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f40:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f42:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f44:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f46:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f48:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f4a:	b9 84       	ldd	r11, Y+9	; 0x09
    2f4c:	c8 84       	ldd	r12, Y+8	; 0x08
    2f4e:	df 80       	ldd	r13, Y+7	; 0x07
    2f50:	ee 80       	ldd	r14, Y+6	; 0x06
    2f52:	fd 80       	ldd	r15, Y+5	; 0x05
    2f54:	0c 81       	ldd	r16, Y+4	; 0x04
    2f56:	1b 81       	ldd	r17, Y+3	; 0x03
    2f58:	aa 81       	ldd	r26, Y+2	; 0x02
    2f5a:	b9 81       	ldd	r27, Y+1	; 0x01
    2f5c:	ce 0f       	add	r28, r30
    2f5e:	d1 1d       	adc	r29, r1
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	de bf       	out	0x3e, r29	; 62
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	cd bf       	out	0x3d, r28	; 61
    2f6a:	ed 01       	movw	r28, r26
    2f6c:	08 95       	ret

00002f6e <__do_global_dtors>:
    2f6e:	10 e0       	ldi	r17, 0x00	; 0
    2f70:	c5 ee       	ldi	r28, 0xE5	; 229
    2f72:	d0 e0       	ldi	r29, 0x00	; 0
    2f74:	04 c0       	rjmp	.+8      	; 0x2f7e <__do_global_dtors+0x10>
    2f76:	fe 01       	movw	r30, r28
    2f78:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__tablejump2__>
    2f7c:	21 96       	adiw	r28, 0x01	; 1
    2f7e:	c6 3e       	cpi	r28, 0xE6	; 230
    2f80:	d1 07       	cpc	r29, r17
    2f82:	c9 f7       	brne	.-14     	; 0x2f76 <__do_global_dtors+0x8>
    2f84:	f8 94       	cli

00002f86 <__stop_program>:
    2f86:	ff cf       	rjmp	.-2      	; 0x2f86 <__stop_program>
