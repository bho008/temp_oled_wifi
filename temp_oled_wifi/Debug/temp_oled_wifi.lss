
temp_oled_wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003ac  00800100  00004272  00004306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004272  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000391  008004ac  008004ac  000046b2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000046b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004710  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000960  00000000  00000000  00004750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001c8c8  00000000  00000000  000050b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d72  00000000  00000000  00021978  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039c1  00000000  00000000  000256ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002604  00000000  00000000  000290ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005b83  00000000  00000000  0002b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f96b  00000000  00000000  00031233  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b80  00000000  00000000  00040b9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
       0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__dtors_end>
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
       4:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <__vector_1>
  if (!initialized) {
       8:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__vector_2>
       c:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__vector_3>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
      10:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__vector_3>
    uint8_t bit = digitalPinToBitMask(SS);
      14:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__vector_3>
      18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
    volatile uint8_t *reg = portModeRegister(port);
      1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
      2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      digitalWrite(SS, HIGH);
      30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
      38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
      40:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__vector_16>
      44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
    SPCR |= _BV(SPE);
      48:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <__vector_18>
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
      4c:	0c 94 27 17 	jmp	0x2e4e	; 0x2e4e <__vector_19>
      50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
    pinMode(MOSI, OUTPUT);
      54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  }
  initialized++; // reference count
      5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

00000068 <__trampolines_end>:
  SREG = sreg;
}
      68:	00 5e       	subi	r16, 0xE0	; 224
      6a:	bc e2       	ldi	r27, 0x2C	; 44
      6c:	61 3f       	cpi	r22, 0xF1	; 241
      6e:	dd 83       	std	Y+5, r29	; 0x05
      70:	c2 9c       	mul	r12, r2
      72:	7e 20       	and	r7, r14
      74:	a3 fd       	sbrc	r26, 3
      76:	1f 41       	sbci	r17, 0x1F	; 31
      78:	9d c3       	rjmp	.+1850   	; 0x7b4 <_ZN6SdFile7seekSetEm+0x8a>
      7a:	21 7f       	andi	r18, 0xF1	; 241
      7c:	fc a2       	std	Y+36, r15	; 0x24
      7e:	40 1e       	adc	r4, r16
      80:	5f 01       	movw	r10, r30
      82:	e3 bd       	out	0x23, r30	; 35
      84:	3e 60       	ori	r19, 0x0E	; 14
      86:	82 dc       	rcall	.-1788   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
      88:	23 7d       	andi	r18, 0xD3	; 211
      8a:	9f c1       	rjmp	.+830    	; 0x3ca <_ZN7Sd2Card11cardCommandEhm+0x52>
      8c:	42 1c       	adc	r4, r2
      8e:	fe a0       	ldd	r15, Y+38	; 0x26
      90:	e1 bf       	out	0x31, r30	; 49
      92:	5d 03       	fmul	r21, r21
      94:	80 de       	rcall	.-768    	; 0xfffffd96 <__eeprom_end+0xff7efd96>
      96:	3c 62       	ori	r19, 0x2C	; 44
      98:	be e0       	ldi	r27, 0x0E	; 14
      9a:	02 5c       	subi	r16, 0xC2	; 194
      9c:	df 81       	ldd	r29, Y+7	; 0x07
      9e:	63 3d       	cpi	r22, 0xD3	; 211
      a0:	7c 22       	and	r7, r28
      a2:	c0 9e       	mul	r12, r16
      a4:	1d 43       	sbci	r17, 0x3D	; 61
      a6:	a1 ff       	sbrs	r26, 1
      a8:	46 18       	sub	r4, r6
      aa:	fa a4       	ldd	r15, Y+42	; 0x2a
      ac:	27 79       	andi	r18, 0x97	; 151
      ae:	9b c5       	rjmp	.+2870   	; 0xbe6 <__stack+0x2e7>
      b0:	84 da       	rcall	.-2808   	; 0xfffff5ba <__eeprom_end+0xff7ef5ba>
      b2:	38 66       	ori	r19, 0x68	; 104
      b4:	e5 bb       	out	0x15, r30	; 21
      b6:	59 07       	cpc	r21, r25
      b8:	db 85       	ldd	r29, Y+11	; 0x0b
      ba:	67 39       	cpi	r22, 0x97	; 151
      bc:	ba e4       	ldi	r27, 0x4A	; 74
      be:	06 58       	subi	r16, 0x86	; 134
      c0:	19 47       	sbci	r17, 0x79	; 121
      c2:	a5 fb       	bst	r26, 5
      c4:	78 26       	eor	r7, r24
      c6:	c4 9a       	sbi	0x18, 4	; 24
      c8:	65 3b       	cpi	r22, 0xB5	; 181
      ca:	d9 87       	std	Y+9, r29	; 0x09
      cc:	04 5a       	subi	r16, 0xA4	; 164
      ce:	b8 e6       	ldi	r27, 0x68	; 104
      d0:	a7 f9       	bld	r26, 7
      d2:	1b 45       	sbci	r17, 0x5B	; 91
      d4:	c6 98       	cbi	0x18, 6	; 24
      d6:	7a 24       	eor	r7, r10
      d8:	f8 a6       	std	Y+40, r15	; 0x28
      da:	44 1a       	sub	r4, r20
      dc:	99 c7       	rjmp	.+3890   	; 0x1010 <_ZN8SdVolume6fatPutEmm+0x88>
      de:	25 7b       	andi	r18, 0xB5	; 181
      e0:	3a 64       	ori	r19, 0x4A	; 74
      e2:	86 d8       	rcall	.-3828   	; 0xfffff1f0 <__eeprom_end+0xff7ef1f0>
      e4:	5b 05       	cpc	r21, r11
      e6:	e7 b9       	out	0x07, r30	; 7
      e8:	8c d2       	rcall	.+1304   	; 0x602 <_ZN7Sd2Card10writeBlockEmPKh+0x12>
      ea:	30 6e       	ori	r19, 0xE0	; 224
      ec:	ed b3       	in	r30, 0x1d	; 29
      ee:	51 0f       	add	r21, r17
      f0:	4e 10       	cpse	r4, r14
      f2:	f2 ac       	ldd	r15, Z+58	; 0x3a
      f4:	2f 71       	andi	r18, 0x1F	; 31
      f6:	93 cd       	rjmp	.-1242   	; 0xfffffc1e <__eeprom_end+0xff7efc1e>
      f8:	11 4f       	sbci	r17, 0xF1	; 241
      fa:	ad f3       	brhs	.-22     	; 0xe6 <__trampolines_end+0x7e>
      fc:	70 2e       	mov	r7, r16
      fe:	cc 92       	st	X, r12
     100:	d3 8d       	ldd	r29, Z+27	; 0x1b
     102:	6f 31       	cpi	r22, 0x1F	; 31
     104:	b2 ec       	ldi	r27, 0xC2	; 194
     106:	0e 50       	subi	r16, 0x0E	; 14
     108:	af f1       	brie	.+106    	; 0x174 <digital_pin_to_timer_PGM+0xc>
     10a:	13 4d       	sbci	r17, 0xD3	; 211
     10c:	ce 90       	ld	r12, -X
     10e:	72 2c       	mov	r7, r2
     110:	6d 33       	cpi	r22, 0x3D	; 61
     112:	d1 8f       	std	Z+25, r29	; 0x19
     114:	0c 52       	subi	r16, 0x2C	; 44
     116:	b0 ee       	ldi	r27, 0xE0	; 224
     118:	32 6c       	ori	r19, 0xC2	; 194
     11a:	8e d0       	rcall	.+284    	; 0x238 <_GLOBAL__sub_I__Z20getNextPathComponentPcPjS_+0x18>
     11c:	53 0d       	add	r21, r3
     11e:	ef b1       	in	r30, 0x0f	; 15
     120:	f0 ae       	std	Z+56, r15	; 0x38
     122:	4c 12       	cpse	r4, r28
     124:	91 cf       	rjmp	.-222    	; 0x48 <__SREG__+0x9>
     126:	2d 73       	andi	r18, 0x3D	; 61
     128:	ca 94       	dec	r12
     12a:	76 28       	or	r7, r6
     12c:	ab f5       	brvc	.+106    	; 0x198 <digital_pin_to_port_PGM+0x8>
     12e:	17 49       	sbci	r17, 0x97	; 151
     130:	08 56       	subi	r16, 0x68	; 104
     132:	b4 ea       	ldi	r27, 0xA4	; 164
     134:	69 37       	cpi	r22, 0x79	; 121
     136:	d5 8b       	std	Z+21, r29	; 0x15
     138:	57 09       	sbc	r21, r7
     13a:	eb b5       	in	r30, 0x2b	; 43
     13c:	36 68       	ori	r19, 0x86	; 134
     13e:	8a d4       	rcall	.+2324   	; 0xa54 <__stack+0x155>
     140:	95 cb       	rjmp	.-2262   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
     142:	29 77       	andi	r18, 0x79	; 121
     144:	f4 aa       	std	Z+52, r15	; 0x34
     146:	48 16       	cp	r4, r24
     148:	e9 b7       	in	r30, 0x39	; 57
     14a:	55 0b       	sbc	r21, r21
     14c:	88 d6       	rcall	.+3344   	; 0xe5e <_ZNK8SdVolume6fatGetEmPm+0x18>
     14e:	34 6a       	ori	r19, 0xA4	; 164
     150:	2b 75       	andi	r18, 0x5B	; 91
     152:	97 c9       	rjmp	.-3282   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     154:	4a 14       	cp	r4, r10
     156:	f6 a8       	ldd	r15, Z+54	; 0x36
     158:	74 2a       	or	r7, r20
     15a:	c8 96       	adiw	r24, 0x38	; 56
     15c:	15 4b       	sbci	r17, 0xB5	; 181
     15e:	a9 f7       	brne	.-22     	; 0x14a <__trampolines_end+0xe2>
     160:	b6 e8       	ldi	r27, 0x86	; 134
     162:	0a 54       	subi	r16, 0x4A	; 74
     164:	d7 89       	ldd	r29, Z+23	; 0x17
     166:	6b 35       	cpi	r22, 0x5B	; 91

00000168 <digital_pin_to_timer_PGM>:
     168:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     178:	00 00 00 00                                         ....

0000017c <digital_pin_to_bit_mask_PGM>:
     17c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     18c:	04 08 10 20                                         ... 

00000190 <digital_pin_to_port_PGM>:
     190:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1a0:	03 03 03 03                                         ....

000001a4 <port_to_input_PGM>:
     1a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001ae <port_to_output_PGM>:
     1ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001b8 <port_to_mode_PGM>:
     1b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001c2 <__ctors_start>:
     1c2:	10 01       	movw	r2, r0
     1c4:	4c 03       	fmul	r20, r20
     1c6:	d3 12       	cpse	r13, r19
     1c8:	57 17       	cp	r21, r23

000001ca <__ctors_end>:
     1ca:	e6 12       	cpse	r14, r22

000001cc <__dtors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d8 e0       	ldi	r29, 0x08	; 8
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61

000001d8 <__do_copy_data>:
     1d8:	14 e0       	ldi	r17, 0x04	; 4
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b1 e0       	ldi	r27, 0x01	; 1
     1de:	e2 e7       	ldi	r30, 0x72	; 114
     1e0:	f2 e4       	ldi	r31, 0x42	; 66
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__do_copy_data+0x10>
     1e4:	05 90       	lpm	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	ac 3a       	cpi	r26, 0xAC	; 172
     1ea:	b1 07       	cpc	r27, r17
     1ec:	d9 f7       	brne	.-10     	; 0x1e4 <__do_copy_data+0xc>

000001ee <__do_clear_bss>:
     1ee:	28 e0       	ldi	r18, 0x08	; 8
     1f0:	ac ea       	ldi	r26, 0xAC	; 172
     1f2:	b4 e0       	ldi	r27, 0x04	; 4
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <.do_clear_bss_start>

000001f6 <.do_clear_bss_loop>:
     1f6:	1d 92       	st	X+, r1

000001f8 <.do_clear_bss_start>:
     1f8:	ad 33       	cpi	r26, 0x3D	; 61
     1fa:	b2 07       	cpc	r27, r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <.do_clear_bss_loop>

000001fe <__do_global_ctors>:
     1fe:	10 e0       	ldi	r17, 0x00	; 0
     200:	c5 ee       	ldi	r28, 0xE5	; 229
     202:	d0 e0       	ldi	r29, 0x00	; 0
     204:	04 c0       	rjmp	.+8      	; 0x20e <__do_global_ctors+0x10>
     206:	21 97       	sbiw	r28, 0x01	; 1
     208:	fe 01       	movw	r30, r28
     20a:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <__tablejump2__>
     20e:	c1 3e       	cpi	r28, 0xE1	; 225
     210:	d1 07       	cpc	r29, r17
     212:	c9 f7       	brne	.-14     	; 0x206 <__do_global_ctors+0x8>
     214:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <main>
     218:	0c 94 2c 21 	jmp	0x4258	; 0x4258 <__do_global_dtors>

0000021c <__bad_interrupt>:
     21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <_GLOBAL__sub_I__Z20getNextPathComponentPcPjS_>:
    parentdir.close();
  }

  if (mode & (O_APPEND | O_WRITE)) 
    file.seekSet(file.fileSize());
  return File(file, filepath);
     220:	ec ea       	ldi	r30, 0xAC	; 172
     222:	f4 e0       	ldi	r31, 0x04	; 4
     224:	15 82       	std	Z+5, r1	; 0x05
     226:	16 82       	std	Z+6, r1	; 0x06
     228:	11 86       	std	Z+9, r1	; 0x09
}
     22a:	13 86       	std	Z+11, r1	; 0x0b
     22c:	82 e0       	ldi	r24, 0x02	; 2
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	a0 e0       	ldi	r26, 0x00	; 0
     232:	b0 e0       	ldi	r27, 0x00	; 0
     234:	84 87       	std	Z+12, r24	; 0x0c
     236:	95 87       	std	Z+13, r25	; 0x0d
     238:	a6 87       	std	Z+14, r26	; 0x0e
     23a:	b7 87       	std	Z+15, r27	; 0x0f
     23c:	13 a2       	std	Z+35, r1	; 0x23
     23e:	15 a6       	std	Z+45, r1	; 0x2d
     240:	14 a6       	std	Z+44, r1	; 0x2c
     242:	88 e0       	ldi	r24, 0x08	; 8
     244:	94 e0       	ldi	r25, 0x04	; 4
     246:	93 a7       	std	Z+43, r25	; 0x2b
     248:	82 a7       	std	Z+42, r24	; 0x2a
     24a:	17 a6       	std	Z+47, r1	; 0x2f
     24c:	08 95       	ret

0000024e <_ZL7spiSendh>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     24e:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     250:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
     252:	0d b4       	in	r0, 0x2d	; 45
     254:	07 fe       	sbrs	r0, 7
     256:	fd cf       	rjmp	.-6      	; 0x252 <_ZL7spiSendh+0x4>
    return SPDR;
     258:	8e b5       	in	r24, 0x2e	; 46
     25a:	08 95       	ret

0000025c <_ZL6spiRecv>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     25c:	8f ef       	ldi	r24, 0xFF	; 255
     25e:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     260:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
     262:	0d b4       	in	r0, 0x2d	; 45
     264:	07 fe       	sbrs	r0, 7
     266:	fd cf       	rjmp	.-6      	; 0x262 <_ZL6spiRecv+0x6>
    return SPDR;
     268:	8e b5       	in	r24, 0x2e	; 46
  spiSend(0XFF);
  return SPDR;
#else
  return SPI.transfer(0xFF);
#endif
}
     26a:	08 95       	ret

0000026c <_ZN7Sd2Card14chipSelectHighEv>:
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
     26c:	61 e0       	ldi	r22, 0x01	; 1
     26e:	fc 01       	movw	r30, r24
     270:	84 81       	ldd	r24, Z+4	; 0x04
     272:	0e 94 99 1b 	call	0x3732	; 0x3732 <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
     276:	80 91 f8 04 	lds	r24, 0x04F8
     27a:	88 23       	and	r24, r24
     27c:	a1 f0       	breq	.+40     	; 0x2a6 <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    chip_select_asserted = 0;
     27e:	10 92 f8 04 	sts	0x04F8, r1
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
     282:	80 91 f7 04 	lds	r24, 0x04F7
     286:	88 23       	and	r24, r24
     288:	71 f0       	breq	.+28     	; 0x2a6 <_ZN7Sd2Card14chipSelectHighEv+0x3a>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
     28a:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
     28c:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     28e:	80 91 f7 04 	lds	r24, 0x04F7
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	29 f4       	brne	.+10     	; 0x2a0 <_ZN7Sd2Card14chipSelectHighEv+0x34>
        SPI_AVR_EIMSK = interruptSave;
     296:	80 91 f5 04 	lds	r24, 0x04F5
     29a:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
     29c:	9f bf       	out	0x3f, r25	; 63
     29e:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
     2a0:	80 91 f5 04 	lds	r24, 0x04F5
     2a4:	8f bf       	out	0x3f, r24	; 63
     2a6:	08 95       	ret

000002a8 <_ZN7Sd2Card13chipSelectLowEv>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
     2a8:	20 91 f8 04 	lds	r18, 0x04F8
     2ac:	21 11       	cpse	r18, r1
     2ae:	20 c0       	rjmp	.+64     	; 0x2f0 <_ZN7Sd2Card13chipSelectLowEv+0x48>
    chip_select_asserted = 1;
     2b0:	21 e0       	ldi	r18, 0x01	; 1
     2b2:	20 93 f8 04 	sts	0x04F8, r18
     2b6:	e9 ef       	ldi	r30, 0xF9	; 249
     2b8:	f4 e0       	ldi	r31, 0x04	; 4
     2ba:	30 81       	ld	r19, Z
     2bc:	21 81       	ldd	r18, Z+1	; 0x01

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
     2be:	40 91 f7 04 	lds	r20, 0x04F7
     2c2:	44 23       	and	r20, r20
     2c4:	99 f0       	breq	.+38     	; 0x2ec <_ZN7Sd2Card13chipSelectLowEv+0x44>
      uint8_t sreg = SREG;
     2c6:	4f b7       	in	r20, 0x3f	; 63
      noInterrupts();
     2c8:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     2ca:	50 91 f7 04 	lds	r21, 0x04F7
     2ce:	51 30       	cpi	r21, 0x01	; 1
     2d0:	59 f4       	brne	.+22     	; 0x2e8 <_ZN7Sd2Card13chipSelectLowEv+0x40>
        interruptSave = SPI_AVR_EIMSK;
     2d2:	5d b3       	in	r21, 0x1d	; 29
     2d4:	50 93 f5 04 	sts	0x04F5, r21
        SPI_AVR_EIMSK &= ~interruptMask;
     2d8:	6d b3       	in	r22, 0x1d	; 29
     2da:	50 91 f6 04 	lds	r21, 0x04F6
     2de:	50 95       	com	r21
     2e0:	56 23       	and	r21, r22
     2e2:	5d bb       	out	0x1d, r21	; 29
        SREG = sreg;
     2e4:	4f bf       	out	0x3f, r20	; 63
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <_ZN7Sd2Card13chipSelectLowEv+0x44>
      } else
      #endif
      {
        interruptSave = sreg;
     2e8:	40 93 f5 04 	sts	0x04F5, r20
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     2ec:	3c bd       	out	0x2c, r19	; 44
    SPSR = settings.spsr;
     2ee:	2d bd       	out	0x2d, r18	; 45
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	fc 01       	movw	r30, r24
     2f4:	84 81       	ldd	r24, Z+4	; 0x04
     2f6:	0e 94 99 1b 	call	0x3732	; 0x3732 <digitalWrite>
     2fa:	08 95       	ret

000002fc <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
  if (inBlock_) {
     300:	fc 01       	movw	r30, r24
     302:	26 81       	ldd	r18, Z+6	; 0x06
     304:	22 23       	and	r18, r18
     306:	d1 f0       	breq	.+52     	; 0x33c <_ZN7Sd2Card7readEndEv+0x40>
     308:	ec 01       	movw	r28, r24
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)))
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
     30a:	87 81       	ldd	r24, Z+7	; 0x07
     30c:	90 85       	ldd	r25, Z+8	; 0x08
     30e:	9c 01       	movw	r18, r24
     310:	2f 5f       	subi	r18, 0xFF	; 255
     312:	3f 4f       	sbci	r19, 0xFF	; 255
     314:	30 87       	std	Z+8, r19	; 0x08
     316:	27 83       	std	Z+7, r18	; 0x07
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	92 40       	sbci	r25, 0x02	; 2
     31c:	58 f4       	brcc	.+22     	; 0x334 <_ZN7Sd2Card7readEndEv+0x38>
     31e:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZL6spiRecv>
     322:	2f 81       	ldd	r18, Y+7	; 0x07
     324:	38 85       	ldd	r19, Y+8	; 0x08
     326:	c9 01       	movw	r24, r18
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	98 87       	std	Y+8, r25	; 0x08
     32c:	8f 83       	std	Y+7, r24	; 0x07
     32e:	22 30       	cpi	r18, 0x02	; 2
     330:	32 40       	sbci	r19, 0x02	; 2
     332:	a8 f3       	brcs	.-22     	; 0x31e <_ZN7Sd2Card7readEndEv+0x22>
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
     334:	ce 01       	movw	r24, r28
     336:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
     33a:	1e 82       	std	Y+6, r1	; 0x06
  }
}
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <_ZN7Sd2Card11waitNotBusyEj>:
#endif // USE_SPI_LIB
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	eb 01       	movw	r28, r22
  uint16_t t0 = millis();
     34c:	0e 94 85 1a 	call	0x350a	; 0x350a <millis>
     350:	8b 01       	movw	r16, r22
  do {
    if (spiRec() == 0XFF) return true;
     352:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZL6spiRecv>
     356:	8f 3f       	cpi	r24, 0xFF	; 255
     358:	49 f0       	breq	.+18     	; 0x36c <_ZN7Sd2Card11waitNotBusyEj+0x2a>
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
     35a:	0e 94 85 1a 	call	0x350a	; 0x350a <millis>
     35e:	60 1b       	sub	r22, r16
     360:	71 0b       	sbc	r23, r17
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
     362:	6c 17       	cp	r22, r28
     364:	7d 07       	cpc	r23, r29
     366:	a8 f3       	brcs	.-22     	; 0x352 <_ZN7Sd2Card11waitNotBusyEj+0x10>
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	01 c0       	rjmp	.+2      	; 0x36e <_ZN7Sd2Card11waitNotBusyEj+0x2c>
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    if (spiRec() == 0XFF) return true;
     36c:	81 e0       	ldi	r24, 0x01	; 1
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	08 95       	ret

00000378 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
     378:	bf 92       	push	r11
     37a:	cf 92       	push	r12
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	8c 01       	movw	r16, r24
     38c:	b6 2e       	mov	r11, r22
     38e:	69 01       	movw	r12, r18
     390:	7a 01       	movw	r14, r20
  // end read if in partialBlockRead mode
  readEnd();
     392:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
     396:	c8 01       	movw	r24, r16
     398:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
     39c:	6c e2       	ldi	r22, 0x2C	; 44
     39e:	71 e0       	ldi	r23, 0x01	; 1
     3a0:	c8 01       	movw	r24, r16
     3a2:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN7Sd2Card11waitNotBusyEj>

  // send command
  spiSend(cmd | 0x40);
     3a6:	8b 2d       	mov	r24, r11
     3a8:	80 64       	ori	r24, 0x40	; 64
     3aa:	0e 94 27 01 	call	0x24e	; 0x24e <_ZL7spiSendh>
     3ae:	c8 e1       	ldi	r28, 0x18	; 24
     3b0:	d0 e0       	ldi	r29, 0x00	; 0

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
     3b2:	d7 01       	movw	r26, r14
     3b4:	c6 01       	movw	r24, r12
     3b6:	0c 2e       	mov	r0, r28
     3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <_ZN7Sd2Card11cardCommandEhm+0x4a>
     3ba:	b6 95       	lsr	r27
     3bc:	a7 95       	ror	r26
     3be:	97 95       	ror	r25
     3c0:	87 95       	ror	r24
     3c2:	0a 94       	dec	r0
     3c4:	d2 f7       	brpl	.-12     	; 0x3ba <_ZN7Sd2Card11cardCommandEhm+0x42>
     3c6:	0e 94 27 01 	call	0x24e	; 0x24e <_ZL7spiSendh>
     3ca:	28 97       	sbiw	r28, 0x08	; 8
     3cc:	c8 3f       	cpi	r28, 0xF8	; 248
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	d8 07       	cpc	r29, r24
     3d2:	79 f7       	brne	.-34     	; 0x3b2 <_ZN7Sd2Card11cardCommandEhm+0x3a>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
     3d4:	bb 20       	and	r11, r11
     3d6:	29 f0       	breq	.+10     	; 0x3e2 <_ZN7Sd2Card11cardCommandEhm+0x6a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
     3d8:	e8 e0       	ldi	r30, 0x08	; 8
     3da:	be 12       	cpse	r11, r30
     3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <_ZN7Sd2Card11cardCommandEhm+0x6e>
     3de:	87 e8       	ldi	r24, 0x87	; 135
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <_ZN7Sd2Card11cardCommandEhm+0x70>
  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
     3e2:	85 e9       	ldi	r24, 0x95	; 149
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <_ZN7Sd2Card11cardCommandEhm+0x70>

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);

  // send CRC
  uint8_t crc = 0XFF;
     3e6:	8f ef       	ldi	r24, 0xFF	; 255
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);
     3e8:	0e 94 27 01 	call	0x24e	; 0x24e <_ZL7spiSendh>

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
     3ec:	c0 e0       	ldi	r28, 0x00	; 0
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <_ZN7Sd2Card11cardCommandEhm+0x7a>
     3f0:	cf 5f       	subi	r28, 0xFF	; 255
     3f2:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZL6spiRecv>
     3f6:	f8 01       	movw	r30, r16
     3f8:	82 87       	std	Z+10, r24	; 0x0a
     3fa:	88 23       	and	r24, r24
     3fc:	14 f4       	brge	.+4      	; 0x402 <_ZN7Sd2Card11cardCommandEhm+0x8a>
     3fe:	cf 3f       	cpi	r28, 0xFF	; 255
     400:	b9 f7       	brne	.-18     	; 0x3f0 <_ZN7Sd2Card11cardCommandEhm+0x78>
    ;
  return status_;
}
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	df 90       	pop	r13
     410:	cf 90       	pop	r12
     412:	bf 90       	pop	r11
     414:	08 95       	ret

00000416 <_ZN7Sd2Card14waitStartBlockEv>:
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	ec 01       	movw	r28, r24
  uint16_t t0 = millis();
     420:	0e 94 85 1a 	call	0x350a	; 0x350a <millis>
     424:	8b 01       	movw	r16, r22
  while ((status_ = spiRec()) == 0XFF) {
     426:	0a c0       	rjmp	.+20     	; 0x43c <_ZN7Sd2Card14waitStartBlockEv+0x26>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
     428:	0e 94 85 1a 	call	0x350a	; 0x350a <millis>
     42c:	60 1b       	sub	r22, r16
     42e:	71 0b       	sbc	r23, r17
     430:	6d 32       	cpi	r22, 0x2D	; 45
     432:	71 40       	sbci	r23, 0x01	; 1
     434:	18 f0       	brcs	.+6      	; 0x43c <_ZN7Sd2Card14waitStartBlockEv+0x26>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
     436:	8f e0       	ldi	r24, 0x0F	; 15
     438:	8d 83       	std	Y+5, r24	; 0x05
     43a:	09 c0       	rjmp	.+18     	; 0x44e <_ZN7Sd2Card14waitStartBlockEv+0x38>
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
     43c:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZL6spiRecv>
     440:	8a 87       	std	Y+10, r24	; 0x0a
     442:	8f 3f       	cpi	r24, 0xFF	; 255
     444:	89 f3       	breq	.-30     	; 0x428 <_ZN7Sd2Card14waitStartBlockEv+0x12>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
     446:	8e 3f       	cpi	r24, 0xFE	; 254
     448:	39 f0       	breq	.+14     	; 0x458 <_ZN7Sd2Card14waitStartBlockEv+0x42>
     44a:	8d e0       	ldi	r24, 0x0D	; 13
     44c:	8d 83       	std	Y+5, r24	; 0x05
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
     44e:	ce 01       	movw	r24, r28
     450:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN7Sd2Card14chipSelectHighEv>
  return false;
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	01 c0       	rjmp	.+2      	; 0x45a <_ZN7Sd2Card14waitStartBlockEv+0x44>
  }
  if (status_ != DATA_START_BLOCK) {
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  return true;
     458:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	08 95       	ret

00000464 <_ZN7Sd2Card8readDataEmjjPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
     464:	cf 92       	push	r12
     466:	df 92       	push	r13
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	ec 01       	movw	r28, r24
     476:	69 01       	movw	r12, r18
  uint16_t n;
  if (count == 0) return true;
     478:	01 15       	cp	r16, r1
     47a:	11 05       	cpc	r17, r1
     47c:	09 f4       	brne	.+2      	; 0x480 <_ZN7Sd2Card8readDataEmjjPh+0x1c>
     47e:	6c c0       	rjmp	.+216    	; 0x558 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
  if ((count + offset) > 512) {
     480:	c8 01       	movw	r24, r16
     482:	82 0f       	add	r24, r18
     484:	93 1f       	adc	r25, r19
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	92 40       	sbci	r25, 0x02	; 2
     48a:	08 f0       	brcs	.+2      	; 0x48e <_ZN7Sd2Card8readDataEmjjPh+0x2a>
     48c:	60 c0       	rjmp	.+192    	; 0x54e <_ZN7Sd2Card8readDataEmjjPh+0xea>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
     48e:	8e 81       	ldd	r24, Y+6	; 0x06
     490:	88 23       	and	r24, r24
     492:	71 f0       	breq	.+28     	; 0x4b0 <_ZN7Sd2Card8readDataEmjjPh+0x4c>
     494:	88 81       	ld	r24, Y
     496:	99 81       	ldd	r25, Y+1	; 0x01
     498:	aa 81       	ldd	r26, Y+2	; 0x02
     49a:	bb 81       	ldd	r27, Y+3	; 0x03
     49c:	84 17       	cp	r24, r20
     49e:	95 07       	cpc	r25, r21
     4a0:	a6 07       	cpc	r26, r22
     4a2:	b7 07       	cpc	r27, r23
     4a4:	29 f4       	brne	.+10     	; 0x4b0 <_ZN7Sd2Card8readDataEmjjPh+0x4c>
     4a6:	8f 81       	ldd	r24, Y+7	; 0x07
     4a8:	98 85       	ldd	r25, Y+8	; 0x08
     4aa:	c8 16       	cp	r12, r24
     4ac:	d9 06       	cpc	r13, r25
     4ae:	20 f5       	brcc	.+72     	; 0x4f8 <_ZN7Sd2Card8readDataEmjjPh+0x94>
    block_ = block;
     4b0:	48 83       	st	Y, r20
     4b2:	59 83       	std	Y+1, r21	; 0x01
     4b4:	6a 83       	std	Y+2, r22	; 0x02
     4b6:	7b 83       	std	Y+3, r23	; 0x03
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
     4b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     4ba:	83 30       	cpi	r24, 0x03	; 3
     4bc:	49 f0       	breq	.+18     	; 0x4d0 <_ZN7Sd2Card8readDataEmjjPh+0x6c>
     4be:	03 2e       	mov	r0, r19
     4c0:	39 e0       	ldi	r19, 0x09	; 9
     4c2:	44 0f       	add	r20, r20
     4c4:	55 1f       	adc	r21, r21
     4c6:	66 1f       	adc	r22, r22
     4c8:	77 1f       	adc	r23, r23
     4ca:	3a 95       	dec	r19
     4cc:	d1 f7       	brne	.-12     	; 0x4c2 <_ZN7Sd2Card8readDataEmjjPh+0x5e>
     4ce:	30 2d       	mov	r19, r0
    if (cardCommand(CMD17, block)) {
     4d0:	9a 01       	movw	r18, r20
     4d2:	ab 01       	movw	r20, r22
     4d4:	61 e1       	ldi	r22, 0x11	; 17
     4d6:	ce 01       	movw	r24, r28
     4d8:	0e 94 bc 01 	call	0x378	; 0x378 <_ZN7Sd2Card11cardCommandEhm>
     4dc:	88 23       	and	r24, r24
     4de:	19 f0       	breq	.+6      	; 0x4e6 <_ZN7Sd2Card8readDataEmjjPh+0x82>
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	8d 83       	std	Y+5, r24	; 0x05
     4e4:	34 c0       	rjmp	.+104    	; 0x54e <_ZN7Sd2Card8readDataEmjjPh+0xea>
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
     4e6:	ce 01       	movw	r24, r28
     4e8:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN7Sd2Card14waitStartBlockEv>
     4ec:	88 23       	and	r24, r24
     4ee:	79 f1       	breq	.+94     	; 0x54e <_ZN7Sd2Card8readDataEmjjPh+0xea>
      goto fail;
    }
    offset_ = 0;
     4f0:	18 86       	std	Y+8, r1	; 0x08
     4f2:	1f 82       	std	Y+7, r1	; 0x07
    inBlock_ = 1;
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	8e 83       	std	Y+6, r24	; 0x06
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
     4f8:	8f 81       	ldd	r24, Y+7	; 0x07
     4fa:	98 85       	ldd	r25, Y+8	; 0x08
     4fc:	8c 15       	cp	r24, r12
     4fe:	9d 05       	cpc	r25, r13
     500:	50 f4       	brcc	.+20     	; 0x516 <_ZN7Sd2Card8readDataEmjjPh+0xb2>
    spiRec();
     502:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZL6spiRecv>
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
     506:	8f 81       	ldd	r24, Y+7	; 0x07
     508:	98 85       	ldd	r25, Y+8	; 0x08
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	98 87       	std	Y+8, r25	; 0x08
     50e:	8f 83       	std	Y+7, r24	; 0x07
     510:	8c 15       	cp	r24, r12
     512:	9d 05       	cpc	r25, r13
     514:	b0 f3       	brcs	.-20     	; 0x502 <_ZN7Sd2Card8readDataEmjjPh+0x9e>
     516:	67 01       	movw	r12, r14
     518:	e0 0e       	add	r14, r16
     51a:	f1 1e       	adc	r15, r17
    spiRec();
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
     51c:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZL6spiRecv>
     520:	f6 01       	movw	r30, r12
     522:	81 93       	st	Z+, r24
     524:	6f 01       	movw	r12, r30
  // skip data before offset
  for (;offset_ < offset; offset_++) {
    spiRec();
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
     526:	ee 15       	cp	r30, r14
     528:	ff 05       	cpc	r31, r15
     52a:	c1 f7       	brne	.-16     	; 0x51c <_ZN7Sd2Card8readDataEmjjPh+0xb8>
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
     52c:	8f 81       	ldd	r24, Y+7	; 0x07
     52e:	98 85       	ldd	r25, Y+8	; 0x08
     530:	08 0f       	add	r16, r24
     532:	19 1f       	adc	r17, r25
     534:	18 87       	std	Y+8, r17	; 0x08
     536:	0f 83       	std	Y+7, r16	; 0x07
  if (!partialBlockRead_ || offset_ >= 512) {
     538:	89 85       	ldd	r24, Y+9	; 0x09
     53a:	88 23       	and	r24, r24
     53c:	19 f0       	breq	.+6      	; 0x544 <_ZN7Sd2Card8readDataEmjjPh+0xe0>
     53e:	01 15       	cp	r16, r1
     540:	12 40       	sbci	r17, 0x02	; 2
     542:	60 f0       	brcs	.+24     	; 0x55c <_ZN7Sd2Card8readDataEmjjPh+0xf8>
    // read rest of data, checksum and set chip select high
    readEnd();
     544:	ce 01       	movw	r24, r28
     546:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN7Sd2Card7readEndEv>
  }
  return true;
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	08 c0       	rjmp	.+16     	; 0x55e <_ZN7Sd2Card8readDataEmjjPh+0xfa>

 fail:
  chipSelectHigh();
     54e:	ce 01       	movw	r24, r28
     550:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN7Sd2Card14chipSelectHighEv>
  return false;
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	03 c0       	rjmp	.+6      	; 0x55e <_ZN7Sd2Card8readDataEmjjPh+0xfa>
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
  uint16_t n;
  if (count == 0) return true;
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	01 c0       	rjmp	.+2      	; 0x55e <_ZN7Sd2Card8readDataEmjjPh+0xfa>
  offset_ += count;
  if (!partialBlockRead_ || offset_ >= 512) {
    // read rest of data, checksum and set chip select high
    readEnd();
  }
  return true;
     55c:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	08 95       	ret

00000570 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
  return readData(block, 0, 512, dst);
     578:	79 01       	movw	r14, r18
     57a:	00 e0       	ldi	r16, 0x00	; 0
     57c:	12 e0       	ldi	r17, 0x02	; 2
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	0e 94 32 02 	call	0x464	; 0x464 <_ZN7Sd2Card8readDataEmjjPh>
}
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	08 95       	ret

00000590 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
     590:	ef 92       	push	r14
     592:	ff 92       	push	r15
     594:	0f 93       	push	r16
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	7c 01       	movw	r14, r24
     59e:	86 2f       	mov	r24, r22
     5a0:	8a 01       	movw	r16, r20
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
     5a2:	0e 94 27 01 	call	0x24e	; 0x24e <_ZL7spiSendh>
     5a6:	e8 01       	movw	r28, r16
     5a8:	1e 5f       	subi	r17, 0xFE	; 254
  for (uint16_t i = 0; i < 512; i++) {
    spiSend(src[i]);
     5aa:	89 91       	ld	r24, Y+
     5ac:	0e 94 27 01 	call	0x24e	; 0x24e <_ZL7spiSendh>
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
     5b0:	c0 17       	cp	r28, r16
     5b2:	d1 07       	cpc	r29, r17
     5b4:	d1 f7       	brne	.-12     	; 0x5aa <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    spiSend(src[i]);
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
     5b6:	8f ef       	ldi	r24, 0xFF	; 255
     5b8:	0e 94 27 01 	call	0x24e	; 0x24e <_ZL7spiSendh>
  spiSend(0xff);  // dummy crc
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	0e 94 27 01 	call	0x24e	; 0x24e <_ZL7spiSendh>

  status_ = spiRec();
     5c2:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZL6spiRecv>
     5c6:	f7 01       	movw	r30, r14
     5c8:	82 87       	std	Z+10, r24	; 0x0a
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
     5ca:	98 2f       	mov	r25, r24
     5cc:	9f 71       	andi	r25, 0x1F	; 31
     5ce:	95 30       	cpi	r25, 0x05	; 5
     5d0:	39 f0       	breq	.+14     	; 0x5e0 <_ZN7Sd2Card9writeDataEhPKh+0x50>
     5d2:	81 e1       	ldi	r24, 0x11	; 17
     5d4:	85 83       	std	Z+5, r24	; 0x05
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
     5d6:	c7 01       	movw	r24, r14
     5d8:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN7Sd2Card14chipSelectHighEv>
    return false;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <_ZN7Sd2Card9writeDataEhPKh+0x52>
  }
  return true;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	08 95       	ret

000005f0 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	ec 01       	movw	r28, r24
     5fa:	89 01       	movw	r16, r18
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
     5fc:	41 15       	cp	r20, r1
     5fe:	51 05       	cpc	r21, r1
     600:	61 05       	cpc	r22, r1
     602:	71 05       	cpc	r23, r1
     604:	19 f4       	brne	.+6      	; 0x60c <_ZN7Sd2Card10writeBlockEmPKh+0x1c>
     606:	82 e1       	ldi	r24, 0x12	; 18
     608:	8d 83       	std	Y+5, r24	; 0x05
     60a:	3d c0       	rjmp	.+122    	; 0x686 <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
     60c:	8b 85       	ldd	r24, Y+11	; 0x0b
     60e:	83 30       	cpi	r24, 0x03	; 3
     610:	49 f0       	breq	.+18     	; 0x624 <_ZN7Sd2Card10writeBlockEmPKh+0x34>
     612:	03 2e       	mov	r0, r19
     614:	39 e0       	ldi	r19, 0x09	; 9
     616:	44 0f       	add	r20, r20
     618:	55 1f       	adc	r21, r21
     61a:	66 1f       	adc	r22, r22
     61c:	77 1f       	adc	r23, r23
     61e:	3a 95       	dec	r19
     620:	d1 f7       	brne	.-12     	; 0x616 <_ZN7Sd2Card10writeBlockEmPKh+0x26>
     622:	30 2d       	mov	r19, r0
  if (cardCommand(CMD24, blockNumber)) {
     624:	9a 01       	movw	r18, r20
     626:	ab 01       	movw	r20, r22
     628:	68 e1       	ldi	r22, 0x18	; 24
     62a:	ce 01       	movw	r24, r28
     62c:	0e 94 bc 01 	call	0x378	; 0x378 <_ZN7Sd2Card11cardCommandEhm>
     630:	88 23       	and	r24, r24
     632:	19 f0       	breq	.+6      	; 0x63a <_ZN7Sd2Card10writeBlockEmPKh+0x4a>
     634:	84 e0       	ldi	r24, 0x04	; 4
     636:	8d 83       	std	Y+5, r24	; 0x05
     638:	26 c0       	rjmp	.+76     	; 0x686 <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
     63a:	a8 01       	movw	r20, r16
     63c:	6e ef       	ldi	r22, 0xFE	; 254
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 c8 02 	call	0x590	; 0x590 <_ZN7Sd2Card9writeDataEhPKh>
     644:	88 23       	and	r24, r24
     646:	f9 f0       	breq	.+62     	; 0x686 <_ZN7Sd2Card10writeBlockEmPKh+0x96>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
     648:	68 e5       	ldi	r22, 0x58	; 88
     64a:	72 e0       	ldi	r23, 0x02	; 2
     64c:	ce 01       	movw	r24, r28
     64e:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN7Sd2Card11waitNotBusyEj>
     652:	81 11       	cpse	r24, r1
     654:	03 c0       	rjmp	.+6      	; 0x65c <_ZN7Sd2Card10writeBlockEmPKh+0x6c>
     656:	85 e1       	ldi	r24, 0x15	; 21
     658:	8d 83       	std	Y+5, r24	; 0x05
     65a:	15 c0       	rjmp	.+42     	; 0x686 <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	a9 01       	movw	r20, r18
     662:	6d e0       	ldi	r22, 0x0D	; 13
     664:	ce 01       	movw	r24, r28
     666:	0e 94 bc 01 	call	0x378	; 0x378 <_ZN7Sd2Card11cardCommandEhm>
     66a:	81 11       	cpse	r24, r1
     66c:	04 c0       	rjmp	.+8      	; 0x676 <_ZN7Sd2Card10writeBlockEmPKh+0x86>
     66e:	0e 94 2e 01 	call	0x25c	; 0x25c <_ZL6spiRecv>
     672:	88 23       	and	r24, r24
     674:	19 f0       	breq	.+6      	; 0x67c <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
     676:	84 e1       	ldi	r24, 0x14	; 20
     678:	8d 83       	std	Y+5, r24	; 0x05
     67a:	05 c0       	rjmp	.+10     	; 0x686 <_ZN7Sd2Card10writeBlockEmPKh+0x96>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  chipSelectHigh();
     67c:	ce 01       	movw	r24, r28
     67e:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN7Sd2Card14chipSelectHighEv>
  return true;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	04 c0       	rjmp	.+8      	; 0x68e <_ZN7Sd2Card10writeBlockEmPKh+0x9e>

 fail:
  chipSelectHigh();
     686:	ce 01       	movw	r24, r28
     688:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN7Sd2Card14chipSelectHighEv>
  return false;
     68c:	80 e0       	ldi	r24, 0x00	; 0
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	08 95       	ret

00000698 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
     698:	e9 ef       	ldi	r30, 0xF9	; 249
     69a:	f4 e0       	ldi	r31, 0x04	; 4
     69c:	80 e5       	ldi	r24, 0x50	; 80
     69e:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	81 83       	std	Z+1, r24	; 0x01
     6a4:	08 95       	ret

000006a6 <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	ec 01       	movw	r28, r24
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
     6ac:	9c 01       	movw	r18, r24
     6ae:	2a 5f       	subi	r18, 0xFA	; 250
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	41 e0       	ldi	r20, 0x01	; 1
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6be:	0e 94 80 08 	call	0x1100	; 0x1100 <_ZN8SdVolume15allocContiguousEmPm>
     6c2:	88 23       	and	r24, r24
     6c4:	b1 f0       	breq	.+44     	; 0x6f2 <_ZN6SdFile10addClusterEv+0x4c>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
     6c6:	8f 89       	ldd	r24, Y+23	; 0x17
     6c8:	98 8d       	ldd	r25, Y+24	; 0x18
     6ca:	a9 8d       	ldd	r26, Y+25	; 0x19
     6cc:	ba 8d       	ldd	r27, Y+26	; 0x1a
     6ce:	89 2b       	or	r24, r25
     6d0:	8a 2b       	or	r24, r26
     6d2:	8b 2b       	or	r24, r27
     6d4:	69 f4       	brne	.+26     	; 0x6f0 <_ZN6SdFile10addClusterEv+0x4a>
    firstCluster_ = curCluster_;
     6d6:	8e 81       	ldd	r24, Y+6	; 0x06
     6d8:	9f 81       	ldd	r25, Y+7	; 0x07
     6da:	a8 85       	ldd	r26, Y+8	; 0x08
     6dc:	b9 85       	ldd	r27, Y+9	; 0x09
     6de:	8f 8b       	std	Y+23, r24	; 0x17
     6e0:	98 8f       	std	Y+24, r25	; 0x18
     6e2:	a9 8f       	std	Y+25, r26	; 0x19
     6e4:	ba 8f       	std	Y+26, r27	; 0x1a
    flags_ |= F_FILE_DIR_DIRTY;
     6e6:	8c 81       	ldd	r24, Y+4	; 0x04
     6e8:	80 68       	ori	r24, 0x80	; 128
     6ea:	8c 83       	std	Y+4, r24	; 0x04
  }
  return true;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <_ZN6SdFile10addClusterEv+0x4c>
     6f0:	81 e0       	ldi	r24, 0x01	; 1
}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	08 95       	ret

000006f8 <_ZN6SdFile13cacheDirEntryEh>:
  return true;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ec 01       	movw	r28, r24
     6fe:	46 2f       	mov	r20, r22
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
     700:	6e 85       	ldd	r22, Y+14	; 0x0e
     702:	7f 85       	ldd	r23, Y+15	; 0x0f
     704:	88 89       	ldd	r24, Y+16	; 0x10
     706:	99 89       	ldd	r25, Y+17	; 0x11
     708:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN8SdVolume13cacheRawBlockEmh>
     70c:	88 23       	and	r24, r24
     70e:	41 f0       	breq	.+16     	; 0x720 <_ZN6SdFile13cacheDirEntryEh+0x28>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
     710:	8a 89       	ldd	r24, Y+18	; 0x12
     712:	20 e2       	ldi	r18, 0x20	; 32
     714:	82 9f       	mul	r24, r18
     716:	c0 01       	movw	r24, r0
     718:	11 24       	eor	r1, r1
     71a:	8c 5f       	subi	r24, 0xFC	; 252
     71c:	9a 4f       	sbci	r25, 0xFA	; 250
     71e:	02 c0       	rjmp	.+4      	; 0x724 <_ZN6SdFile13cacheDirEntryEh+0x2c>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
  return SdVolume::cacheBuffer_.dir + dirIndex_;
}
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
     72a:	8f 92       	push	r8
     72c:	9f 92       	push	r9
     72e:	af 92       	push	r10
     730:	bf 92       	push	r11
     732:	cf 92       	push	r12
     734:	df 92       	push	r13
     736:	ef 92       	push	r14
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	ec 01       	movw	r28, r24
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
     744:	8d 81       	ldd	r24, Y+5	; 0x05
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
     746:	88 23       	and	r24, r24
     748:	09 f4       	brne	.+2      	; 0x74c <_ZN6SdFile7seekSetEm+0x22>
     74a:	7f c0       	rjmp	.+254    	; 0x84a <_ZN6SdFile7seekSetEm+0x120>
     74c:	0b 89       	ldd	r16, Y+19	; 0x13
     74e:	1c 89       	ldd	r17, Y+20	; 0x14
     750:	2d 89       	ldd	r18, Y+21	; 0x15
     752:	3e 89       	ldd	r19, Y+22	; 0x16
     754:	04 17       	cp	r16, r20
     756:	15 07       	cpc	r17, r21
     758:	26 07       	cpc	r18, r22
     75a:	37 07       	cpc	r19, r23
     75c:	08 f4       	brcc	.+2      	; 0x760 <_ZN6SdFile7seekSetEm+0x36>
     75e:	74 c0       	rjmp	.+232    	; 0x848 <_ZN6SdFile7seekSetEm+0x11e>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	31 f4       	brne	.+12     	; 0x770 <_ZN6SdFile7seekSetEm+0x46>
    curPosition_ = pos;
     764:	4a 87       	std	Y+10, r20	; 0x0a
     766:	5b 87       	std	Y+11, r21	; 0x0b
     768:	6c 87       	std	Y+12, r22	; 0x0c
     76a:	7d 87       	std	Y+13, r23	; 0x0d
    return true;
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	6d c0       	rjmp	.+218    	; 0x84a <_ZN6SdFile7seekSetEm+0x120>
  }
  if (pos == 0) {
     770:	41 15       	cp	r20, r1
     772:	51 05       	cpc	r21, r1
     774:	61 05       	cpc	r22, r1
     776:	71 05       	cpc	r23, r1
     778:	51 f4       	brne	.+20     	; 0x78e <_ZN6SdFile7seekSetEm+0x64>
    // set position to start of file
    curCluster_ = 0;
     77a:	1e 82       	std	Y+6, r1	; 0x06
     77c:	1f 82       	std	Y+7, r1	; 0x07
     77e:	18 86       	std	Y+8, r1	; 0x08
     780:	19 86       	std	Y+9, r1	; 0x09
    curPosition_ = 0;
     782:	1a 86       	std	Y+10, r1	; 0x0a
     784:	1b 86       	std	Y+11, r1	; 0x0b
     786:	1c 86       	std	Y+12, r1	; 0x0c
     788:	1d 86       	std	Y+13, r1	; 0x0d
    return true;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	5e c0       	rjmp	.+188    	; 0x84a <_ZN6SdFile7seekSetEm+0x120>
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
     78e:	8a 84       	ldd	r8, Y+10	; 0x0a
     790:	9b 84       	ldd	r9, Y+11	; 0x0b
     792:	ac 84       	ldd	r10, Y+12	; 0x0c
     794:	bd 84       	ldd	r11, Y+13	; 0x0d
     796:	eb 8d       	ldd	r30, Y+27	; 0x1b
     798:	fc 8d       	ldd	r31, Y+28	; 0x1c
     79a:	85 85       	ldd	r24, Z+13	; 0x0d
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	09 96       	adiw	r24, 0x09	; 9
     7a0:	95 01       	movw	r18, r10
     7a2:	84 01       	movw	r16, r8
     7a4:	01 50       	subi	r16, 0x01	; 1
     7a6:	11 09       	sbc	r17, r1
     7a8:	21 09       	sbc	r18, r1
     7aa:	31 09       	sbc	r19, r1
     7ac:	08 2e       	mov	r0, r24
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <_ZN6SdFile7seekSetEm+0x8e>
     7b0:	36 95       	lsr	r19
     7b2:	27 95       	ror	r18
     7b4:	17 95       	ror	r17
     7b6:	07 95       	ror	r16
     7b8:	0a 94       	dec	r0
     7ba:	d2 f7       	brpl	.-12     	; 0x7b0 <_ZN6SdFile7seekSetEm+0x86>
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
     7bc:	6a 01       	movw	r12, r20
     7be:	7b 01       	movw	r14, r22
     7c0:	e1 e0       	ldi	r30, 0x01	; 1
     7c2:	ce 1a       	sub	r12, r30
     7c4:	d1 08       	sbc	r13, r1
     7c6:	e1 08       	sbc	r14, r1
     7c8:	f1 08       	sbc	r15, r1
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <_ZN6SdFile7seekSetEm+0xaa>
     7cc:	f6 94       	lsr	r15
     7ce:	e7 94       	ror	r14
     7d0:	d7 94       	ror	r13
     7d2:	c7 94       	ror	r12
     7d4:	8a 95       	dec	r24
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <_ZN6SdFile7seekSetEm+0xa2>

  if (nNew < nCur || curPosition_ == 0) {
     7d8:	c0 16       	cp	r12, r16
     7da:	d1 06       	cpc	r13, r17
     7dc:	e2 06       	cpc	r14, r18
     7de:	f3 06       	cpc	r15, r19
     7e0:	20 f0       	brcs	.+8      	; 0x7ea <_ZN6SdFile7seekSetEm+0xc0>
     7e2:	89 28       	or	r8, r9
     7e4:	8a 28       	or	r8, r10
     7e6:	8b 28       	or	r8, r11
     7e8:	49 f4       	brne	.+18     	; 0x7fc <_ZN6SdFile7seekSetEm+0xd2>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
     7ea:	8f 89       	ldd	r24, Y+23	; 0x17
     7ec:	98 8d       	ldd	r25, Y+24	; 0x18
     7ee:	a9 8d       	ldd	r26, Y+25	; 0x19
     7f0:	ba 8d       	ldd	r27, Y+26	; 0x1a
     7f2:	8e 83       	std	Y+6, r24	; 0x06
     7f4:	9f 83       	std	Y+7, r25	; 0x07
     7f6:	a8 87       	std	Y+8, r26	; 0x08
     7f8:	b9 87       	std	Y+9, r27	; 0x09
     7fa:	16 c0       	rjmp	.+44     	; 0x828 <_ZN6SdFile7seekSetEm+0xfe>
  } else {
    // advance from curPosition
    nNew -= nCur;
     7fc:	c0 1a       	sub	r12, r16
     7fe:	d1 0a       	sbc	r13, r17
     800:	e2 0a       	sbc	r14, r18
     802:	f3 0a       	sbc	r15, r19
     804:	11 c0       	rjmp	.+34     	; 0x828 <_ZN6SdFile7seekSetEm+0xfe>
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
     806:	4e 81       	ldd	r20, Y+6	; 0x06
     808:	5f 81       	ldd	r21, Y+7	; 0x07
     80a:	68 85       	ldd	r22, Y+8	; 0x08
     80c:	79 85       	ldd	r23, Y+9	; 0x09
     80e:	98 01       	movw	r18, r16
     810:	8b 8d       	ldd	r24, Y+27	; 0x1b
     812:	9c 8d       	ldd	r25, Y+28	; 0x1c
     814:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZNK8SdVolume6fatGetEmPm>
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	c9 1a       	sub	r12, r25
     81c:	d1 08       	sbc	r13, r1
     81e:	e1 08       	sbc	r14, r1
     820:	f1 08       	sbc	r15, r1
     822:	81 11       	cpse	r24, r1
     824:	06 c0       	rjmp	.+12     	; 0x832 <_ZN6SdFile7seekSetEm+0x108>
     826:	11 c0       	rjmp	.+34     	; 0x84a <_ZN6SdFile7seekSetEm+0x120>
     828:	4a 01       	movw	r8, r20
     82a:	5b 01       	movw	r10, r22
     82c:	8e 01       	movw	r16, r28
     82e:	0a 5f       	subi	r16, 0xFA	; 250
     830:	1f 4f       	sbci	r17, 0xFF	; 255
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
     832:	c1 14       	cp	r12, r1
     834:	d1 04       	cpc	r13, r1
     836:	e1 04       	cpc	r14, r1
     838:	f1 04       	cpc	r15, r1
     83a:	29 f7       	brne	.-54     	; 0x806 <_ZN6SdFile7seekSetEm+0xdc>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
     83c:	8a 86       	std	Y+10, r8	; 0x0a
     83e:	9b 86       	std	Y+11, r9	; 0x0b
     840:	ac 86       	std	Y+12, r10	; 0x0c
     842:	bd 86       	std	Y+13, r11	; 0x0d
  return true;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	01 c0       	rjmp	.+2      	; 0x84a <_ZN6SdFile7seekSetEm+0x120>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
     848:	80 e0       	ldi	r24, 0x00	; 0
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
  return true;
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	ff 90       	pop	r15
     854:	ef 90       	pop	r14
     856:	df 90       	pop	r13
     858:	cf 90       	pop	r12
     85a:	bf 90       	pop	r11
     85c:	af 90       	pop	r10
     85e:	9f 90       	pop	r9
     860:	8f 90       	pop	r8
     862:	08 95       	ret

00000864 <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	fc 01       	movw	r30, r24
     86e:	85 81       	ldd	r24, Z+5	; 0x05
  // only allow open files and directories
  if (!isOpen()) return false;
     870:	88 23       	and	r24, r24
     872:	d1 f1       	breq	.+116    	; 0x8e8 <_ZN6SdFile4syncEv+0x84>
     874:	ef 01       	movw	r28, r30

  if (flags_ & F_FILE_DIR_DIRTY) {
     876:	84 81       	ldd	r24, Z+4	; 0x04
     878:	88 23       	and	r24, r24
     87a:	94 f5       	brge	.+100    	; 0x8e0 <_ZN6SdFile4syncEv+0x7c>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	cf 01       	movw	r24, r30
     880:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN6SdFile13cacheDirEntryEh>
     884:	8c 01       	movw	r16, r24
    if (!d) return false;
     886:	89 2b       	or	r24, r25
     888:	71 f1       	breq	.+92     	; 0x8e6 <_ZN6SdFile4syncEv+0x82>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
     88a:	8d 81       	ldd	r24, Y+5	; 0x05
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	48 f4       	brcc	.+18     	; 0x8a2 <_ZN6SdFile4syncEv+0x3e>
     890:	8b 89       	ldd	r24, Y+19	; 0x13
     892:	9c 89       	ldd	r25, Y+20	; 0x14
     894:	ad 89       	ldd	r26, Y+21	; 0x15
     896:	be 89       	ldd	r27, Y+22	; 0x16
     898:	f8 01       	movw	r30, r16
     89a:	84 8f       	std	Z+28, r24	; 0x1c
     89c:	95 8f       	std	Z+29, r25	; 0x1d
     89e:	a6 8f       	std	Z+30, r26	; 0x1e
     8a0:	b7 8f       	std	Z+31, r27	; 0x1f

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
     8a2:	8f 89       	ldd	r24, Y+23	; 0x17
     8a4:	98 8d       	ldd	r25, Y+24	; 0x18
     8a6:	f8 01       	movw	r30, r16
     8a8:	93 8f       	std	Z+27, r25	; 0x1b
     8aa:	82 8f       	std	Z+26, r24	; 0x1a
    d->firstClusterHigh = firstCluster_ >> 16;
     8ac:	8f 89       	ldd	r24, Y+23	; 0x17
     8ae:	98 8d       	ldd	r25, Y+24	; 0x18
     8b0:	a9 8d       	ldd	r26, Y+25	; 0x19
     8b2:	ba 8d       	ldd	r27, Y+26	; 0x1a
     8b4:	b5 8b       	std	Z+21, r27	; 0x15
     8b6:	a4 8b       	std	Z+20, r26	; 0x14

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
     8b8:	e0 91 fb 04 	lds	r30, 0x04FB
     8bc:	f0 91 fc 04 	lds	r31, 0x04FC
     8c0:	30 97       	sbiw	r30, 0x00	; 0
     8c2:	59 f0       	breq	.+22     	; 0x8da <_ZN6SdFile4syncEv+0x76>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
     8c4:	b8 01       	movw	r22, r16
     8c6:	6a 5e       	subi	r22, 0xEA	; 234
     8c8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ca:	c8 01       	movw	r24, r16
     8cc:	48 96       	adiw	r24, 0x18	; 24
     8ce:	09 95       	icall
      d->lastAccessDate = d->lastWriteDate;
     8d0:	f8 01       	movw	r30, r16
     8d2:	80 8d       	ldd	r24, Z+24	; 0x18
     8d4:	91 8d       	ldd	r25, Z+25	; 0x19
     8d6:	93 8b       	std	Z+19, r25	; 0x13
     8d8:	82 8b       	std	Z+18, r24	; 0x12
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
     8da:	8c 81       	ldd	r24, Y+4	; 0x04
     8dc:	8f 77       	andi	r24, 0x7F	; 127
     8de:	8c 83       	std	Y+4, r24	; 0x04
  }
  return SdVolume::cacheFlush();
     8e0:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN8SdVolume10cacheFlushEv>
     8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <_ZN6SdFile4syncEv+0x84>
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
     8e6:	80 e0       	ldi	r24, 0x00	; 0
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	08 95       	ret

000008f2 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
     8f2:	2f 92       	push	r2
     8f4:	3f 92       	push	r3
     8f6:	4f 92       	push	r4
     8f8:	5f 92       	push	r5
     8fa:	6f 92       	push	r6
     8fc:	7f 92       	push	r7
     8fe:	8f 92       	push	r8
     900:	9f 92       	push	r9
     902:	af 92       	push	r10
     904:	bf 92       	push	r11
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	00 d0       	rcall	.+0      	; 0x918 <__stack+0x19>
     918:	00 d0       	rcall	.+0      	; 0x91a <__stack+0x1b>
     91a:	00 d0       	rcall	.+0      	; 0x91c <__stack+0x1d>
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	8c 01       	movw	r16, r24
     922:	1b 01       	movw	r2, r22
     924:	5e 83       	std	Y+6, r21	; 0x06
     926:	4d 83       	std	Y+5, r20	; 0x05

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
     928:	dc 01       	movw	r26, r24
     92a:	15 96       	adiw	r26, 0x05	; 5
     92c:	8c 91       	ld	r24, X
     92e:	15 97       	sbiw	r26, 0x05	; 5
     930:	81 30       	cpi	r24, 0x01	; 1
     932:	09 f0       	breq	.+2      	; 0x936 <__stack+0x37>
     934:	7d c1       	rjmp	.+762    	; 0xc30 <__stack+0x331>
     936:	14 96       	adiw	r26, 0x04	; 4
     938:	8c 91       	ld	r24, X
     93a:	14 97       	sbiw	r26, 0x04	; 4
     93c:	81 ff       	sbrs	r24, 1
     93e:	78 c1       	rjmp	.+752    	; 0xc30 <__stack+0x331>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
     940:	82 ff       	sbrs	r24, 2
     942:	18 c0       	rjmp	.+48     	; 0x974 <__stack+0x75>
     944:	53 96       	adiw	r26, 0x13	; 19
     946:	4d 91       	ld	r20, X+
     948:	5d 91       	ld	r21, X+
     94a:	6d 91       	ld	r22, X+
     94c:	7c 91       	ld	r23, X
     94e:	56 97       	sbiw	r26, 0x16	; 22
     950:	1a 96       	adiw	r26, 0x0a	; 10
     952:	8d 91       	ld	r24, X+
     954:	9d 91       	ld	r25, X+
     956:	0d 90       	ld	r0, X+
     958:	bc 91       	ld	r27, X
     95a:	a0 2d       	mov	r26, r0
     95c:	84 17       	cp	r24, r20
     95e:	95 07       	cpc	r25, r21
     960:	a6 07       	cpc	r26, r22
     962:	b7 07       	cpc	r27, r23
     964:	09 f4       	brne	.+2      	; 0x968 <__stack+0x69>
     966:	74 c1       	rjmp	.+744    	; 0xc50 <__stack+0x351>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
     968:	c8 01       	movw	r24, r16
     96a:	0e 94 95 03 	call	0x72a	; 0x72a <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
     96e:	88 23       	and	r24, r24
     970:	09 f4       	brne	.+2      	; 0x974 <__stack+0x75>
     972:	5e c1       	rjmp	.+700    	; 0xc30 <__stack+0x331>
  }

  while (nToWrite > 0) {
     974:	ed 81       	ldd	r30, Y+5	; 0x05
     976:	fe 81       	ldd	r31, Y+6	; 0x06
     978:	ef 2b       	or	r30, r31
     97a:	09 f4       	brne	.+2      	; 0x97e <__stack+0x7f>
     97c:	2d c1       	rjmp	.+602    	; 0xbd8 <__stack+0x2d9>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
     97e:	cd 80       	ldd	r12, Y+5	; 0x05
     980:	de 80       	ldd	r13, Y+6	; 0x06
     982:	a1 2c       	mov	r10, r1
     984:	68 94       	set
     986:	bb 24       	eor	r11, r11
     988:	b1 f8       	bld	r11, 1
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
     98a:	d8 01       	movw	r26, r16
     98c:	1a 96       	adiw	r26, 0x0a	; 10
     98e:	4d 91       	ld	r20, X+
     990:	5d 91       	ld	r21, X+
     992:	6d 91       	ld	r22, X+
     994:	7c 91       	ld	r23, X
     996:	1d 97       	sbiw	r26, 0x0d	; 13
     998:	5b 96       	adiw	r26, 0x1b	; 27
     99a:	ed 91       	ld	r30, X+
     99c:	fc 91       	ld	r31, X
     99e:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
     9a0:	2a 01       	movw	r4, r20
     9a2:	3b 01       	movw	r6, r22
     9a4:	03 2e       	mov	r0, r19
     9a6:	39 e0       	ldi	r19, 0x09	; 9
     9a8:	76 94       	lsr	r7
     9aa:	67 94       	ror	r6
     9ac:	57 94       	ror	r5
     9ae:	47 94       	ror	r4
     9b0:	3a 95       	dec	r19
     9b2:	d1 f7       	brne	.-12     	; 0x9a8 <__stack+0xa9>
     9b4:	30 2d       	mov	r19, r0
     9b6:	94 81       	ldd	r25, Z+4	; 0x04
     9b8:	91 50       	subi	r25, 0x01	; 1
     9ba:	94 21       	and	r25, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
     9bc:	4a 01       	movw	r8, r20
     9be:	b1 e0       	ldi	r27, 0x01	; 1
     9c0:	9b 22       	and	r9, r27
    if (blockOfCluster == 0 && blockOffset == 0) {
     9c2:	91 11       	cpse	r25, r1
     9c4:	56 c0       	rjmp	.+172    	; 0xa72 <__stack+0x173>
     9c6:	81 14       	cp	r8, r1
     9c8:	91 04       	cpc	r9, r1
     9ca:	09 f0       	breq	.+2      	; 0x9ce <__stack+0xcf>
     9cc:	74 c1       	rjmp	.+744    	; 0xcb6 <__stack+0x3b7>
      // start of new cluster
      if (curCluster_ == 0) {
     9ce:	d8 01       	movw	r26, r16
     9d0:	16 96       	adiw	r26, 0x06	; 6
     9d2:	4d 91       	ld	r20, X+
     9d4:	5d 91       	ld	r21, X+
     9d6:	6d 91       	ld	r22, X+
     9d8:	7c 91       	ld	r23, X
     9da:	19 97       	sbiw	r26, 0x09	; 9
     9dc:	41 15       	cp	r20, r1
     9de:	51 05       	cpc	r21, r1
     9e0:	61 05       	cpc	r22, r1
     9e2:	71 05       	cpc	r23, r1
     9e4:	b1 f4       	brne	.+44     	; 0xa12 <__stack+0x113>
        if (firstCluster_ == 0) {
     9e6:	57 96       	adiw	r26, 0x17	; 23
     9e8:	8d 91       	ld	r24, X+
     9ea:	9d 91       	ld	r25, X+
     9ec:	0d 90       	ld	r0, X+
     9ee:	bc 91       	ld	r27, X
     9f0:	a0 2d       	mov	r26, r0
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	31 f4       	brne	.+12     	; 0xa06 <__stack+0x107>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
     9fa:	c8 01       	movw	r24, r16
     9fc:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_ZN6SdFile10addClusterEv>
     a00:	81 11       	cpse	r24, r1
     a02:	2c c1       	rjmp	.+600    	; 0xc5c <__stack+0x35d>
     a04:	15 c1       	rjmp	.+554    	; 0xc30 <__stack+0x331>
        } else {
          curCluster_ = firstCluster_;
     a06:	f8 01       	movw	r30, r16
     a08:	86 83       	std	Z+6, r24	; 0x06
     a0a:	97 83       	std	Z+7, r25	; 0x07
     a0c:	a0 87       	std	Z+8, r26	; 0x08
     a0e:	b1 87       	std	Z+9, r27	; 0x09
     a10:	25 c1       	rjmp	.+586    	; 0xc5c <__stack+0x35d>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
     a12:	9e 01       	movw	r18, r28
     a14:	2f 5f       	subi	r18, 0xFF	; 255
     a16:	3f 4f       	sbci	r19, 0xFF	; 255
     a18:	cf 01       	movw	r24, r30
     a1a:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZNK8SdVolume6fatGetEmPm>
     a1e:	81 11       	cpse	r24, r1
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <__stack+0x127>
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	72 c1       	rjmp	.+740    	; 0xd0a <__stack+0x40b>
        if (vol_->isEOC(next)) {
     a26:	49 81       	ldd	r20, Y+1	; 0x01
     a28:	5a 81       	ldd	r21, Y+2	; 0x02
     a2a:	6b 81       	ldd	r22, Y+3	; 0x03
     a2c:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
     a2e:	d8 01       	movw	r26, r16
     a30:	5b 96       	adiw	r26, 0x1b	; 27
     a32:	ed 91       	ld	r30, X+
     a34:	fc 91       	ld	r31, X
     a36:	5c 97       	sbiw	r26, 0x1c	; 28
     a38:	87 89       	ldd	r24, Z+23	; 0x17
     a3a:	80 31       	cpi	r24, 0x10	; 16
     a3c:	29 f0       	breq	.+10     	; 0xa48 <__stack+0x149>
     a3e:	88 ef       	ldi	r24, 0xF8	; 248
     a40:	9f ef       	ldi	r25, 0xFF	; 255
     a42:	af ef       	ldi	r26, 0xFF	; 255
     a44:	bf e0       	ldi	r27, 0x0F	; 15
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <__stack+0x151>
     a48:	88 ef       	ldi	r24, 0xF8	; 248
     a4a:	9f ef       	ldi	r25, 0xFF	; 255
     a4c:	a0 e0       	ldi	r26, 0x00	; 0
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	48 17       	cp	r20, r24
     a52:	59 07       	cpc	r21, r25
     a54:	6a 07       	cpc	r22, r26
     a56:	7b 07       	cpc	r23, r27
     a58:	30 f0       	brcs	.+12     	; 0xa66 <__stack+0x167>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
     a5a:	c8 01       	movw	r24, r16
     a5c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_ZN6SdFile10addClusterEv>
     a60:	81 11       	cpse	r24, r1
     a62:	fc c0       	rjmp	.+504    	; 0xc5c <__stack+0x35d>
     a64:	e5 c0       	rjmp	.+458    	; 0xc30 <__stack+0x331>
        } else {
          curCluster_ = next;
     a66:	f8 01       	movw	r30, r16
     a68:	46 83       	std	Z+6, r20	; 0x06
     a6a:	57 83       	std	Z+7, r21	; 0x07
     a6c:	60 87       	std	Z+8, r22	; 0x08
     a6e:	71 87       	std	Z+9, r23	; 0x09
     a70:	f5 c0       	rjmp	.+490    	; 0xc5c <__stack+0x35d>
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
     a72:	95 01       	movw	r18, r10
     a74:	28 19       	sub	r18, r8
     a76:	39 09       	sbc	r19, r9
     a78:	76 01       	movw	r14, r12
     a7a:	2c 15       	cp	r18, r12
     a7c:	3d 05       	cpc	r19, r13
     a7e:	08 f4       	brcc	.+2      	; 0xa82 <__stack+0x183>
     a80:	79 01       	movw	r14, r18
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
     a82:	d8 01       	movw	r26, r16
     a84:	16 96       	adiw	r26, 0x06	; 6
     a86:	4d 90       	ld	r4, X+
     a88:	5d 90       	ld	r5, X+
     a8a:	6d 90       	ld	r6, X+
     a8c:	7c 90       	ld	r7, X
     a8e:	19 97       	sbiw	r26, 0x09	; 9
     a90:	b2 e0       	ldi	r27, 0x02	; 2
     a92:	4b 1a       	sub	r4, r27
     a94:	51 08       	sbc	r5, r1
     a96:	61 08       	sbc	r6, r1
     a98:	71 08       	sbc	r7, r1
     a9a:	05 84       	ldd	r0, Z+13	; 0x0d
     a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <__stack+0x1a7>
     a9e:	44 0c       	add	r4, r4
     aa0:	55 1c       	adc	r5, r5
     aa2:	66 1c       	adc	r6, r6
     aa4:	77 1c       	adc	r7, r7
     aa6:	0a 94       	dec	r0
     aa8:	d2 f7       	brpl	.-12     	; 0xa9e <__stack+0x19f>
     aaa:	46 85       	ldd	r20, Z+14	; 0x0e
     aac:	57 85       	ldd	r21, Z+15	; 0x0f
     aae:	60 89       	ldd	r22, Z+16	; 0x10
     ab0:	71 89       	ldd	r23, Z+17	; 0x11
     ab2:	44 0e       	add	r4, r20
     ab4:	55 1e       	adc	r5, r21
     ab6:	66 1e       	adc	r6, r22
     ab8:	77 1e       	adc	r7, r23

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
     aba:	49 0e       	add	r4, r25
     abc:	51 1c       	adc	r5, r1
     abe:	61 1c       	adc	r6, r1
     ac0:	71 1c       	adc	r7, r1
    if (n == 512) {
     ac2:	e1 14       	cp	r14, r1
     ac4:	e2 e0       	ldi	r30, 0x02	; 2
     ac6:	fe 06       	cpc	r15, r30
     ac8:	41 f5       	brne	.+80     	; 0xb1a <__stack+0x21b>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
     aca:	80 91 00 01 	lds	r24, 0x0100
     ace:	90 91 01 01 	lds	r25, 0x0101
     ad2:	a0 91 02 01 	lds	r26, 0x0102
     ad6:	b0 91 03 01 	lds	r27, 0x0103
     ada:	84 15       	cp	r24, r4
     adc:	95 05       	cpc	r25, r5
     ade:	a6 05       	cpc	r26, r6
     ae0:	b7 05       	cpc	r27, r7
     ae2:	59 f4       	brne	.+22     	; 0xafa <__stack+0x1fb>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
     ae4:	8f ef       	ldi	r24, 0xFF	; 255
     ae6:	9f ef       	ldi	r25, 0xFF	; 255
     ae8:	dc 01       	movw	r26, r24
     aea:	80 93 00 01 	sts	0x0100, r24
     aee:	90 93 01 01 	sts	0x0101, r25
     af2:	a0 93 02 01 	sts	0x0102, r26
     af6:	b0 93 03 01 	sts	0x0103, r27
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
     afa:	91 01       	movw	r18, r2
     afc:	b3 01       	movw	r22, r6
     afe:	a2 01       	movw	r20, r4
     b00:	80 91 02 05 	lds	r24, 0x0502
     b04:	90 91 03 05 	lds	r25, 0x0503
     b08:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
     b0c:	88 23       	and	r24, r24
     b0e:	09 f4       	brne	.+2      	; 0xb12 <__stack+0x213>
     b10:	8f c0       	rjmp	.+286    	; 0xc30 <__stack+0x331>
      src += 512;
     b12:	9e ef       	ldi	r25, 0xFE	; 254
     b14:	39 1a       	sub	r3, r25
     b16:	75 01       	movw	r14, r10
     b18:	4c c0       	rjmp	.+152    	; 0xbb2 <__stack+0x2b3>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
     b1a:	81 14       	cp	r8, r1
     b1c:	91 04       	cpc	r9, r1
     b1e:	29 f5       	brne	.+74     	; 0xb6a <__stack+0x26b>
     b20:	d8 01       	movw	r26, r16
     b22:	1a 96       	adiw	r26, 0x0a	; 10
     b24:	4d 91       	ld	r20, X+
     b26:	5d 91       	ld	r21, X+
     b28:	6d 91       	ld	r22, X+
     b2a:	7c 91       	ld	r23, X
     b2c:	1d 97       	sbiw	r26, 0x0d	; 13
     b2e:	53 96       	adiw	r26, 0x13	; 19
     b30:	8d 91       	ld	r24, X+
     b32:	9d 91       	ld	r25, X+
     b34:	0d 90       	ld	r0, X+
     b36:	bc 91       	ld	r27, X
     b38:	a0 2d       	mov	r26, r0
     b3a:	48 17       	cp	r20, r24
     b3c:	59 07       	cpc	r21, r25
     b3e:	6a 07       	cpc	r22, r26
     b40:	7b 07       	cpc	r23, r27
     b42:	98 f0       	brcs	.+38     	; 0xb6a <__stack+0x26b>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
     b44:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN8SdVolume10cacheFlushEv>
     b48:	88 23       	and	r24, r24
     b4a:	09 f4       	brne	.+2      	; 0xb4e <__stack+0x24f>
     b4c:	71 c0       	rjmp	.+226    	; 0xc30 <__stack+0x331>
        SdVolume::cacheBlockNumber_ = block;
     b4e:	40 92 00 01 	sts	0x0100, r4
     b52:	50 92 01 01 	sts	0x0101, r5
     b56:	60 92 02 01 	sts	0x0102, r6
     b5a:	70 92 03 01 	sts	0x0103, r7
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
     b5e:	80 91 01 05 	lds	r24, 0x0501
     b62:	81 60       	ori	r24, 0x01	; 1
     b64:	80 93 01 05 	sts	0x0501, r24
     b68:	08 c0       	rjmp	.+16     	; 0xb7a <__stack+0x27b>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	c3 01       	movw	r24, r6
     b6e:	b2 01       	movw	r22, r4
     b70:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN8SdVolume13cacheRawBlockEmh>
     b74:	88 23       	and	r24, r24
     b76:	09 f4       	brne	.+2      	; 0xb7a <__stack+0x27b>
     b78:	5b c0       	rjmp	.+182    	; 0xc30 <__stack+0x331>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
     b7a:	c4 01       	movw	r24, r8
     b7c:	8c 5f       	subi	r24, 0xFC	; 252
     b7e:	9a 4f       	sbci	r25, 0xFA	; 250
      uint8_t* end = dst + n;
     b80:	ac 01       	movw	r20, r24
     b82:	4e 0d       	add	r20, r14
     b84:	5f 1d       	adc	r21, r15
      while (dst != end) *dst++ = *src++;
     b86:	84 17       	cp	r24, r20
     b88:	95 07       	cpc	r25, r21
     b8a:	99 f0       	breq	.+38     	; 0xbb2 <__stack+0x2b3>
     b8c:	f1 01       	movw	r30, r2
     b8e:	dc 01       	movw	r26, r24
     b90:	91 01       	movw	r18, r2
     b92:	2e 0d       	add	r18, r14
     b94:	3f 1d       	adc	r19, r15
     b96:	61 91       	ld	r22, Z+
     b98:	6d 93       	st	X+, r22
     b9a:	e2 17       	cp	r30, r18
     b9c:	f3 07       	cpc	r31, r19
     b9e:	d9 f7       	brne	.-10     	; 0xb96 <__stack+0x297>
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	e1 e0       	ldi	r30, 0x01	; 1
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	e8 1b       	sub	r30, r24
     ba8:	f9 0b       	sbc	r31, r25
     baa:	4e 0f       	add	r20, r30
     bac:	5f 1f       	adc	r21, r31
     bae:	24 0e       	add	r2, r20
     bb0:	35 1e       	adc	r3, r21
    }
    nToWrite -= n;
     bb2:	ce 18       	sub	r12, r14
     bb4:	df 08       	sbc	r13, r15
    curPosition_ += n;
     bb6:	f8 01       	movw	r30, r16
     bb8:	82 85       	ldd	r24, Z+10	; 0x0a
     bba:	93 85       	ldd	r25, Z+11	; 0x0b
     bbc:	a4 85       	ldd	r26, Z+12	; 0x0c
     bbe:	b5 85       	ldd	r27, Z+13	; 0x0d
     bc0:	8e 0d       	add	r24, r14
     bc2:	9f 1d       	adc	r25, r15
     bc4:	a1 1d       	adc	r26, r1
     bc6:	b1 1d       	adc	r27, r1
     bc8:	82 87       	std	Z+10, r24	; 0x0a
     bca:	93 87       	std	Z+11, r25	; 0x0b
     bcc:	a4 87       	std	Z+12, r26	; 0x0c
     bce:	b5 87       	std	Z+13, r27	; 0x0d
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
     bd0:	c1 14       	cp	r12, r1
     bd2:	d1 04       	cpc	r13, r1
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <__stack+0x2d9>
     bd6:	d9 ce       	rjmp	.-590    	; 0x98a <__stack+0x8b>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
     bd8:	f8 01       	movw	r30, r16
     bda:	82 85       	ldd	r24, Z+10	; 0x0a
     bdc:	93 85       	ldd	r25, Z+11	; 0x0b
     bde:	a4 85       	ldd	r26, Z+12	; 0x0c
     be0:	b5 85       	ldd	r27, Z+13	; 0x0d
     be2:	43 89       	ldd	r20, Z+19	; 0x13
     be4:	54 89       	ldd	r21, Z+20	; 0x14
     be6:	65 89       	ldd	r22, Z+21	; 0x15
     be8:	76 89       	ldd	r23, Z+22	; 0x16
     bea:	48 17       	cp	r20, r24
     bec:	59 07       	cpc	r21, r25
     bee:	6a 07       	cpc	r22, r26
     bf0:	7b 07       	cpc	r23, r27
     bf2:	40 f4       	brcc	.+16     	; 0xc04 <__stack+0x305>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
     bf4:	83 8b       	std	Z+19, r24	; 0x13
     bf6:	94 8b       	std	Z+20, r25	; 0x14
     bf8:	a5 8b       	std	Z+21, r26	; 0x15
     bfa:	b6 8b       	std	Z+22, r27	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
     bfc:	84 81       	ldd	r24, Z+4	; 0x04
     bfe:	80 68       	ori	r24, 0x80	; 128
     c00:	84 83       	std	Z+4, r24	; 0x04
     c02:	0d c0       	rjmp	.+26     	; 0xc1e <__stack+0x31f>
  } else if (dateTime_ && nbyte) {
     c04:	80 91 fb 04 	lds	r24, 0x04FB
     c08:	90 91 fc 04 	lds	r25, 0x04FC
     c0c:	89 2b       	or	r24, r25
     c0e:	39 f0       	breq	.+14     	; 0xc1e <__stack+0x31f>
     c10:	2d 81       	ldd	r18, Y+5	; 0x05
     c12:	3e 81       	ldd	r19, Y+6	; 0x06
     c14:	23 2b       	or	r18, r19
     c16:	19 f0       	breq	.+6      	; 0xc1e <__stack+0x31f>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
     c18:	84 81       	ldd	r24, Z+4	; 0x04
     c1a:	80 68       	ori	r24, 0x80	; 128
     c1c:	84 83       	std	Z+4, r24	; 0x04
  }

  if (flags_ & O_SYNC) {
     c1e:	f8 01       	movw	r30, r16
     c20:	84 81       	ldd	r24, Z+4	; 0x04
     c22:	83 ff       	sbrs	r24, 3
     c24:	0f c0       	rjmp	.+30     	; 0xc44 <__stack+0x345>
    if (!sync()) goto writeErrorReturn;
     c26:	c8 01       	movw	r24, r16
     c28:	0e 94 32 04 	call	0x864	; 0x864 <_ZN6SdFile4syncEv>
     c2c:	81 11       	cpse	r24, r1
     c2e:	0d c0       	rjmp	.+26     	; 0xc4a <__stack+0x34b>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	d8 01       	movw	r26, r16
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	63 c0       	rjmp	.+198    	; 0xd0a <__stack+0x40b>
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
  }
  return nbyte;
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	9e 81       	ldd	r25, Y+6	; 0x06
     c48:	60 c0       	rjmp	.+192    	; 0xd0a <__stack+0x40b>
     c4a:	8d 81       	ldd	r24, Y+5	; 0x05
     c4c:	9e 81       	ldd	r25, Y+6	; 0x06
     c4e:	5d c0       	rjmp	.+186    	; 0xd0a <__stack+0x40b>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
     c50:	ed 81       	ldd	r30, Y+5	; 0x05
     c52:	fe 81       	ldd	r31, Y+6	; 0x06
     c54:	ef 2b       	or	r30, r31
     c56:	09 f0       	breq	.+2      	; 0xc5a <__stack+0x35b>
     c58:	92 ce       	rjmp	.-732    	; 0x97e <__stack+0x7f>
     c5a:	e1 cf       	rjmp	.-62     	; 0xc1e <__stack+0x31f>
     c5c:	76 01       	movw	r14, r12
     c5e:	f1 e0       	ldi	r31, 0x01	; 1
     c60:	cf 16       	cp	r12, r31
     c62:	f2 e0       	ldi	r31, 0x02	; 2
     c64:	df 06       	cpc	r13, r31
     c66:	08 f0       	brcs	.+2      	; 0xc6a <__stack+0x36b>
     c68:	75 01       	movw	r14, r10

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
     c6a:	d8 01       	movw	r26, r16
     c6c:	5b 96       	adiw	r26, 0x1b	; 27
     c6e:	ed 91       	ld	r30, X+
     c70:	fc 91       	ld	r31, X
     c72:	5c 97       	sbiw	r26, 0x1c	; 28
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
     c74:	16 96       	adiw	r26, 0x06	; 6
     c76:	4d 90       	ld	r4, X+
     c78:	5d 90       	ld	r5, X+
     c7a:	6d 90       	ld	r6, X+
     c7c:	7c 90       	ld	r7, X
     c7e:	19 97       	sbiw	r26, 0x09	; 9
     c80:	b2 e0       	ldi	r27, 0x02	; 2
     c82:	4b 1a       	sub	r4, r27
     c84:	51 08       	sbc	r5, r1
     c86:	61 08       	sbc	r6, r1
     c88:	71 08       	sbc	r7, r1
     c8a:	05 84       	ldd	r0, Z+13	; 0x0d
     c8c:	04 c0       	rjmp	.+8      	; 0xc96 <__stack+0x397>
     c8e:	44 0c       	add	r4, r4
     c90:	55 1c       	adc	r5, r5
     c92:	66 1c       	adc	r6, r6
     c94:	77 1c       	adc	r7, r7
     c96:	0a 94       	dec	r0
     c98:	d2 f7       	brpl	.-12     	; 0xc8e <__stack+0x38f>
     c9a:	86 85       	ldd	r24, Z+14	; 0x0e
     c9c:	97 85       	ldd	r25, Z+15	; 0x0f
     c9e:	a0 89       	ldd	r26, Z+16	; 0x10
     ca0:	b1 89       	ldd	r27, Z+17	; 0x11
     ca2:	48 0e       	add	r4, r24
     ca4:	59 1e       	adc	r5, r25
     ca6:	6a 1e       	adc	r6, r26
     ca8:	7b 1e       	adc	r7, r27
    if (n == 512) {
     caa:	e1 14       	cp	r14, r1
     cac:	e2 e0       	ldi	r30, 0x02	; 2
     cae:	fe 06       	cpc	r15, r30
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <__stack+0x3b5>
     cb2:	36 cf       	rjmp	.-404    	; 0xb20 <__stack+0x221>
     cb4:	0a cf       	rjmp	.-492    	; 0xaca <__stack+0x1cb>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
     cb6:	c5 01       	movw	r24, r10
     cb8:	88 19       	sub	r24, r8
     cba:	99 09       	sbc	r25, r9
     cbc:	76 01       	movw	r14, r12
     cbe:	8c 15       	cp	r24, r12
     cc0:	9d 05       	cpc	r25, r13
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <__stack+0x3c7>
     cc4:	7c 01       	movw	r14, r24
     cc6:	d8 01       	movw	r26, r16
     cc8:	16 96       	adiw	r26, 0x06	; 6
     cca:	4d 90       	ld	r4, X+
     ccc:	5d 90       	ld	r5, X+
     cce:	6d 90       	ld	r6, X+
     cd0:	7c 90       	ld	r7, X
     cd2:	19 97       	sbiw	r26, 0x09	; 9
     cd4:	b2 e0       	ldi	r27, 0x02	; 2
     cd6:	4b 1a       	sub	r4, r27
     cd8:	51 08       	sbc	r5, r1
     cda:	61 08       	sbc	r6, r1
     cdc:	71 08       	sbc	r7, r1
     cde:	05 84       	ldd	r0, Z+13	; 0x0d
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__stack+0x3eb>
     ce2:	44 0c       	add	r4, r4
     ce4:	55 1c       	adc	r5, r5
     ce6:	66 1c       	adc	r6, r6
     ce8:	77 1c       	adc	r7, r7
     cea:	0a 94       	dec	r0
     cec:	d2 f7       	brpl	.-12     	; 0xce2 <__stack+0x3e3>
     cee:	86 85       	ldd	r24, Z+14	; 0x0e
     cf0:	97 85       	ldd	r25, Z+15	; 0x0f
     cf2:	a0 89       	ldd	r26, Z+16	; 0x10
     cf4:	b1 89       	ldd	r27, Z+17	; 0x11
     cf6:	48 0e       	add	r4, r24
     cf8:	59 1e       	adc	r5, r25
     cfa:	6a 1e       	adc	r6, r26
     cfc:	7b 1e       	adc	r7, r27
    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
     cfe:	e1 14       	cp	r14, r1
     d00:	e2 e0       	ldi	r30, 0x02	; 2
     d02:	fe 06       	cpc	r15, r30
     d04:	09 f0       	breq	.+2      	; 0xd08 <__stack+0x409>
     d06:	31 cf       	rjmp	.-414    	; 0xb6a <__stack+0x26b>
     d08:	e0 ce       	rjmp	.-576    	; 0xaca <__stack+0x1cb>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
     d0a:	26 96       	adiw	r28, 0x06	; 6
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	9f 90       	pop	r9
     d2c:	8f 90       	pop	r8
     d2e:	7f 90       	pop	r7
     d30:	6f 90       	pop	r6
     d32:	5f 90       	pop	r5
     d34:	4f 90       	pop	r4
     d36:	3f 90       	pop	r3
     d38:	2f 90       	pop	r2
     d3a:	08 95       	ret

00000d3c <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	1f 92       	push	r1
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	be 01       	movw	r22, r28
     d4e:	6f 5f       	subi	r22, 0xFF	; 255
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	0e 94 79 04 	call	0x8f2	; 0x8f2 <_ZN6SdFile5writeEPKvj>
}
     d56:	0f 90       	pop	r0
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	08 95       	ret

00000d5e <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
     d5e:	80 91 01 05 	lds	r24, 0x0501
     d62:	88 23       	and	r24, r24
     d64:	a9 f1       	breq	.+106    	; 0xdd0 <_ZN8SdVolume10cacheFlushEv+0x72>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
     d66:	40 91 00 01 	lds	r20, 0x0100
     d6a:	50 91 01 01 	lds	r21, 0x0101
     d6e:	60 91 02 01 	lds	r22, 0x0102
     d72:	70 91 03 01 	lds	r23, 0x0103
     d76:	24 e0       	ldi	r18, 0x04	; 4
     d78:	35 e0       	ldi	r19, 0x05	; 5
     d7a:	80 91 02 05 	lds	r24, 0x0502
     d7e:	90 91 03 05 	lds	r25, 0x0503
     d82:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Sd2Card10writeBlockEmPKh>
     d86:	88 23       	and	r24, r24
     d88:	21 f1       	breq	.+72     	; 0xdd2 <_ZN8SdVolume10cacheFlushEv+0x74>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
     d8a:	40 91 fd 04 	lds	r20, 0x04FD
     d8e:	50 91 fe 04 	lds	r21, 0x04FE
     d92:	60 91 ff 04 	lds	r22, 0x04FF
     d96:	70 91 00 05 	lds	r23, 0x0500
     d9a:	41 15       	cp	r20, r1
     d9c:	51 05       	cpc	r21, r1
     d9e:	61 05       	cpc	r22, r1
     da0:	71 05       	cpc	r23, r1
     da2:	91 f0       	breq	.+36     	; 0xdc8 <_ZN8SdVolume10cacheFlushEv+0x6a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
     da4:	24 e0       	ldi	r18, 0x04	; 4
     da6:	35 e0       	ldi	r19, 0x05	; 5
     da8:	80 91 02 05 	lds	r24, 0x0502
     dac:	90 91 03 05 	lds	r25, 0x0503
     db0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN7Sd2Card10writeBlockEmPKh>
     db4:	88 23       	and	r24, r24
     db6:	69 f0       	breq	.+26     	; 0xdd2 <_ZN8SdVolume10cacheFlushEv+0x74>
        return false;
      }
      cacheMirrorBlock_ = 0;
     db8:	10 92 fd 04 	sts	0x04FD, r1
     dbc:	10 92 fe 04 	sts	0x04FE, r1
     dc0:	10 92 ff 04 	sts	0x04FF, r1
     dc4:	10 92 00 05 	sts	0x0500, r1
    }
    cacheDirty_ = 0;
     dc8:	10 92 01 05 	sts	0x0501, r1
  }
  return true;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	08 95       	ret
     dd0:	81 e0       	ldi	r24, 0x01	; 1
}
     dd2:	08 95       	ret

00000dd4 <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
     dd4:	cf 92       	push	r12
     dd6:	df 92       	push	r13
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	cf 93       	push	r28
     dde:	6b 01       	movw	r12, r22
     de0:	7c 01       	movw	r14, r24
     de2:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
     de4:	80 91 00 01 	lds	r24, 0x0100
     de8:	90 91 01 01 	lds	r25, 0x0101
     dec:	a0 91 02 01 	lds	r26, 0x0102
     df0:	b0 91 03 01 	lds	r27, 0x0103
     df4:	8c 15       	cp	r24, r12
     df6:	9d 05       	cpc	r25, r13
     df8:	ae 05       	cpc	r26, r14
     dfa:	bf 05       	cpc	r27, r15
     dfc:	c1 f0       	breq	.+48     	; 0xe2e <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    if (!cacheFlush()) return false;
     dfe:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN8SdVolume10cacheFlushEv>
     e02:	88 23       	and	r24, r24
     e04:	d1 f0       	breq	.+52     	; 0xe3a <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
     e06:	24 e0       	ldi	r18, 0x04	; 4
     e08:	35 e0       	ldi	r19, 0x05	; 5
     e0a:	b7 01       	movw	r22, r14
     e0c:	a6 01       	movw	r20, r12
     e0e:	80 91 02 05 	lds	r24, 0x0502
     e12:	90 91 03 05 	lds	r25, 0x0503
     e16:	0e 94 b8 02 	call	0x570	; 0x570 <_ZN7Sd2Card9readBlockEmPh>
     e1a:	88 23       	and	r24, r24
     e1c:	71 f0       	breq	.+28     	; 0xe3a <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    cacheBlockNumber_ = blockNumber;
     e1e:	c0 92 00 01 	sts	0x0100, r12
     e22:	d0 92 01 01 	sts	0x0101, r13
     e26:	e0 92 02 01 	sts	0x0102, r14
     e2a:	f0 92 03 01 	sts	0x0103, r15
  }
  cacheDirty_ |= action;
     e2e:	80 91 01 05 	lds	r24, 0x0501
     e32:	c8 2b       	or	r28, r24
     e34:	c0 93 01 05 	sts	0x0501, r28
  return true;
     e38:	81 e0       	ldi	r24, 0x01	; 1
}
     e3a:	cf 91       	pop	r28
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	df 90       	pop	r13
     e42:	cf 90       	pop	r12
     e44:	08 95       	ret

00000e46 <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
     e46:	8f 92       	push	r8
     e48:	9f 92       	push	r9
     e4a:	af 92       	push	r10
     e4c:	bf 92       	push	r11
     e4e:	cf 92       	push	r12
     e50:	df 92       	push	r13
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	e9 01       	movw	r28, r18
  if (cluster > (clusterCount_ + 1)) return false;
     e60:	fc 01       	movw	r30, r24
     e62:	01 85       	ldd	r16, Z+9	; 0x09
     e64:	12 85       	ldd	r17, Z+10	; 0x0a
     e66:	23 85       	ldd	r18, Z+11	; 0x0b
     e68:	34 85       	ldd	r19, Z+12	; 0x0c
     e6a:	0f 5f       	subi	r16, 0xFF	; 255
     e6c:	1f 4f       	sbci	r17, 0xFF	; 255
     e6e:	2f 4f       	sbci	r18, 0xFF	; 255
     e70:	3f 4f       	sbci	r19, 0xFF	; 255
     e72:	04 17       	cp	r16, r20
     e74:	15 07       	cpc	r17, r21
     e76:	26 07       	cpc	r18, r22
     e78:	37 07       	cpc	r19, r23
     e7a:	08 f4       	brcc	.+2      	; 0xe7e <_ZNK8SdVolume6fatGetEmPm+0x38>
     e7c:	77 c0       	rjmp	.+238    	; 0xf6c <_ZNK8SdVolume6fatGetEmPm+0x126>
     e7e:	8e 01       	movw	r16, r28
     e80:	6a 01       	movw	r12, r20
     e82:	7b 01       	movw	r14, r22
     e84:	ec 01       	movw	r28, r24
  uint32_t lba = fatStartBlock_;
     e86:	83 89       	ldd	r24, Z+19	; 0x13
     e88:	94 89       	ldd	r25, Z+20	; 0x14
     e8a:	a5 89       	ldd	r26, Z+21	; 0x15
     e8c:	b6 89       	ldd	r27, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     e8e:	27 89       	ldd	r18, Z+23	; 0x17
     e90:	20 31       	cpi	r18, 0x10	; 16
     e92:	d1 f4       	brne	.+52     	; 0xec8 <_ZNK8SdVolume6fatGetEmPm+0x82>
     e94:	45 2f       	mov	r20, r21
     e96:	56 2f       	mov	r21, r22
     e98:	67 2f       	mov	r22, r23
     e9a:	77 27       	eor	r23, r23
     e9c:	4a 01       	movw	r8, r20
     e9e:	5b 01       	movw	r10, r22
     ea0:	88 0e       	add	r8, r24
     ea2:	99 1e       	adc	r9, r25
     ea4:	aa 1e       	adc	r10, r26
     ea6:	bb 1e       	adc	r11, r27
     ea8:	c5 01       	movw	r24, r10
     eaa:	b4 01       	movw	r22, r8
  if (lba != cacheBlockNumber_) {
     eac:	80 90 00 01 	lds	r8, 0x0100
     eb0:	90 90 01 01 	lds	r9, 0x0101
     eb4:	a0 90 02 01 	lds	r10, 0x0102
     eb8:	b0 90 03 01 	lds	r11, 0x0103
     ebc:	68 15       	cp	r22, r8
     ebe:	79 05       	cpc	r23, r9
     ec0:	8a 05       	cpc	r24, r10
     ec2:	9b 05       	cpc	r25, r11
     ec4:	f1 f4       	brne	.+60     	; 0xf02 <_ZNK8SdVolume6fatGetEmPm+0xbc>
     ec6:	25 c0       	rjmp	.+74     	; 0xf12 <_ZNK8SdVolume6fatGetEmPm+0xcc>
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     ec8:	68 94       	set
     eca:	16 f8       	bld	r1, 6
     ecc:	76 95       	lsr	r23
     ece:	67 95       	ror	r22
     ed0:	57 95       	ror	r21
     ed2:	47 95       	ror	r20
     ed4:	16 94       	lsr	r1
     ed6:	d1 f7       	brne	.-12     	; 0xecc <_ZNK8SdVolume6fatGetEmPm+0x86>
     ed8:	4a 01       	movw	r8, r20
     eda:	5b 01       	movw	r10, r22
     edc:	88 0e       	add	r8, r24
     ede:	99 1e       	adc	r9, r25
     ee0:	aa 1e       	adc	r10, r26
     ee2:	bb 1e       	adc	r11, r27
     ee4:	c5 01       	movw	r24, r10
     ee6:	b4 01       	movw	r22, r8
  if (lba != cacheBlockNumber_) {
     ee8:	80 90 00 01 	lds	r8, 0x0100
     eec:	90 90 01 01 	lds	r9, 0x0101
     ef0:	a0 90 02 01 	lds	r10, 0x0102
     ef4:	b0 90 03 01 	lds	r11, 0x0103
     ef8:	68 15       	cp	r22, r8
     efa:	79 05       	cpc	r23, r9
     efc:	8a 05       	cpc	r24, r10
     efe:	9b 05       	cpc	r25, r11
     f00:	e1 f0       	breq	.+56     	; 0xf3a <_ZNK8SdVolume6fatGetEmPm+0xf4>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN8SdVolume13cacheRawBlockEmh>
     f08:	88 23       	and	r24, r24
     f0a:	89 f1       	breq	.+98     	; 0xf6e <_ZNK8SdVolume6fatGetEmPm+0x128>
  }
  if (fatType_ == 16) {
     f0c:	8f 89       	ldd	r24, Y+23	; 0x17
     f0e:	80 31       	cpi	r24, 0x10	; 16
     f10:	a1 f4       	brne	.+40     	; 0xf3a <_ZNK8SdVolume6fatGetEmPm+0xf4>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
     f12:	dd 24       	eor	r13, r13
     f14:	ee 24       	eor	r14, r14
     f16:	ff 24       	eor	r15, r15
     f18:	c6 01       	movw	r24, r12
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	fc 01       	movw	r30, r24
     f20:	ec 5f       	subi	r30, 0xFC	; 252
     f22:	fa 4f       	sbci	r31, 0xFA	; 250
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	a0 e0       	ldi	r26, 0x00	; 0
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	f8 01       	movw	r30, r16
     f2e:	80 83       	st	Z, r24
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	a2 83       	std	Z+2, r26	; 0x02
     f34:	b3 83       	std	Z+3, r27	; 0x03
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	1a c0       	rjmp	.+52     	; 0xf6e <_ZNK8SdVolume6fatGetEmPm+0x128>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
     f3a:	e8 94       	clt
     f3c:	c7 f8       	bld	r12, 7
     f3e:	dd 24       	eor	r13, r13
     f40:	ee 24       	eor	r14, r14
     f42:	ff 24       	eor	r15, r15
     f44:	c6 01       	movw	r24, r12
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	fc 01       	movw	r30, r24
     f50:	ec 5f       	subi	r30, 0xFC	; 252
     f52:	fa 4f       	sbci	r31, 0xFA	; 250
     f54:	80 81       	ld	r24, Z
     f56:	91 81       	ldd	r25, Z+1	; 0x01
     f58:	a2 81       	ldd	r26, Z+2	; 0x02
     f5a:	b3 81       	ldd	r27, Z+3	; 0x03
     f5c:	bf 70       	andi	r27, 0x0F	; 15
     f5e:	f8 01       	movw	r30, r16
     f60:	80 83       	st	Z, r24
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	a2 83       	std	Z+2, r26	; 0x02
     f66:	b3 83       	std	Z+3, r27	; 0x03
  }
  return true;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <_ZNK8SdVolume6fatGetEmPm+0x128>
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
     f6c:	80 e0       	ldi	r24, 0x00	; 0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	ff 90       	pop	r15
     f78:	ef 90       	pop	r14
     f7a:	df 90       	pop	r13
     f7c:	cf 90       	pop	r12
     f7e:	bf 90       	pop	r11
     f80:	af 90       	pop	r10
     f82:	9f 90       	pop	r9
     f84:	8f 90       	pop	r8
     f86:	08 95       	ret

00000f88 <_ZN8SdVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
     f88:	4f 92       	push	r4
     f8a:	5f 92       	push	r5
     f8c:	6f 92       	push	r6
     f8e:	7f 92       	push	r7
     f90:	8f 92       	push	r8
     f92:	9f 92       	push	r9
     f94:	af 92       	push	r10
     f96:	bf 92       	push	r11
     f98:	cf 92       	push	r12
     f9a:	df 92       	push	r13
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	ec 01       	movw	r28, r24
     faa:	6a 01       	movw	r12, r20
     fac:	7b 01       	movw	r14, r22
     fae:	28 01       	movw	r4, r16
     fb0:	39 01       	movw	r6, r18
  // error if reserved cluster
  if (cluster < 2) return false;
     fb2:	42 30       	cpi	r20, 0x02	; 2
     fb4:	51 05       	cpc	r21, r1
     fb6:	61 05       	cpc	r22, r1
     fb8:	71 05       	cpc	r23, r1
     fba:	08 f4       	brcc	.+2      	; 0xfbe <_ZN8SdVolume6fatPutEmm+0x36>
     fbc:	8b c0       	rjmp	.+278    	; 0x10d4 <_ZN8SdVolume6fatPutEmm+0x14c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
     fbe:	89 85       	ldd	r24, Y+9	; 0x09
     fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc2:	ab 85       	ldd	r26, Y+11	; 0x0b
     fc4:	bc 85       	ldd	r27, Y+12	; 0x0c
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	a1 1d       	adc	r26, r1
     fca:	b1 1d       	adc	r27, r1
     fcc:	84 17       	cp	r24, r20
     fce:	95 07       	cpc	r25, r21
     fd0:	a6 07       	cpc	r26, r22
     fd2:	b7 07       	cpc	r27, r23
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <_ZN8SdVolume6fatPutEmm+0x50>
     fd6:	80 c0       	rjmp	.+256    	; 0x10d8 <_ZN8SdVolume6fatPutEmm+0x150>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
     fd8:	8b 89       	ldd	r24, Y+19	; 0x13
     fda:	9c 89       	ldd	r25, Y+20	; 0x14
     fdc:	ad 89       	ldd	r26, Y+21	; 0x15
     fde:	be 89       	ldd	r27, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     fe0:	2f 89       	ldd	r18, Y+23	; 0x17
     fe2:	20 31       	cpi	r18, 0x10	; 16
     fe4:	c1 f4       	brne	.+48     	; 0x1016 <_ZN8SdVolume6fatPutEmm+0x8e>
     fe6:	85 2e       	mov	r8, r21
     fe8:	96 2e       	mov	r9, r22
     fea:	a7 2e       	mov	r10, r23
     fec:	bb 24       	eor	r11, r11
     fee:	88 0e       	add	r8, r24
     ff0:	99 1e       	adc	r9, r25
     ff2:	aa 1e       	adc	r10, r26
     ff4:	bb 1e       	adc	r11, r27

  if (lba != cacheBlockNumber_) {
     ff6:	80 91 00 01 	lds	r24, 0x0100
     ffa:	90 91 01 01 	lds	r25, 0x0101
     ffe:	a0 91 02 01 	lds	r26, 0x0102
    1002:	b0 91 03 01 	lds	r27, 0x0103
    1006:	88 16       	cp	r8, r24
    1008:	99 06       	cpc	r9, r25
    100a:	aa 06       	cpc	r10, r26
    100c:	bb 06       	cpc	r11, r27
    100e:	f1 f4       	brne	.+60     	; 0x104c <_ZN8SdVolume6fatPutEmm+0xc4>
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1010:	4c 01       	movw	r8, r24
    1012:	5d 01       	movw	r10, r26
    1014:	26 c0       	rjmp	.+76     	; 0x1062 <_ZN8SdVolume6fatPutEmm+0xda>
    1016:	4a 01       	movw	r8, r20
    1018:	5b 01       	movw	r10, r22
    101a:	68 94       	set
    101c:	16 f8       	bld	r1, 6
    101e:	b6 94       	lsr	r11
    1020:	a7 94       	ror	r10
    1022:	97 94       	ror	r9
    1024:	87 94       	ror	r8
    1026:	16 94       	lsr	r1
    1028:	d1 f7       	brne	.-12     	; 0x101e <_ZN8SdVolume6fatPutEmm+0x96>
    102a:	88 0e       	add	r8, r24
    102c:	99 1e       	adc	r9, r25
    102e:	aa 1e       	adc	r10, r26
    1030:	bb 1e       	adc	r11, r27

  if (lba != cacheBlockNumber_) {
    1032:	80 91 00 01 	lds	r24, 0x0100
    1036:	90 91 01 01 	lds	r25, 0x0101
    103a:	a0 91 02 01 	lds	r26, 0x0102
    103e:	b0 91 03 01 	lds	r27, 0x0103
    1042:	88 16       	cp	r8, r24
    1044:	99 06       	cpc	r9, r25
    1046:	aa 06       	cpc	r10, r26
    1048:	bb 06       	cpc	r11, r27
    104a:	b9 f0       	breq	.+46     	; 0x107a <_ZN8SdVolume6fatPutEmm+0xf2>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	c5 01       	movw	r24, r10
    1050:	b4 01       	movw	r22, r8
    1052:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN8SdVolume13cacheRawBlockEmh>
    1056:	88 23       	and	r24, r24
    1058:	09 f4       	brne	.+2      	; 0x105c <_ZN8SdVolume6fatPutEmm+0xd4>
    105a:	41 c0       	rjmp	.+130    	; 0x10de <_ZN8SdVolume6fatPutEmm+0x156>
  }
  // store entry
  if (fatType_ == 16) {
    105c:	8f 89       	ldd	r24, Y+23	; 0x17
    105e:	80 31       	cpi	r24, 0x10	; 16
    1060:	71 f4       	brne	.+28     	; 0x107e <_ZN8SdVolume6fatPutEmm+0xf6>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    1062:	dd 24       	eor	r13, r13
    1064:	ee 24       	eor	r14, r14
    1066:	ff 24       	eor	r15, r15
    1068:	c6 01       	movw	r24, r12
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	fc 01       	movw	r30, r24
    1070:	ec 5f       	subi	r30, 0xFC	; 252
    1072:	fa 4f       	sbci	r31, 0xFA	; 250
    1074:	51 82       	std	Z+1, r5	; 0x01
    1076:	40 82       	st	Z, r4
    1078:	13 c0       	rjmp	.+38     	; 0x10a0 <_ZN8SdVolume6fatPutEmm+0x118>
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    107a:	4c 01       	movw	r8, r24
    107c:	5d 01       	movw	r10, r26
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    107e:	e8 94       	clt
    1080:	c7 f8       	bld	r12, 7
    1082:	dd 24       	eor	r13, r13
    1084:	ee 24       	eor	r14, r14
    1086:	ff 24       	eor	r15, r15
    1088:	c6 01       	movw	r24, r12
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	fc 01       	movw	r30, r24
    1094:	ec 5f       	subi	r30, 0xFC	; 252
    1096:	fa 4f       	sbci	r31, 0xFA	; 250
    1098:	40 82       	st	Z, r4
    109a:	51 82       	std	Z+1, r5	; 0x01
    109c:	62 82       	std	Z+2, r6	; 0x02
    109e:	73 82       	std	Z+3, r7	; 0x03
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    10a0:	80 91 01 05 	lds	r24, 0x0501
    10a4:	81 60       	ori	r24, 0x01	; 1
    10a6:	80 93 01 05 	sts	0x0501, r24
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    10aa:	8a 89       	ldd	r24, Y+18	; 0x12
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	b0 f0       	brcs	.+44     	; 0x10dc <_ZN8SdVolume6fatPutEmm+0x154>
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	9e 81       	ldd	r25, Y+6	; 0x06
    10b4:	af 81       	ldd	r26, Y+7	; 0x07
    10b6:	b8 85       	ldd	r27, Y+8	; 0x08
    10b8:	88 0e       	add	r8, r24
    10ba:	99 1e       	adc	r9, r25
    10bc:	aa 1e       	adc	r10, r26
    10be:	bb 1e       	adc	r11, r27
    10c0:	80 92 fd 04 	sts	0x04FD, r8
    10c4:	90 92 fe 04 	sts	0x04FE, r9
    10c8:	a0 92 ff 04 	sts	0x04FF, r10
    10cc:	b0 92 00 05 	sts	0x0500, r11
  return true;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	05 c0       	rjmp	.+10     	; 0x10de <_ZN8SdVolume6fatPutEmm+0x156>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <_ZN8SdVolume6fatPutEmm+0x156>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	01 c0       	rjmp	.+2      	; 0x10de <_ZN8SdVolume6fatPutEmm+0x156>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
}
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	ff 90       	pop	r15
    10e8:	ef 90       	pop	r14
    10ea:	df 90       	pop	r13
    10ec:	cf 90       	pop	r12
    10ee:	bf 90       	pop	r11
    10f0:	af 90       	pop	r10
    10f2:	9f 90       	pop	r9
    10f4:	8f 90       	pop	r8
    10f6:	7f 90       	pop	r7
    10f8:	6f 90       	pop	r6
    10fa:	5f 90       	pop	r5
    10fc:	4f 90       	pop	r4
    10fe:	08 95       	ret

00001100 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    1100:	2f 92       	push	r2
    1102:	3f 92       	push	r3
    1104:	4f 92       	push	r4
    1106:	5f 92       	push	r5
    1108:	6f 92       	push	r6
    110a:	7f 92       	push	r7
    110c:	8f 92       	push	r8
    110e:	9f 92       	push	r9
    1110:	af 92       	push	r10
    1112:	bf 92       	push	r11
    1114:	cf 92       	push	r12
    1116:	df 92       	push	r13
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	2f 97       	sbiw	r28, 0x0f	; 15
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	1c 01       	movw	r2, r24
    1136:	f9 01       	movw	r30, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    1138:	80 80       	ld	r8, Z
    113a:	91 80       	ldd	r9, Z+1	; 0x01
    113c:	a2 80       	ldd	r10, Z+2	; 0x02
    113e:	b3 80       	ldd	r11, Z+3	; 0x03
    1140:	81 14       	cp	r8, r1
    1142:	91 04       	cpc	r9, r1
    1144:	a1 04       	cpc	r10, r1
    1146:	b1 04       	cpc	r11, r1
    1148:	39 f0       	breq	.+14     	; 0x1158 <_ZN8SdVolume15allocContiguousEmPm+0x58>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    114a:	2f ef       	ldi	r18, 0xFF	; 255
    114c:	82 1a       	sub	r8, r18
    114e:	92 0a       	sbc	r9, r18
    1150:	a2 0a       	sbc	r10, r18
    1152:	b2 0a       	sbc	r11, r18

    // don't save new start location
    setStart = false;
    1154:	1d 86       	std	Y+13, r1	; 0x0d
    1156:	0d c0       	rjmp	.+26     	; 0x1172 <_ZN8SdVolume15allocContiguousEmPm+0x72>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    1158:	dc 01       	movw	r26, r24
    115a:	8d 90       	ld	r8, X+
    115c:	9d 90       	ld	r9, X+
    115e:	ad 90       	ld	r10, X+
    1160:	bc 90       	ld	r11, X

    // save next search start if one cluster
    setStart = 1 == count;
    1162:	b1 e0       	ldi	r27, 0x01	; 1
    1164:	bd 87       	std	Y+13, r27	; 0x0d
    1166:	41 30       	cpi	r20, 0x01	; 1
    1168:	51 05       	cpc	r21, r1
    116a:	61 05       	cpc	r22, r1
    116c:	71 05       	cpc	r23, r1
    116e:	09 f0       	breq	.+2      	; 0x1172 <_ZN8SdVolume15allocContiguousEmPm+0x72>
    1170:	1d 86       	std	Y+13, r1	; 0x0d
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    1172:	d1 01       	movw	r26, r2
    1174:	19 96       	adiw	r26, 0x09	; 9
    1176:	0d 91       	ld	r16, X+
    1178:	1d 91       	ld	r17, X+
    117a:	2d 91       	ld	r18, X+
    117c:	3c 91       	ld	r19, X
    117e:	1c 97       	sbiw	r26, 0x0c	; 12
    1180:	d9 01       	movw	r26, r18
    1182:	c8 01       	movw	r24, r16
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	a1 1d       	adc	r26, r1
    1188:	b1 1d       	adc	r27, r1
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	9e 83       	std	Y+6, r25	; 0x06
    118e:	af 83       	std	Y+7, r26	; 0x07
    1190:	b8 87       	std	Y+8, r27	; 0x08

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    1192:	01 2b       	or	r16, r17
    1194:	02 2b       	or	r16, r18
    1196:	03 2b       	or	r16, r19
    1198:	09 f4       	brne	.+2      	; 0x119c <_ZN8SdVolume15allocContiguousEmPm+0x9c>
    119a:	5f c0       	rjmp	.+190    	; 0x125a <_ZN8SdVolume15allocContiguousEmPm+0x15a>
    119c:	ff 87       	std	Y+15, r31	; 0x0f
    119e:	ee 87       	std	Y+14, r30	; 0x0e
    11a0:	49 87       	std	Y+9, r20	; 0x09
    11a2:	5a 87       	std	Y+10, r21	; 0x0a
    11a4:	6b 87       	std	Y+11, r22	; 0x0b
    11a6:	7c 87       	std	Y+12, r23	; 0x0c
    11a8:	75 01       	movw	r14, r10
    11aa:	64 01       	movw	r12, r8
    11ac:	41 2c       	mov	r4, r1
    11ae:	51 2c       	mov	r5, r1
    11b0:	32 01       	movw	r6, r4

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    11b2:	12 e0       	ldi	r17, 0x02	; 2
    11b4:	00 e0       	ldi	r16, 0x00	; 0
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    11b6:	2d 81       	ldd	r18, Y+5	; 0x05
    11b8:	3e 81       	ldd	r19, Y+6	; 0x06
    11ba:	4f 81       	ldd	r20, Y+7	; 0x07
    11bc:	58 85       	ldd	r21, Y+8	; 0x08
    11be:	2c 15       	cp	r18, r12
    11c0:	3d 05       	cpc	r19, r13
    11c2:	4e 05       	cpc	r20, r14
    11c4:	5f 05       	cpc	r21, r15
    11c6:	40 f4       	brcc	.+16     	; 0x11d8 <_ZN8SdVolume15allocContiguousEmPm+0xd8>
      bgnCluster = endCluster = 2;
    11c8:	c1 2e       	mov	r12, r17
    11ca:	d0 2e       	mov	r13, r16
    11cc:	e1 2c       	mov	r14, r1
    11ce:	f1 2c       	mov	r15, r1
    11d0:	81 2e       	mov	r8, r17
    11d2:	90 2e       	mov	r9, r16
    11d4:	a1 2c       	mov	r10, r1
    11d6:	b1 2c       	mov	r11, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    11d8:	9e 01       	movw	r18, r28
    11da:	2f 5f       	subi	r18, 0xFF	; 255
    11dc:	3f 4f       	sbci	r19, 0xFF	; 255
    11de:	b7 01       	movw	r22, r14
    11e0:	a6 01       	movw	r20, r12
    11e2:	c1 01       	movw	r24, r2
    11e4:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZNK8SdVolume6fatGetEmPm>
    11e8:	88 23       	and	r24, r24
    11ea:	b9 f1       	breq	.+110    	; 0x125a <_ZN8SdVolume15allocContiguousEmPm+0x15a>

    if (f != 0) {
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	ab 81       	ldd	r26, Y+3	; 0x03
    11f2:	bc 81       	ldd	r27, Y+4	; 0x04
    11f4:	89 2b       	or	r24, r25
    11f6:	8a 2b       	or	r24, r26
    11f8:	8b 2b       	or	r24, r27
    11fa:	41 f0       	breq	.+16     	; 0x120c <_ZN8SdVolume15allocContiguousEmPm+0x10c>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    11fc:	46 01       	movw	r8, r12
    11fe:	57 01       	movw	r10, r14
    1200:	3f ef       	ldi	r19, 0xFF	; 255
    1202:	83 1a       	sub	r8, r19
    1204:	93 0a       	sbc	r9, r19
    1206:	a3 0a       	sbc	r10, r19
    1208:	b3 0a       	sbc	r11, r19
    120a:	12 c0       	rjmp	.+36     	; 0x1230 <_ZN8SdVolume15allocContiguousEmPm+0x130>
    120c:	d7 01       	movw	r26, r14
    120e:	c6 01       	movw	r24, r12
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	a1 1d       	adc	r26, r1
    1214:	b1 1d       	adc	r27, r1
    } else if ((endCluster - bgnCluster + 1) == count) {
    1216:	88 19       	sub	r24, r8
    1218:	99 09       	sbc	r25, r9
    121a:	aa 09       	sbc	r26, r10
    121c:	bb 09       	sbc	r27, r11
    121e:	29 85       	ldd	r18, Y+9	; 0x09
    1220:	3a 85       	ldd	r19, Y+10	; 0x0a
    1222:	4b 85       	ldd	r20, Y+11	; 0x0b
    1224:	5c 85       	ldd	r21, Y+12	; 0x0c
    1226:	82 17       	cp	r24, r18
    1228:	93 07       	cpc	r25, r19
    122a:	a4 07       	cpc	r26, r20
    122c:	b5 07       	cpc	r27, r21
    122e:	b9 f0       	breq	.+46     	; 0x125e <_ZN8SdVolume15allocContiguousEmPm+0x15e>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    1230:	3f ef       	ldi	r19, 0xFF	; 255
    1232:	43 1a       	sub	r4, r19
    1234:	53 0a       	sbc	r5, r19
    1236:	63 0a       	sbc	r6, r19
    1238:	73 0a       	sbc	r7, r19
    123a:	4f ef       	ldi	r20, 0xFF	; 255
    123c:	c4 1a       	sub	r12, r20
    123e:	d4 0a       	sbc	r13, r20
    1240:	e4 0a       	sbc	r14, r20
    1242:	f4 0a       	sbc	r15, r20
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    1244:	f1 01       	movw	r30, r2
    1246:	81 85       	ldd	r24, Z+9	; 0x09
    1248:	92 85       	ldd	r25, Z+10	; 0x0a
    124a:	a3 85       	ldd	r26, Z+11	; 0x0b
    124c:	b4 85       	ldd	r27, Z+12	; 0x0c
    124e:	48 16       	cp	r4, r24
    1250:	59 06       	cpc	r5, r25
    1252:	6a 06       	cpc	r6, r26
    1254:	7b 06       	cpc	r7, r27
    1256:	08 f4       	brcc	.+2      	; 0x125a <_ZN8SdVolume15allocContiguousEmPm+0x15a>
    1258:	ae cf       	rjmp	.-164    	; 0x11b6 <_ZN8SdVolume15allocContiguousEmPm+0xb6>
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	53 c0       	rjmp	.+166    	; 0x1304 <_ZN8SdVolume15allocContiguousEmPm+0x204>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    125e:	0f ef       	ldi	r16, 0xFF	; 255
    1260:	1f ef       	ldi	r17, 0xFF	; 255
    1262:	2f ef       	ldi	r18, 0xFF	; 255
    1264:	3f e0       	ldi	r19, 0x0F	; 15
    1266:	b7 01       	movw	r22, r14
    1268:	a6 01       	movw	r20, r12
    126a:	c1 01       	movw	r24, r2
    126c:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    1270:	81 11       	cpse	r24, r1
    1272:	12 c0       	rjmp	.+36     	; 0x1298 <_ZN8SdVolume15allocContiguousEmPm+0x198>
    1274:	47 c0       	rjmp	.+142    	; 0x1304 <_ZN8SdVolume15allocContiguousEmPm+0x204>
    1276:	97 01       	movw	r18, r14
    1278:	86 01       	movw	r16, r12

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    127a:	68 01       	movw	r12, r16
    127c:	79 01       	movw	r14, r18
    127e:	f1 e0       	ldi	r31, 0x01	; 1
    1280:	cf 1a       	sub	r12, r31
    1282:	d1 08       	sbc	r13, r1
    1284:	e1 08       	sbc	r14, r1
    1286:	f1 08       	sbc	r15, r1
    1288:	b7 01       	movw	r22, r14
    128a:	a6 01       	movw	r20, r12
    128c:	c1 01       	movw	r24, r2
    128e:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZN8SdVolume6fatPutEmm>
    1292:	81 11       	cpse	r24, r1
    1294:	07 c0       	rjmp	.+14     	; 0x12a4 <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    1296:	36 c0       	rjmp	.+108    	; 0x1304 <_ZN8SdVolume15allocContiguousEmPm+0x204>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    1298:	8c 14       	cp	r8, r12
    129a:	9d 04       	cpc	r9, r13
    129c:	ae 04       	cpc	r10, r14
    129e:	bf 04       	cpc	r11, r15
    12a0:	50 f3       	brcs	.-44     	; 0x1276 <_ZN8SdVolume15allocContiguousEmPm+0x176>
    12a2:	07 c0       	rjmp	.+14     	; 0x12b2 <_ZN8SdVolume15allocContiguousEmPm+0x1b2>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
    12a4:	97 01       	movw	r18, r14
    12a6:	86 01       	movw	r16, r12
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    12a8:	8c 14       	cp	r8, r12
    12aa:	9d 04       	cpc	r9, r13
    12ac:	ae 04       	cpc	r10, r14
    12ae:	bf 04       	cpc	r11, r15
    12b0:	20 f3       	brcs	.-56     	; 0x127a <_ZN8SdVolume15allocContiguousEmPm+0x17a>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    12b2:	ae 85       	ldd	r26, Y+14	; 0x0e
    12b4:	bf 85       	ldd	r27, Y+15	; 0x0f
    12b6:	4d 91       	ld	r20, X+
    12b8:	5d 91       	ld	r21, X+
    12ba:	6d 91       	ld	r22, X+
    12bc:	7c 91       	ld	r23, X
    12be:	41 15       	cp	r20, r1
    12c0:	51 05       	cpc	r21, r1
    12c2:	61 05       	cpc	r22, r1
    12c4:	71 05       	cpc	r23, r1
    12c6:	39 f0       	breq	.+14     	; 0x12d6 <_ZN8SdVolume15allocContiguousEmPm+0x1d6>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    12c8:	95 01       	movw	r18, r10
    12ca:	84 01       	movw	r16, r8
    12cc:	c1 01       	movw	r24, r2
    12ce:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZN8SdVolume6fatPutEmm>
    12d2:	88 23       	and	r24, r24
    12d4:	b9 f0       	breq	.+46     	; 0x1304 <_ZN8SdVolume15allocContiguousEmPm+0x204>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    12d6:	ee 85       	ldd	r30, Y+14	; 0x0e
    12d8:	ff 85       	ldd	r31, Y+15	; 0x0f
    12da:	80 82       	st	Z, r8
    12dc:	91 82       	std	Z+1, r9	; 0x01
    12de:	a2 82       	std	Z+2, r10	; 0x02
    12e0:	b3 82       	std	Z+3, r11	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    12e2:	fd 85       	ldd	r31, Y+13	; 0x0d
    12e4:	ff 23       	and	r31, r31
    12e6:	69 f0       	breq	.+26     	; 0x1302 <_ZN8SdVolume15allocContiguousEmPm+0x202>
    12e8:	2f ef       	ldi	r18, 0xFF	; 255
    12ea:	82 1a       	sub	r8, r18
    12ec:	92 0a       	sbc	r9, r18
    12ee:	a2 0a       	sbc	r10, r18
    12f0:	b2 0a       	sbc	r11, r18
    12f2:	d1 01       	movw	r26, r2
    12f4:	8d 92       	st	X+, r8
    12f6:	9d 92       	st	X+, r9
    12f8:	ad 92       	st	X+, r10
    12fa:	bc 92       	st	X, r11
    12fc:	13 97       	sbiw	r26, 0x03	; 3

  return true;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <_ZN8SdVolume15allocContiguousEmPm+0x204>
    1302:	81 e0       	ldi	r24, 0x01	; 1
}
    1304:	2f 96       	adiw	r28, 0x0f	; 15
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	ff 90       	pop	r15
    131a:	ef 90       	pop	r14
    131c:	df 90       	pop	r13
    131e:	cf 90       	pop	r12
    1320:	bf 90       	pop	r11
    1322:	af 90       	pop	r10
    1324:	9f 90       	pop	r9
    1326:	8f 90       	pop	r8
    1328:	7f 90       	pop	r7
    132a:	6f 90       	pop	r6
    132c:	5f 90       	pop	r5
    132e:	4f 90       	pop	r4
    1330:	3f 90       	pop	r3
    1332:	2f 90       	pop	r2
    1334:	08 95       	ret

00001336 <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
  _AlarmHandler = handler;
}

// The default alarm handler
void DallasTemperature::defaultAlarmHandler(uint8_t* deviceAddress)
{
    1336:	08 95       	ret

00001338 <_ZN17DallasTemperatureC1EP7OneWire>:
extern "C" {
    #include "WConstants.h"
}
#endif

DallasTemperature::DallasTemperature(OneWire* _oneWire)
    1338:	fc 01       	movw	r30, r24
  #if REQUIRESALARMS
  : _AlarmHandler(&defaultAlarmHandler)
    133a:	8b e9       	ldi	r24, 0x9B	; 155
    133c:	99 e0       	ldi	r25, 0x09	; 9
    133e:	92 8b       	std	Z+18, r25	; 0x12
    1340:	81 8b       	std	Z+17, r24	; 0x11
  #endif
{
  _wire = _oneWire;
    1342:	76 83       	std	Z+6, r23	; 0x06
    1344:	65 83       	std	Z+5, r22	; 0x05
  devices = 0;
    1346:	14 82       	std	Z+4, r1	; 0x04
  parasite = false;
    1348:	10 82       	st	Z, r1
  bitResolution = 9;
    134a:	89 e0       	ldi	r24, 0x09	; 9
    134c:	81 83       	std	Z+1, r24	; 0x01
  waitForConversion = true;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	82 83       	std	Z+2, r24	; 0x02
  checkForConversion = true;
    1352:	83 83       	std	Z+3, r24	; 0x03
    1354:	08 95       	ret

00001356 <_ZN17DallasTemperature14getDeviceCountEv>:

// returns the number of devices found on the bus
uint8_t DallasTemperature::getDeviceCount(void)
{
  return devices;
}
    1356:	fc 01       	movw	r30, r24
    1358:	84 81       	ldd	r24, Z+4	; 0x04
    135a:	08 95       	ret

0000135c <_ZN17DallasTemperature12validAddressEPh>:

// returns true if address is valid
bool DallasTemperature::validAddress(uint8_t* deviceAddress)
{
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	eb 01       	movw	r28, r22
  return (_wire->crc8(deviceAddress, 7) == deviceAddress[7]);
    1362:	67 e0       	ldi	r22, 0x07	; 7
    1364:	ce 01       	movw	r24, r28
    1366:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN7OneWire4crc8EPKhh>
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	2f 81       	ldd	r18, Y+7	; 0x07
    136e:	82 13       	cpse	r24, r18
    1370:	90 e0       	ldi	r25, 0x00	; 0
}
    1372:	89 2f       	mov	r24, r25
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <_ZN17DallasTemperature10getAddressEPhh>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
{
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	8c 01       	movw	r16, r24
    1388:	7b 01       	movw	r14, r22
    138a:	d4 2f       	mov	r29, r20
  uint8_t depth = 0;

  _wire->reset_search();
    138c:	fc 01       	movw	r30, r24
    138e:	85 81       	ldd	r24, Z+5	; 0x05
    1390:	96 81       	ldd	r25, Z+6	; 0x06
    1392:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN7OneWire12reset_searchEv>

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
{
  uint8_t depth = 0;
    1396:	c0 e0       	ldi	r28, 0x00	; 0
    1398:	0b c0       	rjmp	.+22     	; 0x13b0 <_ZN17DallasTemperature10getAddressEPhh+0x36>

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    139a:	cd 13       	cpse	r28, r29
    139c:	06 c0       	rjmp	.+12     	; 0x13aa <_ZN17DallasTemperature10getAddressEPhh+0x30>
    139e:	b7 01       	movw	r22, r14
    13a0:	c8 01       	movw	r24, r16
    13a2:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN17DallasTemperature12validAddressEPh>
    13a6:	81 11       	cpse	r24, r1
    13a8:	0d c0       	rjmp	.+26     	; 0x13c4 <_ZN17DallasTemperature10getAddressEPhh+0x4a>
    depth++;
    13aa:	cf 5f       	subi	r28, 0xFF	; 255
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
    13ac:	dc 17       	cp	r29, r28
    13ae:	48 f0       	brcs	.+18     	; 0x13c2 <_ZN17DallasTemperature10getAddressEPhh+0x48>
    13b0:	b7 01       	movw	r22, r14
    13b2:	f8 01       	movw	r30, r16
    13b4:	85 81       	ldd	r24, Z+5	; 0x05
    13b6:	96 81       	ldd	r25, Z+6	; 0x06
    13b8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN7OneWire6searchEPh>
    13bc:	81 11       	cpse	r24, r1
    13be:	ed cf       	rjmp	.-38     	; 0x139a <_ZN17DallasTemperature10getAddressEPhh+0x20>
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <_ZN17DallasTemperature10getAddressEPhh+0x4a>
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    depth++;
  }

  return false;
    13c2:	80 e0       	ldi	r24, 0x00	; 0
}
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	08 95       	ret

000013d2 <_ZN17DallasTemperature14readScratchPadEPhS0_>:
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
}

// read device's scratch pad
void DallasTemperature::readScratchPad(uint8_t* deviceAddress, uint8_t* scratchPad)
{
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	ec 01       	movw	r28, r24
    13e0:	7b 01       	movw	r14, r22
    13e2:	8a 01       	movw	r16, r20
  // send the command
  _wire->reset();
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	0e 94 98 0c 	call	0x1930	; 0x1930 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    13ec:	b7 01       	movw	r22, r14
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN7OneWire6selectEPKh>
  _wire->write(READSCRATCH);
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	6e eb       	ldi	r22, 0xBE	; 190
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <_ZN7OneWire5writeEhh>

  
  // read the response

  // byte 0: temperature LSB
  scratchPad[TEMP_LSB] = _wire->read();
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_ZN7OneWire4readEv>
    140a:	f8 01       	movw	r30, r16
    140c:	80 83       	st	Z, r24

  // byte 1: temperature MSB
  scratchPad[TEMP_MSB] = _wire->read();
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_ZN7OneWire4readEv>
    1416:	f8 01       	movw	r30, r16
    1418:	81 83       	std	Z+1, r24	; 0x01

  // byte 2: high alarm temp
  scratchPad[HIGH_ALARM_TEMP] = _wire->read();
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_ZN7OneWire4readEv>
    1422:	f8 01       	movw	r30, r16
    1424:	82 83       	std	Z+2, r24	; 0x02

  // byte 3: low alarm temp
  scratchPad[LOW_ALARM_TEMP] = _wire->read();
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_ZN7OneWire4readEv>
    142e:	f8 01       	movw	r30, r16
    1430:	83 83       	std	Z+3, r24	; 0x03

  // byte 4:
  // DS18S20: store for crc
  // DS18B20 & DS1822: configuration register
  scratchPad[CONFIGURATION] = _wire->read();
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	9e 81       	ldd	r25, Y+6	; 0x06
    1436:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_ZN7OneWire4readEv>
    143a:	f8 01       	movw	r30, r16
    143c:	84 83       	std	Z+4, r24	; 0x04

  // byte 5:
  // internal use & crc
  scratchPad[INTERNAL_BYTE] = _wire->read();
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_ZN7OneWire4readEv>
    1446:	f8 01       	movw	r30, r16
    1448:	85 83       	std	Z+5, r24	; 0x05

  // byte 6:
  // DS18S20: COUNT_REMAIN
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_REMAIN] = _wire->read();
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_ZN7OneWire4readEv>
    1452:	f8 01       	movw	r30, r16
    1454:	86 83       	std	Z+6, r24	; 0x06

  // byte 7:
  // DS18S20: COUNT_PER_C
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_PER_C] = _wire->read();
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_ZN7OneWire4readEv>
    145e:	f8 01       	movw	r30, r16
    1460:	87 83       	std	Z+7, r24	; 0x07

  // byte 8:
  // SCTRACHPAD_CRC
  scratchPad[SCRATCHPAD_CRC] = _wire->read();
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_ZN7OneWire4readEv>
    146a:	f8 01       	movw	r30, r16
    146c:	80 87       	std	Z+8, r24	; 0x08

  _wire->reset();
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	0e 94 98 0c 	call	0x1930	; 0x1930 <_ZN7OneWire5resetEv>
}
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	08 95       	ret

00001484 <_ZN17DallasTemperature11isConnectedEPhS0_>:
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DallasTemperature::isConnected(uint8_t* deviceAddress, uint8_t* scratchPad)
{
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	ea 01       	movw	r28, r20
  readScratchPad(deviceAddress, scratchPad);
    148a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
    148e:	68 e0       	ldi	r22, 0x08	; 8
    1490:	ce 01       	movw	r24, r28
    1492:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN7OneWire4crc8EPKhh>
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	28 85       	ldd	r18, Y+8	; 0x08
    149a:	82 13       	cpse	r24, r18
    149c:	90 e0       	ldi	r25, 0x00	; 0
}
    149e:	89 2f       	mov	r24, r25
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <_ZN17DallasTemperature15readPowerSupplyEPh>:
  _wire->reset();
}

// reads the device's power requirements
bool DallasTemperature::readPowerSupply(uint8_t* deviceAddress)
{
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	ec 01       	movw	r28, r24
    14b0:	8b 01       	movw	r16, r22
  bool ret = false;
  _wire->reset();
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	0e 94 98 0c 	call	0x1930	; 0x1930 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    14ba:	b8 01       	movw	r22, r16
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <_ZN7OneWire6selectEPKh>
  _wire->write(READPOWERSUPPLY);
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	64 eb       	ldi	r22, 0xB4	; 180
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
    14cc:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <_ZN7OneWire5writeEhh>
  if (_wire->read_bit() == 0) ret = true;
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN7OneWire8read_bitEv>
    14d8:	18 2f       	mov	r17, r24
  _wire->reset();
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	0e 94 98 0c 	call	0x1930	; 0x1930 <_ZN7OneWire5resetEv>
{
  bool ret = false;
  _wire->reset();
  _wire->select(deviceAddress);
  _wire->write(READPOWERSUPPLY);
  if (_wire->read_bit() == 0) ret = true;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	11 11       	cpse	r17, r1
    14e6:	80 e0       	ldi	r24, 0x00	; 0
  _wire->reset();
  return ret;
}
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	08 95       	ret

000014f2 <_ZN17DallasTemperature13getResolutionEPh>:
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
{
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	29 97       	sbiw	r28, 0x09	; 9
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
    1506:	fb 01       	movw	r30, r22
    1508:	20 81       	ld	r18, Z
    150a:	20 31       	cpi	r18, 0x10	; 16
    150c:	d9 f0       	breq	.+54     	; 0x1544 <_ZN17DallasTemperature13getResolutionEPh+0x52>

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
    150e:	ae 01       	movw	r20, r28
    1510:	4f 5f       	subi	r20, 0xFF	; 255
    1512:	5f 4f       	sbci	r21, 0xFF	; 255
    1514:	0e 94 42 0a 	call	0x1484	; 0x1484 <_ZN17DallasTemperature11isConnectedEPhS0_>
    1518:	88 23       	and	r24, r24
    151a:	b1 f0       	breq	.+44     	; 0x1548 <_ZN17DallasTemperature13getResolutionEPh+0x56>
  {
	switch (scratchPad[CONFIGURATION])
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	8f 33       	cpi	r24, 0x3F	; 63
    1520:	69 f0       	breq	.+26     	; 0x153c <_ZN17DallasTemperature13getResolutionEPh+0x4a>
    1522:	18 f4       	brcc	.+6      	; 0x152a <_ZN17DallasTemperature13getResolutionEPh+0x38>
    1524:	8f 31       	cpi	r24, 0x1F	; 31
    1526:	61 f0       	breq	.+24     	; 0x1540 <_ZN17DallasTemperature13getResolutionEPh+0x4e>
    1528:	07 c0       	rjmp	.+14     	; 0x1538 <_ZN17DallasTemperature13getResolutionEPh+0x46>
    152a:	8f 35       	cpi	r24, 0x5F	; 95
    152c:	19 f0       	breq	.+6      	; 0x1534 <_ZN17DallasTemperature13getResolutionEPh+0x42>
    152e:	8f 37       	cpi	r24, 0x7F	; 127
    1530:	69 f0       	breq	.+26     	; 0x154c <_ZN17DallasTemperature13getResolutionEPh+0x5a>
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <_ZN17DallasTemperature13getResolutionEPh+0x46>
    {
      case TEMP_12_BIT:
        return 12;
        
      case TEMP_11_BIT:
        return 11;
    1534:	8b e0       	ldi	r24, 0x0B	; 11
    1536:	0b c0       	rjmp	.+22     	; 0x154e <_ZN17DallasTemperature13getResolutionEPh+0x5c>
      case TEMP_9_BIT:
        return 9;
        
	}
  }
  return 0;
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	09 c0       	rjmp	.+18     	; 0x154e <_ZN17DallasTemperature13getResolutionEPh+0x5c>
        
      case TEMP_11_BIT:
        return 11;
        
      case TEMP_10_BIT:
        return 10;
    153c:	8a e0       	ldi	r24, 0x0A	; 10
    153e:	07 c0       	rjmp	.+14     	; 0x154e <_ZN17DallasTemperature13getResolutionEPh+0x5c>
        
      case TEMP_9_BIT:
        return 9;
    1540:	89 e0       	ldi	r24, 0x09	; 9
    1542:	05 c0       	rjmp	.+10     	; 0x154e <_ZN17DallasTemperature13getResolutionEPh+0x5c>

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
{
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
    1544:	89 e0       	ldi	r24, 0x09	; 9
    1546:	03 c0       	rjmp	.+6      	; 0x154e <_ZN17DallasTemperature13getResolutionEPh+0x5c>
      case TEMP_9_BIT:
        return 9;
        
	}
  }
  return 0;
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	01 c0       	rjmp	.+2      	; 0x154e <_ZN17DallasTemperature13getResolutionEPh+0x5c>
  if (isConnected(deviceAddress, scratchPad))
  {
	switch (scratchPad[CONFIGURATION])
    {
      case TEMP_12_BIT:
        return 12;
    154c:	8c e0       	ldi	r24, 0x0C	; 12
        return 9;
        
	}
  }
  return 0;
}
    154e:	29 96       	adiw	r28, 0x09	; 9
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <_ZN17DallasTemperature5beginEv>:
  checkForConversion = true;
}

// initialise the bus
void DallasTemperature::begin(void)
{
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	61 97       	sbiw	r28, 0x11	; 17
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	8c 01       	movw	r16, r24
  DeviceAddress deviceAddress;

  _wire->reset_search();
    157e:	fc 01       	movw	r30, r24
    1580:	85 81       	ldd	r24, Z+5	; 0x05
    1582:	96 81       	ldd	r25, Z+6	; 0x06
    1584:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN7OneWire12reset_searchEv>
  devices = 0; // Reset the number of devices when we enumerate wire devices
    1588:	f8 01       	movw	r30, r16
    158a:	14 82       	std	Z+4, r1	; 0x04

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    158c:	ee 24       	eor	r14, r14
    158e:	e3 94       	inc	r14
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
    1590:	37 c0       	rjmp	.+110    	; 0x1600 <_ZN17DallasTemperature5beginEv+0xa0>
  {
    if (validAddress(deviceAddress))
    1592:	be 01       	movw	r22, r28
    1594:	66 5f       	subi	r22, 0xF6	; 246
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	c8 01       	movw	r24, r16
    159a:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN17DallasTemperature12validAddressEPh>
    159e:	88 23       	and	r24, r24
    15a0:	79 f1       	breq	.+94     	; 0x1600 <_ZN17DallasTemperature5beginEv+0xa0>
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    15a2:	f8 01       	movw	r30, r16
    15a4:	80 81       	ld	r24, Z
    15a6:	81 11       	cpse	r24, r1
    15a8:	0a c0       	rjmp	.+20     	; 0x15be <_ZN17DallasTemperature5beginEv+0x5e>
    15aa:	be 01       	movw	r22, r28
    15ac:	66 5f       	subi	r22, 0xF6	; 246
    15ae:	7f 4f       	sbci	r23, 0xFF	; 255
    15b0:	c8 01       	movw	r24, r16
    15b2:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <_ZN17DallasTemperature15readPowerSupplyEPh>
    15b6:	88 23       	and	r24, r24
    15b8:	11 f0       	breq	.+4      	; 0x15be <_ZN17DallasTemperature5beginEv+0x5e>
    15ba:	f8 01       	movw	r30, r16
    15bc:	e0 82       	st	Z, r14

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    15be:	ae 01       	movw	r20, r28
    15c0:	4f 5f       	subi	r20, 0xFF	; 255
    15c2:	5f 4f       	sbci	r21, 0xFF	; 255
    15c4:	be 01       	movw	r22, r28
    15c6:	66 5f       	subi	r22, 0xF6	; 246
    15c8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ca:	c8 01       	movw	r24, r16
    15cc:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN17DallasTemperature14readScratchPadEPhS0_>

	  bitResolution = max(bitResolution, getResolution(deviceAddress));
    15d0:	f8 01       	movw	r30, r16
    15d2:	f1 80       	ldd	r15, Z+1	; 0x01
    15d4:	be 01       	movw	r22, r28
    15d6:	66 5f       	subi	r22, 0xF6	; 246
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	c8 01       	movw	r24, r16
    15dc:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN17DallasTemperature13getResolutionEPh>
    15e0:	8f 15       	cp	r24, r15
    15e2:	18 f4       	brcc	.+6      	; 0x15ea <_ZN17DallasTemperature5beginEv+0x8a>
    15e4:	f8 01       	movw	r30, r16
    15e6:	81 81       	ldd	r24, Z+1	; 0x01
    15e8:	06 c0       	rjmp	.+12     	; 0x15f6 <_ZN17DallasTemperature5beginEv+0x96>
    15ea:	be 01       	movw	r22, r28
    15ec:	66 5f       	subi	r22, 0xF6	; 246
    15ee:	7f 4f       	sbci	r23, 0xFF	; 255
    15f0:	c8 01       	movw	r24, r16
    15f2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZN17DallasTemperature13getResolutionEPh>
    15f6:	f8 01       	movw	r30, r16
    15f8:	81 83       	std	Z+1, r24	; 0x01

      devices++;
    15fa:	84 81       	ldd	r24, Z+4	; 0x04
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	84 83       	std	Z+4, r24	; 0x04
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
    1600:	be 01       	movw	r22, r28
    1602:	66 5f       	subi	r22, 0xF6	; 246
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	f8 01       	movw	r30, r16
    1608:	85 81       	ldd	r24, Z+5	; 0x05
    160a:	96 81       	ldd	r25, Z+6	; 0x06
    160c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN7OneWire6searchEPh>
    1610:	81 11       	cpse	r24, r1
    1612:	bf cf       	rjmp	.-130    	; 0x1592 <_ZN17DallasTemperature5beginEv+0x32>
	  bitResolution = max(bitResolution, getResolution(deviceAddress));

      devices++;
    }
  }
}
    1614:	61 96       	adiw	r28, 0x11	; 17
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	08 95       	ret

0000162e <_ZN17DallasTemperature21isConversionAvailableEPh>:
{
	return checkForConversion;
}

bool DallasTemperature::isConversionAvailable(uint8_t* deviceAddress)
{
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	29 97       	sbiw	r28, 0x09	; 9
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
	// Check if the clock has been raised indicating the conversion is complete
  	ScratchPad scratchPad;
  	readScratchPad(deviceAddress, scratchPad);
    1642:	ae 01       	movw	r20, r28
    1644:	4f 5f       	subi	r20, 0xFF	; 255
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <_ZN17DallasTemperature14readScratchPadEPhS0_>
	return scratchPad[0];
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	99 81       	ldd	r25, Y+1	; 0x01
    1650:	91 11       	cpse	r25, r1
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <_ZN17DallasTemperature21isConversionAvailableEPh+0x28>
    1654:	80 e0       	ldi	r24, 0x00	; 0
}	
    1656:	29 96       	adiw	r28, 0x09	; 9
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
  return true;
}


void DallasTemperature::blockTillConversionComplete(uint8_t* bitResolution, uint8_t* deviceAddress)
{
    1668:	cf 92       	push	r12
    166a:	df 92       	push	r13
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	ec 01       	movw	r28, r24
    167a:	8b 01       	movw	r16, r22
	if(deviceAddress != 0 && checkForConversion && !parasite)
    167c:	45 2b       	or	r20, r21
    167e:	f1 f0       	breq	.+60     	; 0x16bc <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	88 23       	and	r24, r24
    1684:	d9 f0       	breq	.+54     	; 0x16bc <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
    1686:	88 81       	ld	r24, Y
    1688:	81 11       	cpse	r24, r1
    168a:	18 c0       	rjmp	.+48     	; 0x16bc <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
	{
	  	// Continue to check if the IC has responded with a temperature
	  	// NB: Could cause issues with multiple devices (one device may respond faster)
	  	unsigned long start = millis();
    168c:	0e 94 85 1a 	call	0x350a	; 0x350a <millis>
    1690:	6b 01       	movw	r12, r22
    1692:	7c 01       	movw	r14, r24
		while(!isConversionAvailable(0) && ((millis() - start) < 750));	
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	ce 01       	movw	r24, r28
    169a:	0e 94 17 0b 	call	0x162e	; 0x162e <_ZN17DallasTemperature21isConversionAvailableEPh>
    169e:	81 11       	cpse	r24, r1
    16a0:	0d c0       	rjmp	.+26     	; 0x16bc <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
    16a2:	0e 94 85 1a 	call	0x350a	; 0x350a <millis>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	8c 19       	sub	r24, r12
    16ac:	9d 09       	sbc	r25, r13
    16ae:	ae 09       	sbc	r26, r14
    16b0:	bf 09       	sbc	r27, r15
    16b2:	8e 3e       	cpi	r24, 0xEE	; 238
    16b4:	92 40       	sbci	r25, 0x02	; 2
    16b6:	a1 05       	cpc	r26, r1
    16b8:	b1 05       	cpc	r27, r1
    16ba:	60 f3       	brcs	.-40     	; 0x1694 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x2c>
	}
	
  	// Wait a fix number of cycles till conversion is complete (based on IC datasheet)
	  switch (*bitResolution)
    16bc:	f8 01       	movw	r30, r16
    16be:	80 81       	ld	r24, Z
    16c0:	8a 30       	cpi	r24, 0x0A	; 10
    16c2:	59 f0       	breq	.+22     	; 0x16da <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x72>
    16c4:	8b 30       	cpi	r24, 0x0B	; 11
    16c6:	81 f0       	breq	.+32     	; 0x16e8 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x80>
    16c8:	89 30       	cpi	r24, 0x09	; 9
    16ca:	a9 f4       	brne	.+42     	; 0x16f6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8e>
	  {
	    case 9:
	      delay(94);
    16cc:	6e e5       	ldi	r22, 0x5E	; 94
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>
	      break;
    16d8:	14 c0       	rjmp	.+40     	; 0x1702 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x9a>
	    case 10:
	      delay(188);
    16da:	6c eb       	ldi	r22, 0xBC	; 188
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>
	      break;
    16e6:	0d c0       	rjmp	.+26     	; 0x1702 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x9a>
	    case 11:
	      delay(375);
    16e8:	67 e7       	ldi	r22, 0x77	; 119
    16ea:	71 e0       	ldi	r23, 0x01	; 1
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>
	      break;
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x9a>
	    case 12:
	    default:
	      delay(750);
    16f6:	6e ee       	ldi	r22, 0xEE	; 238
    16f8:	72 e0       	ldi	r23, 0x02	; 2
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>
	      break;
	  }

}
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	ff 90       	pop	r15
    170c:	ef 90       	pop	r14
    170e:	df 90       	pop	r13
    1710:	cf 90       	pop	r12
    1712:	08 95       	ret

00001714 <_ZN17DallasTemperature19requestTemperaturesEv>:
}	


// sends command for all devices on the bus to perform a temperature conversion
void DallasTemperature::requestTemperatures()
{
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	ec 01       	movw	r28, r24
  _wire->reset();
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	0e 94 98 0c 	call	0x1930	; 0x1930 <_ZN7OneWire5resetEv>
  _wire->skip();
    1722:	8d 81       	ldd	r24, Y+5	; 0x05
    1724:	9e 81       	ldd	r25, Y+6	; 0x06
    1726:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <_ZN7OneWire4skipEv>
  _wire->write(STARTCONVO, parasite);
    172a:	48 81       	ld	r20, Y
    172c:	64 e4       	ldi	r22, 0x44	; 68
    172e:	8d 81       	ldd	r24, Y+5	; 0x05
    1730:	9e 81       	ldd	r25, Y+6	; 0x06
    1732:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <_ZN7OneWire5writeEhh>

  // ASYNC mode?
  if (!waitForConversion) return; 
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	88 23       	and	r24, r24
    173a:	41 f0       	breq	.+16     	; 0x174c <_ZN17DallasTemperature19requestTemperaturesEv+0x38>
  blockTillConversionComplete(&bitResolution, 0);
    173c:	be 01       	movw	r22, r28
    173e:	6f 5f       	subi	r22, 0xFF	; 255
    1740:	7f 4f       	sbci	r23, 0xFF	; 255
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	ce 01       	movw	r24, r28
    1748:	0e 94 34 0b 	call	0x1668	; 0x1668 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>

  return;
}
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	08 95       	ret

00001752 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
  return toFahrenheit(getTempCByIndex(deviceIndex));
}

// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
{
    1752:	8f 92       	push	r8
    1754:	9f 92       	push	r9
    1756:	af 92       	push	r10
    1758:	bf 92       	push	r11
    175a:	cf 92       	push	r12
    175c:	df 92       	push	r13
    175e:	ef 92       	push	r14
    1760:	ff 92       	push	r15
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	fb 01       	movw	r30, r22
    176a:	ea 01       	movw	r28, r20
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	98 2f       	mov	r25, r24
    1772:	88 27       	eor	r24, r24
    1774:	28 81       	ld	r18, Y
    1776:	bc 01       	movw	r22, r24
    1778:	62 2b       	or	r22, r18

  switch (deviceAddress[0])
    177a:	80 81       	ld	r24, Z
    177c:	82 32       	cpi	r24, 0x22	; 34
    177e:	31 f0       	breq	.+12     	; 0x178c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3a>
    1780:	88 32       	cpi	r24, 0x28	; 40
    1782:	21 f0       	breq	.+8      	; 0x178c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3a>
    1784:	80 31       	cpi	r24, 0x10	; 16
    1786:	09 f0       	breq	.+2      	; 0x178a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x38>
    1788:	7e c0       	rjmp	.+252    	; 0x1886 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x134>
    178a:	4c c0       	rjmp	.+152    	; 0x1824 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xd2>
  {
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	8f 33       	cpi	r24, 0x3F	; 63
    1790:	29 f1       	breq	.+74     	; 0x17dc <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x8a>
    1792:	18 f4       	brcc	.+6      	; 0x179a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x48>
    1794:	8f 31       	cpi	r24, 0x1F	; 31
    1796:	99 f1       	breq	.+102    	; 0x17fe <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xac>
    1798:	76 c0       	rjmp	.+236    	; 0x1886 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x134>
    179a:	8f 35       	cpi	r24, 0x5F	; 95
    179c:	81 f0       	breq	.+32     	; 0x17be <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x6c>
    179e:	8f 37       	cpi	r24, 0x7F	; 127
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x52>
    17a2:	71 c0       	rjmp	.+226    	; 0x1886 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x134>
      {
        case TEMP_12_BIT:
          return (float)rawTemperature * 0.0625;
    17a4:	07 2e       	mov	r0, r23
    17a6:	00 0c       	add	r0, r0
    17a8:	88 0b       	sbc	r24, r24
    17aa:	99 0b       	sbc	r25, r25
    17ac:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__floatsisf>
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e8       	ldi	r20, 0x80	; 128
    17b6:	5d e3       	ldi	r21, 0x3D	; 61
    17b8:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__mulsf3>
    17bc:	65 c0       	rjmp	.+202    	; 0x1888 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
          break;
        case TEMP_11_BIT:
          return (float)(rawTemperature >> 1) * 0.125;
    17be:	75 95       	asr	r23
    17c0:	67 95       	ror	r22
    17c2:	07 2e       	mov	r0, r23
    17c4:	00 0c       	add	r0, r0
    17c6:	88 0b       	sbc	r24, r24
    17c8:	99 0b       	sbc	r25, r25
    17ca:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__floatsisf>
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	5e e3       	ldi	r21, 0x3E	; 62
    17d6:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__mulsf3>
    17da:	56 c0       	rjmp	.+172    	; 0x1888 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
    17dc:	75 95       	asr	r23
    17de:	67 95       	ror	r22
    17e0:	75 95       	asr	r23
    17e2:	67 95       	ror	r22
    17e4:	07 2e       	mov	r0, r23
    17e6:	00 0c       	add	r0, r0
    17e8:	88 0b       	sbc	r24, r24
    17ea:	99 0b       	sbc	r25, r25
    17ec:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__floatsisf>
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e8       	ldi	r20, 0x80	; 128
    17f6:	5e e3       	ldi	r21, 0x3E	; 62
    17f8:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__mulsf3>
    17fc:	45 c0       	rjmp	.+138    	; 0x1888 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
    17fe:	75 95       	asr	r23
    1800:	67 95       	ror	r22
    1802:	75 95       	asr	r23
    1804:	67 95       	ror	r22
    1806:	75 95       	asr	r23
    1808:	67 95       	ror	r22
    180a:	07 2e       	mov	r0, r23
    180c:	00 0c       	add	r0, r0
    180e:	88 0b       	sbc	r24, r24
    1810:	99 0b       	sbc	r25, r25
    1812:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__floatsisf>
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	5f e3       	ldi	r21, 0x3F	; 63
    181e:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__mulsf3>
    1822:	32 c0       	rjmp	.+100    	; 0x1888 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
      TEMPERATURE = TEMP_READ - 0.25 + --------------------------
                                               COUNT_PER_C
      */

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
    1824:	1f 81       	ldd	r17, Y+7	; 0x07
    1826:	75 95       	asr	r23
    1828:	67 95       	ror	r22
    182a:	07 2e       	mov	r0, r23
    182c:	00 0c       	add	r0, r0
    182e:	88 0b       	sbc	r24, r24
    1830:	99 0b       	sbc	r25, r25
    1832:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__floatsisf>
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e8       	ldi	r20, 0x80	; 128
    183c:	5e e3       	ldi	r21, 0x3E	; 62
    183e:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__subsf3>
    1842:	6b 01       	movw	r12, r22
    1844:	7c 01       	movw	r14, r24
    1846:	81 2f       	mov	r24, r17
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	2e 81       	ldd	r18, Y+6	; 0x06
    184c:	82 1b       	sub	r24, r18
    184e:	91 09       	sbc	r25, r1
    1850:	bc 01       	movw	r22, r24
    1852:	99 0f       	add	r25, r25
    1854:	88 0b       	sbc	r24, r24
    1856:	99 0b       	sbc	r25, r25
    1858:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__floatsisf>
    185c:	4b 01       	movw	r8, r22
    185e:	5c 01       	movw	r10, r24
    1860:	61 2f       	mov	r22, r17
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__floatunsisf>
    186c:	9b 01       	movw	r18, r22
    186e:	ac 01       	movw	r20, r24
    1870:	c5 01       	movw	r24, r10
    1872:	b4 01       	movw	r22, r8
    1874:	0e 94 3c 1c 	call	0x3878	; 0x3878 <__divsf3>
    1878:	9b 01       	movw	r18, r22
    187a:	ac 01       	movw	r20, r24
    187c:	c7 01       	movw	r24, r14
    187e:	b6 01       	movw	r22, r12
    1880:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__addsf3>
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x136>
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x13e>
    1888:	56 2f       	mov	r21, r22
    188a:	47 2f       	mov	r20, r23
    188c:	38 2f       	mov	r19, r24
    188e:	29 2f       	mov	r18, r25
      break;
  }
}
    1890:	65 2f       	mov	r22, r21
    1892:	74 2f       	mov	r23, r20
    1894:	83 2f       	mov	r24, r19
    1896:	92 2f       	mov	r25, r18
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	bf 90       	pop	r11
    18a8:	af 90       	pop	r10
    18aa:	9f 90       	pop	r9
    18ac:	8f 90       	pop	r8
    18ae:	08 95       	ret

000018b0 <_ZN17DallasTemperature8getTempCEPh>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(uint8_t* deviceAddress)
{
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	29 97       	sbiw	r28, 0x09	; 9
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	8c 01       	movw	r16, r24
    18ce:	7b 01       	movw	r14, r22
  // TODO: Multiple devices (up to 64) on the same bus may take 
  //       some time to negotiate a response
  // What happens in case of collision?

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
    18d0:	ae 01       	movw	r20, r28
    18d2:	4f 5f       	subi	r20, 0xFF	; 255
    18d4:	5f 4f       	sbci	r21, 0xFF	; 255
    18d6:	0e 94 42 0a 	call	0x1484	; 0x1484 <_ZN17DallasTemperature11isConnectedEPhS0_>
    18da:	88 23       	and	r24, r24
    18dc:	41 f0       	breq	.+16     	; 0x18ee <_ZN17DallasTemperature8getTempCEPh+0x3e>
    18de:	ae 01       	movw	r20, r28
    18e0:	4f 5f       	subi	r20, 0xFF	; 255
    18e2:	5f 4f       	sbci	r21, 0xFF	; 255
    18e4:	b7 01       	movw	r22, r14
    18e6:	c8 01       	movw	r24, r16
    18e8:	0e 94 a9 0b 	call	0x1752	; 0x1752 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
    18ec:	04 c0       	rjmp	.+8      	; 0x18f6 <_ZN17DallasTemperature8getTempCEPh+0x46>
  return DEVICE_DISCONNECTED;
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	8e ef       	ldi	r24, 0xFE	; 254
    18f4:	92 ec       	ldi	r25, 0xC2	; 194
}
    18f6:	29 96       	adiw	r28, 0x09	; 9
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	ff 90       	pop	r15
    190c:	ef 90       	pop	r14
    190e:	08 95       	ret

00001910 <_ZN17DallasTemperature19isParasitePowerModeEv>:

// returns true if the bus requires parasite power
bool DallasTemperature::isParasitePowerMode(void)
{
  return parasite;
}
    1910:	fc 01       	movw	r30, r24
    1912:	80 81       	ld	r24, Z
    1914:	08 95       	ret

00001916 <_ZN17DallasTemperature12toFahrenheitEf>:
#endif

// Convert float celsius to fahrenheit
float DallasTemperature::toFahrenheit(float celsius)
{
  return (celsius * 1.8) + 32;
    1916:	26 e6       	ldi	r18, 0x66	; 102
    1918:	36 e6       	ldi	r19, 0x66	; 102
    191a:	46 ee       	ldi	r20, 0xE6	; 230
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__mulsf3>
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	52 e4       	ldi	r21, 0x42	; 66
    192a:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__addsf3>
}
    192e:	08 95       	ret

00001930 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
    1930:	ff 92       	push	r15
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
	IO_REG_TYPE mask = bitmask;
    193a:	fc 01       	movw	r30, r24
    193c:	d0 81       	ld	r29, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    193e:	01 81       	ldd	r16, Z+1	; 0x01
    1940:	12 81       	ldd	r17, Z+2	; 0x02
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
    1942:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);
    1944:	f8 01       	movw	r30, r16
    1946:	81 81       	ldd	r24, Z+1	; 0x01
    1948:	fd 2e       	mov	r15, r29
    194a:	f0 94       	com	r15
    194c:	8f 21       	and	r24, r15
    194e:	81 83       	std	Z+1, r24	; 0x01
	interrupts();
    1950:	78 94       	sei
    1952:	cc e7       	ldi	r28, 0x7C	; 124
    1954:	02 c0       	rjmp	.+4      	; 0x195a <_ZN7OneWire5resetEv+0x2a>
    1956:	c1 50       	subi	r28, 0x01	; 1
	// wait until the wire is high... just in case
	do {
		if (--retries == 0) return 0;
    1958:	41 f1       	breq	.+80     	; 0x19aa <_ZN7OneWire5resetEv+0x7a>
		delayMicroseconds(2);
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <delayMicroseconds>
	} while ( !DIRECT_READ(reg, mask));
    1962:	f8 01       	movw	r30, r16
    1964:	90 81       	ld	r25, Z
    1966:	9d 23       	and	r25, r29

	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
    1968:	b1 f3       	breq	.-20     	; 0x1956 <_ZN7OneWire5resetEv+0x26>
		if (--retries == 0) return 0;
		delayMicroseconds(2);
	} while ( !DIRECT_READ(reg, mask));

	noInterrupts();
    196a:	f8 94       	cli
	DIRECT_WRITE_LOW(reg, mask);
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	8f 21       	and	r24, r15
    1970:	82 83       	std	Z+2, r24	; 0x02
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    1972:	81 81       	ldd	r24, Z+1	; 0x01
    1974:	8d 2b       	or	r24, r29
    1976:	81 83       	std	Z+1, r24	; 0x01
	interrupts();
    1978:	78 94       	sei
	delayMicroseconds(480);
    197a:	80 ee       	ldi	r24, 0xE0	; 224
    197c:	91 e0       	ldi	r25, 0x01	; 1
    197e:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <delayMicroseconds>
	noInterrupts();
    1982:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
    1984:	f8 01       	movw	r30, r16
    1986:	81 81       	ldd	r24, Z+1	; 0x01
    1988:	f8 22       	and	r15, r24
    198a:	f1 82       	std	Z+1, r15	; 0x01
	delayMicroseconds(70);
    198c:	86 e4       	ldi	r24, 0x46	; 70
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <delayMicroseconds>
	r = !DIRECT_READ(reg, mask);
    1994:	f8 01       	movw	r30, r16
    1996:	80 81       	ld	r24, Z
    1998:	d8 23       	and	r29, r24
    199a:	c1 e0       	ldi	r28, 0x01	; 1
    199c:	09 f0       	breq	.+2      	; 0x19a0 <_ZN7OneWire5resetEv+0x70>
    199e:	c0 e0       	ldi	r28, 0x00	; 0
	interrupts();
    19a0:	78 94       	sei
	delayMicroseconds(410);
    19a2:	8a e9       	ldi	r24, 0x9A	; 154
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <delayMicroseconds>
	return r;
}
    19aa:	8c 2f       	mov	r24, r28
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	ff 90       	pop	r15
    19b6:	08 95       	ret

000019b8 <_ZN7OneWire9write_bitEh>:
//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
{
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
	IO_REG_TYPE mask=bitmask;
    19be:	fc 01       	movw	r30, r24
    19c0:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    19c2:	c1 81       	ldd	r28, Z+1	; 0x01
    19c4:	d2 81       	ldd	r29, Z+2	; 0x02

	if (v & 1) {
    19c6:	60 ff       	sbrs	r22, 0
    19c8:	16 c0       	rjmp	.+44     	; 0x19f6 <_ZN7OneWire9write_bitEh+0x3e>
		noInterrupts();
    19ca:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	91 2f       	mov	r25, r17
    19d0:	90 95       	com	r25
    19d2:	89 23       	and	r24, r25
    19d4:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	81 2b       	or	r24, r17
    19da:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(10);
    19dc:	8a e0       	ldi	r24, 0x0A	; 10
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	18 2b       	or	r17, r24
    19e8:	1a 83       	std	Y+2, r17	; 0x02
		interrupts();
    19ea:	78 94       	sei
		delayMicroseconds(55);
    19ec:	87 e3       	ldi	r24, 0x37	; 55
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <delayMicroseconds>
    19f4:	15 c0       	rjmp	.+42     	; 0x1a20 <_ZN7OneWire9write_bitEh+0x68>
	} else {
		noInterrupts();
    19f6:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	91 2f       	mov	r25, r17
    19fc:	90 95       	com	r25
    19fe:	89 23       	and	r24, r25
    1a00:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	81 2b       	or	r24, r17
    1a06:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(65);
    1a08:	81 e4       	ldi	r24, 0x41	; 65
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	18 2b       	or	r17, r24
    1a14:	1a 83       	std	Y+2, r17	; 0x02
		interrupts();
    1a16:	78 94       	sei
		delayMicroseconds(5);
    1a18:	85 e0       	ldi	r24, 0x05	; 5
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <delayMicroseconds>
	}
}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	08 95       	ret

00001a28 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
	IO_REG_TYPE mask=bitmask;
    1a30:	fc 01       	movw	r30, r24
    1a32:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    1a34:	c1 81       	ldd	r28, Z+1	; 0x01
    1a36:	d2 81       	ldd	r29, Z+2	; 0x02
	uint8_t r;

	noInterrupts();
    1a38:	f8 94       	cli
	DIRECT_MODE_OUTPUT(reg, mask);
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	81 2b       	or	r24, r17
    1a3e:	89 83       	std	Y+1, r24	; 0x01
	DIRECT_WRITE_LOW(reg, mask);
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	01 2f       	mov	r16, r17
    1a44:	00 95       	com	r16
    1a46:	80 23       	and	r24, r16
    1a48:	8a 83       	std	Y+2, r24	; 0x02
	delayMicroseconds(3);
    1a4a:	83 e0       	ldi	r24, 0x03	; 3
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <delayMicroseconds>
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	08 23       	and	r16, r24
    1a56:	09 83       	std	Y+1, r16	; 0x01
	delayMicroseconds(10);
    1a58:	8a e0       	ldi	r24, 0x0A	; 10
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <delayMicroseconds>
	r = DIRECT_READ(reg, mask);
    1a60:	c8 81       	ld	r28, Y
	interrupts();
    1a62:	78 94       	sei
	delayMicroseconds(53);
    1a64:	85 e3       	ldi	r24, 0x35	; 53
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <delayMicroseconds>
	DIRECT_MODE_OUTPUT(reg, mask);
	DIRECT_WRITE_LOW(reg, mask);
	delayMicroseconds(3);
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
	delayMicroseconds(10);
	r = DIRECT_READ(reg, mask);
    1a6c:	1c 23       	and	r17, r28
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <_ZN7OneWire8read_bitEv+0x4c>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
	interrupts();
	delayMicroseconds(53);
	return r;
}
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	1f 91       	pop	r17
    1a7a:	0f 91       	pop	r16
    1a7c:	08 95       	ret

00001a7e <_ZN7OneWire5writeEhh>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    1a7e:	bf 92       	push	r11
    1a80:	cf 92       	push	r12
    1a82:	df 92       	push	r13
    1a84:	ef 92       	push	r14
    1a86:	ff 92       	push	r15
    1a88:	0f 93       	push	r16
    1a8a:	1f 93       	push	r17
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	7c 01       	movw	r14, r24
    1a92:	d6 2e       	mov	r13, r22
    1a94:	b4 2e       	mov	r11, r20
    1a96:	c8 e0       	ldi	r28, 0x08	; 8
    1a98:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    1a9a:	11 e0       	ldi	r17, 0x01	; 1
	OneWire::write_bit( (bitMask & v)?1:0);
    1a9c:	01 e0       	ldi	r16, 0x01	; 1
    1a9e:	c1 2c       	mov	r12, r1
    1aa0:	60 2f       	mov	r22, r16
    1aa2:	91 2f       	mov	r25, r17
    1aa4:	9d 21       	and	r25, r13
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <_ZN7OneWire5writeEhh+0x2c>
    1aa8:	6c 2d       	mov	r22, r12
    1aaa:	c7 01       	movw	r24, r14
    1aac:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN7OneWire9write_bitEh>
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    1ab0:	11 0f       	add	r17, r17
    1ab2:	21 97       	sbiw	r28, 0x01	; 1
    1ab4:	a9 f7       	brne	.-22     	; 0x1aa0 <_ZN7OneWire5writeEhh+0x22>
	OneWire::write_bit( (bitMask & v)?1:0);
    }
    if ( !power) {
    1ab6:	b1 10       	cpse	r11, r1
    1ab8:	15 c0       	rjmp	.+42     	; 0x1ae4 <_ZN7OneWire5writeEhh+0x66>
	noInterrupts();
    1aba:	f8 94       	cli
	DIRECT_MODE_INPUT(baseReg, bitmask);
    1abc:	d7 01       	movw	r26, r14
    1abe:	11 96       	adiw	r26, 0x01	; 1
    1ac0:	ed 91       	ld	r30, X+
    1ac2:	fc 91       	ld	r31, X
    1ac4:	12 97       	sbiw	r26, 0x02	; 2
    1ac6:	91 81       	ldd	r25, Z+1	; 0x01
    1ac8:	8c 91       	ld	r24, X
    1aca:	80 95       	com	r24
    1acc:	89 23       	and	r24, r25
    1ace:	81 83       	std	Z+1, r24	; 0x01
	DIRECT_WRITE_LOW(baseReg, bitmask);
    1ad0:	11 96       	adiw	r26, 0x01	; 1
    1ad2:	ed 91       	ld	r30, X+
    1ad4:	fc 91       	ld	r31, X
    1ad6:	12 97       	sbiw	r26, 0x02	; 2
    1ad8:	92 81       	ldd	r25, Z+2	; 0x02
    1ada:	8c 91       	ld	r24, X
    1adc:	80 95       	com	r24
    1ade:	89 23       	and	r24, r25
    1ae0:	82 83       	std	Z+2, r24	; 0x02
	interrupts();
    1ae2:	78 94       	sei
    }
}
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	1f 91       	pop	r17
    1aea:	0f 91       	pop	r16
    1aec:	ff 90       	pop	r15
    1aee:	ef 90       	pop	r14
    1af0:	df 90       	pop	r13
    1af2:	cf 90       	pop	r12
    1af4:	bf 90       	pop	r11
    1af6:	08 95       	ret

00001af8 <_ZN7OneWire4readEv>:
}

//
// Read a byte
//
uint8_t OneWire::read() {
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	7c 01       	movw	r14, r24
    1b06:	c8 e0       	ldi	r28, 0x08	; 8
    1b08:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
    uint8_t r = 0;
    1b0a:	00 e0       	ldi	r16, 0x00	; 0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    1b0c:	11 e0       	ldi	r17, 0x01	; 1
	if ( OneWire::read_bit()) r |= bitMask;
    1b0e:	c7 01       	movw	r24, r14
    1b10:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN7OneWire8read_bitEv>
    1b14:	81 11       	cpse	r24, r1
    1b16:	01 2b       	or	r16, r17
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    1b18:	11 0f       	add	r17, r17
    1b1a:	21 97       	sbiw	r28, 0x01	; 1
    1b1c:	c1 f7       	brne	.-16     	; 0x1b0e <_ZN7OneWire4readEv+0x16>
	if ( OneWire::read_bit()) r |= bitMask;
    }
    return r;
}
    1b1e:	80 2f       	mov	r24, r16
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	ff 90       	pop	r15
    1b2a:	ef 90       	pop	r14
    1b2c:	08 95       	ret

00001b2e <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
    1b2e:	ef 92       	push	r14
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	7c 01       	movw	r14, r24
    1b3c:	8b 01       	movw	r16, r22
    uint8_t i;

    write(0x55);           // Choose ROM
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	65 e5       	ldi	r22, 0x55	; 85
    1b42:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <_ZN7OneWire5writeEhh>
    1b46:	e8 01       	movw	r28, r16
    1b48:	08 5f       	subi	r16, 0xF8	; 248
    1b4a:	1f 4f       	sbci	r17, 0xFF	; 255

    for (i = 0; i < 8; i++) write(rom[i]);
    1b4c:	69 91       	ld	r22, Y+
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	c7 01       	movw	r24, r14
    1b52:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <_ZN7OneWire5writeEhh>
    1b56:	c0 17       	cp	r28, r16
    1b58:	d1 07       	cpc	r29, r17
    1b5a:	c1 f7       	brne	.-16     	; 0x1b4c <_ZN7OneWire6selectEPKh+0x1e>
}
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	08 95       	ret

00001b6a <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC);           // Skip ROM
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	6c ec       	ldi	r22, 0xCC	; 204
    1b6e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <_ZN7OneWire5writeEhh>
    1b72:	08 95       	ret

00001b74 <_ZN7OneWire12reset_searchEv>:
//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    1b74:	dc 01       	movw	r26, r24
  // reset the search state
  LastDiscrepancy = 0;
    1b76:	1b 96       	adiw	r26, 0x0b	; 11
    1b78:	1c 92       	st	X, r1
    1b7a:	1b 97       	sbiw	r26, 0x0b	; 11
  LastDeviceFlag = FALSE;
    1b7c:	1d 96       	adiw	r26, 0x0d	; 13
    1b7e:	1c 92       	st	X, r1
    1b80:	1d 97       	sbiw	r26, 0x0d	; 13
  LastFamilyDiscrepancy = 0;
    1b82:	1c 96       	adiw	r26, 0x0c	; 12
    1b84:	1c 92       	st	X, r1
    1b86:	1c 97       	sbiw	r26, 0x0c	; 12
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
    1b88:	1a 96       	adiw	r26, 0x0a	; 10
    1b8a:	1c 92       	st	X, r1
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	3a 96       	adiw	r30, 0x0a	; 10
    1b90:	03 96       	adiw	r24, 0x03	; 3
    1b92:	12 92       	st	-Z, r1
    if ( i == 0) break;
    1b94:	e8 17       	cp	r30, r24
    1b96:	f9 07       	cpc	r31, r25
    1b98:	e1 f7       	brne	.-8      	; 0x1b92 <_ZN7OneWire12reset_searchEv+0x1e>
  }
}
    1b9a:	08 95       	ret

00001b9c <_ZN7OneWireC1Eh>:
*/

#include "OneWire.h"


OneWire::OneWire(uint8_t pin)
    1b9c:	1f 93       	push	r17
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	ec 01       	movw	r28, r24
    1ba4:	16 2f       	mov	r17, r22
{
	pinMode(pin, INPUT);
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	81 2f       	mov	r24, r17
    1baa:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <pinMode>
	bitmask = PIN_TO_BITMASK(pin);
    1bae:	61 2f       	mov	r22, r17
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	fb 01       	movw	r30, r22
    1bb4:	e4 58       	subi	r30, 0x84	; 132
    1bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb8:	e4 91       	lpm	r30, Z
    1bba:	e8 83       	st	Y, r30
	baseReg = PIN_TO_BASEREG(pin);
    1bbc:	fb 01       	movw	r30, r22
    1bbe:	e0 57       	subi	r30, 0x70	; 112
    1bc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc2:	e4 91       	lpm	r30, Z
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	ee 0f       	add	r30, r30
    1bc8:	ff 1f       	adc	r31, r31
    1bca:	ec 55       	subi	r30, 0x5C	; 92
    1bcc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bce:	85 91       	lpm	r24, Z+
    1bd0:	94 91       	lpm	r25, Z
    1bd2:	9a 83       	std	Y+2, r25	; 0x02
    1bd4:	89 83       	std	Y+1, r24	; 0x01
#if ONEWIRE_SEARCH
	reset_search();
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN7OneWire12reset_searchEv>
#endif
}
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	08 95       	ret

00001be4 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
    1be4:	9f 92       	push	r9
    1be6:	af 92       	push	r10
    1be8:	bf 92       	push	r11
    1bea:	cf 92       	push	r12
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	ec 01       	movw	r28, r24
    1bfc:	c6 2e       	mov	r12, r22
    1bfe:	d7 2e       	mov	r13, r23
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    1c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c02:	81 11       	cpse	r24, r1
    1c04:	61 c0       	rjmp	.+194    	; 0x1cc8 <_ZN7OneWire6searchEPh+0xe4>
   {
      // 1-Wire reset
      if (!reset())
    1c06:	ce 01       	movw	r24, r28
    1c08:	0e 94 98 0c 	call	0x1930	; 0x1930 <_ZN7OneWire5resetEv>
    1c0c:	81 11       	cpse	r24, r1
    1c0e:	04 c0       	rjmp	.+8      	; 0x1c18 <_ZN7OneWire6searchEPh+0x34>
      {
         // reset the search
         LastDiscrepancy = 0;
    1c10:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    1c12:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    1c14:	1c 86       	std	Y+12, r1	; 0x0c
         return FALSE;
    1c16:	72 c0       	rjmp	.+228    	; 0x1cfc <_ZN7OneWire6searchEPh+0x118>
      }

      // issue the search command
      write(0xF0);
    1c18:	40 e0       	ldi	r20, 0x00	; 0
    1c1a:	60 ef       	ldi	r22, 0xF0	; 240
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <_ZN7OneWire5writeEhh>

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
   rom_byte_mask = 1;
    1c22:	01 e0       	ldi	r16, 0x01	; 1
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
    1c24:	f1 2c       	mov	r15, r1

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
    1c26:	a1 2c       	mov	r10, r1
   uint8_t id_bit, cmp_id_bit;

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
    1c28:	ee 24       	eor	r14, r14
    1c2a:	e3 94       	inc	r14
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    1c2c:	bb 24       	eor	r11, r11
    1c2e:	b3 94       	inc	r11
    1c30:	91 2c       	mov	r9, r1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    1c32:	ce 01       	movw	r24, r28
    1c34:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN7OneWire8read_bitEv>
    1c38:	18 2f       	mov	r17, r24
         cmp_id_bit = read_bit();
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    1c40:	11 30       	cpi	r17, 0x01	; 1
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <_ZN7OneWire6searchEPh+0x62>
    1c44:	4d c0       	rjmp	.+154    	; 0x1ce0 <_ZN7OneWire6searchEPh+0xfc>
    1c46:	81 30       	cpi	r24, 0x01	; 1
    1c48:	c9 f4       	brne	.+50     	; 0x1c7c <_ZN7OneWire6searchEPh+0x98>
    1c4a:	35 c0       	rjmp	.+106    	; 0x1cb6 <_ZN7OneWire6searchEPh+0xd2>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    1c4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c4e:	e8 16       	cp	r14, r24
    1c50:	48 f4       	brcc	.+18     	; 0x1c64 <_ZN7OneWire6searchEPh+0x80>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    1c52:	fe 01       	movw	r30, r28
    1c54:	ef 0d       	add	r30, r15
    1c56:	f1 1d       	adc	r31, r1
    1c58:	83 81       	ldd	r24, Z+3	; 0x03
    1c5a:	80 23       	and	r24, r16
    1c5c:	1b 2d       	mov	r17, r11
    1c5e:	29 f4       	brne	.+10     	; 0x1c6a <_ZN7OneWire6searchEPh+0x86>
    1c60:	19 2d       	mov	r17, r9
    1c62:	03 c0       	rjmp	.+6      	; 0x1c6a <_ZN7OneWire6searchEPh+0x86>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    1c64:	1b 2d       	mov	r17, r11
    1c66:	e8 12       	cpse	r14, r24
    1c68:	19 2d       	mov	r17, r9

               // if 0 was picked then record its position in LastZero
               if (search_direction == 0)
    1c6a:	11 11       	cpse	r17, r1
    1c6c:	05 c0       	rjmp	.+10     	; 0x1c78 <_ZN7OneWire6searchEPh+0x94>
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    1c6e:	88 e0       	ldi	r24, 0x08	; 8
    1c70:	8e 15       	cp	r24, r14
    1c72:	c8 f1       	brcs	.+114    	; 0x1ce6 <_ZN7OneWire6searchEPh+0x102>
                     LastFamilyDiscrepancy = last_zero;
    1c74:	ec 86       	std	Y+12, r14	; 0x0c
    1c76:	37 c0       	rjmp	.+110    	; 0x1ce6 <_ZN7OneWire6searchEPh+0x102>
               }
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
    1c78:	11 30       	cpi	r17, 0x01	; 1
    1c7a:	41 f4       	brne	.+16     	; 0x1c8c <_ZN7OneWire6searchEPh+0xa8>
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	ef 0d       	add	r30, r15
    1c80:	f1 1d       	adc	r31, r1
    1c82:	83 81       	ldd	r24, Z+3	; 0x03
    1c84:	80 2b       	or	r24, r16
    1c86:	83 83       	std	Z+3, r24	; 0x03
    1c88:	1b 2d       	mov	r17, r11
    1c8a:	08 c0       	rjmp	.+16     	; 0x1c9c <_ZN7OneWire6searchEPh+0xb8>
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	ef 0d       	add	r30, r15
    1c90:	f1 1d       	adc	r31, r1
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	80 2f       	mov	r24, r16
    1c96:	80 95       	com	r24
    1c98:	89 23       	and	r24, r25
    1c9a:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    1c9c:	61 2f       	mov	r22, r17
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    1ca4:	e3 94       	inc	r14
            rom_byte_mask <<= 1;
    1ca6:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    1ca8:	11 f4       	brne	.+4      	; 0x1cae <_ZN7OneWire6searchEPh+0xca>
            {
                rom_byte_number++;
    1caa:	f3 94       	inc	r15
                rom_byte_mask = 1;
    1cac:	0b 2d       	mov	r16, r11

      // issue the search command
      write(0xF0);

      // loop to do the search
      do
    1cae:	87 e0       	ldi	r24, 0x07	; 7
    1cb0:	8f 15       	cp	r24, r15
    1cb2:	08 f0       	brcs	.+2      	; 0x1cb6 <_ZN7OneWire6searchEPh+0xd2>
    1cb4:	be cf       	rjmp	.-132    	; 0x1c32 <_ZN7OneWire6searchEPh+0x4e>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
    1cb6:	80 e4       	ldi	r24, 0x40	; 64
    1cb8:	8e 15       	cp	r24, r14
    1cba:	30 f4       	brcc	.+12     	; 0x1cc8 <_ZN7OneWire6searchEPh+0xe4>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    1cbc:	ab 86       	std	Y+11, r10	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    1cbe:	a1 10       	cpse	r10, r1
    1cc0:	14 c0       	rjmp	.+40     	; 0x1cea <_ZN7OneWire6searchEPh+0x106>
            LastDeviceFlag = TRUE;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	8d 87       	std	Y+13, r24	; 0x0d
    1cc6:	11 c0       	rjmp	.+34     	; 0x1cea <_ZN7OneWire6searchEPh+0x106>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    1cc8:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    1cca:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    1ccc:	1c 86       	std	Y+12, r1	; 0x0c
      search_result = FALSE;
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	15 c0       	rjmp	.+42     	; 0x1cfc <_ZN7OneWire6searchEPh+0x118>
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    1cd2:	81 91       	ld	r24, Z+
    1cd4:	8d 93       	st	X+, r24
    1cd6:	ec 17       	cp	r30, r28
    1cd8:	fd 07       	cpc	r31, r29
    1cda:	d9 f7       	brne	.-10     	; 0x1cd2 <_ZN7OneWire6searchEPh+0xee>
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	0e c0       	rjmp	.+28     	; 0x1cfc <_ZN7OneWire6searchEPh+0x118>
         if ((id_bit == 1) && (cmp_id_bit == 1))
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    1ce0:	18 13       	cpse	r17, r24
    1ce2:	d4 cf       	rjmp	.-88     	; 0x1c8c <_ZN7OneWire6searchEPh+0xa8>
    1ce4:	b3 cf       	rjmp	.-154    	; 0x1c4c <_ZN7OneWire6searchEPh+0x68>
   uint8_t id_bit, cmp_id_bit;

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
    1ce6:	ae 2c       	mov	r10, r14
    1ce8:	d1 cf       	rjmp	.-94     	; 0x1c8c <_ZN7OneWire6searchEPh+0xa8>
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	88 23       	and	r24, r24
    1cee:	61 f3       	breq	.-40     	; 0x1cc8 <_ZN7OneWire6searchEPh+0xe4>
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	33 96       	adiw	r30, 0x03	; 3
    1cf4:	ac 2d       	mov	r26, r12
    1cf6:	bd 2d       	mov	r27, r13
    1cf8:	2b 96       	adiw	r28, 0x0b	; 11
    1cfa:	eb cf       	rjmp	.-42     	; 0x1cd2 <_ZN7OneWire6searchEPh+0xee>
      search_result = FALSE;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   }
   return search_result;
  }
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	ff 90       	pop	r15
    1d06:	ef 90       	pop	r14
    1d08:	df 90       	pop	r13
    1d0a:	cf 90       	pop	r12
    1d0c:	bf 90       	pop	r11
    1d0e:	af 90       	pop	r10
    1d10:	9f 90       	pop	r9
    1d12:	08 95       	ret

00001d14 <_ZN7OneWire4crc8EPKhh>:
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    1d14:	2f ef       	ldi	r18, 0xFF	; 255
    1d16:	26 0f       	add	r18, r22
    1d18:	66 23       	and	r22, r22
    1d1a:	69 f0       	breq	.+26     	; 0x1d36 <_ZN7OneWire4crc8EPKhh+0x22>
    1d1c:	a8 2f       	mov	r26, r24
    1d1e:	b9 2f       	mov	r27, r25
    1d20:	80 e0       	ldi	r24, 0x00	; 0
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    1d22:	9d 91       	ld	r25, X+
    1d24:	e8 2f       	mov	r30, r24
    1d26:	e9 27       	eor	r30, r25
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	e8 59       	subi	r30, 0x98	; 152
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	84 91       	lpm	r24, Z
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    1d30:	21 50       	subi	r18, 0x01	; 1
    1d32:	b8 f7       	brcc	.-18     	; 0x1d22 <_ZN7OneWire4crc8EPKhh+0xe>
    1d34:	08 95       	ret
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;
    1d36:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    1d38:	08 95       	ret

00001d3a <_Z8i2c_initv>:
#define I2C_PULLUPS_ENABLE         PORTC |= 1<<4; PORTC |= 1<<5;   // PIN A4&A5 (SDA&SCL)
#define I2C_PULLUPS_DISABLE        PORTC &= ~(1<<4); PORTC &= ~(1<<5);

void i2c_init(void) {
	#if defined(INTERNAL_I2C_PULLUPS)
	I2C_PULLUPS_ENABLE
    1d3a:	44 9a       	sbi	0x08, 4	; 8
    1d3c:	45 9a       	sbi	0x08, 5	; 8
	#else
	I2C_PULLUPS_DISABLE
	#endif
	TWSR = 0;                                    // no prescaler => prescaler = 1
    1d3e:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = ((F_CPU / I2C_SPEED) - 16) / 2;   // change the I2C clock rate
    1d42:	80 e2       	ldi	r24, 0x20	; 32
    1d44:	80 93 b8 00 	sts	0x00B8, r24
	TWCR = 1<<TWEN;                              // enable twi module, no interrupt
    1d48:	84 e0       	ldi	r24, 0x04	; 4
    1d4a:	80 93 bc 00 	sts	0x00BC, r24
    1d4e:	08 95       	ret

00001d50 <_Z19waitTransmissionI2Cv>:
	return i2c_read(0);
}

void waitTransmissionI2C() {
	uint16_t count = 255;
	while (!(TWCR & (1<<TWINT))) {
    1d50:	8f ef       	ldi	r24, 0xFF	; 255
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	ec eb       	ldi	r30, 0xBC	; 188
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	0e c0       	rjmp	.+28     	; 0x1d76 <_Z19waitTransmissionI2Cv+0x26>
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
		count--;
		if (count==0) {              //we are in a blocking state => we don't insist
    1d5c:	61 f4       	brne	.+24     	; 0x1d76 <_Z19waitTransmissionI2Cv+0x26>
			TWCR = 0;                  //and we force a reset on TWINT register
    1d5e:	10 92 bc 00 	sts	0x00BC, r1
			//neutralizeTime = micros(); //we take a timestamp here to neutralize the value during a short delay
			i2c_errors_count++;
    1d62:	80 91 4d 07 	lds	r24, 0x074D
    1d66:	90 91 4e 07 	lds	r25, 0x074E
    1d6a:	01 96       	adiw	r24, 0x01	; 1
    1d6c:	90 93 4e 07 	sts	0x074E, r25
    1d70:	80 93 4d 07 	sts	0x074D, r24
			break;
    1d74:	08 95       	ret
	return i2c_read(0);
}

void waitTransmissionI2C() {
	uint16_t count = 255;
	while (!(TWCR & (1<<TWINT))) {
    1d76:	20 81       	ld	r18, Z
    1d78:	22 23       	and	r18, r18
    1d7a:	7c f7       	brge	.-34     	; 0x1d5a <_Z19waitTransmissionI2Cv+0xa>
    1d7c:	08 95       	ret

00001d7e <_Z13i2c_rep_starth>:
		}
	}
}


void i2c_rep_start(uint8_t address) {
    1d7e:	1f 93       	push	r17
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	18 2f       	mov	r17, r24
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) ; // send REPEAT START condition
    1d86:	cc eb       	ldi	r28, 0xBC	; 188
    1d88:	d0 e0       	ldi	r29, 0x00	; 0
    1d8a:	84 ea       	ldi	r24, 0xA4	; 164
    1d8c:	88 83       	st	Y, r24
	waitTransmissionI2C();                       // wait until transmission completed
    1d8e:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_Z19waitTransmissionI2Cv>
	TWDR = address;                              // send device address
    1d92:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1d96:	84 e8       	ldi	r24, 0x84	; 132
    1d98:	88 83       	st	Y, r24
	waitTransmissionI2C();                       // wail until transmission completed
    1d9a:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_Z19waitTransmissionI2Cv>
}
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	1f 91       	pop	r17
    1da4:	08 95       	ret

00001da6 <_Z9i2c_writeh>:
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
	//  while(TWCR & (1<<TWSTO));                // <- can produce a blocking state with some WMP clones
}

void i2c_write(uint8_t data ) {
	TWDR = data;                                 // send data to the previously addressed device
    1da6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1daa:	84 e8       	ldi	r24, 0x84	; 132
    1dac:	80 93 bc 00 	sts	0x00BC, r24
	waitTransmissionI2C();
    1db0:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_Z19waitTransmissionI2Cv>
    1db4:	08 95       	ret

00001db6 <_Z12i2c_writeReghhh>:
		*from = *to;
		*to = tray;
	}
}

void i2c_writeReg(uint8_t add, uint8_t reg, uint8_t val) {
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	d6 2f       	mov	r29, r22
    1dbc:	c4 2f       	mov	r28, r20
	i2c_rep_start(add<<1); // I2C write direction
    1dbe:	88 0f       	add	r24, r24
    1dc0:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <_Z13i2c_rep_starth>
	i2c_write(reg);        // register selection
    1dc4:	8d 2f       	mov	r24, r29
    1dc6:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <_Z9i2c_writeh>
	i2c_write(val);        // value to write in register
    1dca:	8c 2f       	mov	r24, r28
    1dcc:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <_Z9i2c_writeh>
	TWCR = (1<<TWINT) | (1<<TWEN);
	waitTransmissionI2C();                       // wail until transmission completed
}

void i2c_stop(void) {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    1dd0:	84 e9       	ldi	r24, 0x94	; 148
    1dd2:	80 93 bc 00 	sts	0x00BC, r24
void i2c_writeReg(uint8_t add, uint8_t reg, uint8_t val) {
	i2c_rep_start(add<<1); // I2C write direction
	i2c_write(reg);        // register selection
	i2c_write(val);        // value to write in register
	i2c_stop();
}
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	08 95       	ret

00001ddc <_Z17i2c_OLED_send_cmdh>:


void i2c_OLED_send_cmd(uint8_t command) {
	TWBR = ((F_CPU / 400000L) - 16) / 2; // change the I2C clock rate
    1ddc:	92 e0       	ldi	r25, 0x02	; 2
    1dde:	90 93 b8 00 	sts	0x00B8, r25
	i2c_writeReg(OLED_address, 0x80, (uint8_t)command);
    1de2:	48 2f       	mov	r20, r24
    1de4:	60 e8       	ldi	r22, 0x80	; 128
    1de6:	8c e3       	ldi	r24, 0x3C	; 60
    1de8:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <_Z12i2c_writeReghhh>
    1dec:	08 95       	ret

00001dee <_Z13i2c_OLED_initv>:
{
	i2c_OLED_init();
}

void  i2c_OLED_init(void){
	i2c_OLED_send_cmd(0xae);    //display off
    1dee:	8e ea       	ldi	r24, 0xAE	; 174
    1df0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
	i2c_OLED_send_cmd(0x2e);    //deactivate scrolling
    1df4:	8e e2       	ldi	r24, 0x2E	; 46
    1df6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
	i2c_OLED_send_cmd(0xa4);          //SET All pixels OFF
    1dfa:	84 ea       	ldi	r24, 0xA4	; 164
    1dfc:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
	//  i2c_OLED_send_cmd(0xa5);            //SET ALL pixels ON
	delay(50);
    1e00:	62 e3       	ldi	r22, 0x32	; 50
    1e02:	70 e0       	ldi	r23, 0x00	; 0
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>
	i2c_OLED_send_cmd(0x20);            //Set Memory Addressing Mode
    1e0c:	80 e2       	ldi	r24, 0x20	; 32
    1e0e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
	i2c_OLED_send_cmd(0x02);            //Set Memory Addressing Mode to Page addressing mode(RESET)
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
	//  i2c_OLED_send_cmd(0xa0);      //colum address 0 mapped to SEG0 (POR)*** wires at bottom
	i2c_OLED_send_cmd(0xa1);    //colum address 127 mapped to SEG0 (POR) ** wires at top of board
    1e18:	81 ea       	ldi	r24, 0xA1	; 161
    1e1a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
	//  i2c_OLED_send_cmd(0xC0);            // Scan from Right to Left (POR)         *** wires at bottom
	i2c_OLED_send_cmd(0xC8);          // Scan from Left to Right               ** wires at top
    1e1e:	88 ec       	ldi	r24, 0xC8	; 200
    1e20:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
	i2c_OLED_send_cmd(0xa6);            // Set WHITE chars on BLACK backround
    1e24:	86 ea       	ldi	r24, 0xA6	; 166
    1e26:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>

	//  i2c_OLED_send_cmd(0xa7);            // Set BLACK chars on WHITE backround
	i2c_OLED_send_cmd(0x81);            // 81 Setup CONTRAST CONTROL, following byte is the contrast Value
    1e2a:	81 e8       	ldi	r24, 0x81	; 129
    1e2c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
	i2c_OLED_send_cmd(0xff);            // af contrast value between 1 ( == dull) to 256 ( == bright)
    1e30:	8f ef       	ldi	r24, 0xFF	; 255
    1e32:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
	delay(20);
    1e36:	64 e1       	ldi	r22, 0x14	; 20
    1e38:	70 e0       	ldi	r23, 0x00	; 0
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>
	i2c_OLED_send_cmd(0xaf);          //display on
    1e42:	8f ea       	ldi	r24, 0xAF	; 175
    1e44:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
	delay(20);
    1e48:	64 e1       	ldi	r22, 0x14	; 20
    1e4a:	70 e0       	ldi	r23, 0x00	; 0
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>
    1e54:	08 95       	ret

00001e56 <_Z5setXYhh>:
}


//==========================================================//
void setXY(unsigned char row,unsigned char col)
{
    1e56:	cf 93       	push	r28
    1e58:	c6 2f       	mov	r28, r22
}

//==========================================================//
void sendcommand(unsigned char com)
{
	i2c_OLED_send_cmd(com);
    1e5a:	80 55       	subi	r24, 0x50	; 80
    1e5c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>

//==========================================================//
void setXY(unsigned char row,unsigned char col)
{
	sendcommand(0xb0+row);                //set page address
	sendcommand(0x00+(8*col&0x0f));       //set low col address
    1e60:	8c 2f       	mov	r24, r28
    1e62:	88 0f       	add	r24, r24
    1e64:	88 0f       	add	r24, r24
    1e66:	88 0f       	add	r24, r24
}

//==========================================================//
void sendcommand(unsigned char com)
{
	i2c_OLED_send_cmd(com);
    1e68:	88 70       	andi	r24, 0x08	; 8
    1e6a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
//==========================================================//
void setXY(unsigned char row,unsigned char col)
{
	sendcommand(0xb0+row);                //set page address
	sendcommand(0x00+(8*col&0x0f));       //set low col address
	sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
    1e6e:	8c 2f       	mov	r24, r28
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	96 95       	lsr	r25
    1e74:	87 95       	ror	r24
    1e76:	8f 70       	andi	r24, 0x0F	; 15
}

//==========================================================//
void sendcommand(unsigned char com)
{
	i2c_OLED_send_cmd(com);
    1e78:	80 5f       	subi	r24, 0xF0	; 240
    1e7a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
void setXY(unsigned char row,unsigned char col)
{
	sendcommand(0xb0+row);                //set page address
	sendcommand(0x00+(8*col&0x0f));       //set low col address
	sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
}
    1e7e:	cf 91       	pop	r28
    1e80:	08 95       	ret

00001e82 <_Z18i2c_OLED_send_byteh>:
	TWBR = ((F_CPU / 400000L) - 16) / 2; // change the I2C clock rate
	i2c_writeReg(OLED_address, 0x80, (uint8_t)command);
}

void i2c_OLED_send_byte(uint8_t val) {
	TWBR = ((F_CPU / 400000L) - 16) / 2; // change the I2C clock rate
    1e82:	92 e0       	ldi	r25, 0x02	; 2
    1e84:	90 93 b8 00 	sts	0x00B8, r25
	i2c_writeReg(OLED_address, 0x40, (uint8_t)val);
    1e88:	48 2f       	mov	r20, r24
    1e8a:	60 e4       	ldi	r22, 0x40	; 64
    1e8c:	8c e3       	ldi	r24, 0x3C	; 60
    1e8e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <_Z12i2c_writeReghhh>
    1e92:	08 95       	ret

00001e94 <_Z13clear_displayv>:
	sendcommand(0xb0+row);                //set page address
	sendcommand(0x00+(8*col&0x0f));       //set low col address
	sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
}
void clear_display(void)
{
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
	unsigned char i,k;
	for(k=0;k<8;k++)
    1e98:	d0 e0       	ldi	r29, 0x00	; 0
	{
		setXY(k,0);
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	8d 2f       	mov	r24, r29
    1e9e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z5setXYhh>
    1ea2:	c0 e0       	ldi	r28, 0x00	; 0
}

//==========================================================//
void SendChar(unsigned char data)
{
	i2c_OLED_send_byte(data);
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <_Z18i2c_OLED_send_byteh>
	unsigned char i,k;
	for(k=0;k<8;k++)
	{
		setXY(k,0);
		{
			for(i=0;i<128;i++)     //clear all COL
    1eaa:	cf 5f       	subi	r28, 0xFF	; 255
    1eac:	c0 38       	cpi	r28, 0x80	; 128
    1eae:	d1 f7       	brne	.-12     	; 0x1ea4 <_Z13clear_displayv+0x10>
	sendcommand(0x10+((8*col>>4)&0x0f));  //set high col address
}
void clear_display(void)
{
	unsigned char i,k;
	for(k=0;k<8;k++)
    1eb0:	df 5f       	subi	r29, 0xFF	; 255
    1eb2:	d8 30       	cpi	r29, 0x08	; 8
    1eb4:	91 f7       	brne	.-28     	; 0x1e9a <_Z13clear_displayv+0x6>
				SendChar(0);         //clear all COL
				//delay(10);
			}
		}
	}
}
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	08 95       	ret

00001ebc <_Z7sendStrPKc>:
	delay(20);
}

//==========================================================//
void sendStr(const char *string)
{
    1ebc:	ef 92       	push	r14
    1ebe:	ff 92       	push	r15
    1ec0:	0f 93       	push	r16
    1ec2:	1f 93       	push	r17
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	ec 01       	movw	r28, r24
	unsigned char i=0;
	//setXY(0,0);
	while(*string)
    1eca:	88 81       	ld	r24, Y
    1ecc:	81 11       	cpse	r24, r1
    1ece:	21 c0       	rjmp	.+66     	; 0x1f12 <_Z7sendStrPKc+0x56>
    1ed0:	25 c0       	rjmp	.+74     	; 0x1f1c <_Z7sendStrPKc+0x60>
	{
		for(i=0;i<8;i++)
		{
			SendChar(myFont[*string-0x20][i]);
    1ed2:	e8 81       	ld	r30, Y
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	b0 97       	sbiw	r30, 0x20	; 32
    1ed8:	ee 0f       	add	r30, r30
    1eda:	ff 1f       	adc	r31, r31
    1edc:	ee 0f       	add	r30, r30
    1ede:	ff 1f       	adc	r31, r31
    1ee0:	ee 0f       	add	r30, r30
    1ee2:	ff 1f       	adc	r31, r31
    1ee4:	e0 0f       	add	r30, r16
    1ee6:	f1 1f       	adc	r31, r17
    1ee8:	ec 5f       	subi	r30, 0xFC	; 252
    1eea:	fe 4f       	sbci	r31, 0xFE	; 254
}

//==========================================================//
void SendChar(unsigned char data)
{
	i2c_OLED_send_byte(data);
    1eec:	80 81       	ld	r24, Z
    1eee:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <_Z18i2c_OLED_send_byteh>
		for(i=0;i<8;i++)
		{
			SendChar(myFont[*string-0x20][i]);

			// SendChar(*string);
			delay(10);
    1ef2:	6a e0       	ldi	r22, 0x0A	; 10
    1ef4:	70 e0       	ldi	r23, 0x00	; 0
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>
    1efe:	0f 5f       	subi	r16, 0xFF	; 255
    1f00:	1f 4f       	sbci	r17, 0xFF	; 255
{
	unsigned char i=0;
	//setXY(0,0);
	while(*string)
	{
		for(i=0;i<8;i++)
    1f02:	08 30       	cpi	r16, 0x08	; 8
    1f04:	11 05       	cpc	r17, r1
    1f06:	29 f7       	brne	.-54     	; 0x1ed2 <_Z7sendStrPKc+0x16>
			SendChar(myFont[*string-0x20][i]);

			// SendChar(*string);
			delay(10);
		}
		*string++;
    1f08:	21 96       	adiw	r28, 0x01	; 1
//==========================================================//
void sendStr(const char *string)
{
	unsigned char i=0;
	//setXY(0,0);
	while(*string)
    1f0a:	88 81       	ld	r24, Y
    1f0c:	81 11       	cpse	r24, r1
    1f0e:	03 c0       	rjmp	.+6      	; 0x1f16 <_Z7sendStrPKc+0x5a>
    1f10:	05 c0       	rjmp	.+10     	; 0x1f1c <_Z7sendStrPKc+0x60>
	delay(20);
}

//==========================================================//
void sendStr(const char *string)
{
    1f12:	e1 2c       	mov	r14, r1
    1f14:	f1 2c       	mov	r15, r1
    1f16:	0e 2d       	mov	r16, r14
    1f18:	1f 2d       	mov	r17, r15
    1f1a:	db cf       	rjmp	.-74     	; 0x1ed2 <_Z7sendStrPKc+0x16>
			// SendChar(*string);
			delay(10);
		}
		*string++;
	}
}
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	1f 91       	pop	r17
    1f22:	0f 91       	pop	r16
    1f24:	ff 90       	pop	r15
    1f26:	ef 90       	pop	r14
    1f28:	08 95       	ret

00001f2a <_Z14float_to_uCharf>:


#ifndef FLOAT_TO_UCHAR_H_
#define FLOAT_TO_UCHAR_H_

unsigned char* float_to_uChar(float inFloat){
    1f2a:	4f 92       	push	r4
    1f2c:	5f 92       	push	r5
    1f2e:	6f 92       	push	r6
    1f30:	7f 92       	push	r7
    1f32:	8f 92       	push	r8
    1f34:	9f 92       	push	r9
    1f36:	af 92       	push	r10
    1f38:	bf 92       	push	r11
    1f3a:	cf 92       	push	r12
    1f3c:	df 92       	push	r13
    1f3e:	ef 92       	push	r14
    1f40:	ff 92       	push	r15
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	2a 97       	sbiw	r28, 0x0a	; 10
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	66 2e       	mov	r6, r22
    1f5c:	77 2e       	mov	r7, r23
    1f5e:	98 2e       	mov	r9, r24
    1f60:	89 2e       	mov	r8, r25
	unsigned char buf[10];
	unsigned char temp = 0;
	float temp_inFloat = inFloat;
	int i = 0;
	if(inFloat / 100 >= 1){
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	48 ec       	ldi	r20, 0xC8	; 200
    1f68:	52 e4       	ldi	r21, 0x42	; 66
    1f6a:	0e 94 3c 1c 	call	0x3878	; 0x3878 <__divsf3>
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e8       	ldi	r20, 0x80	; 128
    1f74:	5f e3       	ldi	r21, 0x3F	; 63
    1f76:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    1f7a:	88 23       	and	r24, r24
    1f7c:	ac f1       	brlt	.+106    	; 0x1fe8 <_Z14float_to_uCharf+0xbe>
		temp = 0;
		while(inFloat > 100){
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	48 ec       	ldi	r20, 0xC8	; 200
    1f84:	52 e4       	ldi	r21, 0x42	; 66
    1f86:	66 2d       	mov	r22, r6
    1f88:	77 2d       	mov	r23, r7
    1f8a:	89 2d       	mov	r24, r9
    1f8c:	98 2d       	mov	r25, r8
    1f8e:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    1f92:	18 16       	cp	r1, r24
    1f94:	ec f4       	brge	.+58     	; 0x1fd0 <_Z14float_to_uCharf+0xa6>
    1f96:	16 2d       	mov	r17, r6
    1f98:	07 2d       	mov	r16, r7
    1f9a:	f9 2c       	mov	r15, r9
    1f9c:	e8 2c       	mov	r14, r8
    1f9e:	d1 2c       	mov	r13, r1
			inFloat-= 100;
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	48 ec       	ldi	r20, 0xC8	; 200
    1fa6:	52 e4       	ldi	r21, 0x42	; 66
    1fa8:	61 2f       	mov	r22, r17
    1faa:	70 2f       	mov	r23, r16
    1fac:	8f 2d       	mov	r24, r15
    1fae:	9e 2d       	mov	r25, r14
    1fb0:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__subsf3>
    1fb4:	16 2f       	mov	r17, r22
    1fb6:	07 2f       	mov	r16, r23
    1fb8:	f8 2e       	mov	r15, r24
    1fba:	e9 2e       	mov	r14, r25
			temp++;
    1fbc:	d3 94       	inc	r13
	unsigned char temp = 0;
	float temp_inFloat = inFloat;
	int i = 0;
	if(inFloat / 100 >= 1){
		temp = 0;
		while(inFloat > 100){
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	48 ec       	ldi	r20, 0xC8	; 200
    1fc4:	52 e4       	ldi	r21, 0x42	; 66
    1fc6:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	4c f3       	brlt	.-46     	; 0x1fa0 <_Z14float_to_uCharf+0x76>
    1fce:	05 c0       	rjmp	.+10     	; 0x1fda <_Z14float_to_uCharf+0xb0>
    1fd0:	16 2d       	mov	r17, r6
    1fd2:	07 2d       	mov	r16, r7
    1fd4:	f9 2c       	mov	r15, r9
    1fd6:	e8 2c       	mov	r14, r8
    1fd8:	d1 2c       	mov	r13, r1
			inFloat-= 100;
			temp++;
		}
		buf[i] = temp + 48;
    1fda:	80 e3       	ldi	r24, 0x30	; 48
    1fdc:	8d 0d       	add	r24, r13
    1fde:	89 83       	std	Y+1, r24	; 0x01
		i++;
    1fe0:	cc 24       	eor	r12, r12
    1fe2:	c3 94       	inc	r12
    1fe4:	d1 2c       	mov	r13, r1
    1fe6:	06 c0       	rjmp	.+12     	; 0x1ff4 <_Z14float_to_uCharf+0xca>
    1fe8:	16 2d       	mov	r17, r6
    1fea:	07 2d       	mov	r16, r7
    1fec:	f9 2c       	mov	r15, r9
    1fee:	e8 2c       	mov	r14, r8

unsigned char* float_to_uChar(float inFloat){
	unsigned char buf[10];
	unsigned char temp = 0;
	float temp_inFloat = inFloat;
	int i = 0;
    1ff0:	c1 2c       	mov	r12, r1
    1ff2:	d1 2c       	mov	r13, r1
			temp++;
		}
		buf[i] = temp + 48;
		i++;
	}
	if(inFloat / 10 >= 1){
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e2       	ldi	r20, 0x20	; 32
    1ffa:	51 e4       	ldi	r21, 0x41	; 65
    1ffc:	61 2f       	mov	r22, r17
    1ffe:	70 2f       	mov	r23, r16
    2000:	8f 2d       	mov	r24, r15
    2002:	9e 2d       	mov	r25, r14
    2004:	0e 94 3c 1c 	call	0x3878	; 0x3878 <__divsf3>
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e8       	ldi	r20, 0x80	; 128
    200e:	5f e3       	ldi	r21, 0x3F	; 63
    2010:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    2014:	88 23       	and	r24, r24
    2016:	84 f1       	brlt	.+96     	; 0x2078 <_Z14float_to_uCharf+0x14e>
		temp = 0;
		while(inFloat >= 10){
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e2       	ldi	r20, 0x20	; 32
    201e:	51 e4       	ldi	r21, 0x41	; 65
    2020:	61 2f       	mov	r22, r17
    2022:	70 2f       	mov	r23, r16
    2024:	8f 2d       	mov	r24, r15
    2026:	9e 2d       	mov	r25, r14
    2028:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    202c:	88 23       	and	r24, r24
    202e:	cc f0       	brlt	.+50     	; 0x2062 <_Z14float_to_uCharf+0x138>
    2030:	b1 2c       	mov	r11, r1
			inFloat-= 10;
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	61 2f       	mov	r22, r17
    203c:	70 2f       	mov	r23, r16
    203e:	8f 2d       	mov	r24, r15
    2040:	9e 2d       	mov	r25, r14
    2042:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__subsf3>
    2046:	16 2f       	mov	r17, r22
    2048:	07 2f       	mov	r16, r23
    204a:	f8 2e       	mov	r15, r24
    204c:	e9 2e       	mov	r14, r25
			temp++;
    204e:	b3 94       	inc	r11
		buf[i] = temp + 48;
		i++;
	}
	if(inFloat / 10 >= 1){
		temp = 0;
		while(inFloat >= 10){
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e2       	ldi	r20, 0x20	; 32
    2056:	51 e4       	ldi	r21, 0x41	; 65
    2058:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    205c:	88 23       	and	r24, r24
    205e:	4c f7       	brge	.-46     	; 0x2032 <_Z14float_to_uCharf+0x108>
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <_Z14float_to_uCharf+0x13a>
    2062:	b1 2c       	mov	r11, r1
			inFloat-= 10;
			temp++;
		}
		buf[i] = temp+48;
    2064:	fe 01       	movw	r30, r28
    2066:	ec 0d       	add	r30, r12
    2068:	fd 1d       	adc	r31, r13
    206a:	80 e3       	ldi	r24, 0x30	; 48
    206c:	8b 0d       	add	r24, r11
    206e:	81 83       	std	Z+1, r24	; 0x01
		i++;
    2070:	8f ef       	ldi	r24, 0xFF	; 255
    2072:	c8 1a       	sub	r12, r24
    2074:	d8 0a       	sbc	r13, r24
    2076:	08 c0       	rjmp	.+16     	; 0x2088 <_Z14float_to_uCharf+0x15e>
	}
	else{
		buf[i] = 48;
    2078:	fe 01       	movw	r30, r28
    207a:	ec 0d       	add	r30, r12
    207c:	fd 1d       	adc	r31, r13
    207e:	80 e3       	ldi	r24, 0x30	; 48
    2080:	81 83       	std	Z+1, r24	; 0x01
		i++;
    2082:	8f ef       	ldi	r24, 0xFF	; 255
    2084:	c8 1a       	sub	r12, r24
    2086:	d8 0a       	sbc	r13, r24
	}
	if(inFloat >= 0){
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	a9 01       	movw	r20, r18
    208e:	61 2f       	mov	r22, r17
    2090:	70 2f       	mov	r23, r16
    2092:	8f 2d       	mov	r24, r15
    2094:	9e 2d       	mov	r25, r14
    2096:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    209a:	88 23       	and	r24, r24
    209c:	0c f4       	brge	.+2      	; 0x20a0 <_Z14float_to_uCharf+0x176>
    209e:	af c0       	rjmp	.+350    	; 0x21fe <_Z14float_to_uCharf+0x2d4>
		temp = 0;
		while(inFloat >= 1){
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e8       	ldi	r20, 0x80	; 128
    20a6:	5f e3       	ldi	r21, 0x3F	; 63
    20a8:	61 2f       	mov	r22, r17
    20aa:	70 2f       	mov	r23, r16
    20ac:	8f 2d       	mov	r24, r15
    20ae:	9e 2d       	mov	r25, r14
    20b0:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    20b4:	88 23       	and	r24, r24
    20b6:	cc f0       	brlt	.+50     	; 0x20ea <_Z14float_to_uCharf+0x1c0>
    20b8:	b1 2c       	mov	r11, r1
			inFloat--;
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	61 2f       	mov	r22, r17
    20c4:	70 2f       	mov	r23, r16
    20c6:	8f 2d       	mov	r24, r15
    20c8:	9e 2d       	mov	r25, r14
    20ca:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__subsf3>
    20ce:	16 2f       	mov	r17, r22
    20d0:	07 2f       	mov	r16, r23
    20d2:	f8 2e       	mov	r15, r24
    20d4:	e9 2e       	mov	r14, r25
			temp++;
    20d6:	b3 94       	inc	r11
		buf[i] = 48;
		i++;
	}
	if(inFloat >= 0){
		temp = 0;
		while(inFloat >= 1){
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e8       	ldi	r20, 0x80	; 128
    20de:	5f e3       	ldi	r21, 0x3F	; 63
    20e0:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    20e4:	88 23       	and	r24, r24
    20e6:	4c f7       	brge	.-46     	; 0x20ba <_Z14float_to_uCharf+0x190>
    20e8:	01 c0       	rjmp	.+2      	; 0x20ec <_Z14float_to_uCharf+0x1c2>
    20ea:	b1 2c       	mov	r11, r1
			inFloat--;
			temp++;
		}
		buf[i] = temp + 48;
    20ec:	e1 e0       	ldi	r30, 0x01	; 1
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	ec 0f       	add	r30, r28
    20f2:	fd 1f       	adc	r31, r29
    20f4:	ec 0d       	add	r30, r12
    20f6:	fd 1d       	adc	r31, r13
    20f8:	80 e3       	ldi	r24, 0x30	; 48
    20fa:	8b 0d       	add	r24, r11
    20fc:	80 83       	st	Z, r24
		i++;
    20fe:	56 01       	movw	r10, r12
    2100:	8f ef       	ldi	r24, 0xFF	; 255
    2102:	a8 1a       	sub	r10, r24
    2104:	b8 0a       	sbc	r11, r24
	}
	
	buf[i] = '.';
    2106:	e1 e0       	ldi	r30, 0x01	; 1
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	ec 0f       	add	r30, r28
    210c:	fd 1f       	adc	r31, r29
    210e:	ea 0d       	add	r30, r10
    2110:	fb 1d       	adc	r31, r11
    2112:	8e e2       	ldi	r24, 0x2E	; 46
    2114:	80 83       	st	Z, r24
	i++;
    2116:	26 01       	movw	r4, r12
    2118:	82 e0       	ldi	r24, 0x02	; 2
    211a:	48 0e       	add	r4, r24
    211c:	51 1c       	adc	r5, r1
	
	if(inFloat >= 0.1){
    211e:	2d ec       	ldi	r18, 0xCD	; 205
    2120:	3c ec       	ldi	r19, 0xCC	; 204
    2122:	4c ec       	ldi	r20, 0xCC	; 204
    2124:	5d e3       	ldi	r21, 0x3D	; 61
    2126:	61 2f       	mov	r22, r17
    2128:	70 2f       	mov	r23, r16
    212a:	8f 2d       	mov	r24, r15
    212c:	9e 2d       	mov	r25, r14
    212e:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    2132:	88 23       	and	r24, r24
    2134:	14 f4       	brge	.+4      	; 0x213a <_Z14float_to_uCharf+0x210>
    2136:	23 c0       	rjmp	.+70     	; 0x217e <_Z14float_to_uCharf+0x254>
    2138:	56 01       	movw	r10, r12
    213a:	d1 2c       	mov	r13, r1
		temp = 0;
		while(inFloat >= 0.1){
			inFloat -= 0.1;
    213c:	2d ec       	ldi	r18, 0xCD	; 205
    213e:	3c ec       	ldi	r19, 0xCC	; 204
    2140:	4c ec       	ldi	r20, 0xCC	; 204
    2142:	5d e3       	ldi	r21, 0x3D	; 61
    2144:	61 2f       	mov	r22, r17
    2146:	70 2f       	mov	r23, r16
    2148:	8f 2d       	mov	r24, r15
    214a:	9e 2d       	mov	r25, r14
    214c:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__subsf3>
    2150:	16 2f       	mov	r17, r22
    2152:	07 2f       	mov	r16, r23
    2154:	f8 2e       	mov	r15, r24
    2156:	e9 2e       	mov	r14, r25
			temp+= 1;
    2158:	d3 94       	inc	r13
	buf[i] = '.';
	i++;
	
	if(inFloat >= 0.1){
		temp = 0;
		while(inFloat >= 0.1){
    215a:	2d ec       	ldi	r18, 0xCD	; 205
    215c:	3c ec       	ldi	r19, 0xCC	; 204
    215e:	4c ec       	ldi	r20, 0xCC	; 204
    2160:	5d e3       	ldi	r21, 0x3D	; 61
    2162:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    2166:	88 23       	and	r24, r24
    2168:	4c f7       	brge	.-46     	; 0x213c <_Z14float_to_uCharf+0x212>
			inFloat -= 0.1;
			temp+= 1;
		}
		buf[i] = temp + 48;
    216a:	fe 01       	movw	r30, r28
    216c:	e4 0d       	add	r30, r4
    216e:	f5 1d       	adc	r31, r5
    2170:	80 e3       	ldi	r24, 0x30	; 48
    2172:	8d 0d       	add	r24, r13
    2174:	81 83       	std	Z+1, r24	; 0x01
		i++;
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	a8 0e       	add	r10, r24
    217a:	b1 1c       	adc	r11, r1
    217c:	08 c0       	rjmp	.+16     	; 0x218e <_Z14float_to_uCharf+0x264>
	}
	else {
		buf[i] = '0';
    217e:	fe 01       	movw	r30, r28
    2180:	e4 0d       	add	r30, r4
    2182:	f5 1d       	adc	r31, r5
    2184:	80 e3       	ldi	r24, 0x30	; 48
    2186:	81 83       	std	Z+1, r24	; 0x01
		i++;
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	a8 0e       	add	r10, r24
    218c:	b1 1c       	adc	r11, r1
	}
	temp = 0;
	if(inFloat >= 0.01){
    218e:	2a e0       	ldi	r18, 0x0A	; 10
    2190:	37 ed       	ldi	r19, 0xD7	; 215
    2192:	43 e2       	ldi	r20, 0x23	; 35
    2194:	5c e3       	ldi	r21, 0x3C	; 60
    2196:	61 2f       	mov	r22, r17
    2198:	70 2f       	mov	r23, r16
    219a:	8f 2d       	mov	r24, r15
    219c:	9e 2d       	mov	r25, r14
    219e:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    21a2:	88 23       	and	r24, r24
    21a4:	f4 f0       	brlt	.+60     	; 0x21e2 <_Z14float_to_uCharf+0x2b8>
    21a6:	d1 2c       	mov	r13, r1
		while(inFloat >= 0.01){
			inFloat -= 0.01;
    21a8:	2a e0       	ldi	r18, 0x0A	; 10
    21aa:	37 ed       	ldi	r19, 0xD7	; 215
    21ac:	43 e2       	ldi	r20, 0x23	; 35
    21ae:	5c e3       	ldi	r21, 0x3C	; 60
    21b0:	61 2f       	mov	r22, r17
    21b2:	70 2f       	mov	r23, r16
    21b4:	8f 2d       	mov	r24, r15
    21b6:	9e 2d       	mov	r25, r14
    21b8:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__subsf3>
    21bc:	16 2f       	mov	r17, r22
    21be:	07 2f       	mov	r16, r23
    21c0:	f8 2e       	mov	r15, r24
    21c2:	e9 2e       	mov	r14, r25
			temp++;
    21c4:	d3 94       	inc	r13
		buf[i] = '0';
		i++;
	}
	temp = 0;
	if(inFloat >= 0.01){
		while(inFloat >= 0.01){
    21c6:	2a e0       	ldi	r18, 0x0A	; 10
    21c8:	37 ed       	ldi	r19, 0xD7	; 215
    21ca:	43 e2       	ldi	r20, 0x23	; 35
    21cc:	5c e3       	ldi	r21, 0x3C	; 60
    21ce:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    21d2:	88 23       	and	r24, r24
    21d4:	4c f7       	brge	.-46     	; 0x21a8 <_Z14float_to_uCharf+0x27e>
			inFloat -= 0.01;
			temp++;
		}
		buf[i] = temp+48;
    21d6:	fe 01       	movw	r30, r28
    21d8:	ea 0d       	add	r30, r10
    21da:	fb 1d       	adc	r31, r11
    21dc:	80 e3       	ldi	r24, 0x30	; 48
    21de:	8d 0d       	add	r24, r13
    21e0:	81 83       	std	Z+1, r24	; 0x01
		i++;

	}
	if(temp_inFloat < 100.00)
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	48 ec       	ldi	r20, 0xC8	; 200
    21e8:	52 e4       	ldi	r21, 0x42	; 66
    21ea:	66 2d       	mov	r22, r6
    21ec:	77 2d       	mov	r23, r7
    21ee:	89 2d       	mov	r24, r9
    21f0:	98 2d       	mov	r25, r8
    21f2:	0e 94 37 1c 	call	0x386e	; 0x386e <__cmpsf2>
    21f6:	88 23       	and	r24, r24
    21f8:	d4 f4       	brge	.+52     	; 0x222e <_Z14float_to_uCharf+0x304>
	buf[5] = 0;
    21fa:	1e 82       	std	Y+6, r1	; 0x06
    21fc:	18 c0       	rjmp	.+48     	; 0x222e <_Z14float_to_uCharf+0x304>
		}
		buf[i] = temp + 48;
		i++;
	}
	
	buf[i] = '.';
    21fe:	8e e2       	ldi	r24, 0x2E	; 46
    2200:	fe 01       	movw	r30, r28
    2202:	ec 0d       	add	r30, r12
    2204:	fd 1d       	adc	r31, r13
    2206:	81 83       	std	Z+1, r24	; 0x01
	i++;
    2208:	26 01       	movw	r4, r12
    220a:	8f ef       	ldi	r24, 0xFF	; 255
    220c:	48 1a       	sub	r4, r24
    220e:	58 0a       	sbc	r5, r24
	
	if(inFloat >= 0.1){
    2210:	2d ec       	ldi	r18, 0xCD	; 205
    2212:	3c ec       	ldi	r19, 0xCC	; 204
    2214:	4c ec       	ldi	r20, 0xCC	; 204
    2216:	5d e3       	ldi	r21, 0x3D	; 61
    2218:	61 2f       	mov	r22, r17
    221a:	70 2f       	mov	r23, r16
    221c:	8f 2d       	mov	r24, r15
    221e:	9e 2d       	mov	r25, r14
    2220:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    2224:	88 23       	and	r24, r24
    2226:	0c f0       	brlt	.+2      	; 0x222a <_Z14float_to_uCharf+0x300>
    2228:	87 cf       	rjmp	.-242    	; 0x2138 <_Z14float_to_uCharf+0x20e>
    222a:	56 01       	movw	r10, r12
    222c:	a8 cf       	rjmp	.-176    	; 0x217e <_Z14float_to_uCharf+0x254>

	}
	if(temp_inFloat < 100.00)
	buf[5] = 0;

	delay(1);
    222e:	61 e0       	ldi	r22, 0x01	; 1
    2230:	70 e0       	ldi	r23, 0x00	; 0
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>

	return buf;
}
    223a:	ce 01       	movw	r24, r28
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	2a 96       	adiw	r28, 0x0a	; 10
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	ff 90       	pop	r15
    2254:	ef 90       	pop	r14
    2256:	df 90       	pop	r13
    2258:	cf 90       	pop	r12
    225a:	bf 90       	pop	r11
    225c:	af 90       	pop	r10
    225e:	9f 90       	pop	r9
    2260:	8f 90       	pop	r8
    2262:	7f 90       	pop	r7
    2264:	6f 90       	pop	r6
    2266:	5f 90       	pop	r5
    2268:	4f 90       	pop	r4
    226a:	08 95       	ret

0000226c <_Z6tempSMv>:
DallasTemperature sensors(&oneWire);
//



void tempSM(){
    226c:	4f 92       	push	r4
    226e:	5f 92       	push	r5
    2270:	6f 92       	push	r6
    2272:	7f 92       	push	r7
    2274:	8f 92       	push	r8
    2276:	9f 92       	push	r9
    2278:	af 92       	push	r10
    227a:	bf 92       	push	r11
    227c:	ef 92       	push	r14
    227e:	ff 92       	push	r15
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	62 97       	sbiw	r28, 0x12	; 18
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
	int numberOfDevices; // Number of temperature devices found

	DeviceAddress tempDeviceAddress; // We'll use this variable to store a found device address

	// For testing purposes, reset the bus every loop so we can see if any devices appear or fall off
	sensors.begin();
    2298:	83 e2       	ldi	r24, 0x23	; 35
    229a:	97 e0       	ldi	r25, 0x07	; 7
    229c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN17DallasTemperature5beginEv>

	// Grab a count of devices on the wire
	numberOfDevices = sensors.getDeviceCount();
    22a0:	83 e2       	ldi	r24, 0x23	; 35
    22a2:	97 e0       	ldi	r25, 0x07	; 7
    22a4:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZN17DallasTemperature14getDeviceCountEv>
    22a8:	e8 2e       	mov	r14, r24
    22aa:	f1 2c       	mov	r15, r1

	//Serial.print(" Parasite:");
	if (sensors.isParasitePowerMode()) Serial.print("ON ");
    22ac:	83 e2       	ldi	r24, 0x23	; 35
    22ae:	97 e0       	ldi	r25, 0x07	; 7
    22b0:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN17DallasTemperature19isParasitePowerModeEv>
    22b4:	88 23       	and	r24, r24
    22b6:	39 f0       	breq	.+14     	; 0x22c6 <_Z6tempSMv+0x5a>
    22b8:	6c e0       	ldi	r22, 0x0C	; 12
    22ba:	74 e0       	ldi	r23, 0x04	; 4
    22bc:	83 e9       	ldi	r24, 0x93	; 147
    22be:	97 e0       	ldi	r25, 0x07	; 7
    22c0:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_ZN5Print5printEPKc>
    22c4:	04 c0       	rjmp	.+8      	; 0x22ce <_Z6tempSMv+0x62>

	//Serial.print("Count:");
	//Serial.print(numberOfDevices, DEC);
	// report parasite power requirements

	sensors.requestTemperatures(); // Send the command to get temperatures
    22c6:	83 e2       	ldi	r24, 0x23	; 35
    22c8:	97 e0       	ldi	r25, 0x07	; 7
    22ca:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN17DallasTemperature19requestTemperaturesEv>

	// Loop through each device, print out temperature data
	for(int i=0;i<numberOfDevices; i++)
    22ce:	1e 14       	cp	r1, r14
    22d0:	1f 04       	cpc	r1, r15
    22d2:	0c f0       	brlt	.+2      	; 0x22d6 <_Z6tempSMv+0x6a>
    22d4:	a2 c0       	rjmp	.+324    	; 0x241a <_Z6tempSMv+0x1ae>
    22d6:	00 e0       	ldi	r16, 0x00	; 0
    22d8:	10 e0       	ldi	r17, 0x00	; 0
	{
		// Search the wire for address
		if(sensors.getAddress(tempDeviceAddress, i))
    22da:	40 2f       	mov	r20, r16
    22dc:	be 01       	movw	r22, r28
    22de:	65 5f       	subi	r22, 0xF5	; 245
    22e0:	7f 4f       	sbci	r23, 0xFF	; 255
    22e2:	83 e2       	ldi	r24, 0x23	; 35
    22e4:	97 e0       	ldi	r25, 0x07	; 7
    22e6:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN17DallasTemperature10getAddressEPhh>
    22ea:	88 23       	and	r24, r24
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <_Z6tempSMv+0x84>
    22ee:	8f c0       	rjmp	.+286    	; 0x240e <_Z6tempSMv+0x1a2>
		{
			// Output the device ID
			Serial.print(" #");
    22f0:	60 e1       	ldi	r22, 0x10	; 16
    22f2:	74 e0       	ldi	r23, 0x04	; 4
    22f4:	83 e9       	ldi	r24, 0x93	; 147
    22f6:	97 e0       	ldi	r25, 0x07	; 7
    22f8:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_ZN5Print5printEPKc>
			Serial.print(i,DEC);
    22fc:	4a e0       	ldi	r20, 0x0A	; 10
    22fe:	50 e0       	ldi	r21, 0x00	; 0
    2300:	b8 01       	movw	r22, r16
    2302:	83 e9       	ldi	r24, 0x93	; 147
    2304:	97 e0       	ldi	r25, 0x07	; 7
    2306:	0e 94 ad 18 	call	0x315a	; 0x315a <_ZN5Print5printEii>
			Serial.print("=");
    230a:	63 e1       	ldi	r22, 0x13	; 19
    230c:	74 e0       	ldi	r23, 0x04	; 4
    230e:	83 e9       	ldi	r24, 0x93	; 147
    2310:	97 e0       	ldi	r25, 0x07	; 7
    2312:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_ZN5Print5printEPKc>


			float tempC = sensors.getTempC(tempDeviceAddress);
    2316:	be 01       	movw	r22, r28
    2318:	65 5f       	subi	r22, 0xF5	; 245
    231a:	7f 4f       	sbci	r23, 0xFF	; 255
    231c:	83 e2       	ldi	r24, 0x23	; 35
    231e:	97 e0       	ldi	r25, 0x07	; 7
    2320:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN17DallasTemperature8getTempCEPh>
    2324:	2b 01       	movw	r4, r22
    2326:	3c 01       	movw	r6, r24
			float tempF = DallasTemperature::toFahrenheit(tempC);
    2328:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN17DallasTemperature12toFahrenheitEf>
    232c:	4b 01       	movw	r8, r22
    232e:	5c 01       	movw	r10, r24
			Serial.println(DallasTemperature::toFahrenheit(tempC)); // Converts tempC to Fahrenheit
    2330:	c3 01       	movw	r24, r6
    2332:	b2 01       	movw	r22, r4
    2334:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN17DallasTemperature12toFahrenheitEf>
    2338:	ab 01       	movw	r20, r22
    233a:	bc 01       	movw	r22, r24
    233c:	22 e0       	ldi	r18, 0x02	; 2
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	83 e9       	ldi	r24, 0x93	; 147
    2342:	97 e0       	ldi	r25, 0x07	; 7
    2344:	0e 94 cf 19 	call	0x339e	; 0x339e <_ZN5Print7printlnEdi>
			setXY(1, 7);
    2348:	67 e0       	ldi	r22, 0x07	; 7
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z5setXYhh>
			unsigned char* tempF_uchar;
			tempF_uchar = float_to_uChar(tempF);
    2350:	c5 01       	movw	r24, r10
    2352:	b4 01       	movw	r22, r8
    2354:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <_Z14float_to_uCharf>
    2358:	fc 01       	movw	r30, r24
    235a:	de 01       	movw	r26, r28
    235c:	11 96       	adiw	r26, 0x01	; 1
    235e:	9c 01       	movw	r18, r24
    2360:	29 5f       	subi	r18, 0xF9	; 249
    2362:	3f 4f       	sbci	r19, 0xFF	; 255
			char uchar[10];
			for(unsigned int i = 0; i < 7; i++){
				uchar[i] = (unsigned char)tempF_uchar[i];
    2364:	91 91       	ld	r25, Z+
				if(uchar[i] > 57)
    2366:	9a 33       	cpi	r25, 0x3A	; 58
    2368:	10 f4       	brcc	.+4      	; 0x236e <_Z6tempSMv+0x102>
			setXY(1, 7);
			unsigned char* tempF_uchar;
			tempF_uchar = float_to_uChar(tempF);
			char uchar[10];
			for(unsigned int i = 0; i < 7; i++){
				uchar[i] = (unsigned char)tempF_uchar[i];
    236a:	9c 93       	st	X, r25
    236c:	01 c0       	rjmp	.+2      	; 0x2370 <_Z6tempSMv+0x104>
				if(uchar[i] > 57)
				uchar[i] = 0;
    236e:	1c 92       	st	X, r1
    2370:	11 96       	adiw	r26, 0x01	; 1
			Serial.println(DallasTemperature::toFahrenheit(tempC)); // Converts tempC to Fahrenheit
			setXY(1, 7);
			unsigned char* tempF_uchar;
			tempF_uchar = float_to_uChar(tempF);
			char uchar[10];
			for(unsigned int i = 0; i < 7; i++){
    2372:	e2 17       	cp	r30, r18
    2374:	f3 07       	cpc	r31, r19
    2376:	b1 f7       	brne	.-20     	; 0x2364 <_Z6tempSMv+0xf8>
				uchar[i] = (unsigned char)tempF_uchar[i];
				if(uchar[i] > 57)
				uchar[i] = 0;
			}

			sendStr(uchar);
    2378:	ce 01       	movw	r24, r28
    237a:	01 96       	adiw	r24, 0x01	; 1
    237c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_Z7sendStrPKc>

			if(low_temp > tempF || low_temp == 0){
    2380:	40 90 45 07 	lds	r4, 0x0745
    2384:	50 90 46 07 	lds	r5, 0x0746
    2388:	60 90 47 07 	lds	r6, 0x0747
    238c:	70 90 48 07 	lds	r7, 0x0748
    2390:	a3 01       	movw	r20, r6
    2392:	92 01       	movw	r18, r4
    2394:	c5 01       	movw	r24, r10
    2396:	b4 01       	movw	r22, r8
    2398:	0e 94 37 1c 	call	0x386e	; 0x386e <__cmpsf2>
    239c:	88 23       	and	r24, r24
    239e:	4c f0       	brlt	.+18     	; 0x23b2 <_Z6tempSMv+0x146>
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	a9 01       	movw	r20, r18
    23a6:	c3 01       	movw	r24, r6
    23a8:	b2 01       	movw	r22, r4
    23aa:	0e 94 37 1c 	call	0x386e	; 0x386e <__cmpsf2>
    23ae:	81 11       	cpse	r24, r1
    23b0:	10 c0       	rjmp	.+32     	; 0x23d2 <_Z6tempSMv+0x166>
				low_temp = tempF;
    23b2:	80 92 45 07 	sts	0x0745, r8
    23b6:	90 92 46 07 	sts	0x0746, r9
    23ba:	a0 92 47 07 	sts	0x0747, r10
    23be:	b0 92 48 07 	sts	0x0748, r11
				setXY(4, 6);
    23c2:	66 e0       	ldi	r22, 0x06	; 6
    23c4:	84 e0       	ldi	r24, 0x04	; 4
    23c6:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z5setXYhh>
				sendStr(uchar);
    23ca:	ce 01       	movw	r24, r28
    23cc:	01 96       	adiw	r24, 0x01	; 1
    23ce:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_Z7sendStrPKc>
			}
			if(max_temp < tempF){
    23d2:	20 91 49 07 	lds	r18, 0x0749
    23d6:	30 91 4a 07 	lds	r19, 0x074A
    23da:	40 91 4b 07 	lds	r20, 0x074B
    23de:	50 91 4c 07 	lds	r21, 0x074C
    23e2:	c5 01       	movw	r24, r10
    23e4:	b4 01       	movw	r22, r8
    23e6:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    23ea:	18 16       	cp	r1, r24
    23ec:	84 f4       	brge	.+32     	; 0x240e <_Z6tempSMv+0x1a2>
				max_temp = tempF;
    23ee:	80 92 49 07 	sts	0x0749, r8
    23f2:	90 92 4a 07 	sts	0x074A, r9
    23f6:	a0 92 4b 07 	sts	0x074B, r10
    23fa:	b0 92 4c 07 	sts	0x074C, r11
				setXY(5, 6);
    23fe:	66 e0       	ldi	r22, 0x06	; 6
    2400:	85 e0       	ldi	r24, 0x05	; 5
    2402:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z5setXYhh>
				sendStr(uchar);
    2406:	ce 01       	movw	r24, r28
    2408:	01 96       	adiw	r24, 0x01	; 1
    240a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_Z7sendStrPKc>
	// report parasite power requirements

	sensors.requestTemperatures(); // Send the command to get temperatures

	// Loop through each device, print out temperature data
	for(int i=0;i<numberOfDevices; i++)
    240e:	0f 5f       	subi	r16, 0xFF	; 255
    2410:	1f 4f       	sbci	r17, 0xFF	; 255
    2412:	e0 16       	cp	r14, r16
    2414:	f1 06       	cpc	r15, r17
    2416:	09 f0       	breq	.+2      	; 0x241a <_Z6tempSMv+0x1ae>
    2418:	60 cf       	rjmp	.-320    	; 0x22da <_Z6tempSMv+0x6e>
		}
		//else ghost device! Check your power requirements and cabling
		
	}

}
    241a:	62 96       	adiw	r28, 0x12	; 18
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	ff 90       	pop	r15
    2430:	ef 90       	pop	r14
    2432:	bf 90       	pop	r11
    2434:	af 90       	pop	r10
    2436:	9f 90       	pop	r9
    2438:	8f 90       	pop	r8
    243a:	7f 90       	pop	r7
    243c:	6f 90       	pop	r6
    243e:	5f 90       	pop	r5
    2440:	4f 90       	pop	r4
    2442:	08 95       	ret

00002444 <setup>:
void setup() {
	// put your setup code here, to run once:
	//Serial.begin(57600);
	//dbg_tx_init();
	
	delay(100);
    2444:	64 e6       	ldi	r22, 0x64	; 100
    2446:	70 e0       	ldi	r23, 0x00	; 0
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>
	wifiPort.begin(38400);
    2450:	40 e0       	ldi	r20, 0x00	; 0
    2452:	56 e9       	ldi	r21, 0x96	; 150
    2454:	60 e0       	ldi	r22, 0x00	; 0
    2456:	70 e0       	ldi	r23, 0x00	; 0
    2458:	84 e0       	ldi	r24, 0x04	; 4
    245a:	97 e0       	ldi	r25, 0x07	; 7
    245c:	0e 94 22 15 	call	0x2a44	; 0x2a44 <_ZN14SoftwareSerial5beginEl>
	wifiPort.println("begin wifiport Serial");
    2460:	65 e1       	ldi	r22, 0x15	; 21
    2462:	74 e0       	ldi	r23, 0x04	; 4
    2464:	84 e0       	ldi	r24, 0x04	; 4
    2466:	97 e0       	ldi	r25, 0x07	; 7
    2468:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <_ZN5Print7printlnEPKc>
	delay(100);
    246c:	64 e6       	ldi	r22, 0x64	; 100
    246e:	70 e0       	ldi	r23, 0x00	; 0
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    2478:	26 e0       	ldi	r18, 0x06	; 6
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	52 ec       	ldi	r21, 0xC2	; 194
    247e:	61 e0       	ldi	r22, 0x01	; 1
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	83 e9       	ldi	r24, 0x93	; 147
    2484:	97 e0       	ldi	r25, 0x07	; 7
    2486:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <_ZN14HardwareSerial5beginEmh>
	// start serial port
	Serial.begin(115200);
	Serial.println("Dallas Temperature IC Control Library Demo");
    248a:	6b e2       	ldi	r22, 0x2B	; 43
    248c:	74 e0       	ldi	r23, 0x04	; 4
    248e:	83 e9       	ldi	r24, 0x93	; 147
    2490:	97 e0       	ldi	r25, 0x07	; 7
    2492:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <_ZN5Print7printlnEPKc>
	
	

	//  Wire.begin();
	i2c_init();
    2496:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z8i2c_initv>
	TWCR = 1<<TWEN;                              // enable twi module, no interrupt
}

void init_OLED(void)
{
	i2c_OLED_init();
    249a:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <_Z13i2c_OLED_initv>
	init_OLED();
	delay(10);
    249e:	6a e0       	ldi	r22, 0x0A	; 10
    24a0:	70 e0       	ldi	r23, 0x00	; 0
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>
	clear_display();
    24aa:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <_Z13clear_displayv>
	delay(50);
    24ae:	62 e3       	ldi	r22, 0x32	; 50
    24b0:	70 e0       	ldi	r23, 0x00	; 0
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>
}

//==========================================================//
void sendcommand(unsigned char com)
{
	i2c_OLED_send_cmd(com);
    24ba:	80 e2       	ldi	r24, 0x20	; 32
    24bc:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
    24c0:	82 e0       	ldi	r24, 0x02	; 2
    24c2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
    24c6:	86 ea       	ldi	r24, 0xA6	; 166
    24c8:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_Z17i2c_OLED_send_cmdh>
	sendcommand(0x02);            //Set Memory Addressing Mode ab Page addressing mode(RESET)

	sendcommand(0xa6);            //Set Normal Display (default)


	setXY(1,1);
    24cc:	61 e0       	ldi	r22, 0x01	; 1
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z5setXYhh>
	sendStr(fill_string1);
    24d4:	83 e7       	ldi	r24, 0x73	; 115
    24d6:	94 e0       	ldi	r25, 0x04	; 4
    24d8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_Z7sendStrPKc>
	setXY(2,1);
    24dc:	61 e0       	ldi	r22, 0x01	; 1
    24de:	82 e0       	ldi	r24, 0x02	; 2
    24e0:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z5setXYhh>
	sendStr(fill_string2);
    24e4:	8b e6       	ldi	r24, 0x6B	; 107
    24e6:	94 e0       	ldi	r25, 0x04	; 4
    24e8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_Z7sendStrPKc>

	setXY(4, 1);
    24ec:	61 e0       	ldi	r22, 0x01	; 1
    24ee:	84 e0       	ldi	r24, 0x04	; 4
    24f0:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z5setXYhh>
	sendStr(fill_string3);
    24f4:	85 e6       	ldi	r24, 0x65	; 101
    24f6:	94 e0       	ldi	r25, 0x04	; 4
    24f8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_Z7sendStrPKc>
	setXY(5, 1);
    24fc:	61 e0       	ldi	r22, 0x01	; 1
    24fe:	85 e0       	ldi	r24, 0x05	; 5
    2500:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z5setXYhh>
	sendStr(fill_string4);
    2504:	8f e5       	ldi	r24, 0x5F	; 95
    2506:	94 e0       	ldi	r25, 0x04	; 4
    2508:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_Z7sendStrPKc>
	
	delay(10);
    250c:	6a e0       	ldi	r22, 0x0A	; 10
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>
    2518:	08 95       	ret

0000251a <loop>:
		Serial.println("error opening test.txt");
	}
	*/
}

void loop() {
    251a:	0f 93       	push	r16
    251c:	1f 93       	push	r17
    251e:	cf 93       	push	r28
    2520:	df 93       	push	r29
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	2a 97       	sbiw	r28, 0x0a	; 10
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
	// put your main code here, to run repeatedly:
	
	wifiPort.println("hello");
    2532:	66 e5       	ldi	r22, 0x56	; 86
    2534:	74 e0       	ldi	r23, 0x04	; 4
    2536:	84 e0       	ldi	r24, 0x04	; 4
    2538:	97 e0       	ldi	r25, 0x07	; 7
    253a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <_ZN5Print7printlnEPKc>

	
	tempSM();
    253e:	0e 94 36 11 	call	0x226c	; 0x226c <_Z6tempSMv>
	
	//Serial.println("");
	char buf[10];
	
	sprintf(buf,"%d",counter);
    2542:	80 91 44 07 	lds	r24, 0x0744
    2546:	1f 92       	push	r1
    2548:	8f 93       	push	r24
    254a:	8c e5       	ldi	r24, 0x5C	; 92
    254c:	94 e0       	ldi	r25, 0x04	; 4
    254e:	9f 93       	push	r25
    2550:	8f 93       	push	r24
    2552:	8e 01       	movw	r16, r28
    2554:	0f 5f       	subi	r16, 0xFF	; 255
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	1f 93       	push	r17
    255a:	0f 93       	push	r16
    255c:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <sprintf>
	setXY(7, 1);
    2560:	61 e0       	ldi	r22, 0x01	; 1
    2562:	87 e0       	ldi	r24, 0x07	; 7
    2564:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z5setXYhh>
	sendStr(buf);
    2568:	c8 01       	movw	r24, r16
    256a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_Z7sendStrPKc>
	
	counter++;
    256e:	80 91 44 07 	lds	r24, 0x0744
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	80 93 44 07 	sts	0x0744, r24
	delay(1000);
    2578:	68 ee       	ldi	r22, 0xE8	; 232
    257a:	73 e0       	ldi	r23, 0x03	; 3
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	0e 94 bb 1a 	call	0x3576	; 0x3576 <delay>
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
}
    2590:	2a 96       	adiw	r28, 0x0a	; 10
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	1f 91       	pop	r17
    25a2:	0f 91       	pop	r16
    25a4:	08 95       	ret

000025a6 <_GLOBAL__sub_I_myFont>:

// Data wire is plugged into port 2 on the Arduino
#define ONE_WIRE_BUS 9
#define TEMPERATURE_PRECISION 9
// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);
    25a6:	69 e0       	ldi	r22, 0x09	; 9
    25a8:	86 e3       	ldi	r24, 0x36	; 54
    25aa:	97 e0       	ldi	r25, 0x07	; 7
    25ac:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_ZN7OneWireC1Eh>

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);
    25b0:	66 e3       	ldi	r22, 0x36	; 54
    25b2:	77 e0       	ldi	r23, 0x07	; 7
    25b4:	83 e2       	ldi	r24, 0x23	; 35
    25b6:	97 e0       	ldi	r25, 0x07	; 7
    25b8:	0e 94 9c 09 	call	0x1338	; 0x1338 <_ZN17DallasTemperatureC1EP7OneWire>


//myI2c oled_screen;
#define wifiTX 7
#define wifiRX 6
SoftwareSerial wifiPort(wifiRX,wifiTX);
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	47 e0       	ldi	r20, 0x07	; 7
    25c0:	66 e0       	ldi	r22, 0x06	; 6
    25c2:	84 e0       	ldi	r24, 0x04	; 4
    25c4:	97 e0       	ldi	r25, 0x07	; 7
    25c6:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_ZN14SoftwareSerialC1Ehhb>
    25ca:	08 95       	ret

000025cc <_GLOBAL__sub_D_myFont>:
    25cc:	84 e0       	ldi	r24, 0x04	; 4
    25ce:	97 e0       	ldi	r25, 0x07	; 7
    25d0:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZN14SoftwareSerialD1Ev>
    25d4:	08 95       	ret

000025d6 <_ZN14SoftwareSerial4readEv>:


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    25d6:	20 91 91 07 	lds	r18, 0x0791
    25da:	30 91 92 07 	lds	r19, 0x0792
    25de:	28 17       	cp	r18, r24
    25e0:	39 07       	cpc	r19, r25
    25e2:	f9 f4       	brne	.+62     	; 0x2622 <_ZN14SoftwareSerial4readEv+0x4c>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    25e4:	90 91 4f 07 	lds	r25, 0x074F
    25e8:	80 91 50 07 	lds	r24, 0x0750
    25ec:	98 17       	cp	r25, r24
    25ee:	e1 f0       	breq	.+56     	; 0x2628 <_ZN14SoftwareSerial4readEv+0x52>
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
    25f0:	e0 91 4f 07 	lds	r30, 0x074F
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	ef 5a       	subi	r30, 0xAF	; 175
    25f8:	f8 4f       	sbci	r31, 0xF8	; 248
    25fa:	80 81       	ld	r24, Z
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
    25fc:	20 91 4f 07 	lds	r18, 0x074F
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	2f 5f       	subi	r18, 0xFF	; 255
    2604:	3f 4f       	sbci	r19, 0xFF	; 255
    2606:	2f 73       	andi	r18, 0x3F	; 63
    2608:	30 78       	andi	r19, 0x80	; 128
    260a:	33 23       	and	r19, r19
    260c:	34 f4       	brge	.+12     	; 0x261a <_ZN14SoftwareSerial4readEv+0x44>
    260e:	21 50       	subi	r18, 0x01	; 1
    2610:	31 09       	sbc	r19, r1
    2612:	20 6c       	ori	r18, 0xC0	; 192
    2614:	3f 6f       	ori	r19, 0xFF	; 255
    2616:	2f 5f       	subi	r18, 0xFF	; 255
    2618:	3f 4f       	sbci	r19, 0xFF	; 255
    261a:	20 93 4f 07 	sts	0x074F, r18
  return d;
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	08 95       	ret

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
    2622:	8f ef       	ldi	r24, 0xFF	; 255
    2624:	9f ef       	ldi	r25, 0xFF	; 255
    2626:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
    2628:	8f ef       	ldi	r24, 0xFF	; 255
    262a:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
    262c:	08 95       	ret

0000262e <_ZN14SoftwareSerial9availableEv>:

int SoftwareSerial::available()
{
  if (!isListening())
    262e:	20 91 91 07 	lds	r18, 0x0791
    2632:	30 91 92 07 	lds	r19, 0x0792
    2636:	28 17       	cp	r18, r24
    2638:	39 07       	cpc	r19, r25
    263a:	b1 f4       	brne	.+44     	; 0x2668 <_ZN14SoftwareSerial9availableEv+0x3a>
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
    263c:	20 91 50 07 	lds	r18, 0x0750
    2640:	80 91 4f 07 	lds	r24, 0x074F
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	20 5c       	subi	r18, 0xC0	; 192
    2648:	3f 4f       	sbci	r19, 0xFF	; 255
    264a:	28 1b       	sub	r18, r24
    264c:	31 09       	sbc	r19, r1
    264e:	2f 73       	andi	r18, 0x3F	; 63
    2650:	30 78       	andi	r19, 0x80	; 128
    2652:	33 23       	and	r19, r19
    2654:	34 f4       	brge	.+12     	; 0x2662 <_ZN14SoftwareSerial9availableEv+0x34>
    2656:	21 50       	subi	r18, 0x01	; 1
    2658:	31 09       	sbc	r19, r1
    265a:	20 6c       	ori	r18, 0xC0	; 192
    265c:	3f 6f       	ori	r19, 0xFF	; 255
    265e:	2f 5f       	subi	r18, 0xFF	; 255
    2660:	3f 4f       	sbci	r19, 0xFF	; 255
    2662:	82 2f       	mov	r24, r18
    2664:	93 2f       	mov	r25, r19
    2666:	08 95       	ret
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	90 e0       	ldi	r25, 0x00	; 0

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
    266c:	08 95       	ret

0000266e <_ZN14SoftwareSerial5writeEh>:

size_t SoftwareSerial::write(uint8_t b)
{
    266e:	1f 93       	push	r17
    2670:	cf 93       	push	r28
    2672:	df 93       	push	r29
    2674:	ec 01       	movw	r28, r24
  if (_tx_delay == 0) {
    2676:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2678:	5d 8d       	ldd	r21, Y+29	; 0x1d
    267a:	41 15       	cp	r20, r1
    267c:	51 05       	cpc	r21, r1
    267e:	29 f4       	brne	.+10     	; 0x268a <_ZN14SoftwareSerial5writeEh+0x1c>
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9b 83       	std	Y+3, r25	; 0x03
    2686:	8a 83       	std	Y+2, r24	; 0x02
    setWriteError();
    return 0;
    2688:	39 c0       	rjmp	.+114    	; 0x26fc <_ZN14SoftwareSerial5writeEh+0x8e>

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
    268a:	a9 89       	ldd	r26, Y+17	; 0x11
    268c:	ba 89       	ldd	r27, Y+18	; 0x12
  uint8_t reg_mask = _transmitBitMask;
    268e:	38 89       	ldd	r19, Y+16	; 0x10
  uint8_t inv_mask = ~_transmitBitMask;
    2690:	83 2f       	mov	r24, r19
    2692:	80 95       	com	r24
  uint8_t oldSREG = SREG;
    2694:	1f b7       	in	r17, 0x3f	; 63
  bool inv = _inverse_logic;
    2696:	9e 8d       	ldd	r25, Y+30	; 0x1e
  uint16_t delay = _tx_delay;

  if (inv)
    2698:	91 fb       	bst	r25, 1
    269a:	77 27       	eor	r23, r23
    269c:	70 f9       	bld	r23, 0
    269e:	91 fd       	sbrc	r25, 1
    b = ~b;
    26a0:	60 95       	com	r22

  cli();  // turn off interrupts for a clean txmit
    26a2:	f8 94       	cli

  // Write the start bit
  if (inv)
    26a4:	77 23       	and	r23, r23
    26a6:	21 f0       	breq	.+8      	; 0x26b0 <_ZN14SoftwareSerial5writeEh+0x42>
    *reg |= reg_mask;
    26a8:	9c 91       	ld	r25, X
    26aa:	93 2b       	or	r25, r19
    26ac:	9c 93       	st	X, r25
    26ae:	03 c0       	rjmp	.+6      	; 0x26b6 <_ZN14SoftwareSerial5writeEh+0x48>
  else
    *reg &= inv_mask;
    26b0:	9c 91       	ld	r25, X
    26b2:	98 23       	and	r25, r24
    26b4:	9c 93       	st	X, r25
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    26b6:	fa 01       	movw	r30, r20
    26b8:	31 97       	sbiw	r30, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <_ZN14SoftwareSerial5writeEh+0x4a>
    26bc:	98 e0       	ldi	r25, 0x08	; 8
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
    26be:	60 ff       	sbrs	r22, 0
    26c0:	04 c0       	rjmp	.+8      	; 0x26ca <_ZN14SoftwareSerial5writeEh+0x5c>
      *reg |= reg_mask; // send 1
    26c2:	2c 91       	ld	r18, X
    26c4:	23 2b       	or	r18, r19
    26c6:	2c 93       	st	X, r18
    26c8:	03 c0       	rjmp	.+6      	; 0x26d0 <_ZN14SoftwareSerial5writeEh+0x62>
    else
      *reg &= inv_mask; // send 0
    26ca:	2c 91       	ld	r18, X
    26cc:	28 23       	and	r18, r24
    26ce:	2c 93       	st	X, r18
    26d0:	fa 01       	movw	r30, r20
    26d2:	31 97       	sbiw	r30, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <_ZN14SoftwareSerial5writeEh+0x64>

    tunedDelay(delay);
    b >>= 1;
    26d6:	66 95       	lsr	r22
    26d8:	91 50       	subi	r25, 0x01	; 1
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
    26da:	89 f7       	brne	.-30     	; 0x26be <_ZN14SoftwareSerial5writeEh+0x50>
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
    26dc:	77 23       	and	r23, r23
    26de:	21 f0       	breq	.+8      	; 0x26e8 <_ZN14SoftwareSerial5writeEh+0x7a>
    *reg &= inv_mask;
    26e0:	9c 91       	ld	r25, X
    26e2:	89 23       	and	r24, r25
    26e4:	8c 93       	st	X, r24
    26e6:	03 c0       	rjmp	.+6      	; 0x26ee <_ZN14SoftwareSerial5writeEh+0x80>
  else
    *reg |= reg_mask;
    26e8:	8c 91       	ld	r24, X
    26ea:	38 2b       	or	r19, r24
    26ec:	3c 93       	st	X, r19

  SREG = oldSREG; // turn interrupts back on
    26ee:	1f bf       	out	0x3f, r17	; 63
    26f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26f2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	f1 f7       	brne	.-4      	; 0x26f4 <_ZN14SoftwareSerial5writeEh+0x86>
  tunedDelay(_tx_delay);
  
  return 1;
    26f8:	41 e0       	ldi	r20, 0x01	; 1
    26fa:	50 e0       	ldi	r21, 0x00	; 0
}
    26fc:	ca 01       	movw	r24, r20
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	1f 91       	pop	r17
    2704:	08 95       	ret

00002706 <_ZN14SoftwareSerial5flushEv>:

void SoftwareSerial::flush()
{
  if (!isListening())
    2706:	20 91 91 07 	lds	r18, 0x0791
    270a:	30 91 92 07 	lds	r19, 0x0792
    270e:	28 17       	cp	r18, r24
    2710:	39 07       	cpc	r19, r25
    2712:	39 f4       	brne	.+14     	; 0x2722 <_ZN14SoftwareSerial5flushEv+0x1c>
    return;

  uint8_t oldSREG = SREG;
    2714:	8f b7       	in	r24, 0x3f	; 63
  cli();
    2716:	f8 94       	cli
  _receive_buffer_head = _receive_buffer_tail = 0;
    2718:	10 92 50 07 	sts	0x0750, r1
    271c:	10 92 4f 07 	sts	0x074F, r1
  SREG = oldSREG;
    2720:	8f bf       	out	0x3f, r24	; 63
    2722:	08 95       	ret

00002724 <_ZN14SoftwareSerial4peekEv>:
}

int SoftwareSerial::peek()
{
  if (!isListening())
    2724:	20 91 91 07 	lds	r18, 0x0791
    2728:	30 91 92 07 	lds	r19, 0x0792
    272c:	28 17       	cp	r18, r24
    272e:	39 07       	cpc	r19, r25
    2730:	71 f4       	brne	.+28     	; 0x274e <_ZN14SoftwareSerial4peekEv+0x2a>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    2732:	90 91 4f 07 	lds	r25, 0x074F
    2736:	80 91 50 07 	lds	r24, 0x0750
    273a:	98 17       	cp	r25, r24
    273c:	59 f0       	breq	.+22     	; 0x2754 <_ZN14SoftwareSerial4peekEv+0x30>
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
    273e:	e0 91 4f 07 	lds	r30, 0x074F
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	ef 5a       	subi	r30, 0xAF	; 175
    2746:	f8 4f       	sbci	r31, 0xF8	; 248
    2748:	80 81       	ld	r24, Z
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	08 95       	ret
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
    274e:	8f ef       	ldi	r24, 0xFF	; 255
    2750:	9f ef       	ldi	r25, 0xFF	; 255
    2752:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
    2754:	8f ef       	ldi	r24, 0xFF	; 255
    2756:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
    2758:	08 95       	ret

0000275a <_ZN14SoftwareSerial13stopListeningEv>:
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    275a:	e0 91 91 07 	lds	r30, 0x0791
    275e:	f0 91 92 07 	lds	r31, 0x0792
    2762:	e8 17       	cp	r30, r24
    2764:	f9 07       	cpc	r31, r25
    2766:	69 f4       	brne	.+26     	; 0x2782 <_ZN14SoftwareSerial13stopListeningEv+0x28>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2768:	a3 89       	ldd	r26, Z+19	; 0x13
    276a:	b4 89       	ldd	r27, Z+20	; 0x14
    276c:	9c 91       	ld	r25, X
    276e:	85 89       	ldd	r24, Z+21	; 0x15
    2770:	80 95       	com	r24
    2772:	89 23       	and	r24, r25
    2774:	8c 93       	st	X, r24
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    2776:	10 92 92 07 	sts	0x0792, r1
    277a:	10 92 91 07 	sts	0x0791, r1
    return true;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	08 95       	ret
  }
  return false;
    2782:	80 e0       	ldi	r24, 0x00	; 0
}
    2784:	08 95       	ret

00002786 <_ZN14SoftwareSerial6listenEv>:
}

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
    278a:	ec 01       	movw	r28, r24
  if (!_rx_delay_stopbit)
    278c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    278e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2790:	89 2b       	or	r24, r25
    2792:	f1 f0       	breq	.+60     	; 0x27d0 <_ZN14SoftwareSerial6listenEv+0x4a>
    return false;

  if (active_object != this)
    2794:	80 91 91 07 	lds	r24, 0x0791
    2798:	90 91 92 07 	lds	r25, 0x0792
    279c:	8c 17       	cp	r24, r28
    279e:	9d 07       	cpc	r25, r29
    27a0:	c9 f0       	breq	.+50     	; 0x27d4 <_ZN14SoftwareSerial6listenEv+0x4e>
  {
    if (active_object)
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	11 f0       	breq	.+4      	; 0x27aa <_ZN14SoftwareSerial6listenEv+0x24>
      active_object->stopListening();
    27a6:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN14SoftwareSerial13stopListeningEv>

    _buffer_overflow = false;
    27aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ac:	8e 7f       	andi	r24, 0xFE	; 254
    27ae:	8e 8f       	std	Y+30, r24	; 0x1e
    _receive_buffer_head = _receive_buffer_tail = 0;
    27b0:	10 92 50 07 	sts	0x0750, r1
    27b4:	10 92 4f 07 	sts	0x074F, r1
    active_object = this;
    27b8:	d0 93 92 07 	sts	0x0792, r29
    27bc:	c0 93 91 07 	sts	0x0791, r28
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    27c0:	eb 89       	ldd	r30, Y+19	; 0x13
    27c2:	fc 89       	ldd	r31, Y+20	; 0x14
    27c4:	90 81       	ld	r25, Z
    27c6:	8d 89       	ldd	r24, Y+21	; 0x15
    27c8:	89 2b       	or	r24, r25
    27ca:	80 83       	st	Z, r24
    _buffer_overflow = false;
    _receive_buffer_head = _receive_buffer_tail = 0;
    active_object = this;

    setRxIntMsk(true);
    return true;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	03 c0       	rjmp	.+6      	; 0x27d6 <_ZN14SoftwareSerial6listenEv+0x50>
// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    return false;
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	01 c0       	rjmp	.+2      	; 0x27d6 <_ZN14SoftwareSerial6listenEv+0x50>

    setRxIntMsk(true);
    return true;
  }

  return false;
    27d4:	80 e0       	ldi	r24, 0x00	; 0
}
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	08 95       	ret

000027dc <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    27dc:	1f 92       	push	r1
    27de:	0f 92       	push	r0
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	0f 92       	push	r0
    27e4:	11 24       	eor	r1, r1
    27e6:	2f 93       	push	r18
    27e8:	3f 93       	push	r19
    27ea:	4f 93       	push	r20
    27ec:	5f 93       	push	r21
    27ee:	6f 93       	push	r22
    27f0:	7f 93       	push	r23
    27f2:	8f 93       	push	r24
    27f4:	9f 93       	push	r25
    27f6:	af 93       	push	r26
    27f8:	bf 93       	push	r27
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	ef 93       	push	r30
    2800:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    2802:	a0 91 91 07 	lds	r26, 0x0791
    2806:	b0 91 92 07 	lds	r27, 0x0792
    280a:	10 97       	sbiw	r26, 0x00	; 0
    280c:	09 f4       	brne	.+2      	; 0x2810 <__vector_3+0x34>
    280e:	81 c0       	rjmp	.+258    	; 0x2912 <__vector_3+0x136>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2810:	5e 96       	adiw	r26, 0x1e	; 30
    2812:	8c 91       	ld	r24, X
    2814:	5e 97       	sbiw	r26, 0x1e	; 30
    2816:	81 ff       	sbrs	r24, 1
    2818:	0d c0       	rjmp	.+26     	; 0x2834 <__vector_3+0x58>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    281a:	1e 96       	adiw	r26, 0x0e	; 14
    281c:	ed 91       	ld	r30, X+
    281e:	fc 91       	ld	r31, X
    2820:	1f 97       	sbiw	r26, 0x0f	; 15
    2822:	90 81       	ld	r25, Z
    2824:	1d 96       	adiw	r26, 0x0d	; 13
    2826:	8c 91       	ld	r24, X
    2828:	1d 97       	sbiw	r26, 0x0d	; 13
    282a:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	71 f4       	brne	.+28     	; 0x284c <__vector_3+0x70>
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	0c c0       	rjmp	.+24     	; 0x284c <__vector_3+0x70>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2834:	1e 96       	adiw	r26, 0x0e	; 14
    2836:	ed 91       	ld	r30, X+
    2838:	fc 91       	ld	r31, X
    283a:	1f 97       	sbiw	r26, 0x0f	; 15
    283c:	90 81       	ld	r25, Z
    283e:	1d 96       	adiw	r26, 0x0d	; 13
    2840:	8c 91       	ld	r24, X
    2842:	1d 97       	sbiw	r26, 0x0d	; 13
    2844:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	09 f0       	breq	.+2      	; 0x284c <__vector_3+0x70>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	88 23       	and	r24, r24
    284e:	09 f4       	brne	.+2      	; 0x2852 <__vector_3+0x76>
    2850:	60 c0       	rjmp	.+192    	; 0x2912 <__vector_3+0x136>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2852:	53 96       	adiw	r26, 0x13	; 19
    2854:	ed 91       	ld	r30, X+
    2856:	fc 91       	ld	r31, X
    2858:	54 97       	sbiw	r26, 0x14	; 20
    285a:	90 81       	ld	r25, Z
    285c:	55 96       	adiw	r26, 0x15	; 21
    285e:	8c 91       	ld	r24, X
    2860:	55 97       	sbiw	r26, 0x15	; 21
    2862:	80 95       	com	r24
    2864:	89 23       	and	r24, r25
    2866:	80 83       	st	Z, r24
    2868:	56 96       	adiw	r26, 0x16	; 22
    286a:	8d 91       	ld	r24, X+
    286c:	9c 91       	ld	r25, X
    286e:	57 97       	sbiw	r26, 0x17	; 23
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	f1 f7       	brne	.-4      	; 0x2870 <__vector_3+0x94>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    2874:	58 96       	adiw	r26, 0x18	; 24
    2876:	6d 91       	ld	r22, X+
    2878:	7c 91       	ld	r23, X
    287a:	59 97       	sbiw	r26, 0x19	; 25
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    287c:	1e 96       	adiw	r26, 0x0e	; 14
    287e:	cd 91       	ld	r28, X+
    2880:	dc 91       	ld	r29, X
    2882:	1f 97       	sbiw	r26, 0x0f	; 15
    2884:	1d 96       	adiw	r26, 0x0d	; 13
    2886:	5c 91       	ld	r21, X
    2888:	1d 97       	sbiw	r26, 0x0d	; 13
    288a:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	fb 01       	movw	r30, r22
    2890:	31 97       	sbiw	r30, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <__vector_3+0xb4>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    2894:	84 2f       	mov	r24, r20
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	95 95       	asr	r25
    289a:	87 95       	ror	r24
    289c:	48 2f       	mov	r20, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    289e:	28 81       	ld	r18, Y
    28a0:	25 23       	and	r18, r21
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    28a2:	09 f0       	breq	.+2      	; 0x28a6 <__vector_3+0xca>
        d |= 0x80;
    28a4:	40 68       	ori	r20, 0x80	; 128
    28a6:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    28a8:	91 f7       	brne	.-28     	; 0x288e <__vector_3+0xb2>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    28aa:	5e 96       	adiw	r26, 0x1e	; 30
    28ac:	8c 91       	ld	r24, X
    28ae:	5e 97       	sbiw	r26, 0x1e	; 30
    28b0:	81 fd       	sbrc	r24, 1
      d = ~d;
    28b2:	40 95       	com	r20

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    28b4:	80 91 50 07 	lds	r24, 0x0750
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	01 96       	adiw	r24, 0x01	; 1
    28bc:	8f 73       	andi	r24, 0x3F	; 63
    28be:	90 78       	andi	r25, 0x80	; 128
    28c0:	99 23       	and	r25, r25
    28c2:	24 f4       	brge	.+8      	; 0x28cc <__vector_3+0xf0>
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	80 6c       	ori	r24, 0xC0	; 192
    28c8:	9f 6f       	ori	r25, 0xFF	; 255
    28ca:	01 96       	adiw	r24, 0x01	; 1
    if (next != _receive_buffer_head)
    28cc:	20 91 4f 07 	lds	r18, 0x074F
    28d0:	28 17       	cp	r18, r24
    28d2:	49 f0       	breq	.+18     	; 0x28e6 <__vector_3+0x10a>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    28d4:	e0 91 50 07 	lds	r30, 0x0750
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	ef 5a       	subi	r30, 0xAF	; 175
    28dc:	f8 4f       	sbci	r31, 0xF8	; 248
    28de:	40 83       	st	Z, r20
      _receive_buffer_tail = next;
    28e0:	80 93 50 07 	sts	0x0750, r24
    28e4:	07 c0       	rjmp	.+14     	; 0x28f4 <__vector_3+0x118>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    28e6:	5e 96       	adiw	r26, 0x1e	; 30
    28e8:	8c 91       	ld	r24, X
    28ea:	5e 97       	sbiw	r26, 0x1e	; 30
    28ec:	81 60       	ori	r24, 0x01	; 1
    28ee:	5e 96       	adiw	r26, 0x1e	; 30
    28f0:	8c 93       	st	X, r24
    28f2:	5e 97       	sbiw	r26, 0x1e	; 30
    28f4:	5a 96       	adiw	r26, 0x1a	; 26
    28f6:	8d 91       	ld	r24, X+
    28f8:	9c 91       	ld	r25, X
    28fa:	5b 97       	sbiw	r26, 0x1b	; 27
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <__vector_3+0x120>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    2900:	53 96       	adiw	r26, 0x13	; 19
    2902:	ed 91       	ld	r30, X+
    2904:	fc 91       	ld	r31, X
    2906:	54 97       	sbiw	r26, 0x14	; 20
    2908:	90 81       	ld	r25, Z
    290a:	55 96       	adiw	r26, 0x15	; 21
    290c:	8c 91       	ld	r24, X
    290e:	89 2b       	or	r24, r25
    2910:	80 83       	st	Z, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    2912:	ff 91       	pop	r31
    2914:	ef 91       	pop	r30
    2916:	df 91       	pop	r29
    2918:	cf 91       	pop	r28
    291a:	bf 91       	pop	r27
    291c:	af 91       	pop	r26
    291e:	9f 91       	pop	r25
    2920:	8f 91       	pop	r24
    2922:	7f 91       	pop	r23
    2924:	6f 91       	pop	r22
    2926:	5f 91       	pop	r21
    2928:	4f 91       	pop	r20
    292a:	3f 91       	pop	r19
    292c:	2f 91       	pop	r18
    292e:	0f 90       	pop	r0
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	0f 90       	pop	r0
    2934:	1f 90       	pop	r1
    2936:	18 95       	reti

00002938 <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    2938:	2e e7       	ldi	r18, 0x7E	; 126
    293a:	34 e0       	ldi	r19, 0x04	; 4
    293c:	fc 01       	movw	r30, r24
    293e:	31 83       	std	Z+1, r19	; 0x01
    2940:	20 83       	st	Z, r18
      *_pcint_maskreg &= ~_pcint_maskvalue;
}

void SoftwareSerial::end()
{
  stopListening();
    2942:	0e 94 ad 13 	call	0x275a	; 0x275a <_ZN14SoftwareSerial13stopListeningEv>
    2946:	08 95       	ret

00002948 <_ZN14SoftwareSerial5setTXEh>:
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
{
    2948:	1f 93       	push	r17
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
    294e:	ec 01       	movw	r28, r24
    2950:	16 2f       	mov	r17, r22
  // First write, then set output. If we do this the other way around,
  // the pin would be output low for a short while before switching to
  // output hihg. Now, it is input with pullup for a short while, which
  // is fine. With inverse logic, either order is fine.
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
    2952:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2954:	66 95       	lsr	r22
    2956:	61 70       	andi	r22, 0x01	; 1
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	68 27       	eor	r22, r24
    295c:	81 2f       	mov	r24, r17
    295e:	0e 94 99 1b 	call	0x3732	; 0x3732 <digitalWrite>
  pinMode(tx, OUTPUT);
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	81 2f       	mov	r24, r17
    2966:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <pinMode>
  _transmitBitMask = digitalPinToBitMask(tx);
    296a:	61 2f       	mov	r22, r17
    296c:	70 e0       	ldi	r23, 0x00	; 0
    296e:	fb 01       	movw	r30, r22
    2970:	e4 58       	subi	r30, 0x84	; 132
    2972:	fe 4f       	sbci	r31, 0xFE	; 254
    2974:	e4 91       	lpm	r30, Z
    2976:	e8 8b       	std	Y+16, r30	; 0x10
  uint8_t port = digitalPinToPort(tx);
    2978:	fb 01       	movw	r30, r22
    297a:	e0 57       	subi	r30, 0x70	; 112
    297c:	fe 4f       	sbci	r31, 0xFE	; 254
    297e:	e4 91       	lpm	r30, Z
  _transmitPortRegister = portOutputRegister(port);
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	ee 0f       	add	r30, r30
    2984:	ff 1f       	adc	r31, r31
    2986:	e2 55       	subi	r30, 0x52	; 82
    2988:	fe 4f       	sbci	r31, 0xFE	; 254
    298a:	85 91       	lpm	r24, Z+
    298c:	94 91       	lpm	r25, Z
    298e:	9a 8b       	std	Y+18, r25	; 0x12
    2990:	89 8b       	std	Y+17, r24	; 0x11
}
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	1f 91       	pop	r17
    2998:	08 95       	ret

0000299a <_ZN14SoftwareSerial5setRXEh>:

void SoftwareSerial::setRX(uint8_t rx)
{
    299a:	1f 93       	push	r17
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	ec 01       	movw	r28, r24
    29a2:	16 2f       	mov	r17, r22
  pinMode(rx, INPUT);
    29a4:	60 e0       	ldi	r22, 0x00	; 0
    29a6:	81 2f       	mov	r24, r17
    29a8:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <pinMode>
  if (!_inverse_logic)
    29ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29ae:	81 fd       	sbrc	r24, 1
    29b0:	04 c0       	rjmp	.+8      	; 0x29ba <_ZN14SoftwareSerial5setRXEh+0x20>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
    29b2:	61 e0       	ldi	r22, 0x01	; 1
    29b4:	81 2f       	mov	r24, r17
    29b6:	0e 94 99 1b 	call	0x3732	; 0x3732 <digitalWrite>
  _receivePin = rx;
    29ba:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
    29bc:	61 2f       	mov	r22, r17
    29be:	70 e0       	ldi	r23, 0x00	; 0
    29c0:	fb 01       	movw	r30, r22
    29c2:	e4 58       	subi	r30, 0x84	; 132
    29c4:	fe 4f       	sbci	r31, 0xFE	; 254
    29c6:	e4 91       	lpm	r30, Z
    29c8:	ed 87       	std	Y+13, r30	; 0x0d
  uint8_t port = digitalPinToPort(rx);
    29ca:	fb 01       	movw	r30, r22
    29cc:	e0 57       	subi	r30, 0x70	; 112
    29ce:	fe 4f       	sbci	r31, 0xFE	; 254
    29d0:	e4 91       	lpm	r30, Z
  _receivePortRegister = portInputRegister(port);
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	ee 0f       	add	r30, r30
    29d6:	ff 1f       	adc	r31, r31
    29d8:	ec 55       	subi	r30, 0x5C	; 92
    29da:	fe 4f       	sbci	r31, 0xFE	; 254
    29dc:	85 91       	lpm	r24, Z+
    29de:	94 91       	lpm	r25, Z
    29e0:	9f 87       	std	Y+15, r25	; 0x0f
    29e2:	8e 87       	std	Y+14, r24	; 0x0e
}
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	08 95       	ret

000029ec <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
    29ec:	1f 93       	push	r17
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	ec 01       	movw	r28, r24
    29f4:	16 2f       	mov	r17, r22
  public:
    Print() : write_error(0) {}
    29f6:	1b 82       	std	Y+3, r1	; 0x03
    29f8:	1a 82       	std	Y+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    29fa:	88 ee       	ldi	r24, 0xE8	; 232
    29fc:	93 e0       	ldi	r25, 0x03	; 3
    29fe:	a0 e0       	ldi	r26, 0x00	; 0
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	8c 83       	std	Y+4, r24	; 0x04
    2a04:	9d 83       	std	Y+5, r25	; 0x05
    2a06:	ae 83       	std	Y+6, r26	; 0x06
    2a08:	bf 83       	std	Y+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
    2a0a:	8e e7       	ldi	r24, 0x7E	; 126
    2a0c:	94 e0       	ldi	r25, 0x04	; 4
    2a0e:	99 83       	std	Y+1, r25	; 0x01
    2a10:	88 83       	st	Y, r24
    2a12:	1f 8a       	std	Y+23, r1	; 0x17
    2a14:	1e 8a       	std	Y+22, r1	; 0x16
    2a16:	19 8e       	std	Y+25, r1	; 0x19
    2a18:	18 8e       	std	Y+24, r1	; 0x18
    2a1a:	1b 8e       	std	Y+27, r1	; 0x1b
    2a1c:	1a 8e       	std	Y+26, r1	; 0x1a
    2a1e:	1d 8e       	std	Y+29, r1	; 0x1d
    2a20:	1c 8e       	std	Y+28, r1	; 0x1c
    2a22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a24:	8e 7f       	andi	r24, 0xFE	; 254
    2a26:	20 fb       	bst	r18, 0
    2a28:	81 f9       	bld	r24, 1
    2a2a:	8e 8f       	std	Y+30, r24	; 0x1e
{
  setTX(transmitPin);
    2a2c:	64 2f       	mov	r22, r20
    2a2e:	ce 01       	movw	r24, r28
    2a30:	0e 94 a4 14 	call	0x2948	; 0x2948 <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
    2a34:	61 2f       	mov	r22, r17
    2a36:	ce 01       	movw	r24, r28
    2a38:	0e 94 cd 14 	call	0x299a	; 0x299a <_ZN14SoftwareSerial5setRXEh>
}
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	1f 91       	pop	r17
    2a42:	08 95       	ret

00002a44 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    2a44:	cf 93       	push	r28
    2a46:	df 93       	push	r29
    2a48:	ec 01       	movw	r28, r24
    2a4a:	9a 01       	movw	r18, r20
    2a4c:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2a4e:	1b 8e       	std	Y+27, r1	; 0x1b
    2a50:	1a 8e       	std	Y+26, r1	; 0x1a
    2a52:	19 8e       	std	Y+25, r1	; 0x19
    2a54:	18 8e       	std	Y+24, r1	; 0x18
    2a56:	1f 8a       	std	Y+23, r1	; 0x17
    2a58:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2a5a:	60 e8       	ldi	r22, 0x80	; 128
    2a5c:	74 e8       	ldi	r23, 0x84	; 132
    2a5e:	8e e1       	ldi	r24, 0x1E	; 30
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <__divmodsi4>
    2a66:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2a68:	24 30       	cpi	r18, 0x04	; 4
    2a6a:	31 05       	cpc	r19, r1
    2a6c:	18 f0       	brcs	.+6      	; 0x2a74 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    2a6e:	c9 01       	movw	r24, r18
    2a70:	03 97       	sbiw	r24, 0x03	; 3
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2a78:	9d 8f       	std	Y+29, r25	; 0x1d
    2a7a:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    2a7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a7e:	86 31       	cpi	r24, 0x16	; 22
    2a80:	08 f0       	brcs	.+2      	; 0x2a84 <_ZN14SoftwareSerial5beginEl+0x40>
    2a82:	41 c0       	rjmp	.+130    	; 0x2b06 <_ZN14SoftwareSerial5beginEl+0xc2>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2a84:	b9 01       	movw	r22, r18
    2a86:	76 95       	lsr	r23
    2a88:	67 95       	ror	r22
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2a8a:	64 31       	cpi	r22, 0x14	; 20
    2a8c:	71 05       	cpc	r23, r1
    2a8e:	18 f0       	brcs	.+6      	; 0x2a96 <_ZN14SoftwareSerial5beginEl+0x52>
    return num - sub;
    2a90:	63 51       	subi	r22, 0x13	; 19
    2a92:	71 09       	sbc	r23, r1
    2a94:	02 c0       	rjmp	.+4      	; 0x2a9a <_ZN14SoftwareSerial5beginEl+0x56>
  else
    return 1;
    2a96:	61 e0       	ldi	r22, 0x01	; 1
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2a9a:	7f 8b       	std	Y+23, r23	; 0x17
    2a9c:	6e 8b       	std	Y+22, r22	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2a9e:	36 97       	sbiw	r30, 0x06	; 6
    2aa0:	20 f0       	brcs	.+8      	; 0x2aaa <_ZN14SoftwareSerial5beginEl+0x66>
    return num - sub;
    2aa2:	b9 01       	movw	r22, r18
    2aa4:	65 50       	subi	r22, 0x05	; 5
    2aa6:	71 09       	sbc	r23, r1
    2aa8:	02 c0       	rjmp	.+4      	; 0x2aae <_ZN14SoftwareSerial5beginEl+0x6a>
  else
    return 1;
    2aaa:	61 e0       	ldi	r22, 0x01	; 1
    2aac:	70 e0       	ldi	r23, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2aae:	79 8f       	std	Y+25, r23	; 0x19
    2ab0:	68 8f       	std	Y+24, r22	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2ab2:	b9 01       	movw	r22, r18
    2ab4:	66 0f       	add	r22, r22
    2ab6:	77 1f       	adc	r23, r23
    2ab8:	26 0f       	add	r18, r22
    2aba:	37 1f       	adc	r19, r23
    2abc:	36 95       	lsr	r19
    2abe:	27 95       	ror	r18
    2ac0:	36 95       	lsr	r19
    2ac2:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2ac4:	2d 30       	cpi	r18, 0x0D	; 13
    2ac6:	31 05       	cpc	r19, r1
    2ac8:	10 f1       	brcs	.+68     	; 0x2b0e <_ZN14SoftwareSerial5beginEl+0xca>
    return num - sub;
    2aca:	2c 50       	subi	r18, 0x0C	; 12
    2acc:	31 09       	sbc	r19, r1
    2ace:	21 c0       	rjmp	.+66     	; 0x2b12 <_ZN14SoftwareSerial5beginEl+0xce>


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2ad0:	21 e0       	ldi	r18, 0x01	; 1
    2ad2:	8e 30       	cpi	r24, 0x0E	; 14
    2ad4:	08 f4       	brcc	.+2      	; 0x2ad8 <_ZN14SoftwareSerial5beginEl+0x94>
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	01 c0       	rjmp	.+2      	; 0x2ade <_ZN14SoftwareSerial5beginEl+0x9a>
    2adc:	88 0f       	add	r24, r24
    2ade:	2a 95       	dec	r18
    2ae0:	ea f7       	brpl	.-6      	; 0x2adc <_ZN14SoftwareSerial5beginEl+0x98>
    2ae2:	98 2b       	or	r25, r24
    2ae4:	90 93 68 00 	sts	0x0068, r25
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2ae8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2aea:	98 30       	cpi	r25, 0x08	; 8
    2aec:	d0 f0       	brcs	.+52     	; 0x2b22 <_ZN14SoftwareSerial5beginEl+0xde>
    2aee:	9e 30       	cpi	r25, 0x0E	; 14
    2af0:	10 f1       	brcs	.+68     	; 0x2b36 <_ZN14SoftwareSerial5beginEl+0xf2>
    2af2:	96 31       	cpi	r25, 0x16	; 22
    2af4:	58 f1       	brcs	.+86     	; 0x2b4c <_ZN14SoftwareSerial5beginEl+0x108>
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	2a c0       	rjmp	.+84     	; 0x2b50 <_ZN14SoftwareSerial5beginEl+0x10c>
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2afc:	8d 8b       	std	Y+21, r24	; 0x15
    2afe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b00:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <_ZN14SoftwareSerial5beginEl+0xbe>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2b06:	ce 01       	movw	r24, r28
    2b08:	0e 94 c3 13 	call	0x2786	; 0x2786 <_ZN14SoftwareSerial6listenEv>
    2b0c:	2a c0       	rjmp	.+84     	; 0x2b62 <_ZN14SoftwareSerial5beginEl+0x11e>

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    2b0e:	21 e0       	ldi	r18, 0x01	; 1
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2b12:	3b 8f       	std	Y+27, r19	; 0x1b
    2b14:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2b16:	90 91 68 00 	lds	r25, 0x0068
    2b1a:	88 30       	cpi	r24, 0x08	; 8
    2b1c:	c8 f6       	brcc	.-78     	; 0x2ad0 <_ZN14SoftwareSerial5beginEl+0x8c>
    2b1e:	84 e0       	ldi	r24, 0x04	; 4
    2b20:	e0 cf       	rjmp	.-64     	; 0x2ae2 <_ZN14SoftwareSerial5beginEl+0x9e>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2b22:	2d e6       	ldi	r18, 0x6D	; 109
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	3c 8b       	std	Y+20, r19	; 0x14
    2b28:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	01 c0       	rjmp	.+2      	; 0x2b30 <_ZN14SoftwareSerial5beginEl+0xec>
    2b2e:	88 0f       	add	r24, r24
    2b30:	9a 95       	dec	r25
    2b32:	ea f7       	brpl	.-6      	; 0x2b2e <_ZN14SoftwareSerial5beginEl+0xea>
    2b34:	e3 cf       	rjmp	.-58     	; 0x2afc <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2b36:	2b e6       	ldi	r18, 0x6B	; 107
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	3c 8b       	std	Y+20, r19	; 0x14
    2b3c:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2b3e:	98 50       	subi	r25, 0x08	; 8
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	01 c0       	rjmp	.+2      	; 0x2b46 <_ZN14SoftwareSerial5beginEl+0x102>
    2b44:	88 0f       	add	r24, r24
    2b46:	9a 95       	dec	r25
    2b48:	ea f7       	brpl	.-6      	; 0x2b44 <_ZN14SoftwareSerial5beginEl+0x100>
    2b4a:	d8 cf       	rjmp	.-80     	; 0x2afc <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2b4c:	2c e6       	ldi	r18, 0x6C	; 108
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	3c 8b       	std	Y+20, r19	; 0x14
    2b52:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2b54:	9e 50       	subi	r25, 0x0E	; 14
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	01 c0       	rjmp	.+2      	; 0x2b5c <_ZN14SoftwareSerial5beginEl+0x118>
    2b5a:	88 0f       	add	r24, r24
    2b5c:	9a 95       	dec	r25
    2b5e:	ea f7       	brpl	.-6      	; 0x2b5a <_ZN14SoftwareSerial5beginEl+0x116>
    2b60:	cd cf       	rjmp	.-102    	; 0x2afc <_ZN14SoftwareSerial5beginEl+0xb8>
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
    2b62:	df 91       	pop	r29
    2b64:	cf 91       	pop	r28
    2b66:	08 95       	ret

00002b68 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2b68:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2b6a:	91 8d       	ldd	r25, Z+25	; 0x19
    2b6c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b6e:	89 2f       	mov	r24, r25
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	80 5c       	subi	r24, 0xC0	; 192
    2b74:	9f 4f       	sbci	r25, 0xFF	; 255
    2b76:	82 1b       	sub	r24, r18
    2b78:	91 09       	sbc	r25, r1
}
    2b7a:	8f 73       	andi	r24, 0x3F	; 63
    2b7c:	99 27       	eor	r25, r25
    2b7e:	08 95       	ret

00002b80 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2b80:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2b82:	91 8d       	ldd	r25, Z+25	; 0x19
    2b84:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b86:	98 17       	cp	r25, r24
    2b88:	31 f0       	breq	.+12     	; 0x2b96 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2b8a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b8c:	e8 0f       	add	r30, r24
    2b8e:	f1 1d       	adc	r31, r1
    2b90:	85 8d       	ldd	r24, Z+29	; 0x1d
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2b96:	8f ef       	ldi	r24, 0xFF	; 255
    2b98:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2b9a:	08 95       	ret

00002b9c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2b9c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2b9e:	91 8d       	ldd	r25, Z+25	; 0x19
    2ba0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ba2:	98 17       	cp	r25, r24
    2ba4:	61 f0       	breq	.+24     	; 0x2bbe <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2ba6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ba8:	df 01       	movw	r26, r30
    2baa:	a8 0f       	add	r26, r24
    2bac:	b1 1d       	adc	r27, r1
    2bae:	5d 96       	adiw	r26, 0x1d	; 29
    2bb0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2bb2:	92 8d       	ldd	r25, Z+26	; 0x1a
    2bb4:	9f 5f       	subi	r25, 0xFF	; 255
    2bb6:	9f 73       	andi	r25, 0x3F	; 63
    2bb8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2bbe:	8f ef       	ldi	r24, 0xFF	; 255
    2bc0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2bc2:	08 95       	ret

00002bc4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2bc4:	8d e4       	ldi	r24, 0x4D	; 77
    2bc6:	97 e1       	ldi	r25, 0x17	; 23
    2bc8:	89 2b       	or	r24, r25
    2bca:	49 f0       	breq	.+18     	; 0x2bde <_Z14serialEventRunv+0x1a>
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	89 2b       	or	r24, r25
    2bd2:	29 f0       	breq	.+10     	; 0x2bde <_Z14serialEventRunv+0x1a>
    2bd4:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <_Z17Serial0_availablev>
    2bd8:	81 11       	cpse	r24, r1
    2bda:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2bde:	08 95       	ret

00002be0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2be0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2be2:	84 8d       	ldd	r24, Z+28	; 0x1c
    2be4:	df 01       	movw	r26, r30
    2be6:	a8 0f       	add	r26, r24
    2be8:	b1 1d       	adc	r27, r1
    2bea:	a3 5a       	subi	r26, 0xA3	; 163
    2bec:	bf 4f       	sbci	r27, 0xFF	; 255
    2bee:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2bf0:	24 8d       	ldd	r18, Z+28	; 0x1c
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	2f 5f       	subi	r18, 0xFF	; 255
    2bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf8:	2f 73       	andi	r18, 0x3F	; 63
    2bfa:	30 78       	andi	r19, 0x80	; 128
    2bfc:	33 23       	and	r19, r19
    2bfe:	34 f4       	brge	.+12     	; 0x2c0c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    2c00:	21 50       	subi	r18, 0x01	; 1
    2c02:	31 09       	sbc	r19, r1
    2c04:	20 6c       	ori	r18, 0xC0	; 192
    2c06:	3f 6f       	ori	r19, 0xFF	; 255
    2c08:	2f 5f       	subi	r18, 0xFF	; 255
    2c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0c:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    2c0e:	a6 89       	ldd	r26, Z+22	; 0x16
    2c10:	b7 89       	ldd	r27, Z+23	; 0x17
    2c12:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2c14:	a0 89       	ldd	r26, Z+16	; 0x10
    2c16:	b1 89       	ldd	r27, Z+17	; 0x11
    2c18:	8c 91       	ld	r24, X
    2c1a:	80 64       	ori	r24, 0x40	; 64
    2c1c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2c1e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c20:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c22:	98 13       	cpse	r25, r24
    2c24:	06 c0       	rjmp	.+12     	; 0x2c32 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2c26:	02 88       	ldd	r0, Z+18	; 0x12
    2c28:	f3 89       	ldd	r31, Z+19	; 0x13
    2c2a:	e0 2d       	mov	r30, r0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	8f 7d       	andi	r24, 0xDF	; 223
    2c30:	80 83       	st	Z, r24
    2c32:	08 95       	ret

00002c34 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2c3a:	88 8d       	ldd	r24, Y+24	; 0x18
    2c3c:	81 11       	cpse	r24, r1
    2c3e:	0f c0       	rjmp	.+30     	; 0x2c5e <_ZN14HardwareSerial5flushEv+0x2a>
    2c40:	18 c0       	rjmp	.+48     	; 0x2c72 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2c42:	0f b6       	in	r0, 0x3f	; 63
    2c44:	07 fc       	sbrc	r0, 7
    2c46:	0d c0       	rjmp	.+26     	; 0x2c62 <_ZN14HardwareSerial5flushEv+0x2e>
    2c48:	90 81       	ld	r25, Z
    2c4a:	95 ff       	sbrs	r25, 5
    2c4c:	0a c0       	rjmp	.+20     	; 0x2c62 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2c4e:	a8 89       	ldd	r26, Y+16	; 0x10
    2c50:	b9 89       	ldd	r27, Y+17	; 0x11
    2c52:	8c 91       	ld	r24, X
    2c54:	85 ff       	sbrs	r24, 5
    2c56:	05 c0       	rjmp	.+10     	; 0x2c62 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
    2c58:	ce 01       	movw	r24, r28
    2c5a:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2c5e:	ea 89       	ldd	r30, Y+18	; 0x12
    2c60:	fb 89       	ldd	r31, Y+19	; 0x13
    2c62:	90 81       	ld	r25, Z
    2c64:	95 fd       	sbrc	r25, 5
    2c66:	ed cf       	rjmp	.-38     	; 0x2c42 <_ZN14HardwareSerial5flushEv+0xe>
    2c68:	a8 89       	ldd	r26, Y+16	; 0x10
    2c6a:	b9 89       	ldd	r27, Y+17	; 0x11
    2c6c:	8c 91       	ld	r24, X
    2c6e:	86 ff       	sbrs	r24, 6
    2c70:	e8 cf       	rjmp	.-48     	; 0x2c42 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	08 95       	ret

00002c78 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2c78:	0f 93       	push	r16
    2c7a:	1f 93       	push	r17
    2c7c:	cf 93       	push	r28
    2c7e:	df 93       	push	r29
    2c80:	fc 01       	movw	r30, r24
  _written = true;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2c86:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c88:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c8a:	98 13       	cpse	r25, r24
    2c8c:	22 c0       	rjmp	.+68     	; 0x2cd2 <_ZN14HardwareSerial5writeEh+0x5a>
    2c8e:	a0 89       	ldd	r26, Z+16	; 0x10
    2c90:	b1 89       	ldd	r27, Z+17	; 0x11
    2c92:	8c 91       	ld	r24, X
    2c94:	85 fd       	sbrc	r24, 5
    2c96:	2f c0       	rjmp	.+94     	; 0x2cf6 <_ZN14HardwareSerial5writeEh+0x7e>
    2c98:	1c c0       	rjmp	.+56     	; 0x2cd2 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	07 fc       	sbrc	r0, 7
    2c9e:	08 c0       	rjmp	.+16     	; 0x2cb0 <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2ca0:	e8 89       	ldd	r30, Y+16	; 0x10
    2ca2:	f9 89       	ldd	r31, Y+17	; 0x11
    2ca4:	80 81       	ld	r24, Z
    2ca6:	85 ff       	sbrs	r24, 5
    2ca8:	03 c0       	rjmp	.+6      	; 0x2cb0 <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
    2caa:	ce 01       	movw	r24, r28
    2cac:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2cb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cb2:	09 17       	cp	r16, r25
    2cb4:	91 f3       	breq	.-28     	; 0x2c9a <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2cb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cb8:	fe 01       	movw	r30, r28
    2cba:	e8 0f       	add	r30, r24
    2cbc:	f1 1d       	adc	r31, r1
    2cbe:	e3 5a       	subi	r30, 0xA3	; 163
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    2cc4:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2cc6:	ea 89       	ldd	r30, Y+18	; 0x12
    2cc8:	fb 89       	ldd	r31, Y+19	; 0x13
    2cca:	80 81       	ld	r24, Z
    2ccc:	80 62       	ori	r24, 0x20	; 32
    2cce:	80 83       	st	Z, r24
  
  return 1;
    2cd0:	1b c0       	rjmp	.+54     	; 0x2d08 <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2cd2:	23 8d       	ldd	r18, Z+27	; 0x1b
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	2f 5f       	subi	r18, 0xFF	; 255
    2cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cda:	2f 73       	andi	r18, 0x3F	; 63
    2cdc:	30 78       	andi	r19, 0x80	; 128
    2cde:	33 23       	and	r19, r19
    2ce0:	34 f4       	brge	.+12     	; 0x2cee <_ZN14HardwareSerial5writeEh+0x76>
    2ce2:	21 50       	subi	r18, 0x01	; 1
    2ce4:	31 09       	sbc	r19, r1
    2ce6:	20 6c       	ori	r18, 0xC0	; 192
    2ce8:	3f 6f       	ori	r19, 0xFF	; 255
    2cea:	2f 5f       	subi	r18, 0xFF	; 255
    2cec:	3f 4f       	sbci	r19, 0xFF	; 255
    2cee:	16 2f       	mov	r17, r22
    2cf0:	ef 01       	movw	r28, r30
    2cf2:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2cf4:	dd cf       	rjmp	.-70     	; 0x2cb0 <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2cf6:	a6 89       	ldd	r26, Z+22	; 0x16
    2cf8:	b7 89       	ldd	r27, Z+23	; 0x17
    2cfa:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    2cfc:	00 88       	ldd	r0, Z+16	; 0x10
    2cfe:	f1 89       	ldd	r31, Z+17	; 0x11
    2d00:	e0 2d       	mov	r30, r0
    2d02:	80 81       	ld	r24, Z
    2d04:	80 64       	ori	r24, 0x40	; 64
    2d06:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	df 91       	pop	r29
    2d0e:	cf 91       	pop	r28
    2d10:	1f 91       	pop	r17
    2d12:	0f 91       	pop	r16
    2d14:	08 95       	ret

00002d16 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2d16:	bf 92       	push	r11
    2d18:	cf 92       	push	r12
    2d1a:	df 92       	push	r13
    2d1c:	ef 92       	push	r14
    2d1e:	ff 92       	push	r15
    2d20:	0f 93       	push	r16
    2d22:	1f 93       	push	r17
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29
    2d28:	ec 01       	movw	r28, r24
    2d2a:	6a 01       	movw	r12, r20
    2d2c:	7b 01       	movw	r14, r22
    2d2e:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2d30:	60 e8       	ldi	r22, 0x80	; 128
    2d32:	74 e8       	ldi	r23, 0x84	; 132
    2d34:	8e e1       	ldi	r24, 0x1E	; 30
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	a7 01       	movw	r20, r14
    2d3a:	96 01       	movw	r18, r12
    2d3c:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodsi4>
    2d40:	89 01       	movw	r16, r18
    2d42:	9a 01       	movw	r18, r20
    2d44:	01 50       	subi	r16, 0x01	; 1
    2d46:	11 09       	sbc	r17, r1
    2d48:	21 09       	sbc	r18, r1
    2d4a:	31 09       	sbc	r19, r1
    2d4c:	36 95       	lsr	r19
    2d4e:	27 95       	ror	r18
    2d50:	17 95       	ror	r17
    2d52:	07 95       	ror	r16
  *_ucsra = 1 << U2X0;
    2d54:	e8 89       	ldd	r30, Y+16	; 0x10
    2d56:	f9 89       	ldd	r31, Y+17	; 0x11
    2d58:	82 e0       	ldi	r24, 0x02	; 2
    2d5a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2d5c:	01 15       	cp	r16, r1
    2d5e:	80 e1       	ldi	r24, 0x10	; 16
    2d60:	18 07       	cpc	r17, r24
    2d62:	a8 f0       	brcs	.+42     	; 0x2d8e <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
    2d64:	e8 89       	ldd	r30, Y+16	; 0x10
    2d66:	f9 89       	ldd	r31, Y+17	; 0x11
    2d68:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2d6a:	60 e4       	ldi	r22, 0x40	; 64
    2d6c:	72 e4       	ldi	r23, 0x42	; 66
    2d6e:	8f e0       	ldi	r24, 0x0F	; 15
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	a7 01       	movw	r20, r14
    2d74:	96 01       	movw	r18, r12
    2d76:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodsi4>
    2d7a:	da 01       	movw	r26, r20
    2d7c:	c9 01       	movw	r24, r18
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	a1 09       	sbc	r26, r1
    2d82:	b1 09       	sbc	r27, r1
    2d84:	b6 95       	lsr	r27
    2d86:	a7 95       	ror	r26
    2d88:	97 95       	ror	r25
    2d8a:	87 95       	ror	r24
    2d8c:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2d8e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2d90:	fd 85       	ldd	r31, Y+13	; 0x0d
    2d92:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    2d94:	ee 85       	ldd	r30, Y+14	; 0x0e
    2d96:	ff 85       	ldd	r31, Y+15	; 0x0f
    2d98:	00 83       	st	Z, r16

  _written = false;
    2d9a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2d9c:	ec 89       	ldd	r30, Y+20	; 0x14
    2d9e:	fd 89       	ldd	r31, Y+21	; 0x15
    2da0:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    2da2:	ea 89       	ldd	r30, Y+18	; 0x12
    2da4:	fb 89       	ldd	r31, Y+19	; 0x13
    2da6:	80 81       	ld	r24, Z
    2da8:	80 61       	ori	r24, 0x10	; 16
    2daa:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2dac:	ea 89       	ldd	r30, Y+18	; 0x12
    2dae:	fb 89       	ldd	r31, Y+19	; 0x13
    2db0:	80 81       	ld	r24, Z
    2db2:	88 60       	ori	r24, 0x08	; 8
    2db4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2db6:	ea 89       	ldd	r30, Y+18	; 0x12
    2db8:	fb 89       	ldd	r31, Y+19	; 0x13
    2dba:	80 81       	ld	r24, Z
    2dbc:	80 68       	ori	r24, 0x80	; 128
    2dbe:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2dc0:	ea 89       	ldd	r30, Y+18	; 0x12
    2dc2:	fb 89       	ldd	r31, Y+19	; 0x13
    2dc4:	80 81       	ld	r24, Z
    2dc6:	8f 7d       	andi	r24, 0xDF	; 223
    2dc8:	80 83       	st	Z, r24
}
    2dca:	df 91       	pop	r29
    2dcc:	cf 91       	pop	r28
    2dce:	1f 91       	pop	r17
    2dd0:	0f 91       	pop	r16
    2dd2:	ff 90       	pop	r15
    2dd4:	ef 90       	pop	r14
    2dd6:	df 90       	pop	r13
    2dd8:	cf 90       	pop	r12
    2dda:	bf 90       	pop	r11
    2ddc:	08 95       	ret

00002dde <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2dde:	1f 92       	push	r1
    2de0:	0f 92       	push	r0
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	0f 92       	push	r0
    2de6:	11 24       	eor	r1, r1
    2de8:	2f 93       	push	r18
    2dea:	8f 93       	push	r24
    2dec:	9f 93       	push	r25
    2dee:	af 93       	push	r26
    2df0:	bf 93       	push	r27
    2df2:	ef 93       	push	r30
    2df4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2df6:	e0 91 a3 07 	lds	r30, 0x07A3
    2dfa:	f0 91 a4 07 	lds	r31, 0x07A4
    2dfe:	80 81       	ld	r24, Z
    2e00:	82 fd       	sbrc	r24, 2
    2e02:	14 c0       	rjmp	.+40     	; 0x2e2c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2e04:	e3 e9       	ldi	r30, 0x93	; 147
    2e06:	f7 e0       	ldi	r31, 0x07	; 7
    2e08:	a6 89       	ldd	r26, Z+22	; 0x16
    2e0a:	b7 89       	ldd	r27, Z+23	; 0x17
    2e0c:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2e0e:	81 8d       	ldd	r24, Z+25	; 0x19
    2e10:	8f 5f       	subi	r24, 0xFF	; 255
    2e12:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2e14:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e16:	89 17       	cp	r24, r25
    2e18:	71 f0       	breq	.+28     	; 0x2e36 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
    2e1a:	df 01       	movw	r26, r30
    2e1c:	e1 8d       	ldd	r30, Z+25	; 0x19
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	ed 56       	subi	r30, 0x6D	; 109
    2e22:	f8 4f       	sbci	r31, 0xF8	; 248
    2e24:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    2e26:	59 96       	adiw	r26, 0x19	; 25
    2e28:	8c 93       	st	X, r24
    2e2a:	05 c0       	rjmp	.+10     	; 0x2e36 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2e2c:	e0 91 a9 07 	lds	r30, 0x07A9
    2e30:	f0 91 aa 07 	lds	r31, 0x07AA
    2e34:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2e36:	ff 91       	pop	r31
    2e38:	ef 91       	pop	r30
    2e3a:	bf 91       	pop	r27
    2e3c:	af 91       	pop	r26
    2e3e:	9f 91       	pop	r25
    2e40:	8f 91       	pop	r24
    2e42:	2f 91       	pop	r18
    2e44:	0f 90       	pop	r0
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	0f 90       	pop	r0
    2e4a:	1f 90       	pop	r1
    2e4c:	18 95       	reti

00002e4e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2e4e:	1f 92       	push	r1
    2e50:	0f 92       	push	r0
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	0f 92       	push	r0
    2e56:	11 24       	eor	r1, r1
    2e58:	2f 93       	push	r18
    2e5a:	3f 93       	push	r19
    2e5c:	4f 93       	push	r20
    2e5e:	5f 93       	push	r21
    2e60:	6f 93       	push	r22
    2e62:	7f 93       	push	r23
    2e64:	8f 93       	push	r24
    2e66:	9f 93       	push	r25
    2e68:	af 93       	push	r26
    2e6a:	bf 93       	push	r27
    2e6c:	ef 93       	push	r30
    2e6e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2e70:	83 e9       	ldi	r24, 0x93	; 147
    2e72:	97 e0       	ldi	r25, 0x07	; 7
    2e74:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2e78:	ff 91       	pop	r31
    2e7a:	ef 91       	pop	r30
    2e7c:	bf 91       	pop	r27
    2e7e:	af 91       	pop	r26
    2e80:	9f 91       	pop	r25
    2e82:	8f 91       	pop	r24
    2e84:	7f 91       	pop	r23
    2e86:	6f 91       	pop	r22
    2e88:	5f 91       	pop	r21
    2e8a:	4f 91       	pop	r20
    2e8c:	3f 91       	pop	r19
    2e8e:	2f 91       	pop	r18
    2e90:	0f 90       	pop	r0
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	0f 90       	pop	r0
    2e96:	1f 90       	pop	r1
    2e98:	18 95       	reti

00002e9a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2e9a:	83 e9       	ldi	r24, 0x93	; 147
    2e9c:	97 e0       	ldi	r25, 0x07	; 7
    2e9e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <_ZN14HardwareSerial9availableEv>
    2ea2:	21 e0       	ldi	r18, 0x01	; 1
    2ea4:	89 2b       	or	r24, r25
    2ea6:	09 f4       	brne	.+2      	; 0x2eaa <_Z17Serial0_availablev+0x10>
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
}
    2eaa:	82 2f       	mov	r24, r18
    2eac:	08 95       	ret

00002eae <_GLOBAL__sub_I___vector_18>:
    2eae:	e3 e9       	ldi	r30, 0x93	; 147
    2eb0:	f7 e0       	ldi	r31, 0x07	; 7
    2eb2:	13 82       	std	Z+3, r1	; 0x03
    2eb4:	12 82       	std	Z+2, r1	; 0x02
    2eb6:	88 ee       	ldi	r24, 0xE8	; 232
    2eb8:	93 e0       	ldi	r25, 0x03	; 3
    2eba:	a0 e0       	ldi	r26, 0x00	; 0
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	84 83       	std	Z+4, r24	; 0x04
    2ec0:	95 83       	std	Z+5, r25	; 0x05
    2ec2:	a6 83       	std	Z+6, r26	; 0x06
    2ec4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2ec6:	8e e8       	ldi	r24, 0x8E	; 142
    2ec8:	94 e0       	ldi	r25, 0x04	; 4
    2eca:	91 83       	std	Z+1, r25	; 0x01
    2ecc:	80 83       	st	Z, r24
    2ece:	85 ec       	ldi	r24, 0xC5	; 197
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	95 87       	std	Z+13, r25	; 0x0d
    2ed4:	84 87       	std	Z+12, r24	; 0x0c
    2ed6:	84 ec       	ldi	r24, 0xC4	; 196
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	97 87       	std	Z+15, r25	; 0x0f
    2edc:	86 87       	std	Z+14, r24	; 0x0e
    2ede:	80 ec       	ldi	r24, 0xC0	; 192
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	91 8b       	std	Z+17, r25	; 0x11
    2ee4:	80 8b       	std	Z+16, r24	; 0x10
    2ee6:	81 ec       	ldi	r24, 0xC1	; 193
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	93 8b       	std	Z+19, r25	; 0x13
    2eec:	82 8b       	std	Z+18, r24	; 0x12
    2eee:	82 ec       	ldi	r24, 0xC2	; 194
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	95 8b       	std	Z+21, r25	; 0x15
    2ef4:	84 8b       	std	Z+20, r24	; 0x14
    2ef6:	86 ec       	ldi	r24, 0xC6	; 198
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	97 8b       	std	Z+23, r25	; 0x17
    2efc:	86 8b       	std	Z+22, r24	; 0x16
    2efe:	11 8e       	std	Z+25, r1	; 0x19
    2f00:	12 8e       	std	Z+26, r1	; 0x1a
    2f02:	13 8e       	std	Z+27, r1	; 0x1b
    2f04:	14 8e       	std	Z+28, r1	; 0x1c
    2f06:	08 95       	ret

00002f08 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2f08:	08 95       	ret

00002f0a <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2f0a:	08 95       	ret

00002f0c <main>:

int main(void)
{
	init();
    2f0c:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <init>

	initVariant();
    2f10:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2f14:	0e 94 22 12 	call	0x2444	; 0x2444 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2f18:	c2 ee       	ldi	r28, 0xE2	; 226
    2f1a:	d5 e1       	ldi	r29, 0x15	; 21
#endif
	
	setup();
    
	for (;;) {
		loop();
    2f1c:	0e 94 8d 12 	call	0x251a	; 0x251a <loop>
		if (serialEventRun) serialEventRun();
    2f20:	20 97       	sbiw	r28, 0x00	; 0
    2f22:	e1 f3       	breq	.-8      	; 0x2f1c <main+0x10>
    2f24:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <_Z14serialEventRunv>
    2f28:	f9 cf       	rjmp	.-14     	; 0x2f1c <main+0x10>

00002f2a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2f2a:	cf 92       	push	r12
    2f2c:	df 92       	push	r13
    2f2e:	ef 92       	push	r14
    2f30:	ff 92       	push	r15
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
    2f3a:	41 15       	cp	r20, r1
    2f3c:	51 05       	cpc	r21, r1
    2f3e:	b1 f0       	breq	.+44     	; 0x2f6c <_ZN5Print5writeEPKhj+0x42>
    2f40:	8c 01       	movw	r16, r24
    2f42:	e6 2e       	mov	r14, r22
    2f44:	f7 2e       	mov	r15, r23
    2f46:	ea 01       	movw	r28, r20
    2f48:	c1 2c       	mov	r12, r1
    2f4a:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
    2f4c:	d7 01       	movw	r26, r14
    2f4e:	6d 91       	ld	r22, X+
    2f50:	7d 01       	movw	r14, r26
    2f52:	d8 01       	movw	r26, r16
    2f54:	ed 91       	ld	r30, X+
    2f56:	fc 91       	ld	r31, X
    2f58:	01 90       	ld	r0, Z+
    2f5a:	f0 81       	ld	r31, Z
    2f5c:	e0 2d       	mov	r30, r0
    2f5e:	c8 01       	movw	r24, r16
    2f60:	09 95       	icall
    2f62:	c8 0e       	add	r12, r24
    2f64:	d9 1e       	adc	r13, r25
    2f66:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    2f68:	89 f7       	brne	.-30     	; 0x2f4c <_ZN5Print5writeEPKhj+0x22>
    2f6a:	02 c0       	rjmp	.+4      	; 0x2f70 <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    2f6c:	c1 2c       	mov	r12, r1
    2f6e:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    2f70:	c6 01       	movw	r24, r12
    2f72:	df 91       	pop	r29
    2f74:	cf 91       	pop	r28
    2f76:	1f 91       	pop	r17
    2f78:	0f 91       	pop	r16
    2f7a:	ff 90       	pop	r15
    2f7c:	ef 90       	pop	r14
    2f7e:	df 90       	pop	r13
    2f80:	cf 90       	pop	r12
    2f82:	08 95       	ret

00002f84 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    2f84:	61 15       	cp	r22, r1
    2f86:	71 05       	cpc	r23, r1
    2f88:	81 f0       	breq	.+32     	; 0x2faa <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
    2f8a:	fb 01       	movw	r30, r22
    2f8c:	01 90       	ld	r0, Z+
    2f8e:	00 20       	and	r0, r0
    2f90:	e9 f7       	brne	.-6      	; 0x2f8c <_ZN5Print5printEPKc+0x8>
    2f92:	31 97       	sbiw	r30, 0x01	; 1
    2f94:	af 01       	movw	r20, r30
    2f96:	46 1b       	sub	r20, r22
    2f98:	57 0b       	sbc	r21, r23
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	ed 91       	ld	r30, X+
    2f9e:	fc 91       	ld	r31, X
    2fa0:	02 80       	ldd	r0, Z+2	; 0x02
    2fa2:	f3 81       	ldd	r31, Z+3	; 0x03
    2fa4:	e0 2d       	mov	r30, r0
    2fa6:	09 95       	icall
    2fa8:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
    2fae:	08 95       	ret

00002fb0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	ed 91       	ld	r30, X+
    2fb4:	fc 91       	ld	r31, X
    2fb6:	01 90       	ld	r0, Z+
    2fb8:	f0 81       	ld	r31, Z
    2fba:	e0 2d       	mov	r30, r0
    2fbc:	09 95       	icall
}
    2fbe:	08 95       	ret

00002fc0 <_ZN5Print7printlnEv>:
      return write((const uint8_t *)str, strlen(str));
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	ed 91       	ld	r30, X+
    2fc4:	fc 91       	ld	r31, X
    2fc6:	02 80       	ldd	r0, Z+2	; 0x02
    2fc8:	f3 81       	ldd	r31, Z+3	; 0x03
    2fca:	e0 2d       	mov	r30, r0
    2fcc:	42 e0       	ldi	r20, 0x02	; 2
    2fce:	50 e0       	ldi	r21, 0x00	; 0
    2fd0:	6a e9       	ldi	r22, 0x9A	; 154
    2fd2:	74 e0       	ldi	r23, 0x04	; 4
    2fd4:	09 95       	icall
}

size_t Print::println(void)
{
  return write("\r\n");
}
    2fd6:	08 95       	ret

00002fd8 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    2fd8:	0f 93       	push	r16
    2fda:	1f 93       	push	r17
    2fdc:	cf 93       	push	r28
    2fde:	df 93       	push	r29
    2fe0:	ec 01       	movw	r28, r24
  size_t n = print(c);
    2fe2:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_ZN5Print5printEPKc>
    2fe6:	8c 01       	movw	r16, r24
  n += println();
    2fe8:	ce 01       	movw	r24, r28
    2fea:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZN5Print7printlnEv>
  return n;
}
    2fee:	80 0f       	add	r24, r16
    2ff0:	91 1f       	adc	r25, r17
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	08 95       	ret

00002ffc <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    2ffc:	4f 92       	push	r4
    2ffe:	5f 92       	push	r5
    3000:	6f 92       	push	r6
    3002:	7f 92       	push	r7
    3004:	9f 92       	push	r9
    3006:	af 92       	push	r10
    3008:	bf 92       	push	r11
    300a:	cf 92       	push	r12
    300c:	df 92       	push	r13
    300e:	ef 92       	push	r14
    3010:	ff 92       	push	r15
    3012:	0f 93       	push	r16
    3014:	1f 93       	push	r17
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    301a:	cd b7       	in	r28, 0x3d	; 61
    301c:	de b7       	in	r29, 0x3e	; 62
    301e:	a1 97       	sbiw	r28, 0x21	; 33
    3020:	0f b6       	in	r0, 0x3f	; 63
    3022:	f8 94       	cli
    3024:	de bf       	out	0x3e, r29	; 62
    3026:	0f be       	out	0x3f, r0	; 63
    3028:	cd bf       	out	0x3d, r28	; 61
    302a:	5c 01       	movw	r10, r24
    302c:	6a 01       	movw	r12, r20
    302e:	7b 01       	movw	r14, r22
    3030:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    3032:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	82 17       	cp	r24, r18
    3038:	20 f0       	brcs	.+8      	; 0x3042 <_ZN5Print11printNumberEmh+0x46>
    303a:	0f 2e       	mov	r0, r31
    303c:	fa e0       	ldi	r31, 0x0A	; 10
    303e:	9f 2e       	mov	r9, r31
    3040:	f0 2d       	mov	r31, r0
    3042:	8e 01       	movw	r16, r28
    3044:	0f 5d       	subi	r16, 0xDF	; 223
    3046:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
    3048:	49 2c       	mov	r4, r9
    304a:	51 2c       	mov	r5, r1
    304c:	61 2c       	mov	r6, r1
    304e:	71 2c       	mov	r7, r1
    3050:	c7 01       	movw	r24, r14
    3052:	b6 01       	movw	r22, r12
    3054:	a3 01       	movw	r20, r6
    3056:	92 01       	movw	r18, r4
    3058:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodsi4>
    char c = m - base * n;
    305c:	8c 2d       	mov	r24, r12
    305e:	92 9e       	mul	r9, r18
    3060:	80 19       	sub	r24, r0
    3062:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3064:	01 50       	subi	r16, 0x01	; 1
    3066:	11 09       	sbc	r17, r1
    3068:	8a 30       	cpi	r24, 0x0A	; 10
    306a:	10 f4       	brcc	.+4      	; 0x3070 <_ZN5Print11printNumberEmh+0x74>
    306c:	80 5d       	subi	r24, 0xD0	; 208
    306e:	01 c0       	rjmp	.+2      	; 0x3072 <_ZN5Print11printNumberEmh+0x76>
    3070:	89 5c       	subi	r24, 0xC9	; 201
    3072:	d8 01       	movw	r26, r16
    3074:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    3076:	c2 2e       	mov	r12, r18
    3078:	d3 2e       	mov	r13, r19
    307a:	e4 2e       	mov	r14, r20
    307c:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    307e:	c1 14       	cp	r12, r1
    3080:	d1 04       	cpc	r13, r1
    3082:	e1 04       	cpc	r14, r1
    3084:	f1 04       	cpc	r15, r1
    3086:	21 f7       	brne	.-56     	; 0x3050 <_ZN5Print11printNumberEmh+0x54>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    3088:	01 15       	cp	r16, r1
    308a:	11 05       	cpc	r17, r1
    308c:	91 f0       	breq	.+36     	; 0x30b2 <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
    308e:	f8 01       	movw	r30, r16
    3090:	01 90       	ld	r0, Z+
    3092:	00 20       	and	r0, r0
    3094:	e9 f7       	brne	.-6      	; 0x3090 <_ZN5Print11printNumberEmh+0x94>
    3096:	31 97       	sbiw	r30, 0x01	; 1
    3098:	af 01       	movw	r20, r30
    309a:	40 1b       	sub	r20, r16
    309c:	51 0b       	sbc	r21, r17
    309e:	d5 01       	movw	r26, r10
    30a0:	ed 91       	ld	r30, X+
    30a2:	fc 91       	ld	r31, X
    30a4:	02 80       	ldd	r0, Z+2	; 0x02
    30a6:	f3 81       	ldd	r31, Z+3	; 0x03
    30a8:	e0 2d       	mov	r30, r0
    30aa:	b8 01       	movw	r22, r16
    30ac:	c5 01       	movw	r24, r10
    30ae:	09 95       	icall
    30b0:	02 c0       	rjmp	.+4      	; 0x30b6 <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    30b2:	80 e0       	ldi	r24, 0x00	; 0
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    30b6:	a1 96       	adiw	r28, 0x21	; 33
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	f8 94       	cli
    30bc:	de bf       	out	0x3e, r29	; 62
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	cd bf       	out	0x3d, r28	; 61
    30c2:	df 91       	pop	r29
    30c4:	cf 91       	pop	r28
    30c6:	1f 91       	pop	r17
    30c8:	0f 91       	pop	r16
    30ca:	ff 90       	pop	r15
    30cc:	ef 90       	pop	r14
    30ce:	df 90       	pop	r13
    30d0:	cf 90       	pop	r12
    30d2:	bf 90       	pop	r11
    30d4:	af 90       	pop	r10
    30d6:	9f 90       	pop	r9
    30d8:	7f 90       	pop	r7
    30da:	6f 90       	pop	r6
    30dc:	5f 90       	pop	r5
    30de:	4f 90       	pop	r4
    30e0:	08 95       	ret

000030e2 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    30e2:	cf 92       	push	r12
    30e4:	df 92       	push	r13
    30e6:	ef 92       	push	r14
    30e8:	ff 92       	push	r15
    30ea:	0f 93       	push	r16
    30ec:	1f 93       	push	r17
    30ee:	cf 93       	push	r28
    30f0:	df 93       	push	r29
    30f2:	ec 01       	movw	r28, r24
    30f4:	6a 01       	movw	r12, r20
    30f6:	7b 01       	movw	r14, r22
  if (base == 0) {
    30f8:	21 15       	cp	r18, r1
    30fa:	31 05       	cpc	r19, r1
    30fc:	41 f4       	brne	.+16     	; 0x310e <_ZN5Print5printEli+0x2c>
    return write(n);
    30fe:	e8 81       	ld	r30, Y
    3100:	f9 81       	ldd	r31, Y+1	; 0x01
    3102:	01 90       	ld	r0, Z+
    3104:	f0 81       	ld	r31, Z
    3106:	e0 2d       	mov	r30, r0
    3108:	64 2f       	mov	r22, r20
    310a:	09 95       	icall
    310c:	1d c0       	rjmp	.+58     	; 0x3148 <_ZN5Print5printEli+0x66>
  } else if (base == 10) {
    310e:	2a 30       	cpi	r18, 0x0A	; 10
    3110:	31 05       	cpc	r19, r1
    3112:	c1 f4       	brne	.+48     	; 0x3144 <_ZN5Print5printEli+0x62>
    if (n < 0) {
    3114:	77 23       	and	r23, r23
    3116:	94 f4       	brge	.+36     	; 0x313c <_ZN5Print5printEli+0x5a>
      int t = print('-');
    3118:	6d e2       	ldi	r22, 0x2D	; 45
    311a:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZN5Print5printEc>
    311e:	8c 01       	movw	r16, r24
      n = -n;
    3120:	44 27       	eor	r20, r20
    3122:	55 27       	eor	r21, r21
    3124:	ba 01       	movw	r22, r20
    3126:	4c 19       	sub	r20, r12
    3128:	5d 09       	sbc	r21, r13
    312a:	6e 09       	sbc	r22, r14
    312c:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    312e:	2a e0       	ldi	r18, 0x0A	; 10
    3130:	ce 01       	movw	r24, r28
    3132:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN5Print11printNumberEmh>
    3136:	80 0f       	add	r24, r16
    3138:	91 1f       	adc	r25, r17
    313a:	06 c0       	rjmp	.+12     	; 0x3148 <_ZN5Print5printEli+0x66>
    }
    return printNumber(n, 10);
    313c:	2a e0       	ldi	r18, 0x0A	; 10
    313e:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN5Print11printNumberEmh>
    3142:	02 c0       	rjmp	.+4      	; 0x3148 <_ZN5Print5printEli+0x66>
  } else {
    return printNumber(n, base);
    3144:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN5Print11printNumberEmh>
  }
}
    3148:	df 91       	pop	r29
    314a:	cf 91       	pop	r28
    314c:	1f 91       	pop	r17
    314e:	0f 91       	pop	r16
    3150:	ff 90       	pop	r15
    3152:	ef 90       	pop	r14
    3154:	df 90       	pop	r13
    3156:	cf 90       	pop	r12
    3158:	08 95       	ret

0000315a <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    315a:	9a 01       	movw	r18, r20
  return print((long) n, base);
    315c:	ab 01       	movw	r20, r22
    315e:	77 0f       	add	r23, r23
    3160:	66 0b       	sbc	r22, r22
    3162:	77 0b       	sbc	r23, r23
    3164:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN5Print5printEli>
}
    3168:	08 95       	ret

0000316a <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    316a:	21 15       	cp	r18, r1
    316c:	31 05       	cpc	r19, r1
    316e:	49 f4       	brne	.+18     	; 0x3182 <_ZN5Print5printEmi+0x18>
    3170:	dc 01       	movw	r26, r24
    3172:	ed 91       	ld	r30, X+
    3174:	fc 91       	ld	r31, X
    3176:	01 90       	ld	r0, Z+
    3178:	f0 81       	ld	r31, Z
    317a:	e0 2d       	mov	r30, r0
    317c:	64 2f       	mov	r22, r20
    317e:	09 95       	icall
    3180:	08 95       	ret
  else return printNumber(n, base);
    3182:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN5Print11printNumberEmh>
}
    3186:	08 95       	ret

00003188 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3188:	4f 92       	push	r4
    318a:	5f 92       	push	r5
    318c:	7f 92       	push	r7
    318e:	8f 92       	push	r8
    3190:	9f 92       	push	r9
    3192:	af 92       	push	r10
    3194:	bf 92       	push	r11
    3196:	cf 92       	push	r12
    3198:	df 92       	push	r13
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	0f 93       	push	r16
    31a0:	1f 93       	push	r17
    31a2:	cf 93       	push	r28
    31a4:	df 93       	push	r29
    31a6:	00 d0       	rcall	.+0      	; 0x31a8 <_ZN5Print10printFloatEdh+0x20>
    31a8:	00 d0       	rcall	.+0      	; 0x31aa <_ZN5Print10printFloatEdh+0x22>
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	8c 01       	movw	r16, r24
    31b0:	4a 01       	movw	r8, r20
    31b2:	5b 01       	movw	r10, r22
    31b4:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    31b6:	9a 01       	movw	r18, r20
    31b8:	ab 01       	movw	r20, r22
    31ba:	c5 01       	movw	r24, r10
    31bc:	b4 01       	movw	r22, r8
    31be:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__unordsf2>
    31c2:	88 23       	and	r24, r24
    31c4:	31 f0       	breq	.+12     	; 0x31d2 <_ZN5Print10printFloatEdh+0x4a>
    31c6:	6d e9       	ldi	r22, 0x9D	; 157
    31c8:	74 e0       	ldi	r23, 0x04	; 4
    31ca:	c8 01       	movw	r24, r16
    31cc:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_ZN5Print5printEPKc>
    31d0:	d2 c0       	rjmp	.+420    	; 0x3376 <_ZN5Print10printFloatEdh+0x1ee>
  if (isinf(number)) return print("inf");
    31d2:	75 01       	movw	r14, r10
    31d4:	64 01       	movw	r12, r8
    31d6:	e8 94       	clt
    31d8:	f7 f8       	bld	r15, 7
    31da:	2f ef       	ldi	r18, 0xFF	; 255
    31dc:	3f ef       	ldi	r19, 0xFF	; 255
    31de:	4f e7       	ldi	r20, 0x7F	; 127
    31e0:	5f e7       	ldi	r21, 0x7F	; 127
    31e2:	c7 01       	movw	r24, r14
    31e4:	b6 01       	movw	r22, r12
    31e6:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__unordsf2>
    31ea:	81 11       	cpse	r24, r1
    31ec:	10 c0       	rjmp	.+32     	; 0x320e <_ZN5Print10printFloatEdh+0x86>
    31ee:	2f ef       	ldi	r18, 0xFF	; 255
    31f0:	3f ef       	ldi	r19, 0xFF	; 255
    31f2:	4f e7       	ldi	r20, 0x7F	; 127
    31f4:	5f e7       	ldi	r21, 0x7F	; 127
    31f6:	c7 01       	movw	r24, r14
    31f8:	b6 01       	movw	r22, r12
    31fa:	0e 94 37 1c 	call	0x386e	; 0x386e <__cmpsf2>
    31fe:	18 16       	cp	r1, r24
    3200:	34 f4       	brge	.+12     	; 0x320e <_ZN5Print10printFloatEdh+0x86>
    3202:	61 ea       	ldi	r22, 0xA1	; 161
    3204:	74 e0       	ldi	r23, 0x04	; 4
    3206:	c8 01       	movw	r24, r16
    3208:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_ZN5Print5printEPKc>
    320c:	b4 c0       	rjmp	.+360    	; 0x3376 <_ZN5Print10printFloatEdh+0x1ee>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    320e:	2f ef       	ldi	r18, 0xFF	; 255
    3210:	3f ef       	ldi	r19, 0xFF	; 255
    3212:	4f e7       	ldi	r20, 0x7F	; 127
    3214:	5f e4       	ldi	r21, 0x4F	; 79
    3216:	c5 01       	movw	r24, r10
    3218:	b4 01       	movw	r22, r8
    321a:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__gesf2>
    321e:	18 16       	cp	r1, r24
    3220:	34 f4       	brge	.+12     	; 0x322e <_ZN5Print10printFloatEdh+0xa6>
    3222:	65 ea       	ldi	r22, 0xA5	; 165
    3224:	74 e0       	ldi	r23, 0x04	; 4
    3226:	c8 01       	movw	r24, r16
    3228:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_ZN5Print5printEPKc>
    322c:	a4 c0       	rjmp	.+328    	; 0x3376 <_ZN5Print10printFloatEdh+0x1ee>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    322e:	2f ef       	ldi	r18, 0xFF	; 255
    3230:	3f ef       	ldi	r19, 0xFF	; 255
    3232:	4f e7       	ldi	r20, 0x7F	; 127
    3234:	5f ec       	ldi	r21, 0xCF	; 207
    3236:	c5 01       	movw	r24, r10
    3238:	b4 01       	movw	r22, r8
    323a:	0e 94 37 1c 	call	0x386e	; 0x386e <__cmpsf2>
    323e:	88 23       	and	r24, r24
    3240:	34 f4       	brge	.+12     	; 0x324e <_ZN5Print10printFloatEdh+0xc6>
    3242:	65 ea       	ldi	r22, 0xA5	; 165
    3244:	74 e0       	ldi	r23, 0x04	; 4
    3246:	c8 01       	movw	r24, r16
    3248:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_ZN5Print5printEPKc>
    324c:	94 c0       	rjmp	.+296    	; 0x3376 <_ZN5Print10printFloatEdh+0x1ee>
  
  // Handle negative numbers
  if (number < 0.0)
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	a9 01       	movw	r20, r18
    3254:	c5 01       	movw	r24, r10
    3256:	b4 01       	movw	r22, r8
    3258:	0e 94 37 1c 	call	0x386e	; 0x386e <__cmpsf2>
    325c:	88 23       	and	r24, r24
    325e:	54 f4       	brge	.+20     	; 0x3274 <_ZN5Print10printFloatEdh+0xec>
  {
     n += print('-');
    3260:	6d e2       	ldi	r22, 0x2D	; 45
    3262:	c8 01       	movw	r24, r16
    3264:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZN5Print5printEc>
    3268:	7c 01       	movw	r14, r24
     number = -number;
    326a:	b7 fa       	bst	r11, 7
    326c:	b0 94       	com	r11
    326e:	b7 f8       	bld	r11, 7
    3270:	b0 94       	com	r11
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <_ZN5Print10printFloatEdh+0xf0>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    3274:	e1 2c       	mov	r14, r1
    3276:	f1 2c       	mov	r15, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3278:	77 20       	and	r7, r7
    327a:	09 f4       	brne	.+2      	; 0x327e <_ZN5Print10printFloatEdh+0xf6>
    327c:	67 c0       	rjmp	.+206    	; 0x334c <_ZN5Print10printFloatEdh+0x1c4>
    327e:	d1 2c       	mov	r13, r1
    3280:	60 e0       	ldi	r22, 0x00	; 0
    3282:	70 e0       	ldi	r23, 0x00	; 0
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	9f e3       	ldi	r25, 0x3F	; 63
    rounding /= 10.0;
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e2       	ldi	r20, 0x20	; 32
    328e:	51 e4       	ldi	r21, 0x41	; 65
    3290:	0e 94 3c 1c 	call	0x3878	; 0x3878 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3294:	d3 94       	inc	r13
    3296:	d7 10       	cpse	r13, r7
    3298:	f7 cf       	rjmp	.-18     	; 0x3288 <_ZN5Print10printFloatEdh+0x100>
    329a:	2b c0       	rjmp	.+86     	; 0x32f2 <_ZN5Print10printFloatEdh+0x16a>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	40 e2       	ldi	r20, 0x20	; 32
    32a2:	51 e4       	ldi	r21, 0x41	; 65
    32a4:	c5 01       	movw	r24, r10
    32a6:	b4 01       	movw	r22, r8
    32a8:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <__mulsf3>
    32ac:	4b 01       	movw	r8, r22
    32ae:	5c 01       	movw	r10, r24
    int toPrint = int(remainder);
    32b0:	0e 94 ae 1c 	call	0x395c	; 0x395c <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    32b4:	6b 01       	movw	r12, r22
    32b6:	77 0f       	add	r23, r23
    32b8:	ee 08       	sbc	r14, r14
    32ba:	ff 08       	sbc	r15, r15
    32bc:	2a e0       	ldi	r18, 0x0A	; 10
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	b7 01       	movw	r22, r14
    32c2:	a6 01       	movw	r20, r12
    32c4:	c8 01       	movw	r24, r16
    32c6:	0e 94 71 18 	call	0x30e2	; 0x30e2 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    32ca:	48 0e       	add	r4, r24
    32cc:	59 1e       	adc	r5, r25
    remainder -= toPrint; 
    32ce:	c7 01       	movw	r24, r14
    32d0:	b6 01       	movw	r22, r12
    32d2:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__floatsisf>
    32d6:	9b 01       	movw	r18, r22
    32d8:	ac 01       	movw	r20, r24
    32da:	c5 01       	movw	r24, r10
    32dc:	b4 01       	movw	r22, r8
    32de:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__subsf3>
    32e2:	4b 01       	movw	r8, r22
    32e4:	5c 01       	movw	r10, r24
    32e6:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    32e8:	71 10       	cpse	r7, r1
    32ea:	d8 cf       	rjmp	.-80     	; 0x329c <_ZN5Print10printFloatEdh+0x114>
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    32ec:	84 2d       	mov	r24, r4
    32ee:	95 2d       	mov	r25, r5
    32f0:	42 c0       	rjmp	.+132    	; 0x3376 <_ZN5Print10printFloatEdh+0x1ee>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    32f2:	9b 01       	movw	r18, r22
    32f4:	ac 01       	movw	r20, r24
    32f6:	c5 01       	movw	r24, r10
    32f8:	b4 01       	movw	r22, r8
    32fa:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__addsf3>
    32fe:	4b 01       	movw	r8, r22
    3300:	5c 01       	movw	r10, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3302:	0e 94 b5 1c 	call	0x396a	; 0x396a <__fixunssfsi>
    3306:	69 83       	std	Y+1, r22	; 0x01
    3308:	7a 83       	std	Y+2, r23	; 0x02
    330a:	8b 83       	std	Y+3, r24	; 0x03
    330c:	9c 83       	std	Y+4, r25	; 0x04
  double remainder = number - (double)int_part;
    330e:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__floatunsisf>
    3312:	9b 01       	movw	r18, r22
    3314:	ac 01       	movw	r20, r24
    3316:	c5 01       	movw	r24, r10
    3318:	b4 01       	movw	r22, r8
    331a:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__subsf3>
    331e:	4b 01       	movw	r8, r22
    3320:	5c 01       	movw	r10, r24
  n += print(int_part);
    3322:	2a e0       	ldi	r18, 0x0A	; 10
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	49 81       	ldd	r20, Y+1	; 0x01
    3328:	5a 81       	ldd	r21, Y+2	; 0x02
    332a:	6b 81       	ldd	r22, Y+3	; 0x03
    332c:	7c 81       	ldd	r23, Y+4	; 0x04
    332e:	c8 01       	movw	r24, r16
    3330:	0e 94 b5 18 	call	0x316a	; 0x316a <_ZN5Print5printEmi>
    3334:	6c 01       	movw	r12, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    3336:	69 ea       	ldi	r22, 0xA9	; 169
    3338:	74 e0       	ldi	r23, 0x04	; 4
    333a:	c8 01       	movw	r24, r16
    333c:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_ZN5Print5printEPKc>
    3340:	8c 0d       	add	r24, r12
    3342:	9d 1d       	adc	r25, r13
    3344:	2c 01       	movw	r4, r24
    3346:	4e 0c       	add	r4, r14
    3348:	5f 1c       	adc	r5, r15
    334a:	a8 cf       	rjmp	.-176    	; 0x329c <_ZN5Print10printFloatEdh+0x114>
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	40 e0       	ldi	r20, 0x00	; 0
    3352:	5f e3       	ldi	r21, 0x3F	; 63
    3354:	c5 01       	movw	r24, r10
    3356:	b4 01       	movw	r22, r8
    3358:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    335c:	0e 94 b5 1c 	call	0x396a	; 0x396a <__fixunssfsi>
    3360:	ab 01       	movw	r20, r22
    3362:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    3364:	2a e0       	ldi	r18, 0x0A	; 10
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	c8 01       	movw	r24, r16
    336a:	0e 94 b5 18 	call	0x316a	; 0x316a <_ZN5Print5printEmi>
    336e:	2c 01       	movw	r4, r24
    3370:	4e 0c       	add	r4, r14
    3372:	5f 1c       	adc	r5, r15
    3374:	bb cf       	rjmp	.-138    	; 0x32ec <_ZN5Print10printFloatEdh+0x164>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	0f 90       	pop	r0
    337e:	df 91       	pop	r29
    3380:	cf 91       	pop	r28
    3382:	1f 91       	pop	r17
    3384:	0f 91       	pop	r16
    3386:	ff 90       	pop	r15
    3388:	ef 90       	pop	r14
    338a:	df 90       	pop	r13
    338c:	cf 90       	pop	r12
    338e:	bf 90       	pop	r11
    3390:	af 90       	pop	r10
    3392:	9f 90       	pop	r9
    3394:	8f 90       	pop	r8
    3396:	7f 90       	pop	r7
    3398:	5f 90       	pop	r5
    339a:	4f 90       	pop	r4
    339c:	08 95       	ret

0000339e <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    339e:	0f 93       	push	r16
    33a0:	1f 93       	push	r17
    33a2:	cf 93       	push	r28
    33a4:	df 93       	push	r29
    33a6:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    33a8:	0e 94 c4 18 	call	0x3188	; 0x3188 <_ZN5Print10printFloatEdh>
    33ac:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    33ae:	ce 01       	movw	r24, r28
    33b0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZN5Print7printlnEv>
  return n;
}
    33b4:	80 0f       	add	r24, r16
    33b6:	91 1f       	adc	r25, r17
    33b8:	df 91       	pop	r29
    33ba:	cf 91       	pop	r28
    33bc:	1f 91       	pop	r17
    33be:	0f 91       	pop	r16
    33c0:	08 95       	ret

000033c2 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    33c2:	1f 92       	push	r1
    33c4:	0f 92       	push	r0
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	0f 92       	push	r0
    33ca:	11 24       	eor	r1, r1
    33cc:	2f 93       	push	r18
    33ce:	3f 93       	push	r19
    33d0:	4f 93       	push	r20
    33d2:	5f 93       	push	r21
    33d4:	6f 93       	push	r22
    33d6:	7f 93       	push	r23
    33d8:	8f 93       	push	r24
    33da:	9f 93       	push	r25
    33dc:	af 93       	push	r26
    33de:	bf 93       	push	r27
    33e0:	ef 93       	push	r30
    33e2:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    33e4:	80 91 30 08 	lds	r24, 0x0830
    33e8:	90 91 31 08 	lds	r25, 0x0831
    33ec:	89 2b       	or	r24, r25
    33ee:	29 f0       	breq	.+10     	; 0x33fa <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    33f0:	e0 91 30 08 	lds	r30, 0x0830
    33f4:	f0 91 31 08 	lds	r31, 0x0831
    33f8:	09 95       	icall
}
    33fa:	ff 91       	pop	r31
    33fc:	ef 91       	pop	r30
    33fe:	bf 91       	pop	r27
    3400:	af 91       	pop	r26
    3402:	9f 91       	pop	r25
    3404:	8f 91       	pop	r24
    3406:	7f 91       	pop	r23
    3408:	6f 91       	pop	r22
    340a:	5f 91       	pop	r21
    340c:	4f 91       	pop	r20
    340e:	3f 91       	pop	r19
    3410:	2f 91       	pop	r18
    3412:	0f 90       	pop	r0
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	0f 90       	pop	r0
    3418:	1f 90       	pop	r1
    341a:	18 95       	reti

0000341c <__vector_2>:

ISR(INT1_vect) {
    341c:	1f 92       	push	r1
    341e:	0f 92       	push	r0
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	0f 92       	push	r0
    3424:	11 24       	eor	r1, r1
    3426:	2f 93       	push	r18
    3428:	3f 93       	push	r19
    342a:	4f 93       	push	r20
    342c:	5f 93       	push	r21
    342e:	6f 93       	push	r22
    3430:	7f 93       	push	r23
    3432:	8f 93       	push	r24
    3434:	9f 93       	push	r25
    3436:	af 93       	push	r26
    3438:	bf 93       	push	r27
    343a:	ef 93       	push	r30
    343c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    343e:	80 91 32 08 	lds	r24, 0x0832
    3442:	90 91 33 08 	lds	r25, 0x0833
    3446:	89 2b       	or	r24, r25
    3448:	29 f0       	breq	.+10     	; 0x3454 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    344a:	e0 91 32 08 	lds	r30, 0x0832
    344e:	f0 91 33 08 	lds	r31, 0x0833
    3452:	09 95       	icall
}
    3454:	ff 91       	pop	r31
    3456:	ef 91       	pop	r30
    3458:	bf 91       	pop	r27
    345a:	af 91       	pop	r26
    345c:	9f 91       	pop	r25
    345e:	8f 91       	pop	r24
    3460:	7f 91       	pop	r23
    3462:	6f 91       	pop	r22
    3464:	5f 91       	pop	r21
    3466:	4f 91       	pop	r20
    3468:	3f 91       	pop	r19
    346a:	2f 91       	pop	r18
    346c:	0f 90       	pop	r0
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	0f 90       	pop	r0
    3472:	1f 90       	pop	r1
    3474:	18 95       	reti

00003476 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3476:	1f 92       	push	r1
    3478:	0f 92       	push	r0
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	0f 92       	push	r0
    347e:	11 24       	eor	r1, r1
    3480:	2f 93       	push	r18
    3482:	3f 93       	push	r19
    3484:	8f 93       	push	r24
    3486:	9f 93       	push	r25
    3488:	af 93       	push	r26
    348a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    348c:	80 91 35 08 	lds	r24, 0x0835
    3490:	90 91 36 08 	lds	r25, 0x0836
    3494:	a0 91 37 08 	lds	r26, 0x0837
    3498:	b0 91 38 08 	lds	r27, 0x0838
	unsigned char f = timer0_fract;
    349c:	30 91 34 08 	lds	r19, 0x0834

	m += MILLIS_INC;
	f += FRACT_INC;
    34a0:	26 e0       	ldi	r18, 0x06	; 6
    34a2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    34a4:	2d 37       	cpi	r18, 0x7D	; 125
    34a6:	20 f4       	brcc	.+8      	; 0x34b0 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    34a8:	02 96       	adiw	r24, 0x02	; 2
    34aa:	a1 1d       	adc	r26, r1
    34ac:	b1 1d       	adc	r27, r1
    34ae:	05 c0       	rjmp	.+10     	; 0x34ba <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    34b0:	29 e8       	ldi	r18, 0x89	; 137
    34b2:	23 0f       	add	r18, r19
		m += 1;
    34b4:	03 96       	adiw	r24, 0x03	; 3
    34b6:	a1 1d       	adc	r26, r1
    34b8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    34ba:	20 93 34 08 	sts	0x0834, r18
	timer0_millis = m;
    34be:	80 93 35 08 	sts	0x0835, r24
    34c2:	90 93 36 08 	sts	0x0836, r25
    34c6:	a0 93 37 08 	sts	0x0837, r26
    34ca:	b0 93 38 08 	sts	0x0838, r27
	timer0_overflow_count++;
    34ce:	80 91 39 08 	lds	r24, 0x0839
    34d2:	90 91 3a 08 	lds	r25, 0x083A
    34d6:	a0 91 3b 08 	lds	r26, 0x083B
    34da:	b0 91 3c 08 	lds	r27, 0x083C
    34de:	01 96       	adiw	r24, 0x01	; 1
    34e0:	a1 1d       	adc	r26, r1
    34e2:	b1 1d       	adc	r27, r1
    34e4:	80 93 39 08 	sts	0x0839, r24
    34e8:	90 93 3a 08 	sts	0x083A, r25
    34ec:	a0 93 3b 08 	sts	0x083B, r26
    34f0:	b0 93 3c 08 	sts	0x083C, r27
}
    34f4:	bf 91       	pop	r27
    34f6:	af 91       	pop	r26
    34f8:	9f 91       	pop	r25
    34fa:	8f 91       	pop	r24
    34fc:	3f 91       	pop	r19
    34fe:	2f 91       	pop	r18
    3500:	0f 90       	pop	r0
    3502:	0f be       	out	0x3f, r0	; 63
    3504:	0f 90       	pop	r0
    3506:	1f 90       	pop	r1
    3508:	18 95       	reti

0000350a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    350a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    350c:	f8 94       	cli
	m = timer0_millis;
    350e:	60 91 35 08 	lds	r22, 0x0835
    3512:	70 91 36 08 	lds	r23, 0x0836
    3516:	80 91 37 08 	lds	r24, 0x0837
    351a:	90 91 38 08 	lds	r25, 0x0838
	SREG = oldSREG;
    351e:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    3520:	08 95       	ret

00003522 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3522:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    3524:	f8 94       	cli
	m = timer0_overflow_count;
    3526:	80 91 39 08 	lds	r24, 0x0839
    352a:	90 91 3a 08 	lds	r25, 0x083A
    352e:	a0 91 3b 08 	lds	r26, 0x083B
    3532:	b0 91 3c 08 	lds	r27, 0x083C
#if defined(TCNT0)
	t = TCNT0;
    3536:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3538:	a8 9b       	sbis	0x15, 0	; 21
    353a:	05 c0       	rjmp	.+10     	; 0x3546 <micros+0x24>
    353c:	2f 3f       	cpi	r18, 0xFF	; 255
    353e:	19 f0       	breq	.+6      	; 0x3546 <micros+0x24>
		m++;
    3540:	01 96       	adiw	r24, 0x01	; 1
    3542:	a1 1d       	adc	r26, r1
    3544:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3546:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3548:	ba 2f       	mov	r27, r26
    354a:	a9 2f       	mov	r26, r25
    354c:	98 2f       	mov	r25, r24
    354e:	88 27       	eor	r24, r24
    3550:	82 0f       	add	r24, r18
    3552:	91 1d       	adc	r25, r1
    3554:	a1 1d       	adc	r26, r1
    3556:	b1 1d       	adc	r27, r1
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	aa 1f       	adc	r26, r26
    355e:	bb 1f       	adc	r27, r27
    3560:	88 0f       	add	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	aa 1f       	adc	r26, r26
    3566:	bb 1f       	adc	r27, r27
    3568:	bc 01       	movw	r22, r24
    356a:	cd 01       	movw	r24, r26
    356c:	66 0f       	add	r22, r22
    356e:	77 1f       	adc	r23, r23
    3570:	88 1f       	adc	r24, r24
    3572:	99 1f       	adc	r25, r25
}
    3574:	08 95       	ret

00003576 <delay>:

void delay(unsigned long ms)
{
    3576:	cf 92       	push	r12
    3578:	df 92       	push	r13
    357a:	ef 92       	push	r14
    357c:	ff 92       	push	r15
    357e:	cf 93       	push	r28
    3580:	df 93       	push	r29
    3582:	6b 01       	movw	r12, r22
    3584:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    3586:	0e 94 91 1a 	call	0x3522	; 0x3522 <micros>
    358a:	eb 01       	movw	r28, r22

	while (ms > 0) {
    358c:	c1 14       	cp	r12, r1
    358e:	d1 04       	cpc	r13, r1
    3590:	e1 04       	cpc	r14, r1
    3592:	f1 04       	cpc	r15, r1
    3594:	a9 f0       	breq	.+42     	; 0x35c0 <delay+0x4a>
		yield();
    3596:	0e 94 84 17 	call	0x2f08	; 0x2f08 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
    359a:	0e 94 91 1a 	call	0x3522	; 0x3522 <micros>
    359e:	6c 1b       	sub	r22, r28
    35a0:	7d 0b       	sbc	r23, r29
    35a2:	68 3e       	cpi	r22, 0xE8	; 232
    35a4:	73 40       	sbci	r23, 0x03	; 3
    35a6:	38 f0       	brcs	.+14     	; 0x35b6 <delay+0x40>
			ms--;
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	c8 1a       	sub	r12, r24
    35ac:	d1 08       	sbc	r13, r1
    35ae:	e1 08       	sbc	r14, r1
    35b0:	f1 08       	sbc	r15, r1
			start += 1000;
    35b2:	c8 51       	subi	r28, 0x18	; 24
    35b4:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    35b6:	c1 14       	cp	r12, r1
    35b8:	d1 04       	cpc	r13, r1
    35ba:	e1 04       	cpc	r14, r1
    35bc:	f1 04       	cpc	r15, r1
    35be:	59 f7       	brne	.-42     	; 0x3596 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    35c0:	df 91       	pop	r29
    35c2:	cf 91       	pop	r28
    35c4:	ff 90       	pop	r15
    35c6:	ef 90       	pop	r14
    35c8:	df 90       	pop	r13
    35ca:	cf 90       	pop	r12
    35cc:	08 95       	ret

000035ce <delayMicroseconds>:
#elif F_CPU >= 8000000L
	// for the 8 MHz internal clock

	// for a 1 and 2 microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 2us
	if (us <= 2) return; //  = 3 cycles, (4 when true)
    35ce:	83 30       	cpi	r24, 0x03	; 3
    35d0:	91 05       	cpc	r25, r1
    35d2:	28 f0       	brcs	.+10     	; 0x35de <delayMicroseconds+0x10>

	// the following loop takes 1/2 of a microsecond (4 cycles)
	// per iteration, so execute it twice for each microsecond of
	// delay requested.
	us <<= 1; //x2 us, = 2 cycles
    35d4:	88 0f       	add	r24, r24
    35d6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 17 (19) cycles above, remove 4, (4*4=16)
	// us is at least 6 so we can substract 4
	us -= 4; // = 2 cycles
    35d8:	04 97       	sbiw	r24, 0x04	; 4
	

#endif

	// busy wait
	__asm__ __volatile__ (
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	f1 f7       	brne	.-4      	; 0x35da <delayMicroseconds+0xc>
    35de:	08 95       	ret

000035e0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    35e0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    35e2:	84 b5       	in	r24, 0x24	; 36
    35e4:	82 60       	ori	r24, 0x02	; 2
    35e6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    35e8:	84 b5       	in	r24, 0x24	; 36
    35ea:	81 60       	ori	r24, 0x01	; 1
    35ec:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    35ee:	85 b5       	in	r24, 0x25	; 37
    35f0:	82 60       	ori	r24, 0x02	; 2
    35f2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    35f4:	85 b5       	in	r24, 0x25	; 37
    35f6:	81 60       	ori	r24, 0x01	; 1
    35f8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    35fa:	ee e6       	ldi	r30, 0x6E	; 110
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	80 81       	ld	r24, Z
    3600:	81 60       	ori	r24, 0x01	; 1
    3602:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3604:	e1 e8       	ldi	r30, 0x81	; 129
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    360a:	80 81       	ld	r24, Z
    360c:	82 60       	ori	r24, 0x02	; 2
    360e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3610:	80 81       	ld	r24, Z
    3612:	81 60       	ori	r24, 0x01	; 1
    3614:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3616:	e0 e8       	ldi	r30, 0x80	; 128
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	81 60       	ori	r24, 0x01	; 1
    361e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3620:	e1 eb       	ldi	r30, 0xB1	; 177
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	80 81       	ld	r24, Z
    3626:	84 60       	ori	r24, 0x04	; 4
    3628:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    362a:	e0 eb       	ldi	r30, 0xB0	; 176
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	80 81       	ld	r24, Z
    3630:	81 60       	ori	r24, 0x01	; 1
    3632:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3634:	ea e7       	ldi	r30, 0x7A	; 122
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	80 81       	ld	r24, Z
    363a:	84 60       	ori	r24, 0x04	; 4
    363c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    363e:	80 81       	ld	r24, Z
    3640:	82 60       	ori	r24, 0x02	; 2
    3642:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    3644:	80 81       	ld	r24, Z
    3646:	8e 7f       	andi	r24, 0xFE	; 254
    3648:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    364a:	80 81       	ld	r24, Z
    364c:	80 68       	ori	r24, 0x80	; 128
    364e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3650:	10 92 c1 00 	sts	0x00C1, r1
    3654:	08 95       	ret

00003656 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3656:	83 30       	cpi	r24, 0x03	; 3
    3658:	69 f0       	breq	.+26     	; 0x3674 <turnOffPWM+0x1e>
    365a:	28 f4       	brcc	.+10     	; 0x3666 <turnOffPWM+0x10>
    365c:	81 30       	cpi	r24, 0x01	; 1
    365e:	b1 f0       	breq	.+44     	; 0x368c <turnOffPWM+0x36>
    3660:	82 30       	cpi	r24, 0x02	; 2
    3662:	c1 f0       	breq	.+48     	; 0x3694 <turnOffPWM+0x3e>
    3664:	08 95       	ret
    3666:	87 30       	cpi	r24, 0x07	; 7
    3668:	c9 f0       	breq	.+50     	; 0x369c <turnOffPWM+0x46>
    366a:	88 30       	cpi	r24, 0x08	; 8
    366c:	e9 f0       	breq	.+58     	; 0x36a8 <turnOffPWM+0x52>
    366e:	84 30       	cpi	r24, 0x04	; 4
    3670:	01 f5       	brne	.+64     	; 0x36b2 <turnOffPWM+0x5c>
    3672:	06 c0       	rjmp	.+12     	; 0x3680 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3674:	e0 e8       	ldi	r30, 0x80	; 128
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	80 81       	ld	r24, Z
    367a:	8f 77       	andi	r24, 0x7F	; 127
    367c:	80 83       	st	Z, r24
    367e:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3680:	e0 e8       	ldi	r30, 0x80	; 128
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	80 81       	ld	r24, Z
    3686:	8f 7d       	andi	r24, 0xDF	; 223
    3688:	80 83       	st	Z, r24
    368a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    368c:	84 b5       	in	r24, 0x24	; 36
    368e:	8f 77       	andi	r24, 0x7F	; 127
    3690:	84 bd       	out	0x24, r24	; 36
    3692:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3694:	84 b5       	in	r24, 0x24	; 36
    3696:	8f 7d       	andi	r24, 0xDF	; 223
    3698:	84 bd       	out	0x24, r24	; 36
    369a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    369c:	e0 eb       	ldi	r30, 0xB0	; 176
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	80 81       	ld	r24, Z
    36a2:	8f 77       	andi	r24, 0x7F	; 127
    36a4:	80 83       	st	Z, r24
    36a6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    36a8:	e0 eb       	ldi	r30, 0xB0	; 176
    36aa:	f0 e0       	ldi	r31, 0x00	; 0
    36ac:	80 81       	ld	r24, Z
    36ae:	8f 7d       	andi	r24, 0xDF	; 223
    36b0:	80 83       	st	Z, r24
    36b2:	08 95       	ret

000036b4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    36b4:	cf 93       	push	r28
    36b6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	fc 01       	movw	r30, r24
    36bc:	e4 58       	subi	r30, 0x84	; 132
    36be:	fe 4f       	sbci	r31, 0xFE	; 254
    36c0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    36c2:	fc 01       	movw	r30, r24
    36c4:	e0 57       	subi	r30, 0x70	; 112
    36c6:	fe 4f       	sbci	r31, 0xFE	; 254
    36c8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    36ca:	88 23       	and	r24, r24
    36cc:	79 f1       	breq	.+94     	; 0x372c <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	88 0f       	add	r24, r24
    36d2:	99 1f       	adc	r25, r25
    36d4:	fc 01       	movw	r30, r24
    36d6:	e8 54       	subi	r30, 0x48	; 72
    36d8:	fe 4f       	sbci	r31, 0xFE	; 254
    36da:	a5 91       	lpm	r26, Z+
    36dc:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    36de:	fc 01       	movw	r30, r24
    36e0:	e2 55       	subi	r30, 0x52	; 82
    36e2:	fe 4f       	sbci	r31, 0xFE	; 254
    36e4:	c5 91       	lpm	r28, Z+
    36e6:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    36e8:	61 11       	cpse	r22, r1
    36ea:	0c c0       	rjmp	.+24     	; 0x3704 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    36ec:	9f b7       	in	r25, 0x3f	; 63
                cli();
    36ee:	f8 94       	cli
		*reg &= ~bit;
    36f0:	8c 91       	ld	r24, X
    36f2:	e2 2f       	mov	r30, r18
    36f4:	e0 95       	com	r30
    36f6:	8e 23       	and	r24, r30
    36f8:	8c 93       	st	X, r24
		*out &= ~bit;
    36fa:	28 81       	ld	r18, Y
    36fc:	e2 23       	and	r30, r18
    36fe:	e8 83       	st	Y, r30
		SREG = oldSREG;
    3700:	9f bf       	out	0x3f, r25	; 63
    3702:	14 c0       	rjmp	.+40     	; 0x372c <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    3704:	62 30       	cpi	r22, 0x02	; 2
    3706:	61 f4       	brne	.+24     	; 0x3720 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    3708:	9f b7       	in	r25, 0x3f	; 63
                cli();
    370a:	f8 94       	cli
		*reg &= ~bit;
    370c:	3c 91       	ld	r19, X
    370e:	82 2f       	mov	r24, r18
    3710:	80 95       	com	r24
    3712:	83 23       	and	r24, r19
    3714:	8c 93       	st	X, r24
		*out |= bit;
    3716:	e8 81       	ld	r30, Y
    3718:	e2 2b       	or	r30, r18
    371a:	e8 83       	st	Y, r30
		SREG = oldSREG;
    371c:	9f bf       	out	0x3f, r25	; 63
    371e:	06 c0       	rjmp	.+12     	; 0x372c <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    3720:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3722:	f8 94       	cli
		*reg |= bit;
    3724:	ec 91       	ld	r30, X
    3726:	e2 2b       	or	r30, r18
    3728:	ec 93       	st	X, r30
		SREG = oldSREG;
    372a:	8f bf       	out	0x3f, r24	; 63
	}
}
    372c:	df 91       	pop	r29
    372e:	cf 91       	pop	r28
    3730:	08 95       	ret

00003732 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3732:	1f 93       	push	r17
    3734:	cf 93       	push	r28
    3736:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3738:	28 2f       	mov	r18, r24
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	f9 01       	movw	r30, r18
    373e:	e8 59       	subi	r30, 0x98	; 152
    3740:	fe 4f       	sbci	r31, 0xFE	; 254
    3742:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3744:	f9 01       	movw	r30, r18
    3746:	e4 58       	subi	r30, 0x84	; 132
    3748:	fe 4f       	sbci	r31, 0xFE	; 254
    374a:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    374c:	f9 01       	movw	r30, r18
    374e:	e0 57       	subi	r30, 0x70	; 112
    3750:	fe 4f       	sbci	r31, 0xFE	; 254
    3752:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3754:	cc 23       	and	r28, r28
    3756:	d1 f0       	breq	.+52     	; 0x378c <digitalWrite+0x5a>
    3758:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    375a:	81 11       	cpse	r24, r1
    375c:	0e 94 2b 1b 	call	0x3656	; 0x3656 <turnOffPWM>

	out = portOutputRegister(port);
    3760:	ec 2f       	mov	r30, r28
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	ee 0f       	add	r30, r30
    3766:	ff 1f       	adc	r31, r31
    3768:	e2 55       	subi	r30, 0x52	; 82
    376a:	fe 4f       	sbci	r31, 0xFE	; 254
    376c:	a5 91       	lpm	r26, Z+
    376e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3770:	8f b7       	in	r24, 0x3f	; 63
	cli();
    3772:	f8 94       	cli

	if (val == LOW) {
    3774:	d1 11       	cpse	r29, r1
    3776:	06 c0       	rjmp	.+12     	; 0x3784 <digitalWrite+0x52>
		*out &= ~bit;
    3778:	9c 91       	ld	r25, X
    377a:	e1 2f       	mov	r30, r17
    377c:	e0 95       	com	r30
    377e:	e9 23       	and	r30, r25
    3780:	ec 93       	st	X, r30
    3782:	03 c0       	rjmp	.+6      	; 0x378a <digitalWrite+0x58>
	} else {
		*out |= bit;
    3784:	ec 91       	ld	r30, X
    3786:	e1 2b       	or	r30, r17
    3788:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    378a:	8f bf       	out	0x3f, r24	; 63
}
    378c:	df 91       	pop	r29
    378e:	cf 91       	pop	r28
    3790:	1f 91       	pop	r17
    3792:	08 95       	ret

00003794 <__subsf3>:
    3794:	50 58       	subi	r21, 0x80	; 128

00003796 <__addsf3>:
    3796:	bb 27       	eor	r27, r27
    3798:	aa 27       	eor	r26, r26
    379a:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__addsf3x>
    379e:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__fp_round>
    37a2:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <__fp_pscA>
    37a6:	38 f0       	brcs	.+14     	; 0x37b6 <__addsf3+0x20>
    37a8:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <__fp_pscB>
    37ac:	20 f0       	brcs	.+8      	; 0x37b6 <__addsf3+0x20>
    37ae:	39 f4       	brne	.+14     	; 0x37be <__addsf3+0x28>
    37b0:	9f 3f       	cpi	r25, 0xFF	; 255
    37b2:	19 f4       	brne	.+6      	; 0x37ba <__addsf3+0x24>
    37b4:	26 f4       	brtc	.+8      	; 0x37be <__addsf3+0x28>
    37b6:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <__fp_nan>
    37ba:	0e f4       	brtc	.+2      	; 0x37be <__addsf3+0x28>
    37bc:	e0 95       	com	r30
    37be:	e7 fb       	bst	r30, 7
    37c0:	0c 94 45 1d 	jmp	0x3a8a	; 0x3a8a <__fp_inf>

000037c4 <__addsf3x>:
    37c4:	e9 2f       	mov	r30, r25
    37c6:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fp_split3>
    37ca:	58 f3       	brcs	.-42     	; 0x37a2 <__addsf3+0xc>
    37cc:	ba 17       	cp	r27, r26
    37ce:	62 07       	cpc	r22, r18
    37d0:	73 07       	cpc	r23, r19
    37d2:	84 07       	cpc	r24, r20
    37d4:	95 07       	cpc	r25, r21
    37d6:	20 f0       	brcs	.+8      	; 0x37e0 <__addsf3x+0x1c>
    37d8:	79 f4       	brne	.+30     	; 0x37f8 <__addsf3x+0x34>
    37da:	a6 f5       	brtc	.+104    	; 0x3844 <__addsf3x+0x80>
    37dc:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__fp_zero>
    37e0:	0e f4       	brtc	.+2      	; 0x37e4 <__addsf3x+0x20>
    37e2:	e0 95       	com	r30
    37e4:	0b 2e       	mov	r0, r27
    37e6:	ba 2f       	mov	r27, r26
    37e8:	a0 2d       	mov	r26, r0
    37ea:	0b 01       	movw	r0, r22
    37ec:	b9 01       	movw	r22, r18
    37ee:	90 01       	movw	r18, r0
    37f0:	0c 01       	movw	r0, r24
    37f2:	ca 01       	movw	r24, r20
    37f4:	a0 01       	movw	r20, r0
    37f6:	11 24       	eor	r1, r1
    37f8:	ff 27       	eor	r31, r31
    37fa:	59 1b       	sub	r21, r25
    37fc:	99 f0       	breq	.+38     	; 0x3824 <__addsf3x+0x60>
    37fe:	59 3f       	cpi	r21, 0xF9	; 249
    3800:	50 f4       	brcc	.+20     	; 0x3816 <__addsf3x+0x52>
    3802:	50 3e       	cpi	r21, 0xE0	; 224
    3804:	68 f1       	brcs	.+90     	; 0x3860 <__addsf3x+0x9c>
    3806:	1a 16       	cp	r1, r26
    3808:	f0 40       	sbci	r31, 0x00	; 0
    380a:	a2 2f       	mov	r26, r18
    380c:	23 2f       	mov	r18, r19
    380e:	34 2f       	mov	r19, r20
    3810:	44 27       	eor	r20, r20
    3812:	58 5f       	subi	r21, 0xF8	; 248
    3814:	f3 cf       	rjmp	.-26     	; 0x37fc <__addsf3x+0x38>
    3816:	46 95       	lsr	r20
    3818:	37 95       	ror	r19
    381a:	27 95       	ror	r18
    381c:	a7 95       	ror	r26
    381e:	f0 40       	sbci	r31, 0x00	; 0
    3820:	53 95       	inc	r21
    3822:	c9 f7       	brne	.-14     	; 0x3816 <__addsf3x+0x52>
    3824:	7e f4       	brtc	.+30     	; 0x3844 <__addsf3x+0x80>
    3826:	1f 16       	cp	r1, r31
    3828:	ba 0b       	sbc	r27, r26
    382a:	62 0b       	sbc	r22, r18
    382c:	73 0b       	sbc	r23, r19
    382e:	84 0b       	sbc	r24, r20
    3830:	ba f0       	brmi	.+46     	; 0x3860 <__addsf3x+0x9c>
    3832:	91 50       	subi	r25, 0x01	; 1
    3834:	a1 f0       	breq	.+40     	; 0x385e <__addsf3x+0x9a>
    3836:	ff 0f       	add	r31, r31
    3838:	bb 1f       	adc	r27, r27
    383a:	66 1f       	adc	r22, r22
    383c:	77 1f       	adc	r23, r23
    383e:	88 1f       	adc	r24, r24
    3840:	c2 f7       	brpl	.-16     	; 0x3832 <__addsf3x+0x6e>
    3842:	0e c0       	rjmp	.+28     	; 0x3860 <__addsf3x+0x9c>
    3844:	ba 0f       	add	r27, r26
    3846:	62 1f       	adc	r22, r18
    3848:	73 1f       	adc	r23, r19
    384a:	84 1f       	adc	r24, r20
    384c:	48 f4       	brcc	.+18     	; 0x3860 <__addsf3x+0x9c>
    384e:	87 95       	ror	r24
    3850:	77 95       	ror	r23
    3852:	67 95       	ror	r22
    3854:	b7 95       	ror	r27
    3856:	f7 95       	ror	r31
    3858:	9e 3f       	cpi	r25, 0xFE	; 254
    385a:	08 f0       	brcs	.+2      	; 0x385e <__addsf3x+0x9a>
    385c:	b0 cf       	rjmp	.-160    	; 0x37be <__addsf3+0x28>
    385e:	93 95       	inc	r25
    3860:	88 0f       	add	r24, r24
    3862:	08 f0       	brcs	.+2      	; 0x3866 <__addsf3x+0xa2>
    3864:	99 27       	eor	r25, r25
    3866:	ee 0f       	add	r30, r30
    3868:	97 95       	ror	r25
    386a:	87 95       	ror	r24
    386c:	08 95       	ret

0000386e <__cmpsf2>:
    386e:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__fp_cmp>
    3872:	08 f4       	brcc	.+2      	; 0x3876 <__cmpsf2+0x8>
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	08 95       	ret

00003878 <__divsf3>:
    3878:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <__divsf3x>
    387c:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__fp_round>
    3880:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <__fp_pscB>
    3884:	58 f0       	brcs	.+22     	; 0x389c <__divsf3+0x24>
    3886:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <__fp_pscA>
    388a:	40 f0       	brcs	.+16     	; 0x389c <__divsf3+0x24>
    388c:	29 f4       	brne	.+10     	; 0x3898 <__divsf3+0x20>
    388e:	5f 3f       	cpi	r21, 0xFF	; 255
    3890:	29 f0       	breq	.+10     	; 0x389c <__divsf3+0x24>
    3892:	0c 94 45 1d 	jmp	0x3a8a	; 0x3a8a <__fp_inf>
    3896:	51 11       	cpse	r21, r1
    3898:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <__fp_szero>
    389c:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <__fp_nan>

000038a0 <__divsf3x>:
    38a0:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fp_split3>
    38a4:	68 f3       	brcs	.-38     	; 0x3880 <__divsf3+0x8>

000038a6 <__divsf3_pse>:
    38a6:	99 23       	and	r25, r25
    38a8:	b1 f3       	breq	.-20     	; 0x3896 <__divsf3+0x1e>
    38aa:	55 23       	and	r21, r21
    38ac:	91 f3       	breq	.-28     	; 0x3892 <__divsf3+0x1a>
    38ae:	95 1b       	sub	r25, r21
    38b0:	55 0b       	sbc	r21, r21
    38b2:	bb 27       	eor	r27, r27
    38b4:	aa 27       	eor	r26, r26
    38b6:	62 17       	cp	r22, r18
    38b8:	73 07       	cpc	r23, r19
    38ba:	84 07       	cpc	r24, r20
    38bc:	38 f0       	brcs	.+14     	; 0x38cc <__divsf3_pse+0x26>
    38be:	9f 5f       	subi	r25, 0xFF	; 255
    38c0:	5f 4f       	sbci	r21, 0xFF	; 255
    38c2:	22 0f       	add	r18, r18
    38c4:	33 1f       	adc	r19, r19
    38c6:	44 1f       	adc	r20, r20
    38c8:	aa 1f       	adc	r26, r26
    38ca:	a9 f3       	breq	.-22     	; 0x38b6 <__divsf3_pse+0x10>
    38cc:	35 d0       	rcall	.+106    	; 0x3938 <__divsf3_pse+0x92>
    38ce:	0e 2e       	mov	r0, r30
    38d0:	3a f0       	brmi	.+14     	; 0x38e0 <__divsf3_pse+0x3a>
    38d2:	e0 e8       	ldi	r30, 0x80	; 128
    38d4:	32 d0       	rcall	.+100    	; 0x393a <__divsf3_pse+0x94>
    38d6:	91 50       	subi	r25, 0x01	; 1
    38d8:	50 40       	sbci	r21, 0x00	; 0
    38da:	e6 95       	lsr	r30
    38dc:	00 1c       	adc	r0, r0
    38de:	ca f7       	brpl	.-14     	; 0x38d2 <__divsf3_pse+0x2c>
    38e0:	2b d0       	rcall	.+86     	; 0x3938 <__divsf3_pse+0x92>
    38e2:	fe 2f       	mov	r31, r30
    38e4:	29 d0       	rcall	.+82     	; 0x3938 <__divsf3_pse+0x92>
    38e6:	66 0f       	add	r22, r22
    38e8:	77 1f       	adc	r23, r23
    38ea:	88 1f       	adc	r24, r24
    38ec:	bb 1f       	adc	r27, r27
    38ee:	26 17       	cp	r18, r22
    38f0:	37 07       	cpc	r19, r23
    38f2:	48 07       	cpc	r20, r24
    38f4:	ab 07       	cpc	r26, r27
    38f6:	b0 e8       	ldi	r27, 0x80	; 128
    38f8:	09 f0       	breq	.+2      	; 0x38fc <__divsf3_pse+0x56>
    38fa:	bb 0b       	sbc	r27, r27
    38fc:	80 2d       	mov	r24, r0
    38fe:	bf 01       	movw	r22, r30
    3900:	ff 27       	eor	r31, r31
    3902:	93 58       	subi	r25, 0x83	; 131
    3904:	5f 4f       	sbci	r21, 0xFF	; 255
    3906:	3a f0       	brmi	.+14     	; 0x3916 <__divsf3_pse+0x70>
    3908:	9e 3f       	cpi	r25, 0xFE	; 254
    390a:	51 05       	cpc	r21, r1
    390c:	78 f0       	brcs	.+30     	; 0x392c <__divsf3_pse+0x86>
    390e:	0c 94 45 1d 	jmp	0x3a8a	; 0x3a8a <__fp_inf>
    3912:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <__fp_szero>
    3916:	5f 3f       	cpi	r21, 0xFF	; 255
    3918:	e4 f3       	brlt	.-8      	; 0x3912 <__divsf3_pse+0x6c>
    391a:	98 3e       	cpi	r25, 0xE8	; 232
    391c:	d4 f3       	brlt	.-12     	; 0x3912 <__divsf3_pse+0x6c>
    391e:	86 95       	lsr	r24
    3920:	77 95       	ror	r23
    3922:	67 95       	ror	r22
    3924:	b7 95       	ror	r27
    3926:	f7 95       	ror	r31
    3928:	9f 5f       	subi	r25, 0xFF	; 255
    392a:	c9 f7       	brne	.-14     	; 0x391e <__divsf3_pse+0x78>
    392c:	88 0f       	add	r24, r24
    392e:	91 1d       	adc	r25, r1
    3930:	96 95       	lsr	r25
    3932:	87 95       	ror	r24
    3934:	97 f9       	bld	r25, 7
    3936:	08 95       	ret
    3938:	e1 e0       	ldi	r30, 0x01	; 1
    393a:	66 0f       	add	r22, r22
    393c:	77 1f       	adc	r23, r23
    393e:	88 1f       	adc	r24, r24
    3940:	bb 1f       	adc	r27, r27
    3942:	62 17       	cp	r22, r18
    3944:	73 07       	cpc	r23, r19
    3946:	84 07       	cpc	r24, r20
    3948:	ba 07       	cpc	r27, r26
    394a:	20 f0       	brcs	.+8      	; 0x3954 <__divsf3_pse+0xae>
    394c:	62 1b       	sub	r22, r18
    394e:	73 0b       	sbc	r23, r19
    3950:	84 0b       	sbc	r24, r20
    3952:	ba 0b       	sbc	r27, r26
    3954:	ee 1f       	adc	r30, r30
    3956:	88 f7       	brcc	.-30     	; 0x393a <__divsf3_pse+0x94>
    3958:	e0 95       	com	r30
    395a:	08 95       	ret

0000395c <__fixsfsi>:
    395c:	0e 94 b5 1c 	call	0x396a	; 0x396a <__fixunssfsi>
    3960:	68 94       	set
    3962:	b1 11       	cpse	r27, r1
    3964:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <__fp_szero>
    3968:	08 95       	ret

0000396a <__fixunssfsi>:
    396a:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__fp_splitA>
    396e:	88 f0       	brcs	.+34     	; 0x3992 <__fixunssfsi+0x28>
    3970:	9f 57       	subi	r25, 0x7F	; 127
    3972:	98 f0       	brcs	.+38     	; 0x399a <__fixunssfsi+0x30>
    3974:	b9 2f       	mov	r27, r25
    3976:	99 27       	eor	r25, r25
    3978:	b7 51       	subi	r27, 0x17	; 23
    397a:	b0 f0       	brcs	.+44     	; 0x39a8 <__fixunssfsi+0x3e>
    397c:	e1 f0       	breq	.+56     	; 0x39b6 <__fixunssfsi+0x4c>
    397e:	66 0f       	add	r22, r22
    3980:	77 1f       	adc	r23, r23
    3982:	88 1f       	adc	r24, r24
    3984:	99 1f       	adc	r25, r25
    3986:	1a f0       	brmi	.+6      	; 0x398e <__fixunssfsi+0x24>
    3988:	ba 95       	dec	r27
    398a:	c9 f7       	brne	.-14     	; 0x397e <__fixunssfsi+0x14>
    398c:	14 c0       	rjmp	.+40     	; 0x39b6 <__fixunssfsi+0x4c>
    398e:	b1 30       	cpi	r27, 0x01	; 1
    3990:	91 f0       	breq	.+36     	; 0x39b6 <__fixunssfsi+0x4c>
    3992:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__fp_zero>
    3996:	b1 e0       	ldi	r27, 0x01	; 1
    3998:	08 95       	ret
    399a:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__fp_zero>
    399e:	67 2f       	mov	r22, r23
    39a0:	78 2f       	mov	r23, r24
    39a2:	88 27       	eor	r24, r24
    39a4:	b8 5f       	subi	r27, 0xF8	; 248
    39a6:	39 f0       	breq	.+14     	; 0x39b6 <__fixunssfsi+0x4c>
    39a8:	b9 3f       	cpi	r27, 0xF9	; 249
    39aa:	cc f3       	brlt	.-14     	; 0x399e <__fixunssfsi+0x34>
    39ac:	86 95       	lsr	r24
    39ae:	77 95       	ror	r23
    39b0:	67 95       	ror	r22
    39b2:	b3 95       	inc	r27
    39b4:	d9 f7       	brne	.-10     	; 0x39ac <__fixunssfsi+0x42>
    39b6:	3e f4       	brtc	.+14     	; 0x39c6 <__fixunssfsi+0x5c>
    39b8:	90 95       	com	r25
    39ba:	80 95       	com	r24
    39bc:	70 95       	com	r23
    39be:	61 95       	neg	r22
    39c0:	7f 4f       	sbci	r23, 0xFF	; 255
    39c2:	8f 4f       	sbci	r24, 0xFF	; 255
    39c4:	9f 4f       	sbci	r25, 0xFF	; 255
    39c6:	08 95       	ret

000039c8 <__floatunsisf>:
    39c8:	e8 94       	clt
    39ca:	09 c0       	rjmp	.+18     	; 0x39de <__floatsisf+0x12>

000039cc <__floatsisf>:
    39cc:	97 fb       	bst	r25, 7
    39ce:	3e f4       	brtc	.+14     	; 0x39de <__floatsisf+0x12>
    39d0:	90 95       	com	r25
    39d2:	80 95       	com	r24
    39d4:	70 95       	com	r23
    39d6:	61 95       	neg	r22
    39d8:	7f 4f       	sbci	r23, 0xFF	; 255
    39da:	8f 4f       	sbci	r24, 0xFF	; 255
    39dc:	9f 4f       	sbci	r25, 0xFF	; 255
    39de:	99 23       	and	r25, r25
    39e0:	a9 f0       	breq	.+42     	; 0x3a0c <__floatsisf+0x40>
    39e2:	f9 2f       	mov	r31, r25
    39e4:	96 e9       	ldi	r25, 0x96	; 150
    39e6:	bb 27       	eor	r27, r27
    39e8:	93 95       	inc	r25
    39ea:	f6 95       	lsr	r31
    39ec:	87 95       	ror	r24
    39ee:	77 95       	ror	r23
    39f0:	67 95       	ror	r22
    39f2:	b7 95       	ror	r27
    39f4:	f1 11       	cpse	r31, r1
    39f6:	f8 cf       	rjmp	.-16     	; 0x39e8 <__floatsisf+0x1c>
    39f8:	fa f4       	brpl	.+62     	; 0x3a38 <__floatsisf+0x6c>
    39fa:	bb 0f       	add	r27, r27
    39fc:	11 f4       	brne	.+4      	; 0x3a02 <__floatsisf+0x36>
    39fe:	60 ff       	sbrs	r22, 0
    3a00:	1b c0       	rjmp	.+54     	; 0x3a38 <__floatsisf+0x6c>
    3a02:	6f 5f       	subi	r22, 0xFF	; 255
    3a04:	7f 4f       	sbci	r23, 0xFF	; 255
    3a06:	8f 4f       	sbci	r24, 0xFF	; 255
    3a08:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0a:	16 c0       	rjmp	.+44     	; 0x3a38 <__floatsisf+0x6c>
    3a0c:	88 23       	and	r24, r24
    3a0e:	11 f0       	breq	.+4      	; 0x3a14 <__floatsisf+0x48>
    3a10:	96 e9       	ldi	r25, 0x96	; 150
    3a12:	11 c0       	rjmp	.+34     	; 0x3a36 <__floatsisf+0x6a>
    3a14:	77 23       	and	r23, r23
    3a16:	21 f0       	breq	.+8      	; 0x3a20 <__floatsisf+0x54>
    3a18:	9e e8       	ldi	r25, 0x8E	; 142
    3a1a:	87 2f       	mov	r24, r23
    3a1c:	76 2f       	mov	r23, r22
    3a1e:	05 c0       	rjmp	.+10     	; 0x3a2a <__floatsisf+0x5e>
    3a20:	66 23       	and	r22, r22
    3a22:	71 f0       	breq	.+28     	; 0x3a40 <__floatsisf+0x74>
    3a24:	96 e8       	ldi	r25, 0x86	; 134
    3a26:	86 2f       	mov	r24, r22
    3a28:	70 e0       	ldi	r23, 0x00	; 0
    3a2a:	60 e0       	ldi	r22, 0x00	; 0
    3a2c:	2a f0       	brmi	.+10     	; 0x3a38 <__floatsisf+0x6c>
    3a2e:	9a 95       	dec	r25
    3a30:	66 0f       	add	r22, r22
    3a32:	77 1f       	adc	r23, r23
    3a34:	88 1f       	adc	r24, r24
    3a36:	da f7       	brpl	.-10     	; 0x3a2e <__floatsisf+0x62>
    3a38:	88 0f       	add	r24, r24
    3a3a:	96 95       	lsr	r25
    3a3c:	87 95       	ror	r24
    3a3e:	97 f9       	bld	r25, 7
    3a40:	08 95       	ret

00003a42 <__fp_cmp>:
    3a42:	99 0f       	add	r25, r25
    3a44:	00 08       	sbc	r0, r0
    3a46:	55 0f       	add	r21, r21
    3a48:	aa 0b       	sbc	r26, r26
    3a4a:	e0 e8       	ldi	r30, 0x80	; 128
    3a4c:	fe ef       	ldi	r31, 0xFE	; 254
    3a4e:	16 16       	cp	r1, r22
    3a50:	17 06       	cpc	r1, r23
    3a52:	e8 07       	cpc	r30, r24
    3a54:	f9 07       	cpc	r31, r25
    3a56:	c0 f0       	brcs	.+48     	; 0x3a88 <__fp_cmp+0x46>
    3a58:	12 16       	cp	r1, r18
    3a5a:	13 06       	cpc	r1, r19
    3a5c:	e4 07       	cpc	r30, r20
    3a5e:	f5 07       	cpc	r31, r21
    3a60:	98 f0       	brcs	.+38     	; 0x3a88 <__fp_cmp+0x46>
    3a62:	62 1b       	sub	r22, r18
    3a64:	73 0b       	sbc	r23, r19
    3a66:	84 0b       	sbc	r24, r20
    3a68:	95 0b       	sbc	r25, r21
    3a6a:	39 f4       	brne	.+14     	; 0x3a7a <__fp_cmp+0x38>
    3a6c:	0a 26       	eor	r0, r26
    3a6e:	61 f0       	breq	.+24     	; 0x3a88 <__fp_cmp+0x46>
    3a70:	23 2b       	or	r18, r19
    3a72:	24 2b       	or	r18, r20
    3a74:	25 2b       	or	r18, r21
    3a76:	21 f4       	brne	.+8      	; 0x3a80 <__fp_cmp+0x3e>
    3a78:	08 95       	ret
    3a7a:	0a 26       	eor	r0, r26
    3a7c:	09 f4       	brne	.+2      	; 0x3a80 <__fp_cmp+0x3e>
    3a7e:	a1 40       	sbci	r26, 0x01	; 1
    3a80:	a6 95       	lsr	r26
    3a82:	8f ef       	ldi	r24, 0xFF	; 255
    3a84:	81 1d       	adc	r24, r1
    3a86:	81 1d       	adc	r24, r1
    3a88:	08 95       	ret

00003a8a <__fp_inf>:
    3a8a:	97 f9       	bld	r25, 7
    3a8c:	9f 67       	ori	r25, 0x7F	; 127
    3a8e:	80 e8       	ldi	r24, 0x80	; 128
    3a90:	70 e0       	ldi	r23, 0x00	; 0
    3a92:	60 e0       	ldi	r22, 0x00	; 0
    3a94:	08 95       	ret

00003a96 <__fp_nan>:
    3a96:	9f ef       	ldi	r25, 0xFF	; 255
    3a98:	80 ec       	ldi	r24, 0xC0	; 192
    3a9a:	08 95       	ret

00003a9c <__fp_pscA>:
    3a9c:	00 24       	eor	r0, r0
    3a9e:	0a 94       	dec	r0
    3aa0:	16 16       	cp	r1, r22
    3aa2:	17 06       	cpc	r1, r23
    3aa4:	18 06       	cpc	r1, r24
    3aa6:	09 06       	cpc	r0, r25
    3aa8:	08 95       	ret

00003aaa <__fp_pscB>:
    3aaa:	00 24       	eor	r0, r0
    3aac:	0a 94       	dec	r0
    3aae:	12 16       	cp	r1, r18
    3ab0:	13 06       	cpc	r1, r19
    3ab2:	14 06       	cpc	r1, r20
    3ab4:	05 06       	cpc	r0, r21
    3ab6:	08 95       	ret

00003ab8 <__fp_round>:
    3ab8:	09 2e       	mov	r0, r25
    3aba:	03 94       	inc	r0
    3abc:	00 0c       	add	r0, r0
    3abe:	11 f4       	brne	.+4      	; 0x3ac4 <__fp_round+0xc>
    3ac0:	88 23       	and	r24, r24
    3ac2:	52 f0       	brmi	.+20     	; 0x3ad8 <__fp_round+0x20>
    3ac4:	bb 0f       	add	r27, r27
    3ac6:	40 f4       	brcc	.+16     	; 0x3ad8 <__fp_round+0x20>
    3ac8:	bf 2b       	or	r27, r31
    3aca:	11 f4       	brne	.+4      	; 0x3ad0 <__fp_round+0x18>
    3acc:	60 ff       	sbrs	r22, 0
    3ace:	04 c0       	rjmp	.+8      	; 0x3ad8 <__fp_round+0x20>
    3ad0:	6f 5f       	subi	r22, 0xFF	; 255
    3ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    3ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad8:	08 95       	ret

00003ada <__fp_split3>:
    3ada:	57 fd       	sbrc	r21, 7
    3adc:	90 58       	subi	r25, 0x80	; 128
    3ade:	44 0f       	add	r20, r20
    3ae0:	55 1f       	adc	r21, r21
    3ae2:	59 f0       	breq	.+22     	; 0x3afa <__fp_splitA+0x10>
    3ae4:	5f 3f       	cpi	r21, 0xFF	; 255
    3ae6:	71 f0       	breq	.+28     	; 0x3b04 <__fp_splitA+0x1a>
    3ae8:	47 95       	ror	r20

00003aea <__fp_splitA>:
    3aea:	88 0f       	add	r24, r24
    3aec:	97 fb       	bst	r25, 7
    3aee:	99 1f       	adc	r25, r25
    3af0:	61 f0       	breq	.+24     	; 0x3b0a <__fp_splitA+0x20>
    3af2:	9f 3f       	cpi	r25, 0xFF	; 255
    3af4:	79 f0       	breq	.+30     	; 0x3b14 <__fp_splitA+0x2a>
    3af6:	87 95       	ror	r24
    3af8:	08 95       	ret
    3afa:	12 16       	cp	r1, r18
    3afc:	13 06       	cpc	r1, r19
    3afe:	14 06       	cpc	r1, r20
    3b00:	55 1f       	adc	r21, r21
    3b02:	f2 cf       	rjmp	.-28     	; 0x3ae8 <__fp_split3+0xe>
    3b04:	46 95       	lsr	r20
    3b06:	f1 df       	rcall	.-30     	; 0x3aea <__fp_splitA>
    3b08:	08 c0       	rjmp	.+16     	; 0x3b1a <__fp_splitA+0x30>
    3b0a:	16 16       	cp	r1, r22
    3b0c:	17 06       	cpc	r1, r23
    3b0e:	18 06       	cpc	r1, r24
    3b10:	99 1f       	adc	r25, r25
    3b12:	f1 cf       	rjmp	.-30     	; 0x3af6 <__fp_splitA+0xc>
    3b14:	86 95       	lsr	r24
    3b16:	71 05       	cpc	r23, r1
    3b18:	61 05       	cpc	r22, r1
    3b1a:	08 94       	sec
    3b1c:	08 95       	ret

00003b1e <__fp_zero>:
    3b1e:	e8 94       	clt

00003b20 <__fp_szero>:
    3b20:	bb 27       	eor	r27, r27
    3b22:	66 27       	eor	r22, r22
    3b24:	77 27       	eor	r23, r23
    3b26:	cb 01       	movw	r24, r22
    3b28:	97 f9       	bld	r25, 7
    3b2a:	08 95       	ret

00003b2c <__gesf2>:
    3b2c:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__fp_cmp>
    3b30:	08 f4       	brcc	.+2      	; 0x3b34 <__gesf2+0x8>
    3b32:	8f ef       	ldi	r24, 0xFF	; 255
    3b34:	08 95       	ret

00003b36 <__mulsf3>:
    3b36:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__mulsf3x>
    3b3a:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__fp_round>
    3b3e:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <__fp_pscA>
    3b42:	38 f0       	brcs	.+14     	; 0x3b52 <__mulsf3+0x1c>
    3b44:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <__fp_pscB>
    3b48:	20 f0       	brcs	.+8      	; 0x3b52 <__mulsf3+0x1c>
    3b4a:	95 23       	and	r25, r21
    3b4c:	11 f0       	breq	.+4      	; 0x3b52 <__mulsf3+0x1c>
    3b4e:	0c 94 45 1d 	jmp	0x3a8a	; 0x3a8a <__fp_inf>
    3b52:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <__fp_nan>
    3b56:	11 24       	eor	r1, r1
    3b58:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <__fp_szero>

00003b5c <__mulsf3x>:
    3b5c:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__fp_split3>
    3b60:	70 f3       	brcs	.-36     	; 0x3b3e <__mulsf3+0x8>

00003b62 <__mulsf3_pse>:
    3b62:	95 9f       	mul	r25, r21
    3b64:	c1 f3       	breq	.-16     	; 0x3b56 <__mulsf3+0x20>
    3b66:	95 0f       	add	r25, r21
    3b68:	50 e0       	ldi	r21, 0x00	; 0
    3b6a:	55 1f       	adc	r21, r21
    3b6c:	62 9f       	mul	r22, r18
    3b6e:	f0 01       	movw	r30, r0
    3b70:	72 9f       	mul	r23, r18
    3b72:	bb 27       	eor	r27, r27
    3b74:	f0 0d       	add	r31, r0
    3b76:	b1 1d       	adc	r27, r1
    3b78:	63 9f       	mul	r22, r19
    3b7a:	aa 27       	eor	r26, r26
    3b7c:	f0 0d       	add	r31, r0
    3b7e:	b1 1d       	adc	r27, r1
    3b80:	aa 1f       	adc	r26, r26
    3b82:	64 9f       	mul	r22, r20
    3b84:	66 27       	eor	r22, r22
    3b86:	b0 0d       	add	r27, r0
    3b88:	a1 1d       	adc	r26, r1
    3b8a:	66 1f       	adc	r22, r22
    3b8c:	82 9f       	mul	r24, r18
    3b8e:	22 27       	eor	r18, r18
    3b90:	b0 0d       	add	r27, r0
    3b92:	a1 1d       	adc	r26, r1
    3b94:	62 1f       	adc	r22, r18
    3b96:	73 9f       	mul	r23, r19
    3b98:	b0 0d       	add	r27, r0
    3b9a:	a1 1d       	adc	r26, r1
    3b9c:	62 1f       	adc	r22, r18
    3b9e:	83 9f       	mul	r24, r19
    3ba0:	a0 0d       	add	r26, r0
    3ba2:	61 1d       	adc	r22, r1
    3ba4:	22 1f       	adc	r18, r18
    3ba6:	74 9f       	mul	r23, r20
    3ba8:	33 27       	eor	r19, r19
    3baa:	a0 0d       	add	r26, r0
    3bac:	61 1d       	adc	r22, r1
    3bae:	23 1f       	adc	r18, r19
    3bb0:	84 9f       	mul	r24, r20
    3bb2:	60 0d       	add	r22, r0
    3bb4:	21 1d       	adc	r18, r1
    3bb6:	82 2f       	mov	r24, r18
    3bb8:	76 2f       	mov	r23, r22
    3bba:	6a 2f       	mov	r22, r26
    3bbc:	11 24       	eor	r1, r1
    3bbe:	9f 57       	subi	r25, 0x7F	; 127
    3bc0:	50 40       	sbci	r21, 0x00	; 0
    3bc2:	9a f0       	brmi	.+38     	; 0x3bea <__mulsf3_pse+0x88>
    3bc4:	f1 f0       	breq	.+60     	; 0x3c02 <__mulsf3_pse+0xa0>
    3bc6:	88 23       	and	r24, r24
    3bc8:	4a f0       	brmi	.+18     	; 0x3bdc <__mulsf3_pse+0x7a>
    3bca:	ee 0f       	add	r30, r30
    3bcc:	ff 1f       	adc	r31, r31
    3bce:	bb 1f       	adc	r27, r27
    3bd0:	66 1f       	adc	r22, r22
    3bd2:	77 1f       	adc	r23, r23
    3bd4:	88 1f       	adc	r24, r24
    3bd6:	91 50       	subi	r25, 0x01	; 1
    3bd8:	50 40       	sbci	r21, 0x00	; 0
    3bda:	a9 f7       	brne	.-22     	; 0x3bc6 <__mulsf3_pse+0x64>
    3bdc:	9e 3f       	cpi	r25, 0xFE	; 254
    3bde:	51 05       	cpc	r21, r1
    3be0:	80 f0       	brcs	.+32     	; 0x3c02 <__mulsf3_pse+0xa0>
    3be2:	0c 94 45 1d 	jmp	0x3a8a	; 0x3a8a <__fp_inf>
    3be6:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <__fp_szero>
    3bea:	5f 3f       	cpi	r21, 0xFF	; 255
    3bec:	e4 f3       	brlt	.-8      	; 0x3be6 <__mulsf3_pse+0x84>
    3bee:	98 3e       	cpi	r25, 0xE8	; 232
    3bf0:	d4 f3       	brlt	.-12     	; 0x3be6 <__mulsf3_pse+0x84>
    3bf2:	86 95       	lsr	r24
    3bf4:	77 95       	ror	r23
    3bf6:	67 95       	ror	r22
    3bf8:	b7 95       	ror	r27
    3bfa:	f7 95       	ror	r31
    3bfc:	e7 95       	ror	r30
    3bfe:	9f 5f       	subi	r25, 0xFF	; 255
    3c00:	c1 f7       	brne	.-16     	; 0x3bf2 <__mulsf3_pse+0x90>
    3c02:	fe 2b       	or	r31, r30
    3c04:	88 0f       	add	r24, r24
    3c06:	91 1d       	adc	r25, r1
    3c08:	96 95       	lsr	r25
    3c0a:	87 95       	ror	r24
    3c0c:	97 f9       	bld	r25, 7
    3c0e:	08 95       	ret

00003c10 <__unordsf2>:
    3c10:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__fp_cmp>
    3c14:	88 0b       	sbc	r24, r24
    3c16:	99 0b       	sbc	r25, r25
    3c18:	08 95       	ret

00003c1a <__udivmodsi4>:
    3c1a:	a1 e2       	ldi	r26, 0x21	; 33
    3c1c:	1a 2e       	mov	r1, r26
    3c1e:	aa 1b       	sub	r26, r26
    3c20:	bb 1b       	sub	r27, r27
    3c22:	fd 01       	movw	r30, r26
    3c24:	0d c0       	rjmp	.+26     	; 0x3c40 <__udivmodsi4_ep>

00003c26 <__udivmodsi4_loop>:
    3c26:	aa 1f       	adc	r26, r26
    3c28:	bb 1f       	adc	r27, r27
    3c2a:	ee 1f       	adc	r30, r30
    3c2c:	ff 1f       	adc	r31, r31
    3c2e:	a2 17       	cp	r26, r18
    3c30:	b3 07       	cpc	r27, r19
    3c32:	e4 07       	cpc	r30, r20
    3c34:	f5 07       	cpc	r31, r21
    3c36:	20 f0       	brcs	.+8      	; 0x3c40 <__udivmodsi4_ep>
    3c38:	a2 1b       	sub	r26, r18
    3c3a:	b3 0b       	sbc	r27, r19
    3c3c:	e4 0b       	sbc	r30, r20
    3c3e:	f5 0b       	sbc	r31, r21

00003c40 <__udivmodsi4_ep>:
    3c40:	66 1f       	adc	r22, r22
    3c42:	77 1f       	adc	r23, r23
    3c44:	88 1f       	adc	r24, r24
    3c46:	99 1f       	adc	r25, r25
    3c48:	1a 94       	dec	r1
    3c4a:	69 f7       	brne	.-38     	; 0x3c26 <__udivmodsi4_loop>
    3c4c:	60 95       	com	r22
    3c4e:	70 95       	com	r23
    3c50:	80 95       	com	r24
    3c52:	90 95       	com	r25
    3c54:	9b 01       	movw	r18, r22
    3c56:	ac 01       	movw	r20, r24
    3c58:	bd 01       	movw	r22, r26
    3c5a:	cf 01       	movw	r24, r30
    3c5c:	08 95       	ret

00003c5e <__divmodsi4>:
    3c5e:	05 2e       	mov	r0, r21
    3c60:	97 fb       	bst	r25, 7
    3c62:	1e f4       	brtc	.+6      	; 0x3c6a <__divmodsi4+0xc>
    3c64:	00 94       	com	r0
    3c66:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <__negsi2>
    3c6a:	57 fd       	sbrc	r21, 7
    3c6c:	07 d0       	rcall	.+14     	; 0x3c7c <__divmodsi4_neg2>
    3c6e:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodsi4>
    3c72:	07 fc       	sbrc	r0, 7
    3c74:	03 d0       	rcall	.+6      	; 0x3c7c <__divmodsi4_neg2>
    3c76:	4e f4       	brtc	.+18     	; 0x3c8a <__divmodsi4_exit>
    3c78:	0c 94 46 1e 	jmp	0x3c8c	; 0x3c8c <__negsi2>

00003c7c <__divmodsi4_neg2>:
    3c7c:	50 95       	com	r21
    3c7e:	40 95       	com	r20
    3c80:	30 95       	com	r19
    3c82:	21 95       	neg	r18
    3c84:	3f 4f       	sbci	r19, 0xFF	; 255
    3c86:	4f 4f       	sbci	r20, 0xFF	; 255
    3c88:	5f 4f       	sbci	r21, 0xFF	; 255

00003c8a <__divmodsi4_exit>:
    3c8a:	08 95       	ret

00003c8c <__negsi2>:
    3c8c:	90 95       	com	r25
    3c8e:	80 95       	com	r24
    3c90:	70 95       	com	r23
    3c92:	61 95       	neg	r22
    3c94:	7f 4f       	sbci	r23, 0xFF	; 255
    3c96:	8f 4f       	sbci	r24, 0xFF	; 255
    3c98:	9f 4f       	sbci	r25, 0xFF	; 255
    3c9a:	08 95       	ret

00003c9c <__tablejump2__>:
    3c9c:	ee 0f       	add	r30, r30
    3c9e:	ff 1f       	adc	r31, r31
    3ca0:	05 90       	lpm	r0, Z+
    3ca2:	f4 91       	lpm	r31, Z
    3ca4:	e0 2d       	mov	r30, r0
    3ca6:	09 94       	ijmp

00003ca8 <sprintf>:
    3ca8:	ae e0       	ldi	r26, 0x0E	; 14
    3caa:	b0 e0       	ldi	r27, 0x00	; 0
    3cac:	ea e5       	ldi	r30, 0x5A	; 90
    3cae:	fe e1       	ldi	r31, 0x1E	; 30
    3cb0:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__prologue_saves__+0x1c>
    3cb4:	0d 89       	ldd	r16, Y+21	; 0x15
    3cb6:	1e 89       	ldd	r17, Y+22	; 0x16
    3cb8:	86 e0       	ldi	r24, 0x06	; 6
    3cba:	8c 83       	std	Y+4, r24	; 0x04
    3cbc:	1a 83       	std	Y+2, r17	; 0x02
    3cbe:	09 83       	std	Y+1, r16	; 0x01
    3cc0:	8f ef       	ldi	r24, 0xFF	; 255
    3cc2:	9f e7       	ldi	r25, 0x7F	; 127
    3cc4:	9e 83       	std	Y+6, r25	; 0x06
    3cc6:	8d 83       	std	Y+5, r24	; 0x05
    3cc8:	ae 01       	movw	r20, r28
    3cca:	47 5e       	subi	r20, 0xE7	; 231
    3ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    3cce:	6f 89       	ldd	r22, Y+23	; 0x17
    3cd0:	78 8d       	ldd	r23, Y+24	; 0x18
    3cd2:	ce 01       	movw	r24, r28
    3cd4:	01 96       	adiw	r24, 0x01	; 1
    3cd6:	0e 94 77 1e 	call	0x3cee	; 0x3cee <vfprintf>
    3cda:	2f 81       	ldd	r18, Y+7	; 0x07
    3cdc:	38 85       	ldd	r19, Y+8	; 0x08
    3cde:	f8 01       	movw	r30, r16
    3ce0:	e2 0f       	add	r30, r18
    3ce2:	f3 1f       	adc	r31, r19
    3ce4:	10 82       	st	Z, r1
    3ce6:	2e 96       	adiw	r28, 0x0e	; 14
    3ce8:	e4 e0       	ldi	r30, 0x04	; 4
    3cea:	0c 94 1f 21 	jmp	0x423e	; 0x423e <__epilogue_restores__+0x1c>

00003cee <vfprintf>:
    3cee:	ac e0       	ldi	r26, 0x0C	; 12
    3cf0:	b0 e0       	ldi	r27, 0x00	; 0
    3cf2:	ed e7       	ldi	r30, 0x7D	; 125
    3cf4:	fe e1       	ldi	r31, 0x1E	; 30
    3cf6:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <__prologue_saves__>
    3cfa:	7c 01       	movw	r14, r24
    3cfc:	6b 01       	movw	r12, r22
    3cfe:	8a 01       	movw	r16, r20
    3d00:	fc 01       	movw	r30, r24
    3d02:	17 82       	std	Z+7, r1	; 0x07
    3d04:	16 82       	std	Z+6, r1	; 0x06
    3d06:	83 81       	ldd	r24, Z+3	; 0x03
    3d08:	81 ff       	sbrs	r24, 1
    3d0a:	bd c1       	rjmp	.+890    	; 0x4086 <vfprintf+0x398>
    3d0c:	ce 01       	movw	r24, r28
    3d0e:	01 96       	adiw	r24, 0x01	; 1
    3d10:	4c 01       	movw	r8, r24
    3d12:	f7 01       	movw	r30, r14
    3d14:	93 81       	ldd	r25, Z+3	; 0x03
    3d16:	f6 01       	movw	r30, r12
    3d18:	93 fd       	sbrc	r25, 3
    3d1a:	85 91       	lpm	r24, Z+
    3d1c:	93 ff       	sbrs	r25, 3
    3d1e:	81 91       	ld	r24, Z+
    3d20:	6f 01       	movw	r12, r30
    3d22:	88 23       	and	r24, r24
    3d24:	09 f4       	brne	.+2      	; 0x3d28 <vfprintf+0x3a>
    3d26:	ab c1       	rjmp	.+854    	; 0x407e <vfprintf+0x390>
    3d28:	85 32       	cpi	r24, 0x25	; 37
    3d2a:	39 f4       	brne	.+14     	; 0x3d3a <vfprintf+0x4c>
    3d2c:	93 fd       	sbrc	r25, 3
    3d2e:	85 91       	lpm	r24, Z+
    3d30:	93 ff       	sbrs	r25, 3
    3d32:	81 91       	ld	r24, Z+
    3d34:	6f 01       	movw	r12, r30
    3d36:	85 32       	cpi	r24, 0x25	; 37
    3d38:	29 f4       	brne	.+10     	; 0x3d44 <vfprintf+0x56>
    3d3a:	b7 01       	movw	r22, r14
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	0e 94 5f 20 	call	0x40be	; 0x40be <fputc>
    3d42:	e7 cf       	rjmp	.-50     	; 0x3d12 <vfprintf+0x24>
    3d44:	51 2c       	mov	r5, r1
    3d46:	31 2c       	mov	r3, r1
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	20 32       	cpi	r18, 0x20	; 32
    3d4c:	a0 f4       	brcc	.+40     	; 0x3d76 <vfprintf+0x88>
    3d4e:	8b 32       	cpi	r24, 0x2B	; 43
    3d50:	69 f0       	breq	.+26     	; 0x3d6c <vfprintf+0x7e>
    3d52:	30 f4       	brcc	.+12     	; 0x3d60 <vfprintf+0x72>
    3d54:	80 32       	cpi	r24, 0x20	; 32
    3d56:	59 f0       	breq	.+22     	; 0x3d6e <vfprintf+0x80>
    3d58:	83 32       	cpi	r24, 0x23	; 35
    3d5a:	69 f4       	brne	.+26     	; 0x3d76 <vfprintf+0x88>
    3d5c:	20 61       	ori	r18, 0x10	; 16
    3d5e:	2c c0       	rjmp	.+88     	; 0x3db8 <vfprintf+0xca>
    3d60:	8d 32       	cpi	r24, 0x2D	; 45
    3d62:	39 f0       	breq	.+14     	; 0x3d72 <vfprintf+0x84>
    3d64:	80 33       	cpi	r24, 0x30	; 48
    3d66:	39 f4       	brne	.+14     	; 0x3d76 <vfprintf+0x88>
    3d68:	21 60       	ori	r18, 0x01	; 1
    3d6a:	26 c0       	rjmp	.+76     	; 0x3db8 <vfprintf+0xca>
    3d6c:	22 60       	ori	r18, 0x02	; 2
    3d6e:	24 60       	ori	r18, 0x04	; 4
    3d70:	23 c0       	rjmp	.+70     	; 0x3db8 <vfprintf+0xca>
    3d72:	28 60       	ori	r18, 0x08	; 8
    3d74:	21 c0       	rjmp	.+66     	; 0x3db8 <vfprintf+0xca>
    3d76:	27 fd       	sbrc	r18, 7
    3d78:	27 c0       	rjmp	.+78     	; 0x3dc8 <vfprintf+0xda>
    3d7a:	30 ed       	ldi	r19, 0xD0	; 208
    3d7c:	38 0f       	add	r19, r24
    3d7e:	3a 30       	cpi	r19, 0x0A	; 10
    3d80:	78 f4       	brcc	.+30     	; 0x3da0 <vfprintf+0xb2>
    3d82:	26 ff       	sbrs	r18, 6
    3d84:	06 c0       	rjmp	.+12     	; 0x3d92 <vfprintf+0xa4>
    3d86:	fa e0       	ldi	r31, 0x0A	; 10
    3d88:	5f 9e       	mul	r5, r31
    3d8a:	30 0d       	add	r19, r0
    3d8c:	11 24       	eor	r1, r1
    3d8e:	53 2e       	mov	r5, r19
    3d90:	13 c0       	rjmp	.+38     	; 0x3db8 <vfprintf+0xca>
    3d92:	8a e0       	ldi	r24, 0x0A	; 10
    3d94:	38 9e       	mul	r3, r24
    3d96:	30 0d       	add	r19, r0
    3d98:	11 24       	eor	r1, r1
    3d9a:	33 2e       	mov	r3, r19
    3d9c:	20 62       	ori	r18, 0x20	; 32
    3d9e:	0c c0       	rjmp	.+24     	; 0x3db8 <vfprintf+0xca>
    3da0:	8e 32       	cpi	r24, 0x2E	; 46
    3da2:	21 f4       	brne	.+8      	; 0x3dac <vfprintf+0xbe>
    3da4:	26 fd       	sbrc	r18, 6
    3da6:	6b c1       	rjmp	.+726    	; 0x407e <vfprintf+0x390>
    3da8:	20 64       	ori	r18, 0x40	; 64
    3daa:	06 c0       	rjmp	.+12     	; 0x3db8 <vfprintf+0xca>
    3dac:	8c 36       	cpi	r24, 0x6C	; 108
    3dae:	11 f4       	brne	.+4      	; 0x3db4 <vfprintf+0xc6>
    3db0:	20 68       	ori	r18, 0x80	; 128
    3db2:	02 c0       	rjmp	.+4      	; 0x3db8 <vfprintf+0xca>
    3db4:	88 36       	cpi	r24, 0x68	; 104
    3db6:	41 f4       	brne	.+16     	; 0x3dc8 <vfprintf+0xda>
    3db8:	f6 01       	movw	r30, r12
    3dba:	93 fd       	sbrc	r25, 3
    3dbc:	85 91       	lpm	r24, Z+
    3dbe:	93 ff       	sbrs	r25, 3
    3dc0:	81 91       	ld	r24, Z+
    3dc2:	6f 01       	movw	r12, r30
    3dc4:	81 11       	cpse	r24, r1
    3dc6:	c1 cf       	rjmp	.-126    	; 0x3d4a <vfprintf+0x5c>
    3dc8:	98 2f       	mov	r25, r24
    3dca:	9f 7d       	andi	r25, 0xDF	; 223
    3dcc:	95 54       	subi	r25, 0x45	; 69
    3dce:	93 30       	cpi	r25, 0x03	; 3
    3dd0:	28 f4       	brcc	.+10     	; 0x3ddc <vfprintf+0xee>
    3dd2:	0c 5f       	subi	r16, 0xFC	; 252
    3dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd6:	ff e3       	ldi	r31, 0x3F	; 63
    3dd8:	f9 83       	std	Y+1, r31	; 0x01
    3dda:	0d c0       	rjmp	.+26     	; 0x3df6 <vfprintf+0x108>
    3ddc:	83 36       	cpi	r24, 0x63	; 99
    3dde:	31 f0       	breq	.+12     	; 0x3dec <vfprintf+0xfe>
    3de0:	83 37       	cpi	r24, 0x73	; 115
    3de2:	71 f0       	breq	.+28     	; 0x3e00 <vfprintf+0x112>
    3de4:	83 35       	cpi	r24, 0x53	; 83
    3de6:	09 f0       	breq	.+2      	; 0x3dea <vfprintf+0xfc>
    3de8:	5b c0       	rjmp	.+182    	; 0x3ea0 <vfprintf+0x1b2>
    3dea:	22 c0       	rjmp	.+68     	; 0x3e30 <vfprintf+0x142>
    3dec:	f8 01       	movw	r30, r16
    3dee:	80 81       	ld	r24, Z
    3df0:	89 83       	std	Y+1, r24	; 0x01
    3df2:	0e 5f       	subi	r16, 0xFE	; 254
    3df4:	1f 4f       	sbci	r17, 0xFF	; 255
    3df6:	44 24       	eor	r4, r4
    3df8:	43 94       	inc	r4
    3dfa:	51 2c       	mov	r5, r1
    3dfc:	54 01       	movw	r10, r8
    3dfe:	15 c0       	rjmp	.+42     	; 0x3e2a <vfprintf+0x13c>
    3e00:	38 01       	movw	r6, r16
    3e02:	f2 e0       	ldi	r31, 0x02	; 2
    3e04:	6f 0e       	add	r6, r31
    3e06:	71 1c       	adc	r7, r1
    3e08:	f8 01       	movw	r30, r16
    3e0a:	a0 80       	ld	r10, Z
    3e0c:	b1 80       	ldd	r11, Z+1	; 0x01
    3e0e:	26 ff       	sbrs	r18, 6
    3e10:	03 c0       	rjmp	.+6      	; 0x3e18 <vfprintf+0x12a>
    3e12:	65 2d       	mov	r22, r5
    3e14:	70 e0       	ldi	r23, 0x00	; 0
    3e16:	02 c0       	rjmp	.+4      	; 0x3e1c <vfprintf+0x12e>
    3e18:	6f ef       	ldi	r22, 0xFF	; 255
    3e1a:	7f ef       	ldi	r23, 0xFF	; 255
    3e1c:	c5 01       	movw	r24, r10
    3e1e:	2c 87       	std	Y+12, r18	; 0x0c
    3e20:	0e 94 54 20 	call	0x40a8	; 0x40a8 <strnlen>
    3e24:	2c 01       	movw	r4, r24
    3e26:	83 01       	movw	r16, r6
    3e28:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e2a:	2f 77       	andi	r18, 0x7F	; 127
    3e2c:	22 2e       	mov	r2, r18
    3e2e:	17 c0       	rjmp	.+46     	; 0x3e5e <vfprintf+0x170>
    3e30:	38 01       	movw	r6, r16
    3e32:	f2 e0       	ldi	r31, 0x02	; 2
    3e34:	6f 0e       	add	r6, r31
    3e36:	71 1c       	adc	r7, r1
    3e38:	f8 01       	movw	r30, r16
    3e3a:	a0 80       	ld	r10, Z
    3e3c:	b1 80       	ldd	r11, Z+1	; 0x01
    3e3e:	26 ff       	sbrs	r18, 6
    3e40:	03 c0       	rjmp	.+6      	; 0x3e48 <vfprintf+0x15a>
    3e42:	65 2d       	mov	r22, r5
    3e44:	70 e0       	ldi	r23, 0x00	; 0
    3e46:	02 c0       	rjmp	.+4      	; 0x3e4c <vfprintf+0x15e>
    3e48:	6f ef       	ldi	r22, 0xFF	; 255
    3e4a:	7f ef       	ldi	r23, 0xFF	; 255
    3e4c:	c5 01       	movw	r24, r10
    3e4e:	2c 87       	std	Y+12, r18	; 0x0c
    3e50:	0e 94 49 20 	call	0x4092	; 0x4092 <strnlen_P>
    3e54:	2c 01       	movw	r4, r24
    3e56:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e58:	20 68       	ori	r18, 0x80	; 128
    3e5a:	22 2e       	mov	r2, r18
    3e5c:	83 01       	movw	r16, r6
    3e5e:	23 fc       	sbrc	r2, 3
    3e60:	1b c0       	rjmp	.+54     	; 0x3e98 <vfprintf+0x1aa>
    3e62:	83 2d       	mov	r24, r3
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	48 16       	cp	r4, r24
    3e68:	59 06       	cpc	r5, r25
    3e6a:	b0 f4       	brcc	.+44     	; 0x3e98 <vfprintf+0x1aa>
    3e6c:	b7 01       	movw	r22, r14
    3e6e:	80 e2       	ldi	r24, 0x20	; 32
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	0e 94 5f 20 	call	0x40be	; 0x40be <fputc>
    3e76:	3a 94       	dec	r3
    3e78:	f4 cf       	rjmp	.-24     	; 0x3e62 <vfprintf+0x174>
    3e7a:	f5 01       	movw	r30, r10
    3e7c:	27 fc       	sbrc	r2, 7
    3e7e:	85 91       	lpm	r24, Z+
    3e80:	27 fe       	sbrs	r2, 7
    3e82:	81 91       	ld	r24, Z+
    3e84:	5f 01       	movw	r10, r30
    3e86:	b7 01       	movw	r22, r14
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	0e 94 5f 20 	call	0x40be	; 0x40be <fputc>
    3e8e:	31 10       	cpse	r3, r1
    3e90:	3a 94       	dec	r3
    3e92:	f1 e0       	ldi	r31, 0x01	; 1
    3e94:	4f 1a       	sub	r4, r31
    3e96:	51 08       	sbc	r5, r1
    3e98:	41 14       	cp	r4, r1
    3e9a:	51 04       	cpc	r5, r1
    3e9c:	71 f7       	brne	.-36     	; 0x3e7a <vfprintf+0x18c>
    3e9e:	e5 c0       	rjmp	.+458    	; 0x406a <vfprintf+0x37c>
    3ea0:	84 36       	cpi	r24, 0x64	; 100
    3ea2:	11 f0       	breq	.+4      	; 0x3ea8 <vfprintf+0x1ba>
    3ea4:	89 36       	cpi	r24, 0x69	; 105
    3ea6:	39 f5       	brne	.+78     	; 0x3ef6 <vfprintf+0x208>
    3ea8:	f8 01       	movw	r30, r16
    3eaa:	27 ff       	sbrs	r18, 7
    3eac:	07 c0       	rjmp	.+14     	; 0x3ebc <vfprintf+0x1ce>
    3eae:	60 81       	ld	r22, Z
    3eb0:	71 81       	ldd	r23, Z+1	; 0x01
    3eb2:	82 81       	ldd	r24, Z+2	; 0x02
    3eb4:	93 81       	ldd	r25, Z+3	; 0x03
    3eb6:	0c 5f       	subi	r16, 0xFC	; 252
    3eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eba:	08 c0       	rjmp	.+16     	; 0x3ecc <vfprintf+0x1de>
    3ebc:	60 81       	ld	r22, Z
    3ebe:	71 81       	ldd	r23, Z+1	; 0x01
    3ec0:	07 2e       	mov	r0, r23
    3ec2:	00 0c       	add	r0, r0
    3ec4:	88 0b       	sbc	r24, r24
    3ec6:	99 0b       	sbc	r25, r25
    3ec8:	0e 5f       	subi	r16, 0xFE	; 254
    3eca:	1f 4f       	sbci	r17, 0xFF	; 255
    3ecc:	2f 76       	andi	r18, 0x6F	; 111
    3ece:	72 2e       	mov	r7, r18
    3ed0:	97 ff       	sbrs	r25, 7
    3ed2:	09 c0       	rjmp	.+18     	; 0x3ee6 <vfprintf+0x1f8>
    3ed4:	90 95       	com	r25
    3ed6:	80 95       	com	r24
    3ed8:	70 95       	com	r23
    3eda:	61 95       	neg	r22
    3edc:	7f 4f       	sbci	r23, 0xFF	; 255
    3ede:	8f 4f       	sbci	r24, 0xFF	; 255
    3ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee2:	20 68       	ori	r18, 0x80	; 128
    3ee4:	72 2e       	mov	r7, r18
    3ee6:	2a e0       	ldi	r18, 0x0A	; 10
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	a4 01       	movw	r20, r8
    3eec:	0e 94 97 20 	call	0x412e	; 0x412e <__ultoa_invert>
    3ef0:	a8 2e       	mov	r10, r24
    3ef2:	a8 18       	sub	r10, r8
    3ef4:	44 c0       	rjmp	.+136    	; 0x3f7e <vfprintf+0x290>
    3ef6:	85 37       	cpi	r24, 0x75	; 117
    3ef8:	29 f4       	brne	.+10     	; 0x3f04 <vfprintf+0x216>
    3efa:	2f 7e       	andi	r18, 0xEF	; 239
    3efc:	b2 2e       	mov	r11, r18
    3efe:	2a e0       	ldi	r18, 0x0A	; 10
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	25 c0       	rjmp	.+74     	; 0x3f4e <vfprintf+0x260>
    3f04:	f2 2f       	mov	r31, r18
    3f06:	f9 7f       	andi	r31, 0xF9	; 249
    3f08:	bf 2e       	mov	r11, r31
    3f0a:	8f 36       	cpi	r24, 0x6F	; 111
    3f0c:	c1 f0       	breq	.+48     	; 0x3f3e <vfprintf+0x250>
    3f0e:	18 f4       	brcc	.+6      	; 0x3f16 <vfprintf+0x228>
    3f10:	88 35       	cpi	r24, 0x58	; 88
    3f12:	79 f0       	breq	.+30     	; 0x3f32 <vfprintf+0x244>
    3f14:	b4 c0       	rjmp	.+360    	; 0x407e <vfprintf+0x390>
    3f16:	80 37       	cpi	r24, 0x70	; 112
    3f18:	19 f0       	breq	.+6      	; 0x3f20 <vfprintf+0x232>
    3f1a:	88 37       	cpi	r24, 0x78	; 120
    3f1c:	21 f0       	breq	.+8      	; 0x3f26 <vfprintf+0x238>
    3f1e:	af c0       	rjmp	.+350    	; 0x407e <vfprintf+0x390>
    3f20:	2f 2f       	mov	r18, r31
    3f22:	20 61       	ori	r18, 0x10	; 16
    3f24:	b2 2e       	mov	r11, r18
    3f26:	b4 fe       	sbrs	r11, 4
    3f28:	0d c0       	rjmp	.+26     	; 0x3f44 <vfprintf+0x256>
    3f2a:	8b 2d       	mov	r24, r11
    3f2c:	84 60       	ori	r24, 0x04	; 4
    3f2e:	b8 2e       	mov	r11, r24
    3f30:	09 c0       	rjmp	.+18     	; 0x3f44 <vfprintf+0x256>
    3f32:	24 ff       	sbrs	r18, 4
    3f34:	0a c0       	rjmp	.+20     	; 0x3f4a <vfprintf+0x25c>
    3f36:	9f 2f       	mov	r25, r31
    3f38:	96 60       	ori	r25, 0x06	; 6
    3f3a:	b9 2e       	mov	r11, r25
    3f3c:	06 c0       	rjmp	.+12     	; 0x3f4a <vfprintf+0x25c>
    3f3e:	28 e0       	ldi	r18, 0x08	; 8
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	05 c0       	rjmp	.+10     	; 0x3f4e <vfprintf+0x260>
    3f44:	20 e1       	ldi	r18, 0x10	; 16
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	02 c0       	rjmp	.+4      	; 0x3f4e <vfprintf+0x260>
    3f4a:	20 e1       	ldi	r18, 0x10	; 16
    3f4c:	32 e0       	ldi	r19, 0x02	; 2
    3f4e:	f8 01       	movw	r30, r16
    3f50:	b7 fe       	sbrs	r11, 7
    3f52:	07 c0       	rjmp	.+14     	; 0x3f62 <vfprintf+0x274>
    3f54:	60 81       	ld	r22, Z
    3f56:	71 81       	ldd	r23, Z+1	; 0x01
    3f58:	82 81       	ldd	r24, Z+2	; 0x02
    3f5a:	93 81       	ldd	r25, Z+3	; 0x03
    3f5c:	0c 5f       	subi	r16, 0xFC	; 252
    3f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f60:	06 c0       	rjmp	.+12     	; 0x3f6e <vfprintf+0x280>
    3f62:	60 81       	ld	r22, Z
    3f64:	71 81       	ldd	r23, Z+1	; 0x01
    3f66:	80 e0       	ldi	r24, 0x00	; 0
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	0e 5f       	subi	r16, 0xFE	; 254
    3f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f6e:	a4 01       	movw	r20, r8
    3f70:	0e 94 97 20 	call	0x412e	; 0x412e <__ultoa_invert>
    3f74:	a8 2e       	mov	r10, r24
    3f76:	a8 18       	sub	r10, r8
    3f78:	fb 2d       	mov	r31, r11
    3f7a:	ff 77       	andi	r31, 0x7F	; 127
    3f7c:	7f 2e       	mov	r7, r31
    3f7e:	76 fe       	sbrs	r7, 6
    3f80:	0b c0       	rjmp	.+22     	; 0x3f98 <vfprintf+0x2aa>
    3f82:	37 2d       	mov	r19, r7
    3f84:	3e 7f       	andi	r19, 0xFE	; 254
    3f86:	a5 14       	cp	r10, r5
    3f88:	50 f4       	brcc	.+20     	; 0x3f9e <vfprintf+0x2b0>
    3f8a:	74 fe       	sbrs	r7, 4
    3f8c:	0a c0       	rjmp	.+20     	; 0x3fa2 <vfprintf+0x2b4>
    3f8e:	72 fc       	sbrc	r7, 2
    3f90:	08 c0       	rjmp	.+16     	; 0x3fa2 <vfprintf+0x2b4>
    3f92:	37 2d       	mov	r19, r7
    3f94:	3e 7e       	andi	r19, 0xEE	; 238
    3f96:	05 c0       	rjmp	.+10     	; 0x3fa2 <vfprintf+0x2b4>
    3f98:	ba 2c       	mov	r11, r10
    3f9a:	37 2d       	mov	r19, r7
    3f9c:	03 c0       	rjmp	.+6      	; 0x3fa4 <vfprintf+0x2b6>
    3f9e:	ba 2c       	mov	r11, r10
    3fa0:	01 c0       	rjmp	.+2      	; 0x3fa4 <vfprintf+0x2b6>
    3fa2:	b5 2c       	mov	r11, r5
    3fa4:	34 ff       	sbrs	r19, 4
    3fa6:	0d c0       	rjmp	.+26     	; 0x3fc2 <vfprintf+0x2d4>
    3fa8:	fe 01       	movw	r30, r28
    3faa:	ea 0d       	add	r30, r10
    3fac:	f1 1d       	adc	r31, r1
    3fae:	80 81       	ld	r24, Z
    3fb0:	80 33       	cpi	r24, 0x30	; 48
    3fb2:	11 f4       	brne	.+4      	; 0x3fb8 <vfprintf+0x2ca>
    3fb4:	39 7e       	andi	r19, 0xE9	; 233
    3fb6:	09 c0       	rjmp	.+18     	; 0x3fca <vfprintf+0x2dc>
    3fb8:	32 ff       	sbrs	r19, 2
    3fba:	06 c0       	rjmp	.+12     	; 0x3fc8 <vfprintf+0x2da>
    3fbc:	b3 94       	inc	r11
    3fbe:	b3 94       	inc	r11
    3fc0:	04 c0       	rjmp	.+8      	; 0x3fca <vfprintf+0x2dc>
    3fc2:	83 2f       	mov	r24, r19
    3fc4:	86 78       	andi	r24, 0x86	; 134
    3fc6:	09 f0       	breq	.+2      	; 0x3fca <vfprintf+0x2dc>
    3fc8:	b3 94       	inc	r11
    3fca:	33 fd       	sbrc	r19, 3
    3fcc:	13 c0       	rjmp	.+38     	; 0x3ff4 <vfprintf+0x306>
    3fce:	30 ff       	sbrs	r19, 0
    3fd0:	06 c0       	rjmp	.+12     	; 0x3fde <vfprintf+0x2f0>
    3fd2:	5a 2c       	mov	r5, r10
    3fd4:	b3 14       	cp	r11, r3
    3fd6:	18 f4       	brcc	.+6      	; 0x3fde <vfprintf+0x2f0>
    3fd8:	53 0c       	add	r5, r3
    3fda:	5b 18       	sub	r5, r11
    3fdc:	b3 2c       	mov	r11, r3
    3fde:	b3 14       	cp	r11, r3
    3fe0:	68 f4       	brcc	.+26     	; 0x3ffc <vfprintf+0x30e>
    3fe2:	b7 01       	movw	r22, r14
    3fe4:	80 e2       	ldi	r24, 0x20	; 32
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	3c 87       	std	Y+12, r19	; 0x0c
    3fea:	0e 94 5f 20 	call	0x40be	; 0x40be <fputc>
    3fee:	b3 94       	inc	r11
    3ff0:	3c 85       	ldd	r19, Y+12	; 0x0c
    3ff2:	f5 cf       	rjmp	.-22     	; 0x3fde <vfprintf+0x2f0>
    3ff4:	b3 14       	cp	r11, r3
    3ff6:	10 f4       	brcc	.+4      	; 0x3ffc <vfprintf+0x30e>
    3ff8:	3b 18       	sub	r3, r11
    3ffa:	01 c0       	rjmp	.+2      	; 0x3ffe <vfprintf+0x310>
    3ffc:	31 2c       	mov	r3, r1
    3ffe:	34 ff       	sbrs	r19, 4
    4000:	12 c0       	rjmp	.+36     	; 0x4026 <vfprintf+0x338>
    4002:	b7 01       	movw	r22, r14
    4004:	80 e3       	ldi	r24, 0x30	; 48
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	3c 87       	std	Y+12, r19	; 0x0c
    400a:	0e 94 5f 20 	call	0x40be	; 0x40be <fputc>
    400e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4010:	32 ff       	sbrs	r19, 2
    4012:	17 c0       	rjmp	.+46     	; 0x4042 <vfprintf+0x354>
    4014:	31 fd       	sbrc	r19, 1
    4016:	03 c0       	rjmp	.+6      	; 0x401e <vfprintf+0x330>
    4018:	88 e7       	ldi	r24, 0x78	; 120
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	02 c0       	rjmp	.+4      	; 0x4022 <vfprintf+0x334>
    401e:	88 e5       	ldi	r24, 0x58	; 88
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	b7 01       	movw	r22, r14
    4024:	0c c0       	rjmp	.+24     	; 0x403e <vfprintf+0x350>
    4026:	83 2f       	mov	r24, r19
    4028:	86 78       	andi	r24, 0x86	; 134
    402a:	59 f0       	breq	.+22     	; 0x4042 <vfprintf+0x354>
    402c:	31 ff       	sbrs	r19, 1
    402e:	02 c0       	rjmp	.+4      	; 0x4034 <vfprintf+0x346>
    4030:	8b e2       	ldi	r24, 0x2B	; 43
    4032:	01 c0       	rjmp	.+2      	; 0x4036 <vfprintf+0x348>
    4034:	80 e2       	ldi	r24, 0x20	; 32
    4036:	37 fd       	sbrc	r19, 7
    4038:	8d e2       	ldi	r24, 0x2D	; 45
    403a:	b7 01       	movw	r22, r14
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	0e 94 5f 20 	call	0x40be	; 0x40be <fputc>
    4042:	a5 14       	cp	r10, r5
    4044:	38 f4       	brcc	.+14     	; 0x4054 <vfprintf+0x366>
    4046:	b7 01       	movw	r22, r14
    4048:	80 e3       	ldi	r24, 0x30	; 48
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	0e 94 5f 20 	call	0x40be	; 0x40be <fputc>
    4050:	5a 94       	dec	r5
    4052:	f7 cf       	rjmp	.-18     	; 0x4042 <vfprintf+0x354>
    4054:	aa 94       	dec	r10
    4056:	f4 01       	movw	r30, r8
    4058:	ea 0d       	add	r30, r10
    405a:	f1 1d       	adc	r31, r1
    405c:	80 81       	ld	r24, Z
    405e:	b7 01       	movw	r22, r14
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	0e 94 5f 20 	call	0x40be	; 0x40be <fputc>
    4066:	a1 10       	cpse	r10, r1
    4068:	f5 cf       	rjmp	.-22     	; 0x4054 <vfprintf+0x366>
    406a:	33 20       	and	r3, r3
    406c:	09 f4       	brne	.+2      	; 0x4070 <vfprintf+0x382>
    406e:	51 ce       	rjmp	.-862    	; 0x3d12 <vfprintf+0x24>
    4070:	b7 01       	movw	r22, r14
    4072:	80 e2       	ldi	r24, 0x20	; 32
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	0e 94 5f 20 	call	0x40be	; 0x40be <fputc>
    407a:	3a 94       	dec	r3
    407c:	f6 cf       	rjmp	.-20     	; 0x406a <vfprintf+0x37c>
    407e:	f7 01       	movw	r30, r14
    4080:	86 81       	ldd	r24, Z+6	; 0x06
    4082:	97 81       	ldd	r25, Z+7	; 0x07
    4084:	02 c0       	rjmp	.+4      	; 0x408a <vfprintf+0x39c>
    4086:	8f ef       	ldi	r24, 0xFF	; 255
    4088:	9f ef       	ldi	r25, 0xFF	; 255
    408a:	2c 96       	adiw	r28, 0x0c	; 12
    408c:	e2 e1       	ldi	r30, 0x12	; 18
    408e:	0c 94 11 21 	jmp	0x4222	; 0x4222 <__epilogue_restores__>

00004092 <strnlen_P>:
    4092:	fc 01       	movw	r30, r24
    4094:	05 90       	lpm	r0, Z+
    4096:	61 50       	subi	r22, 0x01	; 1
    4098:	70 40       	sbci	r23, 0x00	; 0
    409a:	01 10       	cpse	r0, r1
    409c:	d8 f7       	brcc	.-10     	; 0x4094 <strnlen_P+0x2>
    409e:	80 95       	com	r24
    40a0:	90 95       	com	r25
    40a2:	8e 0f       	add	r24, r30
    40a4:	9f 1f       	adc	r25, r31
    40a6:	08 95       	ret

000040a8 <strnlen>:
    40a8:	fc 01       	movw	r30, r24
    40aa:	61 50       	subi	r22, 0x01	; 1
    40ac:	70 40       	sbci	r23, 0x00	; 0
    40ae:	01 90       	ld	r0, Z+
    40b0:	01 10       	cpse	r0, r1
    40b2:	d8 f7       	brcc	.-10     	; 0x40aa <strnlen+0x2>
    40b4:	80 95       	com	r24
    40b6:	90 95       	com	r25
    40b8:	8e 0f       	add	r24, r30
    40ba:	9f 1f       	adc	r25, r31
    40bc:	08 95       	ret

000040be <fputc>:
    40be:	0f 93       	push	r16
    40c0:	1f 93       	push	r17
    40c2:	cf 93       	push	r28
    40c4:	df 93       	push	r29
    40c6:	fb 01       	movw	r30, r22
    40c8:	23 81       	ldd	r18, Z+3	; 0x03
    40ca:	21 fd       	sbrc	r18, 1
    40cc:	03 c0       	rjmp	.+6      	; 0x40d4 <fputc+0x16>
    40ce:	8f ef       	ldi	r24, 0xFF	; 255
    40d0:	9f ef       	ldi	r25, 0xFF	; 255
    40d2:	28 c0       	rjmp	.+80     	; 0x4124 <fputc+0x66>
    40d4:	22 ff       	sbrs	r18, 2
    40d6:	16 c0       	rjmp	.+44     	; 0x4104 <fputc+0x46>
    40d8:	46 81       	ldd	r20, Z+6	; 0x06
    40da:	57 81       	ldd	r21, Z+7	; 0x07
    40dc:	24 81       	ldd	r18, Z+4	; 0x04
    40de:	35 81       	ldd	r19, Z+5	; 0x05
    40e0:	42 17       	cp	r20, r18
    40e2:	53 07       	cpc	r21, r19
    40e4:	44 f4       	brge	.+16     	; 0x40f6 <fputc+0x38>
    40e6:	a0 81       	ld	r26, Z
    40e8:	b1 81       	ldd	r27, Z+1	; 0x01
    40ea:	9d 01       	movw	r18, r26
    40ec:	2f 5f       	subi	r18, 0xFF	; 255
    40ee:	3f 4f       	sbci	r19, 0xFF	; 255
    40f0:	31 83       	std	Z+1, r19	; 0x01
    40f2:	20 83       	st	Z, r18
    40f4:	8c 93       	st	X, r24
    40f6:	26 81       	ldd	r18, Z+6	; 0x06
    40f8:	37 81       	ldd	r19, Z+7	; 0x07
    40fa:	2f 5f       	subi	r18, 0xFF	; 255
    40fc:	3f 4f       	sbci	r19, 0xFF	; 255
    40fe:	37 83       	std	Z+7, r19	; 0x07
    4100:	26 83       	std	Z+6, r18	; 0x06
    4102:	10 c0       	rjmp	.+32     	; 0x4124 <fputc+0x66>
    4104:	eb 01       	movw	r28, r22
    4106:	09 2f       	mov	r16, r25
    4108:	18 2f       	mov	r17, r24
    410a:	00 84       	ldd	r0, Z+8	; 0x08
    410c:	f1 85       	ldd	r31, Z+9	; 0x09
    410e:	e0 2d       	mov	r30, r0
    4110:	09 95       	icall
    4112:	89 2b       	or	r24, r25
    4114:	e1 f6       	brne	.-72     	; 0x40ce <fputc+0x10>
    4116:	8e 81       	ldd	r24, Y+6	; 0x06
    4118:	9f 81       	ldd	r25, Y+7	; 0x07
    411a:	01 96       	adiw	r24, 0x01	; 1
    411c:	9f 83       	std	Y+7, r25	; 0x07
    411e:	8e 83       	std	Y+6, r24	; 0x06
    4120:	81 2f       	mov	r24, r17
    4122:	90 2f       	mov	r25, r16
    4124:	df 91       	pop	r29
    4126:	cf 91       	pop	r28
    4128:	1f 91       	pop	r17
    412a:	0f 91       	pop	r16
    412c:	08 95       	ret

0000412e <__ultoa_invert>:
    412e:	fa 01       	movw	r30, r20
    4130:	aa 27       	eor	r26, r26
    4132:	28 30       	cpi	r18, 0x08	; 8
    4134:	51 f1       	breq	.+84     	; 0x418a <__ultoa_invert+0x5c>
    4136:	20 31       	cpi	r18, 0x10	; 16
    4138:	81 f1       	breq	.+96     	; 0x419a <__ultoa_invert+0x6c>
    413a:	e8 94       	clt
    413c:	6f 93       	push	r22
    413e:	6e 7f       	andi	r22, 0xFE	; 254
    4140:	6e 5f       	subi	r22, 0xFE	; 254
    4142:	7f 4f       	sbci	r23, 0xFF	; 255
    4144:	8f 4f       	sbci	r24, 0xFF	; 255
    4146:	9f 4f       	sbci	r25, 0xFF	; 255
    4148:	af 4f       	sbci	r26, 0xFF	; 255
    414a:	b1 e0       	ldi	r27, 0x01	; 1
    414c:	3e d0       	rcall	.+124    	; 0x41ca <__ultoa_invert+0x9c>
    414e:	b4 e0       	ldi	r27, 0x04	; 4
    4150:	3c d0       	rcall	.+120    	; 0x41ca <__ultoa_invert+0x9c>
    4152:	67 0f       	add	r22, r23
    4154:	78 1f       	adc	r23, r24
    4156:	89 1f       	adc	r24, r25
    4158:	9a 1f       	adc	r25, r26
    415a:	a1 1d       	adc	r26, r1
    415c:	68 0f       	add	r22, r24
    415e:	79 1f       	adc	r23, r25
    4160:	8a 1f       	adc	r24, r26
    4162:	91 1d       	adc	r25, r1
    4164:	a1 1d       	adc	r26, r1
    4166:	6a 0f       	add	r22, r26
    4168:	71 1d       	adc	r23, r1
    416a:	81 1d       	adc	r24, r1
    416c:	91 1d       	adc	r25, r1
    416e:	a1 1d       	adc	r26, r1
    4170:	20 d0       	rcall	.+64     	; 0x41b2 <__ultoa_invert+0x84>
    4172:	09 f4       	brne	.+2      	; 0x4176 <__ultoa_invert+0x48>
    4174:	68 94       	set
    4176:	3f 91       	pop	r19
    4178:	2a e0       	ldi	r18, 0x0A	; 10
    417a:	26 9f       	mul	r18, r22
    417c:	11 24       	eor	r1, r1
    417e:	30 19       	sub	r19, r0
    4180:	30 5d       	subi	r19, 0xD0	; 208
    4182:	31 93       	st	Z+, r19
    4184:	de f6       	brtc	.-74     	; 0x413c <__ultoa_invert+0xe>
    4186:	cf 01       	movw	r24, r30
    4188:	08 95       	ret
    418a:	46 2f       	mov	r20, r22
    418c:	47 70       	andi	r20, 0x07	; 7
    418e:	40 5d       	subi	r20, 0xD0	; 208
    4190:	41 93       	st	Z+, r20
    4192:	b3 e0       	ldi	r27, 0x03	; 3
    4194:	0f d0       	rcall	.+30     	; 0x41b4 <__ultoa_invert+0x86>
    4196:	c9 f7       	brne	.-14     	; 0x418a <__ultoa_invert+0x5c>
    4198:	f6 cf       	rjmp	.-20     	; 0x4186 <__ultoa_invert+0x58>
    419a:	46 2f       	mov	r20, r22
    419c:	4f 70       	andi	r20, 0x0F	; 15
    419e:	40 5d       	subi	r20, 0xD0	; 208
    41a0:	4a 33       	cpi	r20, 0x3A	; 58
    41a2:	18 f0       	brcs	.+6      	; 0x41aa <__ultoa_invert+0x7c>
    41a4:	49 5d       	subi	r20, 0xD9	; 217
    41a6:	31 fd       	sbrc	r19, 1
    41a8:	40 52       	subi	r20, 0x20	; 32
    41aa:	41 93       	st	Z+, r20
    41ac:	02 d0       	rcall	.+4      	; 0x41b2 <__ultoa_invert+0x84>
    41ae:	a9 f7       	brne	.-22     	; 0x419a <__ultoa_invert+0x6c>
    41b0:	ea cf       	rjmp	.-44     	; 0x4186 <__ultoa_invert+0x58>
    41b2:	b4 e0       	ldi	r27, 0x04	; 4
    41b4:	a6 95       	lsr	r26
    41b6:	97 95       	ror	r25
    41b8:	87 95       	ror	r24
    41ba:	77 95       	ror	r23
    41bc:	67 95       	ror	r22
    41be:	ba 95       	dec	r27
    41c0:	c9 f7       	brne	.-14     	; 0x41b4 <__ultoa_invert+0x86>
    41c2:	00 97       	sbiw	r24, 0x00	; 0
    41c4:	61 05       	cpc	r22, r1
    41c6:	71 05       	cpc	r23, r1
    41c8:	08 95       	ret
    41ca:	9b 01       	movw	r18, r22
    41cc:	ac 01       	movw	r20, r24
    41ce:	0a 2e       	mov	r0, r26
    41d0:	06 94       	lsr	r0
    41d2:	57 95       	ror	r21
    41d4:	47 95       	ror	r20
    41d6:	37 95       	ror	r19
    41d8:	27 95       	ror	r18
    41da:	ba 95       	dec	r27
    41dc:	c9 f7       	brne	.-14     	; 0x41d0 <__ultoa_invert+0xa2>
    41de:	62 0f       	add	r22, r18
    41e0:	73 1f       	adc	r23, r19
    41e2:	84 1f       	adc	r24, r20
    41e4:	95 1f       	adc	r25, r21
    41e6:	a0 1d       	adc	r26, r0
    41e8:	08 95       	ret

000041ea <__prologue_saves__>:
    41ea:	2f 92       	push	r2
    41ec:	3f 92       	push	r3
    41ee:	4f 92       	push	r4
    41f0:	5f 92       	push	r5
    41f2:	6f 92       	push	r6
    41f4:	7f 92       	push	r7
    41f6:	8f 92       	push	r8
    41f8:	9f 92       	push	r9
    41fa:	af 92       	push	r10
    41fc:	bf 92       	push	r11
    41fe:	cf 92       	push	r12
    4200:	df 92       	push	r13
    4202:	ef 92       	push	r14
    4204:	ff 92       	push	r15
    4206:	0f 93       	push	r16
    4208:	1f 93       	push	r17
    420a:	cf 93       	push	r28
    420c:	df 93       	push	r29
    420e:	cd b7       	in	r28, 0x3d	; 61
    4210:	de b7       	in	r29, 0x3e	; 62
    4212:	ca 1b       	sub	r28, r26
    4214:	db 0b       	sbc	r29, r27
    4216:	0f b6       	in	r0, 0x3f	; 63
    4218:	f8 94       	cli
    421a:	de bf       	out	0x3e, r29	; 62
    421c:	0f be       	out	0x3f, r0	; 63
    421e:	cd bf       	out	0x3d, r28	; 61
    4220:	09 94       	ijmp

00004222 <__epilogue_restores__>:
    4222:	2a 88       	ldd	r2, Y+18	; 0x12
    4224:	39 88       	ldd	r3, Y+17	; 0x11
    4226:	48 88       	ldd	r4, Y+16	; 0x10
    4228:	5f 84       	ldd	r5, Y+15	; 0x0f
    422a:	6e 84       	ldd	r6, Y+14	; 0x0e
    422c:	7d 84       	ldd	r7, Y+13	; 0x0d
    422e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4230:	9b 84       	ldd	r9, Y+11	; 0x0b
    4232:	aa 84       	ldd	r10, Y+10	; 0x0a
    4234:	b9 84       	ldd	r11, Y+9	; 0x09
    4236:	c8 84       	ldd	r12, Y+8	; 0x08
    4238:	df 80       	ldd	r13, Y+7	; 0x07
    423a:	ee 80       	ldd	r14, Y+6	; 0x06
    423c:	fd 80       	ldd	r15, Y+5	; 0x05
    423e:	0c 81       	ldd	r16, Y+4	; 0x04
    4240:	1b 81       	ldd	r17, Y+3	; 0x03
    4242:	aa 81       	ldd	r26, Y+2	; 0x02
    4244:	b9 81       	ldd	r27, Y+1	; 0x01
    4246:	ce 0f       	add	r28, r30
    4248:	d1 1d       	adc	r29, r1
    424a:	0f b6       	in	r0, 0x3f	; 63
    424c:	f8 94       	cli
    424e:	de bf       	out	0x3e, r29	; 62
    4250:	0f be       	out	0x3f, r0	; 63
    4252:	cd bf       	out	0x3d, r28	; 61
    4254:	ed 01       	movw	r28, r26
    4256:	08 95       	ret

00004258 <__do_global_dtors>:
    4258:	10 e0       	ldi	r17, 0x00	; 0
    425a:	c5 ee       	ldi	r28, 0xE5	; 229
    425c:	d0 e0       	ldi	r29, 0x00	; 0
    425e:	04 c0       	rjmp	.+8      	; 0x4268 <__do_global_dtors+0x10>
    4260:	fe 01       	movw	r30, r28
    4262:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <__tablejump2__>
    4266:	21 96       	adiw	r28, 0x01	; 1
    4268:	c6 3e       	cpi	r28, 0xE6	; 230
    426a:	d1 07       	cpc	r29, r17
    426c:	c9 f7       	brne	.-14     	; 0x4260 <__do_global_dtors+0x8>
    426e:	f8 94       	cli

00004270 <__stop_program>:
    4270:	ff cf       	rjmp	.-2      	; 0x4270 <__stop_program>
